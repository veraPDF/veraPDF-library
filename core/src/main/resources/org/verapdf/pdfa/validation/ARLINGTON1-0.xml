<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<profile xmlns="http://www.verapdf.org/ValidationProfile" flavour="ARLINGTON1_0">
	<details creator="veraPDF Consortium" created="2022-05-23T21:45:28.872+03:00">
		<name>Arlington PDF 1.0 profile</name>
		<description>Rules against PDF 1.0 Specification</description>
	</details>
	<hash></hash>
	<rules>
		<rule object="AAnnotLink">
			<id specification="PDF_1_0" clause="AnnotLink" testNumber="1"/>
			<description>AnnotLink shall not contain entries except Border, Contents, Dest, Rect, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'F' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PA' &amp;&amp; elem != 'Path' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotLink contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'F' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PA' &amp;&amp; elem != 'Path' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="PDF_1_0" clause="AnnotLink" testNumber="22"/>
			<description>AnnotLink shall not contain entries A, AF, AP, AS, BM, BS, C, CA, F, H, Lang, M, NM, OC, P, PA, Path, QuadPoints, StructParent, ca in PDF 1.0. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'A' || elem == 'AF' || elem == 'AP' || elem == 'AS' || elem == 'BM' || elem == 'BS' || elem == 'C' || elem == 'CA' || elem == 'F' || elem == 'H' || elem == 'Lang' || elem == 'M' || elem == 'NM' || elem == 'OC' || elem == 'P' || elem == 'PA' || elem == 'Path' || elem == 'QuadPoints' || elem == 'StructParent' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotLink contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'A' || elem == 'AF' || elem == 'AP' || elem == 'AS' || elem == 'BM' || elem == 'BS' || elem == 'C' || elem == 'CA' || elem == 'F' || elem == 'H' || elem == 'Lang' || elem == 'M' || elem == 'NM' || elem == 'OC' || elem == 'P' || elem == 'PA' || elem == 'Path' || elem == 'QuadPoints' || elem == 'StructParent' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="PDF_1_0" clause="AnnotLink-Border" testNumber="8"/>
			<description>Entry Border in AnnotLink shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotLink has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="PDF_1_0" clause="AnnotLink-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotLink shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotLink has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="PDF_1_0" clause="AnnotLink-Dest-Array" testNumber="17"/>
			<description>Entry Dest with type Array in AnnotLink shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DestHasTypeArray != true || Dest_size == 1</test>
			<error>
				<message>Entry Dest with type Array in AnnotLink is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="PDF_1_0" clause="AnnotLink-Dest" testNumber="8"/>
			<description>Entry Dest in AnnotLink shall have one of types: Array, Name, StringByte</description>
			<test>containsDest == false || DestHasTypeArray == true || DestHasTypeName == true || DestHasTypeStringByte == true</test>
			<error>
				<message>Entry Dest in AnnotLink has type %1 instead of one of types: Array, Name, StringByte</message>
				<arguments>
					<argument>DestType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="PDF_1_0" clause="AnnotLink-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotLink shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotLink has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="PDF_1_0" clause="AnnotLink-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotLink is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotLink is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="PDF_1_0" clause="AnnotLink-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotLink shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotLink has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="PDF_1_0" clause="AnnotLink-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotLink is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotLink is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="PDF_1_0" clause="AnnotLink-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotLink shall have value Link</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Link"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotLink has incorrect value %1 instead of Link</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="PDF_1_0" clause="AnnotLink-Type" testNumber="8"/>
			<description>Entry Type in AnnotLink shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotLink has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="PDF_1_0" clause="AnnotLink-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotLink shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotLink has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="PDF_1_0" clause="AnnotText" testNumber="1"/>
			<description>AnnotText shall not contain entries except Border, Contents, Name, Open, Rect, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'State' &amp;&amp; elem != 'StateModel' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotText contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'State' &amp;&amp; elem != 'StateModel' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="PDF_1_0" clause="AnnotText" testNumber="22"/>
			<description>AnnotText shall not contain entries AF, AP, AS, BM, C, CA, CreationDate, ExData, F, IRT, IT, Lang, M, NM, OC, P, Popup, RC, RT, State, StateModel, StructParent, Subj, T, ca in PDF 1.0. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'AP' || elem == 'AS' || elem == 'BM' || elem == 'C' || elem == 'CA' || elem == 'CreationDate' || elem == 'ExData' || elem == 'F' || elem == 'IRT' || elem == 'IT' || elem == 'Lang' || elem == 'M' || elem == 'NM' || elem == 'OC' || elem == 'P' || elem == 'Popup' || elem == 'RC' || elem == 'RT' || elem == 'State' || elem == 'StateModel' || elem == 'StructParent' || elem == 'Subj' || elem == 'T' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotText contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'AP' || elem == 'AS' || elem == 'BM' || elem == 'C' || elem == 'CA' || elem == 'CreationDate' || elem == 'ExData' || elem == 'F' || elem == 'IRT' || elem == 'IT' || elem == 'Lang' || elem == 'M' || elem == 'NM' || elem == 'OC' || elem == 'P' || elem == 'Popup' || elem == 'RC' || elem == 'RT' || elem == 'State' || elem == 'StateModel' || elem == 'StructParent' || elem == 'Subj' || elem == 'T' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="PDF_1_0" clause="AnnotText-Border" testNumber="8"/>
			<description>Entry Border in AnnotText shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotText has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="PDF_1_0" clause="AnnotText-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotText shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotText has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="PDF_1_0" clause="AnnotText-Name" testNumber="8"/>
			<description>Entry Name in AnnotText shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotText has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="PDF_1_0" clause="AnnotText-Name-Name" testNumber="6"/>
			<description>Entry Name with type Name in AnnotText shall have one of values: Comment, Help, Note, Insert, Key, NewParagraph, Paragraph</description>
			<test>NameHasTypeName != true || NameNameValue == "Comment" || NameNameValue == "Key" || NameNameValue == "Note" || NameNameValue == "Help" || NameNameValue == "NewParagraph" || NameNameValue == "Paragraph" || NameNameValue == "Insert"</test>
			<error>
				<message>Entry Name with type Name in AnnotText has incorrect value %1 instead of Comment, Help, Note, Insert, Key, NewParagraph, Paragraph</message>
				<arguments>
					<argument>NameNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="PDF_1_0" clause="AnnotText-Open" testNumber="8"/>
			<description>Entry Open in AnnotText shall have type Boolean</description>
			<test>containsOpen == false || OpenHasTypeBoolean == true</test>
			<error>
				<message>Entry Open in AnnotText has type %1 instead of type Boolean</message>
				<arguments>
					<argument>OpenType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="PDF_1_0" clause="AnnotText-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotText shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotText has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="PDF_1_0" clause="AnnotText-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotText is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotText is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="PDF_1_0" clause="AnnotText-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotText shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotText has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="PDF_1_0" clause="AnnotText-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotText is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotText is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="PDF_1_0" clause="AnnotText-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotText shall have value Text</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Text"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotText has incorrect value %1 instead of Text</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="PDF_1_0" clause="AnnotText-Type" testNumber="8"/>
			<description>Entry Type in AnnotText shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotText has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="PDF_1_0" clause="AnnotText-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotText shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotText has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAnnotsEntry">
			<id specification="PDF_1_0" clause="ArrayOfAnnotsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfAnnots shall be one of objects AnnotText, AnnotLink</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfAnnots is not one of objects AnnotText, AnnotLink</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAnnotsEntry">
			<id specification="PDF_1_0" clause="ArrayOfAnnotsEntry" testNumber="8"/>
			<description>Entry in ArrayOfAnnots shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfAnnots has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCompressionFilterNamesEntry">
			<id specification="PDF_1_0" clause="ArrayOfCompressionFilterNamesEntry" testNumber="8"/>
			<description>Entry in ArrayOfCompressionFilterNames shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfCompressionFilterNames has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCompressionFilterNamesEntry">
			<id specification="PDF_1_0" clause="ArrayOfCompressionFilterNamesEntry-Name" testNumber="6"/>
			<description>Entry with type Name in ArrayOfCompressionFilterNames shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode</description>
			<test>HasTypeName != true || NameValue == "ASCIIHexDecode" || NameValue == "ASCII85Decode" || NameValue == "LZWDecode" || NameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry %keyName% with type Name in ArrayOfCompressionFilterNames has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDecodeParamsEntry">
			<id specification="PDF_1_0" clause="ArrayOfDecodeParamsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfDecodeParams shall be one of objects FilterLZWDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfDecodeParams is not one of objects FilterLZWDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDecodeParamsEntry">
			<id specification="PDF_1_0" clause="ArrayOfDecodeParamsEntry" testNumber="8"/>
			<description>Entry in ArrayOfDecodeParams shall have one of types: Dictionary, Null</description>
			<test>HasTypeDictionary == true || HasTypeNull == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfDecodeParams has type %1 instead of one of types: Dictionary, Null</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDifferencesEntry">
			<id specification="PDF_1_0" clause="ArrayOfDifferencesEntry" testNumber="8"/>
			<description>Entry in ArrayOfDifferences shall have one of types: Integer, Name</description>
			<test>HasTypeInteger == true || HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfDifferences has type %1 instead of one of types: Integer, Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFilterNamesEntry">
			<id specification="PDF_1_0" clause="ArrayOfFilterNamesEntry" testNumber="8"/>
			<description>Entry in ArrayOfFilterNames shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfFilterNames has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFilterNamesEntry">
			<id specification="PDF_1_0" clause="ArrayOfFilterNamesEntry-Name" testNumber="6"/>
			<description>Entry with type Name in ArrayOfFilterNames shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode</description>
			<test>HasTypeName != true || NameValue == "ASCIIHexDecode" || NameValue == "ASCII85Decode" || NameValue == "LZWDecode" || NameValue == "RunLengthDecode" || NameValue == "CCITTFaxDecode" || NameValue == "DCTDecode"</test>
			<error>
				<message>Entry %keyName% with type Name in ArrayOfFilterNames has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfIntegersGeneralEntry">
			<id specification="PDF_1_0" clause="ArrayOfIntegersGeneralEntry" testNumber="8"/>
			<description>Entry in ArrayOfIntegersGeneral shall have type Integer</description>
			<test>HasTypeInteger == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfIntegersGeneral has type %1 instead of type Integer</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForProcSetEntry">
			<id specification="PDF_1_0" clause="ArrayOfNamesForProcSetEntry" testNumber="8"/>
			<description>Entry in ArrayOfNamesForProcSet shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfNamesForProcSet has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForProcSetEntry">
			<id specification="PDF_1_0" clause="ArrayOfNamesForProcSetEntry-Name" testNumber="6"/>
			<description>Entry with type Name in ArrayOfNamesForProcSet shall have one of values: ImageI, PDF, ImageC, ImageB, Text</description>
			<test>HasTypeName != true || NameValue == "PDF" || NameValue == "Text" || NameValue == "ImageB" || NameValue == "ImageC" || NameValue == "ImageI"</test>
			<error>
				<message>Entry %keyName% with type Name in ArrayOfNamesForProcSet has incorrect value %1 instead of ImageI, PDF, ImageC, ImageB, Text</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNumbersGeneralEntry">
			<id specification="PDF_1_0" clause="ArrayOfNumbersGeneralEntry" testNumber="8"/>
			<description>Entry in ArrayOfNumbersGeneral shall have type Number</description>
			<test>HasTypeNumber == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfNumbersGeneral has type %1 instead of type Number</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPageTreeNodeKidsEntry">
			<id specification="PDF_1_0" clause="ArrayOfPageTreeNodeKidsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfPageTreeNodeKids shall be one of objects PageTreeNode, PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfPageTreeNodeKids is not one of objects PageTreeNode, PageObject</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPageTreeNodeKidsEntry">
			<id specification="PDF_1_0" clause="ArrayOfPageTreeNodeKidsEntry" testNumber="8"/>
			<description>Entry in ArrayOfPageTreeNodeKids shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfPageTreeNodeKids has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPageTreeNodeKidsEntry">
			<id specification="PDF_1_0" clause="ArrayOfPageTreeNodeKidsEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOfPageTreeNodeKids shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfPageTreeNodeKids is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStreamsGeneralEntry">
			<id specification="PDF_1_0" clause="ArrayOfStreamsGeneralEntry" testNumber="8"/>
			<description>Entry in ArrayOfStreamsGeneral shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfStreamsGeneral has type %1 instead of type Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStreamsGeneralEntry">
			<id specification="PDF_1_0" clause="ArrayOfStreamsGeneralEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in ArrayOfStreamsGeneral shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in ArrayOfStreamsGeneral is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="PDF_1_0" clause="ArrayOf_4AnnotBorderCharacteristics" testNumber="2"/>
			<description>ArrayOf_4AnnotBorderCharacteristics shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOf_4AnnotBorderCharacteristics contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="PDF_1_0" clause="ArrayOf_4AnnotBorderCharacteristics-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4AnnotBorderCharacteristics has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="PDF_1_0" clause="ArrayOf_4AnnotBorderCharacteristics-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in ArrayOf_4AnnotBorderCharacteristics shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_4AnnotBorderCharacteristics does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="PDF_1_0" clause="ArrayOf_4AnnotBorderCharacteristics-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4AnnotBorderCharacteristics has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="PDF_1_0" clause="ArrayOf_4AnnotBorderCharacteristics-1-Number" testNumber="14"/>
			<description>Entry 1 with type Number in ArrayOf_4AnnotBorderCharacteristics shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4AnnotBorderCharacteristics does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="PDF_1_0" clause="ArrayOf_4AnnotBorderCharacteristics-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4AnnotBorderCharacteristics has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="PDF_1_0" clause="ArrayOf_4AnnotBorderCharacteristics-2-Number" testNumber="14"/>
			<description>Entry 2 with type Number in ArrayOf_4AnnotBorderCharacteristics shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_4AnnotBorderCharacteristics does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="PDF_1_0" clause="Catalog" testNumber="1"/>
			<description>Catalog shall not contain entries except NeedsRendering, Outlines, PageLayout, PageMode, Pages, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AcroForm' &amp;&amp; elem != 'Collection' &amp;&amp; elem != 'DPartRoot' &amp;&amp; elem != 'DSS' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'Extensions' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Legal' &amp;&amp; elem != 'MarkInfo' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Names' &amp;&amp; elem != 'NeedsRendering' &amp;&amp; elem != 'OCProperties' &amp;&amp; elem != 'OpenAction' &amp;&amp; elem != 'Outlines' &amp;&amp; elem != 'OutputIntents' &amp;&amp; elem != 'PageLabels' &amp;&amp; elem != 'PageLayout' &amp;&amp; elem != 'PageMode' &amp;&amp; elem != 'Pages' &amp;&amp; elem != 'Perms' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Requirements' &amp;&amp; elem != 'SpiderInfo' &amp;&amp; elem != 'StructTreeRoot' &amp;&amp; elem != 'Threads' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URI' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'ViewerPreferences' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Catalog contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AcroForm' &amp;&amp; elem != 'Collection' &amp;&amp; elem != 'DPartRoot' &amp;&amp; elem != 'DSS' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'Extensions' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Legal' &amp;&amp; elem != 'MarkInfo' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Names' &amp;&amp; elem != 'NeedsRendering' &amp;&amp; elem != 'OCProperties' &amp;&amp; elem != 'OpenAction' &amp;&amp; elem != 'Outlines' &amp;&amp; elem != 'OutputIntents' &amp;&amp; elem != 'PageLabels' &amp;&amp; elem != 'PageLayout' &amp;&amp; elem != 'PageMode' &amp;&amp; elem != 'Pages' &amp;&amp; elem != 'Perms' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Requirements' &amp;&amp; elem != 'SpiderInfo' &amp;&amp; elem != 'StructTreeRoot' &amp;&amp; elem != 'Threads' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URI' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'ViewerPreferences' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="PDF_1_0" clause="Catalog" testNumber="22"/>
			<description>Catalog shall not contain entries AA, AF, AcroForm, Collection, DPartRoot, DSS, Dests, Extensions, Lang, Legal, MarkInfo, Metadata, Names, OCProperties, OpenAction, OutputIntents, PageLabels, Perms, PieceInfo, Requirements, SpiderInfo, StructTreeRoot, Threads, URI, Version, ViewerPreferences in PDF 1.0. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'AA' || elem == 'AF' || elem == 'AcroForm' || elem == 'Collection' || elem == 'DPartRoot' || elem == 'DSS' || elem == 'Dests' || elem == 'Extensions' || elem == 'Lang' || elem == 'Legal' || elem == 'MarkInfo' || elem == 'Metadata' || elem == 'Names' || elem == 'OCProperties' || elem == 'OpenAction' || elem == 'OutputIntents' || elem == 'PageLabels' || elem == 'Perms' || elem == 'PieceInfo' || elem == 'Requirements' || elem == 'SpiderInfo' || elem == 'StructTreeRoot' || elem == 'Threads' || elem == 'URI' || elem == 'Version' || elem == 'ViewerPreferences').length == 0</test>
			<error>
				<message>Catalog contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'AA' || elem == 'AF' || elem == 'AcroForm' || elem == 'Collection' || elem == 'DPartRoot' || elem == 'DSS' || elem == 'Dests' || elem == 'Extensions' || elem == 'Lang' || elem == 'Legal' || elem == 'MarkInfo' || elem == 'Metadata' || elem == 'Names' || elem == 'OCProperties' || elem == 'OpenAction' || elem == 'OutputIntents' || elem == 'PageLabels' || elem == 'Perms' || elem == 'PieceInfo' || elem == 'Requirements' || elem == 'SpiderInfo' || elem == 'StructTreeRoot' || elem == 'Threads' || elem == 'URI' || elem == 'Version' || elem == 'ViewerPreferences').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="PDF_1_0" clause="Catalog-NeedsRendering" testNumber="8"/>
			<description>Entry NeedsRendering in Catalog shall have type Boolean</description>
			<test>containsNeedsRendering == false || NeedsRenderingHasTypeBoolean == true</test>
			<error>
				<message>Entry NeedsRendering in Catalog has type %1 instead of type Boolean</message>
				<arguments>
					<argument>NeedsRenderingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="PDF_1_0" clause="Catalog-Outlines" testNumber="8"/>
			<description>Entry Outlines in Catalog shall have type Dictionary</description>
			<test>containsOutlines == false || OutlinesHasTypeDictionary == true</test>
			<error>
				<message>Entry Outlines in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OutlinesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="PDF_1_0" clause="Catalog-Outlines-Dictionary" testNumber="10"/>
			<description>Entry Outlines with type Dictionary in Catalog shall be indirect</description>
			<test>OutlinesHasTypeDictionary != true || isOutlinesIndirect == true</test>
			<error>
				<message>Entry Outlines with type Dictionary in Catalog is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="PDF_1_0" clause="Catalog-PageLayout" testNumber="8"/>
			<description>Entry PageLayout in Catalog shall have type Name</description>
			<test>containsPageLayout == false || PageLayoutHasTypeName == true</test>
			<error>
				<message>Entry PageLayout in Catalog has type %1 instead of type Name</message>
				<arguments>
					<argument>PageLayoutType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="PDF_1_0" clause="Catalog-PageLayout-Name" testNumber="6"/>
			<description>Entry PageLayout with type Name in Catalog shall have one of values: SinglePage, TwoColumnLeft, OneColumn, TwoPageRight, TwoPageLeft, TwoColumnRight</description>
			<test>PageLayoutHasTypeName != true || PageLayoutNameValue == "SinglePage" || PageLayoutNameValue == "OneColumn" || PageLayoutNameValue == "TwoColumnLeft" || PageLayoutNameValue == "TwoColumnRight" || PageLayoutNameValue == "TwoPageLeft" || PageLayoutNameValue == "TwoPageRight"</test>
			<error>
				<message>Entry PageLayout with type Name in Catalog has incorrect value %1 instead of SinglePage, TwoColumnLeft, OneColumn, TwoPageRight, TwoPageLeft, TwoColumnRight</message>
				<arguments>
					<argument>PageLayoutNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="PDF_1_0" clause="Catalog-PageMode" testNumber="8"/>
			<description>Entry PageMode in Catalog shall have type Name</description>
			<test>containsPageMode == false || PageModeHasTypeName == true</test>
			<error>
				<message>Entry PageMode in Catalog has type %1 instead of type Name</message>
				<arguments>
					<argument>PageModeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="PDF_1_0" clause="Catalog-PageMode-Name" testNumber="6"/>
			<description>Entry PageMode with type Name in Catalog shall have one of values: UseOutlines, UseThumbs, UseOC, UseAttachments, UseNone, FullScreen</description>
			<test>PageModeHasTypeName != true || PageModeNameValue == "UseNone" || PageModeNameValue == "UseOutlines" || PageModeNameValue == "UseThumbs" || PageModeNameValue == "FullScreen" || PageModeNameValue == "UseOC" || PageModeNameValue == "UseAttachments"</test>
			<error>
				<message>Entry PageMode with type Name in Catalog has incorrect value %1 instead of UseOutlines, UseThumbs, UseOC, UseAttachments, UseNone, FullScreen</message>
				<arguments>
					<argument>PageModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="PDF_1_0" clause="Catalog-Pages" testNumber="8"/>
			<description>Entry Pages in Catalog shall have type Dictionary</description>
			<test>containsPages == false || PagesHasTypeDictionary == true</test>
			<error>
				<message>Entry Pages in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PagesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="PDF_1_0" clause="Catalog-Pages" testNumber="7"/>
			<description>Entry Pages in Catalog is required</description>
			<test>containsPages == true</test>
			<error>
				<message>Entry Pages in Catalog is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="PDF_1_0" clause="Catalog-Pages-Dictionary" testNumber="10"/>
			<description>Entry Pages with type Dictionary in Catalog shall be indirect</description>
			<test>PagesHasTypeDictionary != true || isPagesIndirect == true</test>
			<error>
				<message>Entry Pages with type Dictionary in Catalog is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="PDF_1_0" clause="Catalog-Type" testNumber="8"/>
			<description>Entry Type in Catalog shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Catalog has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="PDF_1_0" clause="Catalog-Type" testNumber="7"/>
			<description>Entry Type in Catalog is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in Catalog is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="PDF_1_0" clause="Catalog-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Catalog shall have value Catalog</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Catalog"</test>
			<error>
				<message>Entry Type with type Name in Catalog has incorrect value %1 instead of Catalog</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACharProcMapEntry">
			<id specification="PDF_1_0" clause="CharProcMapEntry" testNumber="8"/>
			<description>Entry in CharProcMap shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in CharProcMap has type %1 instead of type Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACharProcMapEntry">
			<id specification="PDF_1_0" clause="CharProcMapEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in CharProcMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in CharProcMap is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="PDF_1_0" clause="ColorSpaceMapEntry" testNumber="8"/>
			<description>Entry in ColorSpaceMap shall have one of types: Array, Name</description>
			<test>HasTypeArray == true || HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ColorSpaceMap has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="PDF_1_0" clause="ColorSpaceMapEntry-Name" testNumber="6"/>
			<description>Entry with type Name in ColorSpaceMap shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>HasTypeName != true || NameValue == "DeviceCMYK" || NameValue == "DeviceRGB" || NameValue == "DeviceGray"</test>
			<error>
				<message>Entry %keyName% with type Name in ColorSpaceMap has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="PDF_1_0" clause="Dest0Array" testNumber="2"/>
			<description>Dest0Array shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>Dest0Array contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="PDF_1_0" clause="Dest0Array-0" testNumber="8"/>
			<description>Entry 0 in Dest0Array shall have one of types: Dictionary, Number</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in Dest0Array has type %1 instead of one of types: Dictionary, Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="PDF_1_0" clause="Dest0Array-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in Dest0Array shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest0Array does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="PDF_1_0" clause="Dest0Array-1" testNumber="8"/>
			<description>Entry 1 in Dest0Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest0Array has type %1 instead of type Name</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="PDF_1_0" clause="Dest0Array-1-Name" testNumber="6"/>
			<description>Entry 1 with type Name in Dest0Array shall have value Fit</description>
			<test>entry1HasTypeName != true || entry1NameValue == "Fit"</test>
			<error>
				<message>Entry 1 with type Name in Dest0Array has incorrect value %1 instead of Fit</message>
				<arguments>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="PDF_1_0" clause="Dest1Array" testNumber="2"/>
			<description>Dest1Array shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>Dest1Array contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="PDF_1_0" clause="Dest1Array-0" testNumber="8"/>
			<description>Entry 0 in Dest1Array shall have one of types: Dictionary, Number</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in Dest1Array has type %1 instead of one of types: Dictionary, Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="PDF_1_0" clause="Dest1Array-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in Dest1Array shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest1Array does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="PDF_1_0" clause="Dest1Array-1" testNumber="8"/>
			<description>Entry 1 in Dest1Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest1Array has type %1 instead of type Name</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="PDF_1_0" clause="Dest1Array-1-Name" testNumber="6"/>
			<description>Entry 1 with type Name in Dest1Array shall have one of values: FitV, FitH</description>
			<test>entry1HasTypeName != true || entry1NameValue == "FitH" || entry1NameValue == "FitV"</test>
			<error>
				<message>Entry 1 with type Name in Dest1Array has incorrect value %1 instead of FitV, FitH</message>
				<arguments>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="PDF_1_0" clause="Dest1Array-2" testNumber="8"/>
			<description>Entry 2 in Dest1Array shall have one of types: Null, Number</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in Dest1Array has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="PDF_1_0" clause="Dest4Array" testNumber="2"/>
			<description>Dest4Array shall contain exactly 6 elements</description>
			<test>size == 6</test>
			<error>
				<message>Dest4Array contains %1 element(s) instead of 6</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="PDF_1_0" clause="Dest4Array-0" testNumber="8"/>
			<description>Entry 0 in Dest4Array shall have one of types: Dictionary, Number</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in Dest4Array has type %1 instead of one of types: Dictionary, Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="PDF_1_0" clause="Dest4Array-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in Dest4Array shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest4Array does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="PDF_1_0" clause="Dest4Array-1" testNumber="8"/>
			<description>Entry 1 in Dest4Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest4Array has type %1 instead of type Name</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="PDF_1_0" clause="Dest4Array-1-Name" testNumber="6"/>
			<description>Entry 1 with type Name in Dest4Array shall have value FitR</description>
			<test>entry1HasTypeName != true || entry1NameValue == "FitR"</test>
			<error>
				<message>Entry 1 with type Name in Dest4Array has incorrect value %1 instead of FitR</message>
				<arguments>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="PDF_1_0" clause="Dest4Array-2" testNumber="8"/>
			<description>Entry 2 in Dest4Array shall have one of types: Null, Number</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in Dest4Array has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="PDF_1_0" clause="Dest4Array-3" testNumber="8"/>
			<description>Entry 3 in Dest4Array shall have one of types: Null, Number</description>
			<test>size &lt;= 3 || entry3HasTypeNull == true || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in Dest4Array has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="PDF_1_0" clause="Dest4Array-4" testNumber="8"/>
			<description>Entry 4 in Dest4Array shall have one of types: Null, Number</description>
			<test>size &lt;= 4 || entry4HasTypeNull == true || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in Dest4Array has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry4Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="PDF_1_0" clause="Dest4Array-5" testNumber="8"/>
			<description>Entry 5 in Dest4Array shall have one of types: Null, Number</description>
			<test>size &lt;= 5 || entry5HasTypeNull == true || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in Dest4Array has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry5Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="PDF_1_0" clause="DestXYZArray" testNumber="2"/>
			<description>DestXYZArray shall contain exactly 5 elements</description>
			<test>size == 5</test>
			<error>
				<message>DestXYZArray contains %1 element(s) instead of 5</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="PDF_1_0" clause="DestXYZArray-0" testNumber="8"/>
			<description>Entry 0 in DestXYZArray shall have one of types: Dictionary, Number</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in DestXYZArray has type %1 instead of one of types: Dictionary, Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="PDF_1_0" clause="DestXYZArray-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in DestXYZArray shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in DestXYZArray does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="PDF_1_0" clause="DestXYZArray-1" testNumber="8"/>
			<description>Entry 1 in DestXYZArray shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in DestXYZArray has type %1 instead of type Name</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="PDF_1_0" clause="DestXYZArray-1-Name" testNumber="6"/>
			<description>Entry 1 with type Name in DestXYZArray shall have value XYZ</description>
			<test>entry1HasTypeName != true || entry1NameValue == "XYZ"</test>
			<error>
				<message>Entry 1 with type Name in DestXYZArray has incorrect value %1 instead of XYZ</message>
				<arguments>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="PDF_1_0" clause="DestXYZArray-2" testNumber="8"/>
			<description>Entry 2 in DestXYZArray shall have one of types: Null, Number</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in DestXYZArray has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="PDF_1_0" clause="DestXYZArray-3" testNumber="8"/>
			<description>Entry 3 in DestXYZArray shall have one of types: Null, Number</description>
			<test>size &lt;= 3 || entry3HasTypeNull == true || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in DestXYZArray has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="PDF_1_0" clause="DestXYZArray-4" testNumber="8"/>
			<description>Entry 4 in DestXYZArray shall have one of types: Null, Number</description>
			<test>size &lt;= 4 || entry4HasTypeNull == true || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in DestXYZArray has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry4Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="PDF_1_0" clause="DocInfo" testNumber="1"/>
			<description>DocInfo shall not contain entries except Author, CreationDate, Creator, Producer</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != '*' &amp;&amp; elem != 'Author' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Creator' &amp;&amp; elem != 'Keywords' &amp;&amp; elem != 'ModDate' &amp;&amp; elem != 'Producer' &amp;&amp; elem != 'Subject' &amp;&amp; elem != 'Title' &amp;&amp; elem != 'Trapped' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>DocInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != '*' &amp;&amp; elem != 'Author' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Creator' &amp;&amp; elem != 'Keywords' &amp;&amp; elem != 'ModDate' &amp;&amp; elem != 'Producer' &amp;&amp; elem != 'Subject' &amp;&amp; elem != 'Title' &amp;&amp; elem != 'Trapped' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="PDF_1_0" clause="DocInfo" testNumber="22"/>
			<description>DocInfo shall not contain entries *, Keywords, ModDate, Subject, Title, Trapped in PDF 1.0. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == '*' || elem == 'Keywords' || elem == 'ModDate' || elem == 'Subject' || elem == 'Title' || elem == 'Trapped').length == 0</test>
			<error>
				<message>DocInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == '*' || elem == 'Keywords' || elem == 'ModDate' || elem == 'Subject' || elem == 'Title' || elem == 'Trapped').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="PDF_1_0" clause="DocInfo-Author" testNumber="8"/>
			<description>Entry Author in DocInfo shall have type StringText</description>
			<test>containsAuthor == false || AuthorHasTypeStringText == true</test>
			<error>
				<message>Entry Author in DocInfo has type %1 instead of type StringText</message>
				<arguments>
					<argument>AuthorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="PDF_1_0" clause="DocInfo-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in DocInfo shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in DocInfo has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="PDF_1_0" clause="DocInfo-Creator" testNumber="8"/>
			<description>Entry Creator in DocInfo shall have type StringText</description>
			<test>containsCreator == false || CreatorHasTypeStringText == true</test>
			<error>
				<message>Entry Creator in DocInfo has type %1 instead of type StringText</message>
				<arguments>
					<argument>CreatorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="PDF_1_0" clause="DocInfo-Producer" testNumber="8"/>
			<description>Entry Producer in DocInfo shall have type StringText</description>
			<test>containsProducer == false || ProducerHasTypeStringText == true</test>
			<error>
				<message>Entry Producer in DocInfo has type %1 instead of type StringText</message>
				<arguments>
					<argument>ProducerType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocument">
			<id specification="PDF_1_0" clause="Document-LinearizationParameterDict" testNumber="25"/>
			<description>Document shall not contain LinearizationParameterDict in PDF 1.0</description>
			<test>containsLinearizationParameterDict == false</test>
			<error>
				<message>Document contains LinearizationParameterDict</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADocument">
			<id specification="PDF_1_0" clause="Document-ObjectStreams" testNumber="25"/>
			<description>Document shall not contain ObjectStreams in PDF 1.0</description>
			<test>containsObjectStreams == false</test>
			<error>
				<message>Document contains ObjectStreams</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADocument">
			<id specification="PDF_1_0" clause="Document-XRefStream" testNumber="25"/>
			<description>Document shall not contain XRefStream in PDF 1.0</description>
			<test>containsXRefStream == false</test>
			<error>
				<message>Document contains XRefStream</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADocument">
			<id specification="PDF_1_0" clause="Document-FileTrailer" testNumber="8"/>
			<description>FileTrailer shall have type Dictionary</description>
			<test>containsFileTrailer == false || FileTrailerHasTypeDictionary == true</test>
			<error>
				<message>FileTrailer has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FileTrailerType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="PDF_1_0" clause="Encoding" testNumber="1"/>
			<description>Encoding shall not contain entries except BaseEncoding, Differences</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseEncoding' &amp;&amp; elem != 'Differences' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Encoding contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseEncoding' &amp;&amp; elem != 'Differences' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="PDF_1_0" clause="Encoding" testNumber="22"/>
			<description>Encoding shall not contain entry Type in PDF 1.0. This entry appears in later pdf versions</description>
			<test>containsType == false</test>
			<error>
				<message>Encoding contains entry Type</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="PDF_1_0" clause="Encoding-BaseEncoding" testNumber="8"/>
			<description>Entry BaseEncoding in Encoding shall have type Name</description>
			<test>containsBaseEncoding == false || BaseEncodingHasTypeName == true</test>
			<error>
				<message>Entry BaseEncoding in Encoding has type %1 instead of type Name</message>
				<arguments>
					<argument>BaseEncodingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="PDF_1_0" clause="Encoding-BaseEncoding-Name" testNumber="6"/>
			<description>Entry BaseEncoding with type Name in Encoding shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>BaseEncodingHasTypeName != true || BaseEncodingNameValue == "MacRomanEncoding" || BaseEncodingNameValue == "MacExpertEncoding" || BaseEncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry BaseEncoding with type Name in Encoding has incorrect value %1 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>BaseEncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="PDF_1_0" clause="Encoding-Differences" testNumber="8"/>
			<description>Entry Differences in Encoding shall have type Array</description>
			<test>containsDifferences == false || DifferencesHasTypeArray == true</test>
			<error>
				<message>Entry Differences in Encoding has type %1 instead of type Array</message>
				<arguments>
					<argument>DifferencesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer" testNumber="1"/>
			<description>FileTrailer shall not contain entries except AdditionalStreams, DocChecksum, Info, Prev, Root, Size</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AdditionalStreams' &amp;&amp; elem != 'AuthCode' &amp;&amp; elem != 'DocChecksum' &amp;&amp; elem != 'Encrypt' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Root' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'XRefStm' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FileTrailer contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AdditionalStreams' &amp;&amp; elem != 'AuthCode' &amp;&amp; elem != 'DocChecksum' &amp;&amp; elem != 'Encrypt' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Root' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'XRefStm' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer" testNumber="22"/>
			<description>FileTrailer shall not contain entries AuthCode, Encrypt, ID, XRefStm in PDF 1.0. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'AuthCode' || elem == 'Encrypt' || elem == 'ID' || elem == 'XRefStm').length == 0</test>
			<error>
				<message>FileTrailer contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'AuthCode' || elem == 'Encrypt' || elem == 'ID' || elem == 'XRefStm').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-AdditionalStreams" testNumber="8"/>
			<description>Entry AdditionalStreams in FileTrailer shall have type Array</description>
			<test>containsAdditionalStreams == false || AdditionalStreamsHasTypeArray == true</test>
			<error>
				<message>Entry AdditionalStreams in FileTrailer has type %1 instead of type Array</message>
				<arguments>
					<argument>AdditionalStreamsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-AdditionalStreams" testNumber="23"/>
			<description>Entry AdditionalStreams in FileTrailer can only be present, if satisfy predicate fn:Extension(OpenOffice)</description>
			<test>containsAdditionalStreams == false || hasExtensionOpenOffice == true</test>
			<error>
				<message>Entry AdditionalStreams in FileTrailer is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-AdditionalStreams-Array" testNumber="10"/>
			<description>Entry AdditionalStreams with type Array in FileTrailer shall be direct</description>
			<test>AdditionalStreamsHasTypeArray != true || isAdditionalStreamsIndirect == false</test>
			<error>
				<message>Entry AdditionalStreams with type Array in FileTrailer is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-AdditionalStreams-Array" testNumber="9"/>
			<description>Entry AdditionalStreams with type Array in FileTrailer shall satisfy special case: fn:Eval((fn:ArrayLength(AdditionalStreams) mod 2) == 0)</description>
			<test>AdditionalStreamsHasTypeArray != true || ((AdditionalStreamsArraySize % 2) == 0)</test>
			<error>
				<message>Entry AdditionalStreams with type Array in FileTrailer does not satisfy special case: fn:Eval((fn:ArrayLength(AdditionalStreams) mod 2) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-DocChecksum" testNumber="8"/>
			<description>Entry DocChecksum in FileTrailer shall have type Name</description>
			<test>containsDocChecksum == false || DocChecksumHasTypeName == true</test>
			<error>
				<message>Entry DocChecksum in FileTrailer has type %1 instead of type Name</message>
				<arguments>
					<argument>DocChecksumType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-DocChecksum" testNumber="23"/>
			<description>Entry DocChecksum in FileTrailer can only be present, if satisfy predicate fn:Extension(OpenOffice)</description>
			<test>containsDocChecksum == false || hasExtensionOpenOffice == true</test>
			<error>
				<message>Entry DocChecksum in FileTrailer is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-DocChecksum-Name" testNumber="10"/>
			<description>Entry DocChecksum with type Name in FileTrailer shall be direct</description>
			<test>DocChecksumHasTypeName != true || isDocChecksumIndirect == false</test>
			<error>
				<message>Entry DocChecksum with type Name in FileTrailer is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-Info" testNumber="8"/>
			<description>Entry Info in FileTrailer shall have type Dictionary</description>
			<test>containsInfo == false || InfoHasTypeDictionary == true</test>
			<error>
				<message>Entry Info in FileTrailer has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>InfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-Info-Dictionary" testNumber="10"/>
			<description>Entry Info with type Dictionary in FileTrailer shall be indirect</description>
			<test>InfoHasTypeDictionary != true || isInfoIndirect == true</test>
			<error>
				<message>Entry Info with type Dictionary in FileTrailer is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-Prev" testNumber="8"/>
			<description>Entry Prev in FileTrailer shall have type Integer</description>
			<test>containsPrev == false || PrevHasTypeInteger == true</test>
			<error>
				<message>Entry Prev in FileTrailer has type %1 instead of type Integer</message>
				<arguments>
					<argument>PrevType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-Prev-Integer" testNumber="10"/>
			<description>Entry Prev with type Integer in FileTrailer shall be direct</description>
			<test>PrevHasTypeInteger != true || isPrevIndirect == false</test>
			<error>
				<message>Entry Prev with type Integer in FileTrailer is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-Prev-Integer" testNumber="14"/>
			<description>Entry Prev with type Integer in FileTrailer shall satisfy possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</description>
			<test>PrevHasTypeInteger != true || (PrevIntegerValue &gt;= 0) &amp;&amp; (PrevIntegerValue &lt;= fileSize)</test>
			<error>
				<message>Entry Prev with type Integer in FileTrailer does not satisfy possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-Root" testNumber="8"/>
			<description>Entry Root in FileTrailer shall have type Dictionary</description>
			<test>containsRoot == false || RootHasTypeDictionary == true</test>
			<error>
				<message>Entry Root in FileTrailer has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>RootType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-Root" testNumber="7"/>
			<description>Entry Root in FileTrailer is required</description>
			<test>containsRoot == true</test>
			<error>
				<message>Entry Root in FileTrailer is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-Root-Dictionary" testNumber="10"/>
			<description>Entry Root with type Dictionary in FileTrailer shall be indirect</description>
			<test>RootHasTypeDictionary != true || isRootIndirect == true</test>
			<error>
				<message>Entry Root with type Dictionary in FileTrailer is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-Size" testNumber="8"/>
			<description>Entry Size in FileTrailer shall have type Integer</description>
			<test>containsSize == false || SizeHasTypeInteger == true</test>
			<error>
				<message>Entry Size in FileTrailer has type %1 instead of type Integer</message>
				<arguments>
					<argument>SizeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-Size" testNumber="7"/>
			<description>Entry Size in FileTrailer is required</description>
			<test>containsSize == true</test>
			<error>
				<message>Entry Size in FileTrailer is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-Size-Integer" testNumber="10"/>
			<description>Entry Size with type Integer in FileTrailer shall be direct</description>
			<test>SizeHasTypeInteger != true || isSizeIndirect == false</test>
			<error>
				<message>Entry Size with type Integer in FileTrailer is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="PDF_1_0" clause="FileTrailer-Size-Integer" testNumber="14"/>
			<description>Entry Size with type Integer in FileTrailer shall satisfy possible value predicate: fn:Eval(@Size &gt; 0)</description>
			<test>SizeHasTypeInteger != true || SizeIntegerValue &gt; 0</test>
			<error>
				<message>Entry Size with type Integer in FileTrailer does not satisfy possible value predicate: fn:Eval(@Size &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="PDF_1_0" clause="FilterCCITTFaxDecode" testNumber="1"/>
			<description>FilterCCITTFaxDecode shall not contain entries except BlackIs1, Blackls1, Columns, DamagedRowsBeforeError, EncodedByteAlign, EndOfBlock, EndOfLine, K, Rows</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BlackIs1' &amp;&amp; elem != 'Blackls1' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'DamagedRowsBeforeError' &amp;&amp; elem != 'EncodedByteAlign' &amp;&amp; elem != 'EndOfBlock' &amp;&amp; elem != 'EndOfLine' &amp;&amp; elem != 'K' &amp;&amp; elem != 'Rows' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FilterCCITTFaxDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BlackIs1' &amp;&amp; elem != 'Blackls1' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'DamagedRowsBeforeError' &amp;&amp; elem != 'EncodedByteAlign' &amp;&amp; elem != 'EndOfBlock' &amp;&amp; elem != 'EndOfLine' &amp;&amp; elem != 'K' &amp;&amp; elem != 'Rows' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="PDF_1_0" clause="FilterCCITTFaxDecode-BlackIs1" testNumber="8"/>
			<description>Entry BlackIs1 in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsBlackIs1 == false || BlackIs1HasTypeBoolean == true</test>
			<error>
				<message>Entry BlackIs1 in FilterCCITTFaxDecode has type %1 instead of type Boolean</message>
				<arguments>
					<argument>BlackIs1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="PDF_1_0" clause="FilterCCITTFaxDecode-Blackls1" testNumber="8"/>
			<description>Entry Blackls1 in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsBlackls1 == false || Blackls1HasTypeBoolean == true</test>
			<error>
				<message>Entry Blackls1 in FilterCCITTFaxDecode has type %1 instead of type Boolean</message>
				<arguments>
					<argument>Blackls1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="PDF_1_0" clause="FilterCCITTFaxDecode-Blackls1" testNumber="23"/>
			<description>Entry Blackls1 in FilterCCITTFaxDecode can only be present, if satisfy predicate fn:Extension(Malforms)</description>
			<test>containsBlackls1 == false || hasExtensionMalforms == true</test>
			<error>
				<message>Entry Blackls1 in FilterCCITTFaxDecode is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="PDF_1_0" clause="FilterCCITTFaxDecode-Columns" testNumber="8"/>
			<description>Entry Columns in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsColumns == false || ColumnsHasTypeInteger == true</test>
			<error>
				<message>Entry Columns in FilterCCITTFaxDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>ColumnsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="PDF_1_0" clause="FilterCCITTFaxDecode-Columns-Integer" testNumber="14"/>
			<description>Entry Columns with type Integer in FilterCCITTFaxDecode shall satisfy possible value predicate: fn:Eval(@Columns &gt;= 0)</description>
			<test>ColumnsHasTypeInteger != true || ColumnsIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Columns with type Integer in FilterCCITTFaxDecode does not satisfy possible value predicate: fn:Eval(@Columns &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="PDF_1_0" clause="FilterCCITTFaxDecode-DamagedRowsBeforeError" testNumber="8"/>
			<description>Entry DamagedRowsBeforeError in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsDamagedRowsBeforeError == false || DamagedRowsBeforeErrorHasTypeInteger == true</test>
			<error>
				<message>Entry DamagedRowsBeforeError in FilterCCITTFaxDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>DamagedRowsBeforeErrorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="PDF_1_0" clause="FilterCCITTFaxDecode-DamagedRowsBeforeError-Integer" testNumber="14"/>
			<description>Entry DamagedRowsBeforeError with type Integer in FilterCCITTFaxDecode shall satisfy possible value predicate: fn:Eval(@DamagedRowsBeforeError &gt;= 0)</description>
			<test>DamagedRowsBeforeErrorHasTypeInteger != true || DamagedRowsBeforeErrorIntegerValue &gt;= 0</test>
			<error>
				<message>Entry DamagedRowsBeforeError with type Integer in FilterCCITTFaxDecode does not satisfy possible value predicate: fn:Eval(@DamagedRowsBeforeError &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="PDF_1_0" clause="FilterCCITTFaxDecode-EncodedByteAlign" testNumber="8"/>
			<description>Entry EncodedByteAlign in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEncodedByteAlign == false || EncodedByteAlignHasTypeBoolean == true</test>
			<error>
				<message>Entry EncodedByteAlign in FilterCCITTFaxDecode has type %1 instead of type Boolean</message>
				<arguments>
					<argument>EncodedByteAlignType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="PDF_1_0" clause="FilterCCITTFaxDecode-EndOfBlock" testNumber="8"/>
			<description>Entry EndOfBlock in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEndOfBlock == false || EndOfBlockHasTypeBoolean == true</test>
			<error>
				<message>Entry EndOfBlock in FilterCCITTFaxDecode has type %1 instead of type Boolean</message>
				<arguments>
					<argument>EndOfBlockType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="PDF_1_0" clause="FilterCCITTFaxDecode-EndOfLine" testNumber="8"/>
			<description>Entry EndOfLine in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEndOfLine == false || EndOfLineHasTypeBoolean == true</test>
			<error>
				<message>Entry EndOfLine in FilterCCITTFaxDecode has type %1 instead of type Boolean</message>
				<arguments>
					<argument>EndOfLineType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="PDF_1_0" clause="FilterCCITTFaxDecode-K" testNumber="8"/>
			<description>Entry K in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsK == false || KHasTypeInteger == true</test>
			<error>
				<message>Entry K in FilterCCITTFaxDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>KType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="PDF_1_0" clause="FilterCCITTFaxDecode-Rows" testNumber="8"/>
			<description>Entry Rows in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsRows == false || RowsHasTypeInteger == true</test>
			<error>
				<message>Entry Rows in FilterCCITTFaxDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>RowsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="PDF_1_0" clause="FilterCCITTFaxDecode-Rows-Integer" testNumber="14"/>
			<description>Entry Rows with type Integer in FilterCCITTFaxDecode shall satisfy possible value predicate: fn:Eval(@Rows &gt;= 0)</description>
			<test>RowsHasTypeInteger != true || RowsIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Rows with type Integer in FilterCCITTFaxDecode does not satisfy possible value predicate: fn:Eval(@Rows &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="PDF_1_0" clause="FilterDCTDecode" testNumber="1"/>
			<description>FilterDCTDecode shall not contain entries except ColorTransform</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColorTransform' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FilterDCTDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColorTransform' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="PDF_1_0" clause="FilterDCTDecode-ColorTransform" testNumber="8"/>
			<description>Entry ColorTransform in FilterDCTDecode shall have type Integer</description>
			<test>containsColorTransform == false || ColorTransformHasTypeInteger == true</test>
			<error>
				<message>Entry ColorTransform in FilterDCTDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>ColorTransformType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="PDF_1_0" clause="FilterDCTDecode-ColorTransform-Integer" testNumber="6"/>
			<description>Entry ColorTransform with type Integer in FilterDCTDecode shall have one of values: 0, 1</description>
			<test>ColorTransformHasTypeInteger != true || ColorTransformIntegerValue == 0 || ColorTransformIntegerValue == 1</test>
			<error>
				<message>Entry ColorTransform with type Integer in FilterDCTDecode has incorrect value %1 instead of 0, 1</message>
				<arguments>
					<argument>ColorTransformIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="PDF_1_0" clause="FilterLZWDecode" testNumber="1"/>
			<description>FilterLZWDecode shall not contain entries except BitsPerComponent, Colors, Columns, EarlyChange, Predictor</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'EarlyChange' &amp;&amp; elem != 'Predictor' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FilterLZWDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'EarlyChange' &amp;&amp; elem != 'Predictor' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="PDF_1_0" clause="FilterLZWDecode-BitsPerComponent" testNumber="8"/>
			<description>Entry BitsPerComponent in FilterLZWDecode shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in FilterLZWDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerComponentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="PDF_1_0" clause="FilterLZWDecode-BitsPerComponent-Integer" testNumber="6"/>
			<description>Entry BitsPerComponent with type Integer in FilterLZWDecode shall have one of values: 1, 2, 4, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in FilterLZWDecode has incorrect value %1 instead of 1, 2, 4, 8</message>
				<arguments>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="PDF_1_0" clause="FilterLZWDecode-Colors" testNumber="8"/>
			<description>Entry Colors in FilterLZWDecode shall have type Integer</description>
			<test>containsColors == false || ColorsHasTypeInteger == true</test>
			<error>
				<message>Entry Colors in FilterLZWDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>ColorsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="PDF_1_0" clause="FilterLZWDecode-Colors-Integer" testNumber="14"/>
			<description>Entry Colors with type Integer in FilterLZWDecode shall satisfy possible value predicate: fn:Eval((@Colors &gt;= 1) &amp;&amp; fn:Eval(@Colors &lt;= 4))</description>
			<test>ColorsHasTypeInteger != true || (ColorsIntegerValue &gt;= 1) &amp;&amp; ColorsIntegerValue &lt;= 4</test>
			<error>
				<message>Entry Colors with type Integer in FilterLZWDecode does not satisfy possible value predicate: fn:Eval((@Colors &gt;= 1) &amp;&amp; fn:Eval(@Colors &lt;= 4))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="PDF_1_0" clause="FilterLZWDecode-Columns" testNumber="8"/>
			<description>Entry Columns in FilterLZWDecode shall have type Integer</description>
			<test>containsColumns == false || ColumnsHasTypeInteger == true</test>
			<error>
				<message>Entry Columns in FilterLZWDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>ColumnsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="PDF_1_0" clause="FilterLZWDecode-EarlyChange" testNumber="8"/>
			<description>Entry EarlyChange in FilterLZWDecode shall have type Integer</description>
			<test>containsEarlyChange == false || EarlyChangeHasTypeInteger == true</test>
			<error>
				<message>Entry EarlyChange in FilterLZWDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>EarlyChangeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="PDF_1_0" clause="FilterLZWDecode-EarlyChange-Integer" testNumber="6"/>
			<description>Entry EarlyChange with type Integer in FilterLZWDecode shall have one of values: 0, 1</description>
			<test>EarlyChangeHasTypeInteger != true || EarlyChangeIntegerValue == 0 || EarlyChangeIntegerValue == 1</test>
			<error>
				<message>Entry EarlyChange with type Integer in FilterLZWDecode has incorrect value %1 instead of 0, 1</message>
				<arguments>
					<argument>EarlyChangeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="PDF_1_0" clause="FilterLZWDecode-Predictor" testNumber="8"/>
			<description>Entry Predictor in FilterLZWDecode shall have type Integer</description>
			<test>containsPredictor == false || PredictorHasTypeInteger == true</test>
			<error>
				<message>Entry Predictor in FilterLZWDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>PredictorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="PDF_1_0" clause="FilterLZWDecode-Predictor-Integer" testNumber="6"/>
			<description>Entry Predictor with type Integer in FilterLZWDecode shall have one of values: 11, 1, 12, 2, 13, 14, 15, 10</description>
			<test>PredictorHasTypeInteger != true || PredictorIntegerValue == 1 || PredictorIntegerValue == 2 || PredictorIntegerValue == 10 || PredictorIntegerValue == 11 || PredictorIntegerValue == 12 || PredictorIntegerValue == 13 || PredictorIntegerValue == 14 || PredictorIntegerValue == 15</test>
			<error>
				<message>Entry Predictor with type Integer in FilterLZWDecode has incorrect value %1 instead of 11, 1, 12, 2, 13, 14, 15, 10</message>
				<arguments>
					<argument>PredictorIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType" testNumber="1"/>
			<description>FontDescriptorTrueType shall not contain entries except Ascent, AvgWidth, CapHeight, Descent, Flags, FontBBox, FontName, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontDescriptorTrueType contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType" testNumber="22"/>
			<description>FontDescriptorTrueType shall not contain entries FontFamily, FontFile, FontFile2, FontFile3, FontStretch, FontWeight in PDF 1.0. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'FontFamily' || elem == 'FontFile' || elem == 'FontFile2' || elem == 'FontFile3' || elem == 'FontStretch' || elem == 'FontWeight').length == 0</test>
			<error>
				<message>FontDescriptorTrueType contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'FontFamily' || elem == 'FontFile' || elem == 'FontFile2' || elem == 'FontFile3' || elem == 'FontStretch' || elem == 'FontWeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-Ascent" testNumber="8"/>
			<description>Entry Ascent in FontDescriptorTrueType shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>AscentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-Ascent" testNumber="7"/>
			<description>Entry Ascent in FontDescriptorTrueType is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-AvgWidth" testNumber="8"/>
			<description>Entry AvgWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>AvgWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-CapHeight" testNumber="8"/>
			<description>Entry CapHeight in FontDescriptorTrueType shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>CapHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-Descent" testNumber="8"/>
			<description>Entry Descent in FontDescriptorTrueType shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>DescentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-Descent" testNumber="7"/>
			<description>Entry Descent in FontDescriptorTrueType is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-Descent-Number" testNumber="14"/>
			<description>Entry Descent with type Number in FontDescriptorTrueType shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorTrueType does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-Flags" testNumber="8"/>
			<description>Entry Flags in FontDescriptorTrueType shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorTrueType has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FlagsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-Flags" testNumber="7"/>
			<description>Entry Flags in FontDescriptorTrueType is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-Flags-Bitmask" testNumber="9"/>
			<description>Entry Flags with type Bitmask in FontDescriptorTrueType shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorTrueType does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-FontBBox" testNumber="8"/>
			<description>Entry FontBBox in FontDescriptorTrueType shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorTrueType has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>FontBBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-FontBBox" testNumber="7"/>
			<description>Entry FontBBox in FontDescriptorTrueType is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-FontName" testNumber="8"/>
			<description>Entry FontName in FontDescriptorTrueType shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorTrueType has type %1 instead of type Name</message>
				<arguments>
					<argument>FontNameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-FontName" testNumber="7"/>
			<description>Entry FontName in FontDescriptorTrueType is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-FontName-Name" testNumber="9"/>
			<description>Entry FontName with type Name in FontDescriptorTrueType shall satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorTrueType does not satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-ItalicAngle" testNumber="8"/>
			<description>Entry ItalicAngle in FontDescriptorTrueType shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>ItalicAngleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-ItalicAngle" testNumber="7"/>
			<description>Entry ItalicAngle in FontDescriptorTrueType is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-Leading" testNumber="8"/>
			<description>Entry Leading in FontDescriptorTrueType shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>LeadingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-MaxWidth" testNumber="8"/>
			<description>Entry MaxWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>MaxWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-MissingWidth" testNumber="8"/>
			<description>Entry MissingWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>MissingWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-StemH" testNumber="8"/>
			<description>Entry StemH in FontDescriptorTrueType shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>StemHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-StemV" testNumber="8"/>
			<description>Entry StemV in FontDescriptorTrueType shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>StemVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-StemV" testNumber="7"/>
			<description>Entry StemV in FontDescriptorTrueType is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-Type" testNumber="8"/>
			<description>Entry Type in FontDescriptorTrueType shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorTrueType has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-Type" testNumber="7"/>
			<description>Entry Type in FontDescriptorTrueType is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontDescriptorTrueType shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorTrueType has incorrect value %1 instead of FontDescriptor</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="PDF_1_0" clause="FontDescriptorTrueType-XHeight" testNumber="8"/>
			<description>Entry XHeight in FontDescriptorTrueType shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>XHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1" testNumber="1"/>
			<description>FontDescriptorType1 shall not contain entries except Ascent, AvgWidth, CapHeight, Descent, Flags, FontBBox, FontFile, FontName, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontDescriptorType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1" testNumber="22"/>
			<description>FontDescriptorType1 shall not contain entries CharSet, FontFamily, FontFile3, FontStretch, FontWeight in PDF 1.0. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'CharSet' || elem == 'FontFamily' || elem == 'FontFile3' || elem == 'FontStretch' || elem == 'FontWeight').length == 0</test>
			<error>
				<message>FontDescriptorType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'CharSet' || elem == 'FontFamily' || elem == 'FontFile3' || elem == 'FontStretch' || elem == 'FontWeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-Ascent" testNumber="8"/>
			<description>Entry Ascent in FontDescriptorType1 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>AscentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-Ascent" testNumber="7"/>
			<description>Entry Ascent in FontDescriptorType1 is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-AvgWidth" testNumber="8"/>
			<description>Entry AvgWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>AvgWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-CapHeight" testNumber="8"/>
			<description>Entry CapHeight in FontDescriptorType1 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>CapHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-Descent" testNumber="8"/>
			<description>Entry Descent in FontDescriptorType1 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>DescentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-Descent" testNumber="7"/>
			<description>Entry Descent in FontDescriptorType1 is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-Descent-Number" testNumber="14"/>
			<description>Entry Descent with type Number in FontDescriptorType1 shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorType1 does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-Flags" testNumber="8"/>
			<description>Entry Flags in FontDescriptorType1 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType1 has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FlagsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-Flags" testNumber="7"/>
			<description>Entry Flags in FontDescriptorType1 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-Flags-Bitmask" testNumber="9"/>
			<description>Entry Flags with type Bitmask in FontDescriptorType1 shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorType1 does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-FontBBox" testNumber="8"/>
			<description>Entry FontBBox in FontDescriptorType1 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType1 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>FontBBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-FontBBox" testNumber="7"/>
			<description>Entry FontBBox in FontDescriptorType1 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-FontFile" testNumber="8"/>
			<description>Entry FontFile in FontDescriptorType1 shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorType1 has type %1 instead of type Stream</message>
				<arguments>
					<argument>FontFileType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-FontFile-Stream" testNumber="10"/>
			<description>Entry FontFile with type Stream in FontDescriptorType1 shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorType1 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-FontName" testNumber="8"/>
			<description>Entry FontName in FontDescriptorType1 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>FontNameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-FontName" testNumber="7"/>
			<description>Entry FontName in FontDescriptorType1 is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-FontName-Name" testNumber="9"/>
			<description>Entry FontName with type Name in FontDescriptorType1 shall satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorType1 does not satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-ItalicAngle" testNumber="8"/>
			<description>Entry ItalicAngle in FontDescriptorType1 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>ItalicAngleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-ItalicAngle" testNumber="7"/>
			<description>Entry ItalicAngle in FontDescriptorType1 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-Leading" testNumber="8"/>
			<description>Entry Leading in FontDescriptorType1 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>LeadingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-MaxWidth" testNumber="8"/>
			<description>Entry MaxWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>MaxWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-MissingWidth" testNumber="8"/>
			<description>Entry MissingWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>MissingWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-StemH" testNumber="8"/>
			<description>Entry StemH in FontDescriptorType1 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>StemHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-StemV" testNumber="8"/>
			<description>Entry StemV in FontDescriptorType1 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>StemVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-StemV" testNumber="7"/>
			<description>Entry StemV in FontDescriptorType1 is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-Type" testNumber="8"/>
			<description>Entry Type in FontDescriptorType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-Type" testNumber="7"/>
			<description>Entry Type in FontDescriptorType1 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontDescriptorType1 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorType1 has incorrect value %1 instead of FontDescriptor</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="PDF_1_0" clause="FontDescriptorType1-XHeight" testNumber="8"/>
			<description>Entry XHeight in FontDescriptorType1 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>XHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3" testNumber="1"/>
			<description>FontDescriptorType3 shall not contain entries except Ascent, AvgWidth, CapHeight, Descent, Flags, FontBBox, FontName, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontDescriptorType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3" testNumber="22"/>
			<description>FontDescriptorType3 shall not contain entries FontFamily, FontStretch, FontWeight in PDF 1.0. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'FontFamily' || elem == 'FontStretch' || elem == 'FontWeight').length == 0</test>
			<error>
				<message>FontDescriptorType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'FontFamily' || elem == 'FontStretch' || elem == 'FontWeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-Ascent" testNumber="8"/>
			<description>Entry Ascent in FontDescriptorType3 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>AscentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-AvgWidth" testNumber="8"/>
			<description>Entry AvgWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>AvgWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-CapHeight" testNumber="8"/>
			<description>Entry CapHeight in FontDescriptorType3 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>CapHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-Descent" testNumber="8"/>
			<description>Entry Descent in FontDescriptorType3 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>DescentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-Descent-Number" testNumber="14"/>
			<description>Entry Descent with type Number in FontDescriptorType3 shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorType3 does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-Flags" testNumber="8"/>
			<description>Entry Flags in FontDescriptorType3 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType3 has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FlagsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-Flags" testNumber="7"/>
			<description>Entry Flags in FontDescriptorType3 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-Flags-Bitmask" testNumber="9"/>
			<description>Entry Flags with type Bitmask in FontDescriptorType3 shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorType3 does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-FontBBox" testNumber="8"/>
			<description>Entry FontBBox in FontDescriptorType3 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType3 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>FontBBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-FontName" testNumber="8"/>
			<description>Entry FontName in FontDescriptorType3 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType3 has type %1 instead of type Name</message>
				<arguments>
					<argument>FontNameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-FontName-Name" testNumber="9"/>
			<description>Entry FontName with type Name in FontDescriptorType3 shall satisfy special case: fn:Eval(@FontName == parent::@Name)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentNameNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorType3 does not satisfy special case: fn:Eval(@FontName == parent::@Name)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-ItalicAngle" testNumber="8"/>
			<description>Entry ItalicAngle in FontDescriptorType3 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>ItalicAngleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-ItalicAngle" testNumber="7"/>
			<description>Entry ItalicAngle in FontDescriptorType3 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-Leading" testNumber="8"/>
			<description>Entry Leading in FontDescriptorType3 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>LeadingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-MaxWidth" testNumber="8"/>
			<description>Entry MaxWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>MaxWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-MissingWidth" testNumber="8"/>
			<description>Entry MissingWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>MissingWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-StemH" testNumber="8"/>
			<description>Entry StemH in FontDescriptorType3 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>StemHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-StemV" testNumber="8"/>
			<description>Entry StemV in FontDescriptorType3 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>StemVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-Type" testNumber="8"/>
			<description>Entry Type in FontDescriptorType3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorType3 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-Type" testNumber="7"/>
			<description>Entry Type in FontDescriptorType3 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontDescriptorType3 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorType3 has incorrect value %1 instead of FontDescriptor</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="PDF_1_0" clause="FontDescriptorType3-XHeight" testNumber="8"/>
			<description>Entry XHeight in FontDescriptorType3 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>XHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="PDF_1_0" clause="FontFileType1" testNumber="1"/>
			<description>FontFileType1 shall not contain entries except Length1, Length2, Length3</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontFileType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="PDF_1_0" clause="FontFileType1" testNumber="22"/>
			<description>FontFileType1 shall not contain entries DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Metadata, Subtype in PDF 1.0. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'DL' || elem == 'DecodeParms' || elem == 'F' || elem == 'FDecodeParms' || elem == 'FFilter' || elem == 'Filter' || elem == 'Length' || elem == 'Metadata' || elem == 'Subtype').length == 0</test>
			<error>
				<message>FontFileType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'DL' || elem == 'DecodeParms' || elem == 'F' || elem == 'FDecodeParms' || elem == 'FFilter' || elem == 'Filter' || elem == 'Length' || elem == 'Metadata' || elem == 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="PDF_1_0" clause="FontFileType1-Length1" testNumber="8"/>
			<description>Entry Length1 in FontFileType1 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFileType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="PDF_1_0" clause="FontFileType1-Length1" testNumber="7"/>
			<description>Entry Length1 in FontFileType1 is required</description>
			<test>containsLength1 == true</test>
			<error>
				<message>Entry Length1 in FontFileType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="PDF_1_0" clause="FontFileType1-Length1-Integer" testNumber="9"/>
			<description>Entry Length1 with type Integer in FontFileType1 shall satisfy special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFileType1 does not satisfy special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="PDF_1_0" clause="FontFileType1-Length2" testNumber="8"/>
			<description>Entry Length2 in FontFileType1 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFileType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="PDF_1_0" clause="FontFileType1-Length2" testNumber="7"/>
			<description>Entry Length2 in FontFileType1 is required</description>
			<test>containsLength2 == true</test>
			<error>
				<message>Entry Length2 in FontFileType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="PDF_1_0" clause="FontFileType1-Length2-Integer" testNumber="9"/>
			<description>Entry Length2 with type Integer in FontFileType1 shall satisfy special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFileType1 does not satisfy special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="PDF_1_0" clause="FontFileType1-Length3" testNumber="8"/>
			<description>Entry Length3 in FontFileType1 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFileType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="PDF_1_0" clause="FontFileType1-Length3" testNumber="7"/>
			<description>Entry Length3 in FontFileType1 is required</description>
			<test>containsLength3 == true</test>
			<error>
				<message>Entry Length3 in FontFileType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="PDF_1_0" clause="FontFileType1-Length3-Integer" testNumber="9"/>
			<description>Entry Length3 with type Integer in FontFileType1 shall satisfy special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFileType1 does not satisfy special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMapEntry">
			<id specification="PDF_1_0" clause="FontMapEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in FontMap shall be one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in FontMap is not one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMapEntry">
			<id specification="PDF_1_0" clause="FontMapEntry" testNumber="8"/>
			<description>Entry in FontMap shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in FontMap has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster" testNumber="1"/>
			<description>FontMultipleMaster shall not contain entries except BaseFont, Encoding, FirstChar, FontDescriptor, LastChar, Name, Subtype, Type, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontMultipleMaster contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster" testNumber="22"/>
			<description>FontMultipleMaster shall not contain entry ToUnicode in PDF 1.0. This entry appears in later pdf versions</description>
			<test>containsToUnicode == false</test>
			<error>
				<message>FontMultipleMaster contains entry ToUnicode</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-BaseFont" testNumber="8"/>
			<description>Entry BaseFont in FontMultipleMaster shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontMultipleMaster has type %1 instead of type Name</message>
				<arguments>
					<argument>BaseFontType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-BaseFont" testNumber="7"/>
			<description>Entry BaseFont in FontMultipleMaster is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontMultipleMaster is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-Encoding" testNumber="8"/>
			<description>Entry Encoding in FontMultipleMaster shall have one of types: Dictionary, Name</description>
			<test>containsEncoding == false || EncodingHasTypeDictionary == true || EncodingHasTypeName == true</test>
			<error>
				<message>Entry Encoding in FontMultipleMaster has type %1 instead of one of types: Dictionary, Name</message>
				<arguments>
					<argument>EncodingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-Encoding-Name" testNumber="6"/>
			<description>Entry Encoding with type Name in FontMultipleMaster shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontMultipleMaster has incorrect value %1 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-FirstChar" testNumber="8"/>
			<description>Entry FirstChar in FontMultipleMaster shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontMultipleMaster has type %1 instead of type Integer</message>
				<arguments>
					<argument>FirstCharType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-FirstChar" testNumber="11"/>
			<description>Entry FirstChar in FontMultipleMaster is required, when fn:NotStandard14Font()</description>
			<test>containsFirstChar == true || notStandard14Font == false</test>
			<error>
				<message>Entry FirstChar in FontMultipleMaster is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-FontDescriptor" testNumber="8"/>
			<description>Entry FontDescriptor in FontMultipleMaster shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontMultipleMaster has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FontDescriptorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-FontDescriptor" testNumber="11"/>
			<description>Entry FontDescriptor in FontMultipleMaster is required, when fn:NotStandard14Font()</description>
			<test>containsFontDescriptor == true || notStandard14Font == false</test>
			<error>
				<message>Entry FontDescriptor in FontMultipleMaster is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-FontDescriptor-Dictionary" testNumber="10"/>
			<description>Entry FontDescriptor with type Dictionary in FontMultipleMaster shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontMultipleMaster is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-LastChar" testNumber="8"/>
			<description>Entry LastChar in FontMultipleMaster shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontMultipleMaster has type %1 instead of type Integer</message>
				<arguments>
					<argument>LastCharType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-LastChar" testNumber="11"/>
			<description>Entry LastChar in FontMultipleMaster is required, when fn:NotStandard14Font()</description>
			<test>containsLastChar == true || notStandard14Font == false</test>
			<error>
				<message>Entry LastChar in FontMultipleMaster is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-Name" testNumber="8"/>
			<description>Entry Name in FontMultipleMaster shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontMultipleMaster has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-Name" testNumber="7"/>
			<description>Entry Name in FontMultipleMaster is required</description>
			<test>containsName == true</test>
			<error>
				<message>Entry Name in FontMultipleMaster is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-Subtype" testNumber="8"/>
			<description>Entry Subtype in FontMultipleMaster shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontMultipleMaster has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-Subtype" testNumber="7"/>
			<description>Entry Subtype in FontMultipleMaster is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontMultipleMaster is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in FontMultipleMaster shall have value MMType1</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "MMType1"</test>
			<error>
				<message>Entry Subtype with type Name in FontMultipleMaster has incorrect value %1 instead of MMType1</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-Type" testNumber="8"/>
			<description>Entry Type in FontMultipleMaster shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontMultipleMaster has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-Type" testNumber="7"/>
			<description>Entry Type in FontMultipleMaster is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontMultipleMaster is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontMultipleMaster shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontMultipleMaster has incorrect value %1 instead of Font</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-Widths" testNumber="8"/>
			<description>Entry Widths in FontMultipleMaster shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontMultipleMaster has type %1 instead of type Array</message>
				<arguments>
					<argument>WidthsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="PDF_1_0" clause="FontMultipleMaster-Widths" testNumber="11"/>
			<description>Entry Widths in FontMultipleMaster is required, when fn:NotStandard14Font()</description>
			<test>containsWidths == true || notStandard14Font == false</test>
			<error>
				<message>Entry Widths in FontMultipleMaster is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType" testNumber="1"/>
			<description>FontTrueType shall not contain entries except BaseFont, Encoding, FirstChar, FontDescriptor, LastChar, Name, Subtype, Type, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontTrueType contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType" testNumber="22"/>
			<description>FontTrueType shall not contain entry ToUnicode in PDF 1.0. This entry appears in later pdf versions</description>
			<test>containsToUnicode == false</test>
			<error>
				<message>FontTrueType contains entry ToUnicode</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-BaseFont" testNumber="8"/>
			<description>Entry BaseFont in FontTrueType shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontTrueType has type %1 instead of type Name</message>
				<arguments>
					<argument>BaseFontType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-BaseFont" testNumber="7"/>
			<description>Entry BaseFont in FontTrueType is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-Encoding" testNumber="8"/>
			<description>Entry Encoding in FontTrueType shall have one of types: Dictionary, Name</description>
			<test>containsEncoding == false || EncodingHasTypeDictionary == true || EncodingHasTypeName == true</test>
			<error>
				<message>Entry Encoding in FontTrueType has type %1 instead of one of types: Dictionary, Name</message>
				<arguments>
					<argument>EncodingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-Encoding-Name" testNumber="6"/>
			<description>Entry Encoding with type Name in FontTrueType shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontTrueType has incorrect value %1 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-FirstChar" testNumber="8"/>
			<description>Entry FirstChar in FontTrueType shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontTrueType has type %1 instead of type Integer</message>
				<arguments>
					<argument>FirstCharType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-FirstChar" testNumber="11"/>
			<description>Entry FirstChar in FontTrueType is required, when fn:NotStandard14Font()</description>
			<test>containsFirstChar == true || notStandard14Font == false</test>
			<error>
				<message>Entry FirstChar in FontTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-FontDescriptor" testNumber="8"/>
			<description>Entry FontDescriptor in FontTrueType shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontTrueType has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FontDescriptorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-FontDescriptor" testNumber="11"/>
			<description>Entry FontDescriptor in FontTrueType is required, when fn:NotStandard14Font()</description>
			<test>containsFontDescriptor == true || notStandard14Font == false</test>
			<error>
				<message>Entry FontDescriptor in FontTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-FontDescriptor-Dictionary" testNumber="10"/>
			<description>Entry FontDescriptor with type Dictionary in FontTrueType shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontTrueType is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-LastChar" testNumber="8"/>
			<description>Entry LastChar in FontTrueType shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontTrueType has type %1 instead of type Integer</message>
				<arguments>
					<argument>LastCharType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-LastChar" testNumber="11"/>
			<description>Entry LastChar in FontTrueType is required, when fn:NotStandard14Font()</description>
			<test>containsLastChar == true || notStandard14Font == false</test>
			<error>
				<message>Entry LastChar in FontTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-Name" testNumber="8"/>
			<description>Entry Name in FontTrueType shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontTrueType has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-Name" testNumber="7"/>
			<description>Entry Name in FontTrueType is required</description>
			<test>containsName == true</test>
			<error>
				<message>Entry Name in FontTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-Subtype" testNumber="8"/>
			<description>Entry Subtype in FontTrueType shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontTrueType has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-Subtype" testNumber="7"/>
			<description>Entry Subtype in FontTrueType is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in FontTrueType shall have value TrueType</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "TrueType"</test>
			<error>
				<message>Entry Subtype with type Name in FontTrueType has incorrect value %1 instead of TrueType</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-Type" testNumber="8"/>
			<description>Entry Type in FontTrueType shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontTrueType has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-Type" testNumber="7"/>
			<description>Entry Type in FontTrueType is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontTrueType shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontTrueType has incorrect value %1 instead of Font</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-Widths" testNumber="8"/>
			<description>Entry Widths in FontTrueType shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontTrueType has type %1 instead of type Array</message>
				<arguments>
					<argument>WidthsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="PDF_1_0" clause="FontTrueType-Widths" testNumber="11"/>
			<description>Entry Widths in FontTrueType is required, when fn:NotStandard14Font()</description>
			<test>containsWidths == true || notStandard14Font == false</test>
			<error>
				<message>Entry Widths in FontTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1" testNumber="1"/>
			<description>FontType1 shall not contain entries except BaseFont, Encoding, FirstChar, FontDescriptor, LastChar, Name, Subtype, Type, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1" testNumber="22"/>
			<description>FontType1 shall not contain entry ToUnicode in PDF 1.0. This entry appears in later pdf versions</description>
			<test>containsToUnicode == false</test>
			<error>
				<message>FontType1 contains entry ToUnicode</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-BaseFont" testNumber="8"/>
			<description>Entry BaseFont in FontType1 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>BaseFontType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-BaseFont" testNumber="7"/>
			<description>Entry BaseFont in FontType1 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-Encoding" testNumber="8"/>
			<description>Entry Encoding in FontType1 shall have one of types: Dictionary, Name</description>
			<test>containsEncoding == false || EncodingHasTypeDictionary == true || EncodingHasTypeName == true</test>
			<error>
				<message>Entry Encoding in FontType1 has type %1 instead of one of types: Dictionary, Name</message>
				<arguments>
					<argument>EncodingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-Encoding-Name" testNumber="6"/>
			<description>Entry Encoding with type Name in FontType1 shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontType1 has incorrect value %1 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-FirstChar" testNumber="8"/>
			<description>Entry FirstChar in FontType1 shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>FirstCharType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-FirstChar" testNumber="11"/>
			<description>Entry FirstChar in FontType1 is required, when fn:NotStandard14Font()</description>
			<test>containsFirstChar == true || notStandard14Font == false</test>
			<error>
				<message>Entry FirstChar in FontType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-FontDescriptor" testNumber="8"/>
			<description>Entry FontDescriptor in FontType1 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontType1 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FontDescriptorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-FontDescriptor" testNumber="11"/>
			<description>Entry FontDescriptor in FontType1 is required, when fn:NotStandard14Font()</description>
			<test>containsFontDescriptor == true || notStandard14Font == false</test>
			<error>
				<message>Entry FontDescriptor in FontType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-FontDescriptor-Dictionary" testNumber="10"/>
			<description>Entry FontDescriptor with type Dictionary in FontType1 shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType1 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-LastChar" testNumber="8"/>
			<description>Entry LastChar in FontType1 shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LastCharType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-LastChar" testNumber="11"/>
			<description>Entry LastChar in FontType1 is required, when fn:NotStandard14Font()</description>
			<test>containsLastChar == true || notStandard14Font == false</test>
			<error>
				<message>Entry LastChar in FontType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-Name" testNumber="8"/>
			<description>Entry Name in FontType1 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-Name" testNumber="7"/>
			<description>Entry Name in FontType1 is required</description>
			<test>containsName == true</test>
			<error>
				<message>Entry Name in FontType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-Subtype" testNumber="8"/>
			<description>Entry Subtype in FontType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-Subtype" testNumber="7"/>
			<description>Entry Subtype in FontType1 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in FontType1 shall have value Type1</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type1"</test>
			<error>
				<message>Entry Subtype with type Name in FontType1 has incorrect value %1 instead of Type1</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-Type" testNumber="8"/>
			<description>Entry Type in FontType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-Type" testNumber="7"/>
			<description>Entry Type in FontType1 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontType1 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontType1 has incorrect value %1 instead of Font</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-Widths" testNumber="8"/>
			<description>Entry Widths in FontType1 shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontType1 has type %1 instead of type Array</message>
				<arguments>
					<argument>WidthsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-Widths" testNumber="11"/>
			<description>Entry Widths in FontType1 is required, when fn:NotStandard14Font()</description>
			<test>containsWidths == true || notStandard14Font == false</test>
			<error>
				<message>Entry Widths in FontType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="PDF_1_0" clause="FontType1-Widths-Array" testNumber="9"/>
			<description>Entry Widths with type Array in FontType1 shall satisfy special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</description>
			<test>WidthsHasTypeArray != true || (LastCharHasTypeInteger == false || FirstCharHasTypeInteger == false || WidthsArraySize == (1 + (LastCharIntegerValue - FirstCharIntegerValue)))</test>
			<error>
				<message>Entry Widths with type Array in FontType1 does not satisfy special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3" testNumber="1"/>
			<description>FontType3 shall not contain entries except CharProcs, Encoding, FirstChar, FontBBox, FontDescriptor, FontMatrix, LastChar, Name, Subtype, Type, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CharProcs' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'FontMatrix' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CharProcs' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'FontMatrix' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3" testNumber="22"/>
			<description>FontType3 shall not contain entries Resources, ToUnicode in PDF 1.0. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'Resources' || elem == 'ToUnicode').length == 0</test>
			<error>
				<message>FontType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'Resources' || elem == 'ToUnicode').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-CharProcs" testNumber="8"/>
			<description>Entry CharProcs in FontType3 shall have type Dictionary</description>
			<test>containsCharProcs == false || CharProcsHasTypeDictionary == true</test>
			<error>
				<message>Entry CharProcs in FontType3 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CharProcsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-CharProcs" testNumber="7"/>
			<description>Entry CharProcs in FontType3 is required</description>
			<test>containsCharProcs == true</test>
			<error>
				<message>Entry CharProcs in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-Encoding" testNumber="8"/>
			<description>Entry Encoding in FontType3 shall have type Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontType3 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>EncodingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-Encoding" testNumber="7"/>
			<description>Entry Encoding in FontType3 is required</description>
			<test>containsEncoding == true</test>
			<error>
				<message>Entry Encoding in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-FirstChar" testNumber="8"/>
			<description>Entry FirstChar in FontType3 shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontType3 has type %1 instead of type Integer</message>
				<arguments>
					<argument>FirstCharType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-FirstChar" testNumber="7"/>
			<description>Entry FirstChar in FontType3 is required</description>
			<test>containsFirstChar == true</test>
			<error>
				<message>Entry FirstChar in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-FontBBox" testNumber="8"/>
			<description>Entry FontBBox in FontType3 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontType3 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>FontBBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-FontBBox" testNumber="7"/>
			<description>Entry FontBBox in FontType3 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-FontDescriptor" testNumber="8"/>
			<description>Entry FontDescriptor in FontType3 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontType3 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FontDescriptorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-FontDescriptor" testNumber="11"/>
			<description>Entry FontDescriptor in FontType3 is required, when fn:IsPDFTagged()</description>
			<test>containsFontDescriptor == true || isPDFTagged == false</test>
			<error>
				<message>Entry FontDescriptor in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-FontDescriptor-Dictionary" testNumber="10"/>
			<description>Entry FontDescriptor with type Dictionary in FontType3 shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType3 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-FontMatrix" testNumber="8"/>
			<description>Entry FontMatrix in FontType3 shall have type Matrix</description>
			<test>containsFontMatrix == false || FontMatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry FontMatrix in FontType3 has type %1 instead of type Matrix</message>
				<arguments>
					<argument>FontMatrixType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-FontMatrix" testNumber="7"/>
			<description>Entry FontMatrix in FontType3 is required</description>
			<test>containsFontMatrix == true</test>
			<error>
				<message>Entry FontMatrix in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-LastChar" testNumber="8"/>
			<description>Entry LastChar in FontType3 shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontType3 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LastCharType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-LastChar" testNumber="7"/>
			<description>Entry LastChar in FontType3 is required</description>
			<test>containsLastChar == true</test>
			<error>
				<message>Entry LastChar in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-Name" testNumber="8"/>
			<description>Entry Name in FontType3 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontType3 has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-Name" testNumber="7"/>
			<description>Entry Name in FontType3 is required</description>
			<test>containsName == true</test>
			<error>
				<message>Entry Name in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-Subtype" testNumber="8"/>
			<description>Entry Subtype in FontType3 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontType3 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-Subtype" testNumber="7"/>
			<description>Entry Subtype in FontType3 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in FontType3 shall have value Type3</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type3"</test>
			<error>
				<message>Entry Subtype with type Name in FontType3 has incorrect value %1 instead of Type3</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-Type" testNumber="8"/>
			<description>Entry Type in FontType3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontType3 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-Type" testNumber="7"/>
			<description>Entry Type in FontType3 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontType3 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontType3 has incorrect value %1 instead of Font</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-Widths" testNumber="8"/>
			<description>Entry Widths in FontType3 shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontType3 has type %1 instead of type Array</message>
				<arguments>
					<argument>WidthsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-Widths" testNumber="7"/>
			<description>Entry Widths in FontType3 is required</description>
			<test>containsWidths == true</test>
			<error>
				<message>Entry Widths in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="PDF_1_0" clause="FontType3-Widths-Array" testNumber="9"/>
			<description>Entry Widths with type Array in FontType3 shall satisfy special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</description>
			<test>WidthsHasTypeArray != true || (LastCharHasTypeInteger == false || FirstCharHasTypeInteger == false || WidthsArraySize == (1 + (LastCharIntegerValue - FirstCharIntegerValue)))</test>
			<error>
				<message>Entry Widths with type Array in FontType3 does not satisfy special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="PDF_1_0" clause="IndexedColorSpace" testNumber="2"/>
			<description>IndexedColorSpace shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>IndexedColorSpace contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="PDF_1_0" clause="IndexedColorSpace-0" testNumber="8"/>
			<description>Entry 0 in IndexedColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in IndexedColorSpace has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="PDF_1_0" clause="IndexedColorSpace-0-Name" testNumber="6"/>
			<description>Entry 0 with type Name in IndexedColorSpace shall have value Indexed</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Indexed"</test>
			<error>
				<message>Entry 0 with type Name in IndexedColorSpace has incorrect value %1 instead of Indexed</message>
				<arguments>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="PDF_1_0" clause="IndexedColorSpace-1" testNumber="8"/>
			<description>Entry 1 in IndexedColorSpace shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in IndexedColorSpace has type %1 instead of type Name</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="PDF_1_0" clause="IndexedColorSpace-1-Name" testNumber="6"/>
			<description>Entry 1 with type Name in IndexedColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry1HasTypeName != true || entry1NameValue == "DeviceCMYK" || entry1NameValue == "DeviceRGB" || entry1NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 1 with type Name in IndexedColorSpace has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="PDF_1_0" clause="IndexedColorSpace-2" testNumber="8"/>
			<description>Entry 2 in IndexedColorSpace shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in IndexedColorSpace has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="PDF_1_0" clause="IndexedColorSpace-2-Integer" testNumber="14"/>
			<description>Entry 2 with type Integer in IndexedColorSpace shall satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 255))</description>
			<test>entry2HasTypeInteger != true || (entry2IntegerValue &gt;= 0) &amp;&amp; (entry2IntegerValue &lt;= 255)</test>
			<error>
				<message>Entry 2 with type Integer in IndexedColorSpace does not satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 255))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="PDF_1_0" clause="IndexedColorSpace-3" testNumber="8"/>
			<description>Entry 3 in IndexedColorSpace shall have one of types: Stream, String</description>
			<test>size &lt;= 3 || entry3HasTypeStream == true || entry3HasTypeString == true</test>
			<error>
				<message>Entry 3 in IndexedColorSpace has type %1 instead of one of types: Stream, String</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="PDF_1_0" clause="IndexedColorSpace-3-Stream" testNumber="10"/>
			<description>Entry 3 with type Stream in IndexedColorSpace shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in IndexedColorSpace is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOOAdditionalStmsArray">
			<id specification="PDF_1_0" clause="OOAdditionalStmsArray" testNumber="3"/>
			<description>OOAdditionalStmsArray shall contain 2 * n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>OOAdditionalStmsArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOOAdditionalStmsArraySubArray">
			<id specification="PDF_1_0" clause="OOAdditionalStmsArraySubArray" testNumber="2"/>
			<description>OOAdditionalStmsArraySubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>OOAdditionalStmsArraySubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOOAdditionalStmsArraySubArray">
			<id specification="PDF_1_0" clause="OOAdditionalStmsArraySubArray-0" testNumber="8"/>
			<description>Entry 0 in OOAdditionalStmsArraySubArray shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in OOAdditionalStmsArraySubArray has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOOAdditionalStmsArraySubArray">
			<id specification="PDF_1_0" clause="OOAdditionalStmsArraySubArray-0-Name" testNumber="10"/>
			<description>Entry 0 with type Name in OOAdditionalStmsArraySubArray shall be direct</description>
			<test>entry0HasTypeName != true || isentry0Indirect == false</test>
			<error>
				<message>Entry 0 with type Name in OOAdditionalStmsArraySubArray is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOOAdditionalStmsArraySubArray">
			<id specification="PDF_1_0" clause="OOAdditionalStmsArraySubArray-1" testNumber="8"/>
			<description>Entry 1 in OOAdditionalStmsArraySubArray shall have type Stream</description>
			<test>size &lt;= 1 || entry1HasTypeStream == true</test>
			<error>
				<message>Entry 1 in OOAdditionalStmsArraySubArray has type %1 instead of type Stream</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOOAdditionalStmsArraySubArray">
			<id specification="PDF_1_0" clause="OOAdditionalStmsArraySubArray-1-Stream" testNumber="10"/>
			<description>Entry 1 with type Stream in OOAdditionalStmsArraySubArray shall be indirect</description>
			<test>entry1HasTypeStream != true || isentry1Indirect == true</test>
			<error>
				<message>Entry 1 with type Stream in OOAdditionalStmsArraySubArray is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="PDF_1_0" clause="Outline" testNumber="1"/>
			<description>Outline shall not contain entries except Count, First, Last, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Outline contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="PDF_1_0" clause="Outline-Count" testNumber="8"/>
			<description>Entry Count in Outline shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in Outline has type %1 instead of type Integer</message>
				<arguments>
					<argument>CountType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="PDF_1_0" clause="Outline-Count-Integer" testNumber="14"/>
			<description>Entry Count with type Integer in Outline shall satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Count with type Integer in Outline does not satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="PDF_1_0" clause="Outline-First" testNumber="8"/>
			<description>Entry First in Outline shall have type Dictionary</description>
			<test>containsFirst == false || FirstHasTypeDictionary == true</test>
			<error>
				<message>Entry First in Outline has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FirstType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="PDF_1_0" clause="Outline-First-Dictionary" testNumber="10"/>
			<description>Entry First with type Dictionary in Outline shall be indirect</description>
			<test>FirstHasTypeDictionary != true || isFirstIndirect == true</test>
			<error>
				<message>Entry First with type Dictionary in Outline is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="PDF_1_0" clause="Outline-Last" testNumber="8"/>
			<description>Entry Last in Outline shall have type Dictionary</description>
			<test>containsLast == false || LastHasTypeDictionary == true</test>
			<error>
				<message>Entry Last in Outline has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>LastType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="PDF_1_0" clause="Outline-Last-Dictionary" testNumber="10"/>
			<description>Entry Last with type Dictionary in Outline shall be indirect</description>
			<test>LastHasTypeDictionary != true || isLastIndirect == true</test>
			<error>
				<message>Entry Last with type Dictionary in Outline is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="PDF_1_0" clause="Outline-Type" testNumber="8"/>
			<description>Entry Type in Outline shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Outline has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="PDF_1_0" clause="Outline-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Outline shall have value Outlines</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Outlines"</test>
			<error>
				<message>Entry Type with type Name in Outline has incorrect value %1 instead of Outlines</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem" testNumber="1"/>
			<description>OutlineItem shall not contain entries except Count, Dest, First, Last, Next, Parent, Prev, Title</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'F' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'SE' &amp;&amp; elem != 'Title' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OutlineItem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'F' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'SE' &amp;&amp; elem != 'Title' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem" testNumber="22"/>
			<description>OutlineItem shall not contain entries A, C, F, SE in PDF 1.0. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'A' || elem == 'C' || elem == 'F' || elem == 'SE').length == 0</test>
			<error>
				<message>OutlineItem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'A' || elem == 'C' || elem == 'F' || elem == 'SE').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-Count" testNumber="8"/>
			<description>Entry Count in OutlineItem shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in OutlineItem has type %1 instead of type Integer</message>
				<arguments>
					<argument>CountType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-Dest-Array" testNumber="17"/>
			<description>Entry Dest with type Array in OutlineItem shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DestHasTypeArray != true || Dest_size == 1</test>
			<error>
				<message>Entry Dest with type Array in OutlineItem is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-Dest" testNumber="8"/>
			<description>Entry Dest in OutlineItem shall have one of types: Array, Name, StringByte</description>
			<test>containsDest == false || DestHasTypeArray == true || DestHasTypeName == true || DestHasTypeStringByte == true</test>
			<error>
				<message>Entry Dest in OutlineItem has type %1 instead of one of types: Array, Name, StringByte</message>
				<arguments>
					<argument>DestType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-First" testNumber="8"/>
			<description>Entry First in OutlineItem shall have type Dictionary</description>
			<test>containsFirst == false || FirstHasTypeDictionary == true</test>
			<error>
				<message>Entry First in OutlineItem has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FirstType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-First-Dictionary" testNumber="10"/>
			<description>Entry First with type Dictionary in OutlineItem shall be indirect</description>
			<test>FirstHasTypeDictionary != true || isFirstIndirect == true</test>
			<error>
				<message>Entry First with type Dictionary in OutlineItem is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-Last" testNumber="8"/>
			<description>Entry Last in OutlineItem shall have type Dictionary</description>
			<test>containsLast == false || LastHasTypeDictionary == true</test>
			<error>
				<message>Entry Last in OutlineItem has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>LastType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-Last-Dictionary" testNumber="10"/>
			<description>Entry Last with type Dictionary in OutlineItem shall be indirect</description>
			<test>LastHasTypeDictionary != true || isLastIndirect == true</test>
			<error>
				<message>Entry Last with type Dictionary in OutlineItem is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-Next" testNumber="8"/>
			<description>Entry Next in OutlineItem shall have type Dictionary</description>
			<test>containsNext == false || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in OutlineItem has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-Next-Dictionary" testNumber="10"/>
			<description>Entry Next with type Dictionary in OutlineItem shall be indirect</description>
			<test>NextHasTypeDictionary != true || isNextIndirect == true</test>
			<error>
				<message>Entry Next with type Dictionary in OutlineItem is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in OutlineItem shall be one of objects OutlineItem, Outline</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in OutlineItem is not one of objects OutlineItem, Outline</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-Parent" testNumber="8"/>
			<description>Entry Parent in OutlineItem shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in OutlineItem has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-Parent" testNumber="7"/>
			<description>Entry Parent in OutlineItem is required</description>
			<test>containsParent == true</test>
			<error>
				<message>Entry Parent in OutlineItem is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-Parent-Dictionary" testNumber="10"/>
			<description>Entry Parent with type Dictionary in OutlineItem shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in OutlineItem is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-Prev" testNumber="8"/>
			<description>Entry Prev in OutlineItem shall have type Dictionary</description>
			<test>containsPrev == false || PrevHasTypeDictionary == true</test>
			<error>
				<message>Entry Prev in OutlineItem has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PrevType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-Prev-Dictionary" testNumber="10"/>
			<description>Entry Prev with type Dictionary in OutlineItem shall be indirect</description>
			<test>PrevHasTypeDictionary != true || isPrevIndirect == true</test>
			<error>
				<message>Entry Prev with type Dictionary in OutlineItem is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-Title" testNumber="8"/>
			<description>Entry Title in OutlineItem shall have type StringText</description>
			<test>containsTitle == false || TitleHasTypeStringText == true</test>
			<error>
				<message>Entry Title in OutlineItem has type %1 instead of type StringText</message>
				<arguments>
					<argument>TitleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="PDF_1_0" clause="OutlineItem-Title" testNumber="7"/>
			<description>Entry Title in OutlineItem is required</description>
			<test>containsTitle == true</test>
			<error>
				<message>Entry Title in OutlineItem is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject" testNumber="1"/>
			<description>PageObject shall not contain entries except Annots, Contents, CropBox, MediaBox, Parent, Resources, Rotate, Thumb, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'Annots' &amp;&amp; elem != 'ArtBox' &amp;&amp; elem != 'B' &amp;&amp; elem != 'BleedBox' &amp;&amp; elem != 'BoxColorInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'DPart' &amp;&amp; elem != 'Dur' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'Hid' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'OutputIntents' &amp;&amp; elem != 'PZ' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'PresSteps' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'SeparationInfo' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Tabs' &amp;&amp; elem != 'TemplateInstantiated' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'TrimBox' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UserUnit' &amp;&amp; elem != 'VP' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>PageObject contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'Annots' &amp;&amp; elem != 'ArtBox' &amp;&amp; elem != 'B' &amp;&amp; elem != 'BleedBox' &amp;&amp; elem != 'BoxColorInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'DPart' &amp;&amp; elem != 'Dur' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'Hid' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'OutputIntents' &amp;&amp; elem != 'PZ' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'PresSteps' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'SeparationInfo' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Tabs' &amp;&amp; elem != 'TemplateInstantiated' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'TrimBox' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UserUnit' &amp;&amp; elem != 'VP' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject" testNumber="22"/>
			<description>PageObject shall not contain entries AA, AF, ArtBox, B, BleedBox, BoxColorInfo, DPart, Dur, Group, Hid, ID, LastModified, Metadata, OutputIntents, PZ, PieceInfo, PresSteps, SeparationInfo, StructParents, Tabs, TemplateInstantiated, Trans, TrimBox, UserUnit, VP in PDF 1.0. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'AA' || elem == 'AF' || elem == 'ArtBox' || elem == 'B' || elem == 'BleedBox' || elem == 'BoxColorInfo' || elem == 'DPart' || elem == 'Dur' || elem == 'Group' || elem == 'Hid' || elem == 'ID' || elem == 'LastModified' || elem == 'Metadata' || elem == 'OutputIntents' || elem == 'PZ' || elem == 'PieceInfo' || elem == 'PresSteps' || elem == 'SeparationInfo' || elem == 'StructParents' || elem == 'Tabs' || elem == 'TemplateInstantiated' || elem == 'Trans' || elem == 'TrimBox' || elem == 'UserUnit' || elem == 'VP').length == 0</test>
			<error>
				<message>PageObject contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'AA' || elem == 'AF' || elem == 'ArtBox' || elem == 'B' || elem == 'BleedBox' || elem == 'BoxColorInfo' || elem == 'DPart' || elem == 'Dur' || elem == 'Group' || elem == 'Hid' || elem == 'ID' || elem == 'LastModified' || elem == 'Metadata' || elem == 'OutputIntents' || elem == 'PZ' || elem == 'PieceInfo' || elem == 'PresSteps' || elem == 'SeparationInfo' || elem == 'StructParents' || elem == 'Tabs' || elem == 'TemplateInstantiated' || elem == 'Trans' || elem == 'TrimBox' || elem == 'UserUnit' || elem == 'VP').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Annots" testNumber="8"/>
			<description>Entry Annots in PageObject shall have type Array</description>
			<test>containsAnnots == false || AnnotsHasTypeArray == true</test>
			<error>
				<message>Entry Annots in PageObject has type %1 instead of type Array</message>
				<arguments>
					<argument>AnnotsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Contents" testNumber="8"/>
			<description>Entry Contents in PageObject shall have one of types: Array, Stream</description>
			<test>containsContents == false || ContentsHasTypeArray == true || ContentsHasTypeStream == true</test>
			<error>
				<message>Entry Contents in PageObject has type %1 instead of one of types: Array, Stream</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Contents-Stream" testNumber="10"/>
			<description>Entry Contents with type Stream in PageObject shall be indirect</description>
			<test>ContentsHasTypeStream != true || isContentsIndirect == true</test>
			<error>
				<message>Entry Contents with type Stream in PageObject is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-CropBox" testNumber="8"/>
			<description>Entry CropBox in PageObject shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageObject has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>CropBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-MediaBox" testNumber="8"/>
			<description>Entry MediaBox in PageObject shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageObject has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>MediaBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-MediaBox" testNumber="7"/>
			<description>Entry MediaBox in PageObject is required</description>
			<test>containsMediaBox == true</test>
			<error>
				<message>Entry MediaBox in PageObject is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in PageObject shall be one of objects PageTreeNode, PageTreeNodeRoot</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject is not one of objects PageTreeNode, PageTreeNodeRoot</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Parent" testNumber="8"/>
			<description>Entry Parent in PageObject shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in PageObject has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Parent" testNumber="11"/>
			<description>Entry Parent in PageObject is required, when @Type != Template</description>
			<test>containsParent == true || (TypeNameValue == "Template")</test>
			<error>
				<message>Entry Parent in PageObject is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Parent-Dictionary" testNumber="10"/>
			<description>Entry Parent with type Dictionary in PageObject shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Parent-Dictionary" testNumber="9"/>
			<description>Entry Parent with type Dictionary in PageObject shall satisfy special case: fn:Not(fn:IsPresent(@Type == Template))</description>
			<test>ParentHasTypeDictionary != true || ((TypeNameValue != "Template") || containsParent != true)</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject does not satisfy special case: fn:Not(fn:IsPresent(@Type == Template))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Resources" testNumber="8"/>
			<description>Entry Resources in PageObject shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageObject has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ResourcesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Resources" testNumber="7"/>
			<description>Entry Resources in PageObject is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in PageObject is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Rotate" testNumber="8"/>
			<description>Entry Rotate in PageObject shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageObject has type %1 instead of type Integer</message>
				<arguments>
					<argument>RotateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Rotate-Integer" testNumber="14"/>
			<description>Entry Rotate with type Integer in PageObject shall satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageObject does not satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Thumb" testNumber="8"/>
			<description>Entry Thumb in PageObject shall have type Stream</description>
			<test>containsThumb == false || ThumbHasTypeStream == true</test>
			<error>
				<message>Entry Thumb in PageObject has type %1 instead of type Stream</message>
				<arguments>
					<argument>ThumbType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Thumb-Stream" testNumber="10"/>
			<description>Entry Thumb with type Stream in PageObject shall be indirect</description>
			<test>ThumbHasTypeStream != true || isThumbIndirect == true</test>
			<error>
				<message>Entry Thumb with type Stream in PageObject is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Type" testNumber="8"/>
			<description>Entry Type in PageObject shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageObject has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Type" testNumber="7"/>
			<description>Entry Type in PageObject is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageObject is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="PDF_1_0" clause="PageObject-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in PageObject shall have one of values: Page, Template</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Page" || TypeNameValue == "Template"</test>
			<error>
				<message>Entry Type with type Name in PageObject has incorrect value %1 instead of Page, Template</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode" testNumber="1"/>
			<description>PageTreeNode shall not contain entries except Count, CropBox, Kids, MediaBox, Parent, Resources, Rotate, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>PageTreeNode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-Count" testNumber="8"/>
			<description>Entry Count in PageTreeNode shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in PageTreeNode has type %1 instead of type Integer</message>
				<arguments>
					<argument>CountType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-Count" testNumber="7"/>
			<description>Entry Count in PageTreeNode is required</description>
			<test>containsCount == true</test>
			<error>
				<message>Entry Count in PageTreeNode is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-Count-Integer" testNumber="14"/>
			<description>Entry Count with type Integer in PageTreeNode shall satisfy possible value predicate: fn:Eval(@Count &gt; 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt; 0</test>
			<error>
				<message>Entry Count with type Integer in PageTreeNode does not satisfy possible value predicate: fn:Eval(@Count &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-CropBox" testNumber="8"/>
			<description>Entry CropBox in PageTreeNode shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageTreeNode has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>CropBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-Kids" testNumber="8"/>
			<description>Entry Kids in PageTreeNode shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in PageTreeNode has type %1 instead of type Array</message>
				<arguments>
					<argument>KidsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-Kids" testNumber="7"/>
			<description>Entry Kids in PageTreeNode is required</description>
			<test>containsKids == true</test>
			<error>
				<message>Entry Kids in PageTreeNode is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-Kids-Array" testNumber="9"/>
			<description>Entry Kids with type Array in PageTreeNode shall satisfy special case: fn:Eval(fn:ArrayLength(Kids) &gt; 0)</description>
			<test>KidsHasTypeArray != true || (KidsArraySize &gt; 0)</test>
			<error>
				<message>Entry Kids with type Array in PageTreeNode does not satisfy special case: fn:Eval(fn:ArrayLength(Kids) &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-MediaBox" testNumber="8"/>
			<description>Entry MediaBox in PageTreeNode shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageTreeNode has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>MediaBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in PageTreeNode shall be one of objects PageTreeNode, PageTreeNodeRoot</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in PageTreeNode is not one of objects PageTreeNode, PageTreeNodeRoot</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-Parent" testNumber="8"/>
			<description>Entry Parent in PageTreeNode shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in PageTreeNode has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-Parent" testNumber="7"/>
			<description>Entry Parent in PageTreeNode is required</description>
			<test>containsParent == true</test>
			<error>
				<message>Entry Parent in PageTreeNode is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-Parent-Dictionary" testNumber="10"/>
			<description>Entry Parent with type Dictionary in PageTreeNode shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in PageTreeNode is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-Resources" testNumber="8"/>
			<description>Entry Resources in PageTreeNode shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageTreeNode has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ResourcesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-Rotate" testNumber="8"/>
			<description>Entry Rotate in PageTreeNode shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageTreeNode has type %1 instead of type Integer</message>
				<arguments>
					<argument>RotateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-Rotate-Integer" testNumber="14"/>
			<description>Entry Rotate with type Integer in PageTreeNode shall satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageTreeNode does not satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-Type" testNumber="8"/>
			<description>Entry Type in PageTreeNode shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageTreeNode has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-Type" testNumber="7"/>
			<description>Entry Type in PageTreeNode is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageTreeNode is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="PDF_1_0" clause="PageTreeNode-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in PageTreeNode shall have value Pages</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pages"</test>
			<error>
				<message>Entry Type with type Name in PageTreeNode has incorrect value %1 instead of Pages</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="PDF_1_0" clause="PageTreeNodeRoot" testNumber="1"/>
			<description>PageTreeNodeRoot shall not contain entries except Count, CropBox, Kids, MediaBox, Resources, Rotate, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>PageTreeNodeRoot contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="PDF_1_0" clause="PageTreeNodeRoot-Count" testNumber="8"/>
			<description>Entry Count in PageTreeNodeRoot shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in PageTreeNodeRoot has type %1 instead of type Integer</message>
				<arguments>
					<argument>CountType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="PDF_1_0" clause="PageTreeNodeRoot-Count" testNumber="7"/>
			<description>Entry Count in PageTreeNodeRoot is required</description>
			<test>containsCount == true</test>
			<error>
				<message>Entry Count in PageTreeNodeRoot is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="PDF_1_0" clause="PageTreeNodeRoot-Count-Integer" testNumber="14"/>
			<description>Entry Count with type Integer in PageTreeNodeRoot shall satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Count with type Integer in PageTreeNodeRoot does not satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="PDF_1_0" clause="PageTreeNodeRoot-CropBox" testNumber="8"/>
			<description>Entry CropBox in PageTreeNodeRoot shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageTreeNodeRoot has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>CropBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="PDF_1_0" clause="PageTreeNodeRoot-Kids" testNumber="8"/>
			<description>Entry Kids in PageTreeNodeRoot shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in PageTreeNodeRoot has type %1 instead of type Array</message>
				<arguments>
					<argument>KidsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="PDF_1_0" clause="PageTreeNodeRoot-Kids" testNumber="7"/>
			<description>Entry Kids in PageTreeNodeRoot is required</description>
			<test>containsKids == true</test>
			<error>
				<message>Entry Kids in PageTreeNodeRoot is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="PDF_1_0" clause="PageTreeNodeRoot-MediaBox" testNumber="8"/>
			<description>Entry MediaBox in PageTreeNodeRoot shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageTreeNodeRoot has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>MediaBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="PDF_1_0" clause="PageTreeNodeRoot-Resources" testNumber="8"/>
			<description>Entry Resources in PageTreeNodeRoot shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageTreeNodeRoot has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ResourcesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="PDF_1_0" clause="PageTreeNodeRoot-Rotate" testNumber="8"/>
			<description>Entry Rotate in PageTreeNodeRoot shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageTreeNodeRoot has type %1 instead of type Integer</message>
				<arguments>
					<argument>RotateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="PDF_1_0" clause="PageTreeNodeRoot-Rotate-Integer" testNumber="14"/>
			<description>Entry Rotate with type Integer in PageTreeNodeRoot shall satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageTreeNodeRoot does not satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="PDF_1_0" clause="PageTreeNodeRoot-Type" testNumber="8"/>
			<description>Entry Type in PageTreeNodeRoot shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageTreeNodeRoot has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="PDF_1_0" clause="PageTreeNodeRoot-Type" testNumber="7"/>
			<description>Entry Type in PageTreeNodeRoot is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageTreeNodeRoot is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="PDF_1_0" clause="PageTreeNodeRoot-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in PageTreeNodeRoot shall have value Pages</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pages"</test>
			<error>
				<message>Entry Type with type Name in PageTreeNodeRoot has incorrect value %1 instead of Pages</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="PDF_1_0" clause="Resource" testNumber="1"/>
			<description>Resource shall not contain entries except ColorSpace, Encoding, Font, ProcSet, XObject</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'ExtGState' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'Pattern' &amp;&amp; elem != 'ProcSet' &amp;&amp; elem != 'Properties' &amp;&amp; elem != 'Shading' &amp;&amp; elem != 'XObject' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Resource contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'ExtGState' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'Pattern' &amp;&amp; elem != 'ProcSet' &amp;&amp; elem != 'Properties' &amp;&amp; elem != 'Shading' &amp;&amp; elem != 'XObject' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="PDF_1_0" clause="Resource" testNumber="22"/>
			<description>Resource shall not contain entries ExtGState, Pattern, Properties, Shading in PDF 1.0. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'ExtGState' || elem == 'Pattern' || elem == 'Properties' || elem == 'Shading').length == 0</test>
			<error>
				<message>Resource contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'ExtGState' || elem == 'Pattern' || elem == 'Properties' || elem == 'Shading').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="PDF_1_0" clause="Resource-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in Resource shall have type Dictionary</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeDictionary == true</test>
			<error>
				<message>Entry ColorSpace in Resource has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="PDF_1_0" clause="Resource-Encoding" testNumber="8"/>
			<description>Entry Encoding in Resource shall have type Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in Resource has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>EncodingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="PDF_1_0" clause="Resource-Font" testNumber="8"/>
			<description>Entry Font in Resource shall have type Dictionary</description>
			<test>containsFont == false || FontHasTypeDictionary == true</test>
			<error>
				<message>Entry Font in Resource has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FontType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="PDF_1_0" clause="Resource-ProcSet" testNumber="8"/>
			<description>Entry ProcSet in Resource shall have type Array</description>
			<test>containsProcSet == false || ProcSetHasTypeArray == true</test>
			<error>
				<message>Entry ProcSet in Resource has type %1 instead of type Array</message>
				<arguments>
					<argument>ProcSetType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="PDF_1_0" clause="Resource-XObject" testNumber="8"/>
			<description>Entry XObject in Resource shall have type Dictionary</description>
			<test>containsXObject == false || XObjectHasTypeDictionary == true</test>
			<error>
				<message>Entry XObject in Resource has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>XObjectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="PDF_1_0" clause="Stream-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in Stream shall be one of objects FilterLZWDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in Stream is not one of objects FilterLZWDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="PDF_1_0" clause="Stream-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in Stream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in Stream has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="PDF_1_0" clause="Stream-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in Stream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in Stream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="PDF_1_0" clause="Stream-Filter" testNumber="8"/>
			<description>Entry Filter in Stream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in Stream has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="PDF_1_0" clause="Stream-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in Stream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in Stream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="PDF_1_0" clause="Stream-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in Stream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "DCTDecode"</test>
			<error>
				<message>Entry Filter with type Name in Stream has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="PDF_1_0" clause="Stream-Length" testNumber="8"/>
			<description>Entry Length in Stream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in Stream has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="PDF_1_0" clause="Stream-Length" testNumber="7"/>
			<description>Entry Length in Stream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in Stream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail" testNumber="1"/>
			<description>Thumbnail shall not contain entries except BitsPerComponent, ColorSpace, Decode, Height, Subtype, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Thumbnail contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail" testNumber="22"/>
			<description>Thumbnail shall not contain entries DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length in PDF 1.0. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'DL' || elem == 'DecodeParms' || elem == 'F' || elem == 'FDecodeParms' || elem == 'FFilter' || elem == 'Filter' || elem == 'Length').length == 0</test>
			<error>
				<message>Thumbnail contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'DL' || elem == 'DecodeParms' || elem == 'F' || elem == 'FDecodeParms' || elem == 'FFilter' || elem == 'Filter' || elem == 'Length').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail-BitsPerComponent" testNumber="8"/>
			<description>Entry BitsPerComponent in Thumbnail shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in Thumbnail has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerComponentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail-BitsPerComponent" testNumber="7"/>
			<description>Entry BitsPerComponent in Thumbnail is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in Thumbnail is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail-BitsPerComponent-Integer" testNumber="6"/>
			<description>Entry BitsPerComponent with type Integer in Thumbnail shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in Thumbnail has incorrect value %1 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in Thumbnail shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in Thumbnail has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail-ColorSpace" testNumber="7"/>
			<description>Entry ColorSpace in Thumbnail is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in Thumbnail is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail-ColorSpace-Name" testNumber="6"/>
			<description>Entry ColorSpace with type Name in Thumbnail shall have one of values: DeviceGray, DeviceRGB</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in Thumbnail has incorrect value %1 instead of DeviceGray, DeviceRGB</message>
				<arguments>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail-Decode" testNumber="8"/>
			<description>Entry Decode in Thumbnail shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in Thumbnail has type %1 instead of type Array</message>
				<arguments>
					<argument>DecodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail-Height" testNumber="8"/>
			<description>Entry Height in Thumbnail shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in Thumbnail has type %1 instead of type Integer</message>
				<arguments>
					<argument>HeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail-Height" testNumber="7"/>
			<description>Entry Height in Thumbnail is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in Thumbnail is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail-Subtype" testNumber="8"/>
			<description>Entry Subtype in Thumbnail shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in Thumbnail has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in Thumbnail shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in Thumbnail has incorrect value %1 instead of Image</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail-Type" testNumber="8"/>
			<description>Entry Type in Thumbnail shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Thumbnail has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Thumbnail shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in Thumbnail has incorrect value %1 instead of XObject</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail-Width" testNumber="8"/>
			<description>Entry Width in Thumbnail shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in Thumbnail has type %1 instead of type Integer</message>
				<arguments>
					<argument>WidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="PDF_1_0" clause="Thumbnail-Width" testNumber="7"/>
			<description>Entry Width in Thumbnail is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in Thumbnail is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1" testNumber="1"/>
			<description>XObjectFormType1 shall not contain entries except BBox, DecodeParms, Filter, FormType, Length, Matrix, Name, Subtype, Type, XUID</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'GTS_Encapsulated' &amp;&amp; elem != 'GTS_Env' &amp;&amp; elem != 'GTS_Scope' &amp;&amp; elem != 'GTS_XID' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XUID' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>XObjectFormType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'GTS_Encapsulated' &amp;&amp; elem != 'GTS_Env' &amp;&amp; elem != 'GTS_Scope' &amp;&amp; elem != 'GTS_XID' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XUID' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1" testNumber="22"/>
			<description>XObjectFormType1 shall not contain entries AF, DL, F, FDecodeParms, FFilter, GTS_Encapsulated, GTS_Env, GTS_Scope, GTS_XID, Group, LastModified, Measure, Metadata, OC, OPI, PieceInfo, PtData, Ref, Resources, StructParent, StructParents in PDF 1.0. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'DL' || elem == 'F' || elem == 'FDecodeParms' || elem == 'FFilter' || elem == 'GTS_Encapsulated' || elem == 'GTS_Env' || elem == 'GTS_Scope' || elem == 'GTS_XID' || elem == 'Group' || elem == 'LastModified' || elem == 'Measure' || elem == 'Metadata' || elem == 'OC' || elem == 'OPI' || elem == 'PieceInfo' || elem == 'PtData' || elem == 'Ref' || elem == 'Resources' || elem == 'StructParent' || elem == 'StructParents').length == 0</test>
			<error>
				<message>XObjectFormType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'DL' || elem == 'F' || elem == 'FDecodeParms' || elem == 'FFilter' || elem == 'GTS_Encapsulated' || elem == 'GTS_Env' || elem == 'GTS_Scope' || elem == 'GTS_XID' || elem == 'Group' || elem == 'LastModified' || elem == 'Measure' || elem == 'Metadata' || elem == 'OC' || elem == 'OPI' || elem == 'PieceInfo' || elem == 'PtData' || elem == 'Ref' || elem == 'Resources' || elem == 'StructParent' || elem == 'StructParents').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-BBox" testNumber="8"/>
			<description>Entry BBox in XObjectFormType1 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormType1 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>BBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-BBox" testNumber="7"/>
			<description>Entry BBox in XObjectFormType1 is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in XObjectFormType1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormType1 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in XObjectFormType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-Filter" testNumber="8"/>
			<description>Entry Filter in XObjectFormType1 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectFormType1 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in XObjectFormType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in XObjectFormType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormType1 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-FormType" testNumber="8"/>
			<description>Entry FormType in XObjectFormType1 shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>FormTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-FormType" testNumber="7"/>
			<description>Entry FormType in XObjectFormType1 is required</description>
			<test>containsFormType == true</test>
			<error>
				<message>Entry FormType in XObjectFormType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-FormType-Integer" testNumber="6"/>
			<description>Entry FormType with type Integer in XObjectFormType1 shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormType1 has incorrect value %1 instead of 1</message>
				<arguments>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-Length" testNumber="8"/>
			<description>Entry Length in XObjectFormType1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-Length" testNumber="7"/>
			<description>Entry Length in XObjectFormType1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-Matrix" testNumber="8"/>
			<description>Entry Matrix in XObjectFormType1 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormType1 has type %1 instead of type Matrix</message>
				<arguments>
					<argument>MatrixType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-Matrix" testNumber="7"/>
			<description>Entry Matrix in XObjectFormType1 is required</description>
			<test>containsMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-Name" testNumber="8"/>
			<description>Entry Name in XObjectFormType1 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectFormType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-Name" testNumber="7"/>
			<description>Entry Name in XObjectFormType1 is required</description>
			<test>containsName == true</test>
			<error>
				<message>Entry Name in XObjectFormType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-Subtype" testNumber="8"/>
			<description>Entry Subtype in XObjectFormType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-Subtype" testNumber="7"/>
			<description>Entry Subtype in XObjectFormType1 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in XObjectFormType1 shall have value Form</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Form"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormType1 has incorrect value %1 instead of Form</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-Type" testNumber="8"/>
			<description>Entry Type in XObjectFormType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in XObjectFormType1 shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormType1 has incorrect value %1 instead of XObject</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="PDF_1_0" clause="XObjectFormType1-XUID" testNumber="8"/>
			<description>Entry XUID in XObjectFormType1 shall have type Array</description>
			<test>containsXUID == false || XUIDHasTypeArray == true</test>
			<error>
				<message>Entry XUID in XObjectFormType1 has type %1 instead of type Array</message>
				<arguments>
					<argument>XUIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage" testNumber="1"/>
			<description>XObjectImage shall not contain entries except BitsPerComponent, ColorSpace, Decode, DecodeParms, F, Filter, Height, ImageMask, Interpolate, Length, Name, Subtype, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'Alternates' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'GTS_Encapsulated' &amp;&amp; elem != 'GTS_Env' &amp;&amp; elem != 'GTS_Scope' &amp;&amp; elem != 'GTS_XID' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Mask' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'SMaskInData' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>XObjectImage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'Alternates' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'GTS_Encapsulated' &amp;&amp; elem != 'GTS_Env' &amp;&amp; elem != 'GTS_Scope' &amp;&amp; elem != 'GTS_XID' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Mask' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'SMaskInData' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage" testNumber="22"/>
			<description>XObjectImage shall not contain entries AF, Alternates, DL, FDecodeParms, FFilter, GTS_Encapsulated, GTS_Env, GTS_Scope, GTS_XID, ID, Intent, Mask, Measure, Metadata, OC, OPI, PtData, SMask, SMaskInData, StructParent in PDF 1.0. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'Alternates' || elem == 'DL' || elem == 'FDecodeParms' || elem == 'FFilter' || elem == 'GTS_Encapsulated' || elem == 'GTS_Env' || elem == 'GTS_Scope' || elem == 'GTS_XID' || elem == 'ID' || elem == 'Intent' || elem == 'Mask' || elem == 'Measure' || elem == 'Metadata' || elem == 'OC' || elem == 'OPI' || elem == 'PtData' || elem == 'SMask' || elem == 'SMaskInData' || elem == 'StructParent').length == 0</test>
			<error>
				<message>XObjectImage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'Alternates' || elem == 'DL' || elem == 'FDecodeParms' || elem == 'FFilter' || elem == 'GTS_Encapsulated' || elem == 'GTS_Env' || elem == 'GTS_Scope' || elem == 'GTS_XID' || elem == 'ID' || elem == 'Intent' || elem == 'Mask' || elem == 'Measure' || elem == 'Metadata' || elem == 'OC' || elem == 'OPI' || elem == 'PtData' || elem == 'SMask' || elem == 'SMaskInData' || elem == 'StructParent').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-BitsPerComponent" testNumber="8"/>
			<description>Entry BitsPerComponent in XObjectImage shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerComponentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-BitsPerComponent" testNumber="11"/>
			<description>Entry BitsPerComponent in XObjectImage is required, when fn:Not(fn:Contains(@Filter, JPXDecode) || (@ImageMask == true))</description>
			<test>containsBitsPerComponent == true || (((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JPXDecode").length &gt; 0) || (ImageMaskBooleanValue == true)) != true) == false</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-BitsPerComponent-Integer-1" testNumber="15"/>
			<description>Entry BitsPerComponent in XObjectImage shall have Integer value 1, if this object satisfies condition (@Filter == CCITTFaxDecode) || (@Filter == JBIG2Decode) || (@ImageMask == true)</description>
			<test>((FilterNameValue != "CCITTFaxDecode") &amp;&amp; (FilterNameValue != "JBIG2Decode") &amp;&amp; (ImageMaskBooleanValue != true)) || BitsPerComponentIntegerValue == 1</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage does not have value 1</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-BitsPerComponent-Integer-8" testNumber="15"/>
			<description>Entry BitsPerComponent in XObjectImage shall have Integer value 8, if this object satisfies condition (@Filter == RunLengthDecode) || (@Filter == DCTDecode)</description>
			<test>((FilterNameValue != "RunLengthDecode") &amp;&amp; (FilterNameValue != "DCTDecode")) || BitsPerComponentIntegerValue == 8</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage does not have value 8</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-BitsPerComponent-Integer" testNumber="6"/>
			<description>Entry BitsPerComponent with type Integer in XObjectImage shall have one of values: 1, 2, 4, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in XObjectImage has incorrect value %1 instead of 1, 2, 4, 8</message>
				<arguments>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in XObjectImage shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in XObjectImage has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-ColorSpace" testNumber="11"/>
			<description>Entry ColorSpace in XObjectImage is required, when fn:Not(fn:Contains(@Filter, JPXDecode) || (@ImageMask == true))</description>
			<test>containsColorSpace == true || (((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JPXDecode").length &gt; 0) || (ImageMaskBooleanValue == true)) != true) == false</test>
			<error>
				<message>Entry ColorSpace in XObjectImage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-ColorSpace-Array" testNumber="9"/>
			<description>Entry ColorSpace with type Array in XObjectImage shall satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>ColorSpaceHasTypeArray != true || ((ImageMaskBooleanValue != true) || containsColorSpace != true)</test>
			<error>
				<message>Entry ColorSpace with type Array in XObjectImage does not satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-ColorSpace-Name" testNumber="6"/>
			<description>Entry ColorSpace with type Name in XObjectImage shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in XObjectImage has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-ColorSpace-Name" testNumber="9"/>
			<description>Entry ColorSpace with type Name in XObjectImage shall satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>ColorSpaceHasTypeName != true || ((ImageMaskBooleanValue != true) || containsColorSpace != true)</test>
			<error>
				<message>Entry ColorSpace with type Name in XObjectImage does not satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Decode" testNumber="8"/>
			<description>Entry Decode in XObjectImage shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in XObjectImage has type %1 instead of type Array</message>
				<arguments>
					<argument>DecodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in XObjectImage shall be one of objects FilterLZWDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectImage is not one of objects FilterLZWDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in XObjectImage shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectImage has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in XObjectImage shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImage does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-F" testNumber="8"/>
			<description>Entry F in XObjectImage shall have type String</description>
			<test>containsF == false || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectImage has type %1 instead of type String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Filter" testNumber="8"/>
			<description>Entry Filter in XObjectImage shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectImage has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in XObjectImage shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectImage does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in XObjectImage shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "DCTDecode"</test>
			<error>
				<message>Entry Filter with type Name in XObjectImage has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Height" testNumber="8"/>
			<description>Entry Height in XObjectImage shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in XObjectImage has type %1 instead of type Integer</message>
				<arguments>
					<argument>HeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Height" testNumber="7"/>
			<description>Entry Height in XObjectImage is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in XObjectImage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-ImageMask" testNumber="8"/>
			<description>Entry ImageMask in XObjectImage shall have type Boolean</description>
			<test>containsImageMask == false || ImageMaskHasTypeBoolean == true</test>
			<error>
				<message>Entry ImageMask in XObjectImage has type %1 instead of type Boolean</message>
				<arguments>
					<argument>ImageMaskType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-ImageMask-Boolean" testNumber="9"/>
			<description>Entry ImageMask with type Boolean in XObjectImage shall satisfy special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace))) || (@ImageMask == false))</description>
			<test>ImageMaskHasTypeBoolean != true || (((ImageMaskBooleanValue == true) &amp;&amp; (BitsPerComponentHasTypeInteger == false || (BitsPerComponentIntegerValue == 1)) &amp;&amp; (containsColorSpace != true)) || (ImageMaskBooleanValue == false))</test>
			<error>
				<message>Entry ImageMask with type Boolean in XObjectImage does not satisfy special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace))) || (@ImageMask == false))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Interpolate" testNumber="8"/>
			<description>Entry Interpolate in XObjectImage shall have type Boolean</description>
			<test>containsInterpolate == false || InterpolateHasTypeBoolean == true</test>
			<error>
				<message>Entry Interpolate in XObjectImage has type %1 instead of type Boolean</message>
				<arguments>
					<argument>InterpolateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Length" testNumber="8"/>
			<description>Entry Length in XObjectImage shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectImage has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Length" testNumber="7"/>
			<description>Entry Length in XObjectImage is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectImage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Name" testNumber="8"/>
			<description>Entry Name in XObjectImage shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectImage has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Name" testNumber="7"/>
			<description>Entry Name in XObjectImage is required</description>
			<test>containsName == true</test>
			<error>
				<message>Entry Name in XObjectImage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Subtype" testNumber="8"/>
			<description>Entry Subtype in XObjectImage shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectImage has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Subtype" testNumber="7"/>
			<description>Entry Subtype in XObjectImage is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectImage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in XObjectImage shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectImage has incorrect value %1 instead of Image</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Type" testNumber="8"/>
			<description>Entry Type in XObjectImage shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectImage has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in XObjectImage shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectImage has incorrect value %1 instead of XObject</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Width" testNumber="8"/>
			<description>Entry Width in XObjectImage shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in XObjectImage has type %1 instead of type Integer</message>
				<arguments>
					<argument>WidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="PDF_1_0" clause="XObjectImage-Width" testNumber="7"/>
			<description>Entry Width in XObjectImage is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in XObjectImage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectMapEntry">
			<id specification="PDF_1_0" clause="XObjectMapEntry-Stream" testNumber="17"/>
			<description>Entry with type Stream in XObjectMap shall be one of objects XObjectFormType1, XObjectImage</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Stream in XObjectMap is not one of objects XObjectFormType1, XObjectImage</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectMapEntry">
			<id specification="PDF_1_0" clause="XObjectMapEntry" testNumber="8"/>
			<description>Entry in XObjectMap shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in XObjectMap has type %1 instead of type Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectMapEntry">
			<id specification="PDF_1_0" clause="XObjectMapEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in XObjectMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in XObjectMap is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
	</rules>
	<variables/>
</profile>
