<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<profile xmlns="http://www.verapdf.org/ValidationProfile" flavour="ARLINGTON1_7">
	<details creator="veraPDF Consortium" created="2022-05-23T21:45:28.872+03:00">
		<name>Arlington PDF 1.7 profile</name>
		<description>Rules against PDF 1.7 Specification</description>
	</details>
	<hash></hash>
	<rules>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation" testNumber="1"/>
			<description>3DActivation shall not contain entries except A, AIS, D, DIS, NP, Style, TB, Transparent, Window</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AIS' &amp;&amp; elem != 'D' &amp;&amp; elem != 'DIS' &amp;&amp; elem != 'NP' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'TB' &amp;&amp; elem != 'Transparent' &amp;&amp; elem != 'Window' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DActivation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AIS' &amp;&amp; elem != 'D' &amp;&amp; elem != 'DIS' &amp;&amp; elem != 'NP' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'TB' &amp;&amp; elem != 'Transparent' &amp;&amp; elem != 'Window' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-A" testNumber="8"/>
			<description>Entry A in 3DActivation shall have type Name</description>
			<test>containsA == false || AHasTypeName == true</test>
			<error>
				<message>Entry A in 3DActivation has type %1 instead of type Name</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-A-Name" testNumber="6"/>
			<description>Entry A with type Name in 3DActivation shall have one of values: PV, XA, PO</description>
			<test>AHasTypeName != true || ANameValue == "PO" || ANameValue == "PV" || ANameValue == "XA"</test>
			<error>
				<message>Entry A with type Name in 3DActivation has incorrect value %1 instead of PV, XA, PO</message>
				<arguments>
					<argument>ANameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-AIS" testNumber="8"/>
			<description>Entry AIS in 3DActivation shall have type Name</description>
			<test>containsAIS == false || AISHasTypeName == true</test>
			<error>
				<message>Entry AIS in 3DActivation has type %1 instead of type Name</message>
				<arguments>
					<argument>AISType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-AIS-Name" testNumber="6"/>
			<description>Entry AIS with type Name in 3DActivation shall have one of values: I, L</description>
			<test>AISHasTypeName != true || AISNameValue == "I" || AISNameValue == "L"</test>
			<error>
				<message>Entry AIS with type Name in 3DActivation has incorrect value %1 instead of I, L</message>
				<arguments>
					<argument>AISNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-D" testNumber="8"/>
			<description>Entry D in 3DActivation shall have type Name</description>
			<test>containsD == false || DHasTypeName == true</test>
			<error>
				<message>Entry D in 3DActivation has type %1 instead of type Name</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-D-Name" testNumber="6"/>
			<description>Entry D with type Name in 3DActivation shall have one of values: PC, PI, XD</description>
			<test>DHasTypeName != true || DNameValue == "PC" || DNameValue == "PI" || DNameValue == "XD"</test>
			<error>
				<message>Entry D with type Name in 3DActivation has incorrect value %1 instead of PC, PI, XD</message>
				<arguments>
					<argument>DNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-DIS" testNumber="8"/>
			<description>Entry DIS in 3DActivation shall have type Name</description>
			<test>containsDIS == false || DISHasTypeName == true</test>
			<error>
				<message>Entry DIS in 3DActivation has type %1 instead of type Name</message>
				<arguments>
					<argument>DISType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-DIS-Name" testNumber="6"/>
			<description>Entry DIS with type Name in 3DActivation shall have one of values: U, I, L</description>
			<test>DISHasTypeName != true || DISNameValue == "U" || DISNameValue == "I" || DISNameValue == "L"</test>
			<error>
				<message>Entry DIS with type Name in 3DActivation has incorrect value %1 instead of U, I, L</message>
				<arguments>
					<argument>DISNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-NP" testNumber="8"/>
			<description>Entry NP in 3DActivation shall have type Boolean</description>
			<test>containsNP == false || NPHasTypeBoolean == true</test>
			<error>
				<message>Entry NP in 3DActivation has type %1 instead of type Boolean</message>
				<arguments>
					<argument>NPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-Style" testNumber="8"/>
			<description>Entry Style in 3DActivation shall have type Name</description>
			<test>containsStyle == false || StyleHasTypeName == true</test>
			<error>
				<message>Entry Style in 3DActivation has type %1 instead of type Name</message>
				<arguments>
					<argument>StyleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-Style" testNumber="23"/>
			<description>Entry Style in 3DActivation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsStyle == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Style in 3DActivation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-Style-Name" testNumber="6"/>
			<description>Entry Style with type Name in 3DActivation shall have one of values: Windowed, Embedded</description>
			<test>StyleHasTypeName != true || StyleNameValue == "Embedded" || StyleNameValue == "Windowed"</test>
			<error>
				<message>Entry Style with type Name in 3DActivation has incorrect value %1 instead of Windowed, Embedded</message>
				<arguments>
					<argument>StyleNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-TB" testNumber="8"/>
			<description>Entry TB in 3DActivation shall have type Boolean</description>
			<test>containsTB == false || TBHasTypeBoolean == true</test>
			<error>
				<message>Entry TB in 3DActivation has type %1 instead of type Boolean</message>
				<arguments>
					<argument>TBType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-Transparent" testNumber="8"/>
			<description>Entry Transparent in 3DActivation shall have type Boolean</description>
			<test>containsTransparent == false || TransparentHasTypeBoolean == true</test>
			<error>
				<message>Entry Transparent in 3DActivation has type %1 instead of type Boolean</message>
				<arguments>
					<argument>TransparentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-Transparent" testNumber="23"/>
			<description>Entry Transparent in 3DActivation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTransparent == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Transparent in 3DActivation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-Window" testNumber="8"/>
			<description>Entry Window in 3DActivation shall have type Dictionary</description>
			<test>containsWindow == false || WindowHasTypeDictionary == true</test>
			<error>
				<message>Entry Window in 3DActivation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>WindowType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="3DActivation-Window" testNumber="23"/>
			<description>Entry Window in 3DActivation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsWindow == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Window in 3DActivation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DAnimationStyle">
			<id specification="ISO_32000_1_7" clause="3DAnimationStyle" testNumber="1"/>
			<description>3DAnimationStyle shall not contain entries except PC, Subtype, TM, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'PC' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DAnimationStyle contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'PC' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DAnimationStyle">
			<id specification="ISO_32000_1_7" clause="3DAnimationStyle-PC" testNumber="8"/>
			<description>Entry PC in 3DAnimationStyle shall have type Integer</description>
			<test>containsPC == false || PCHasTypeInteger == true</test>
			<error>
				<message>Entry PC in 3DAnimationStyle has type %1 instead of type Integer</message>
				<arguments>
					<argument>PCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DAnimationStyle">
			<id specification="ISO_32000_1_7" clause="3DAnimationStyle-Subtype" testNumber="8"/>
			<description>Entry Subtype in 3DAnimationStyle shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DAnimationStyle has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DAnimationStyle">
			<id specification="ISO_32000_1_7" clause="3DAnimationStyle-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in 3DAnimationStyle shall have one of values: Oscillating, None, Linear</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "None" || SubtypeNameValue == "Linear" || SubtypeNameValue == "Oscillating"</test>
			<error>
				<message>Entry Subtype with type Name in 3DAnimationStyle has incorrect value %1 instead of Oscillating, None, Linear</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DAnimationStyle">
			<id specification="ISO_32000_1_7" clause="3DAnimationStyle-TM" testNumber="8"/>
			<description>Entry TM in 3DAnimationStyle shall have type Number</description>
			<test>containsTM == false || TMHasTypeNumber == true</test>
			<error>
				<message>Entry TM in 3DAnimationStyle has type %1 instead of type Number</message>
				<arguments>
					<argument>TMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DAnimationStyle">
			<id specification="ISO_32000_1_7" clause="3DAnimationStyle-TM-Number" testNumber="14"/>
			<description>Entry TM with type Number in 3DAnimationStyle shall satisfy possible value predicate: fn:Eval(@TM &gt; 0)</description>
			<test>TMHasTypeNumber != true || TMNumberValue &gt; 0</test>
			<error>
				<message>Entry TM with type Number in 3DAnimationStyle does not satisfy possible value predicate: fn:Eval(@TM &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DAnimationStyle">
			<id specification="ISO_32000_1_7" clause="3DAnimationStyle-Type" testNumber="8"/>
			<description>Entry Type in 3DAnimationStyle shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DAnimationStyle has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DAnimationStyle">
			<id specification="ISO_32000_1_7" clause="3DAnimationStyle-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in 3DAnimationStyle shall have value 3DAnimationStyle</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DAnimationStyle"</test>
			<error>
				<message>Entry Type with type Name in 3DAnimationStyle has incorrect value %1 instead of 3DAnimationStyle</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="3DBackground" testNumber="1"/>
			<description>3DBackground shall not contain entries except C, CS, EA, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'CS' &amp;&amp; elem != 'EA' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DBackground contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'CS' &amp;&amp; elem != 'EA' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="3DBackground-C" testNumber="8"/>
			<description>Entry C in 3DBackground shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in 3DBackground has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="3DBackground-CS" testNumber="8"/>
			<description>Entry CS in 3DBackground shall have type Name</description>
			<test>containsCS == false || CSHasTypeName == true</test>
			<error>
				<message>Entry CS in 3DBackground has type %1 instead of type Name</message>
				<arguments>
					<argument>CSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="3DBackground-CS-Name" testNumber="6"/>
			<description>Entry CS with type Name in 3DBackground shall have value DeviceRGB</description>
			<test>CSHasTypeName != true || CSNameValue == "DeviceRGB"</test>
			<error>
				<message>Entry CS with type Name in 3DBackground has incorrect value %1 instead of DeviceRGB</message>
				<arguments>
					<argument>CSNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="3DBackground-EA" testNumber="8"/>
			<description>Entry EA in 3DBackground shall have type Boolean</description>
			<test>containsEA == false || EAHasTypeBoolean == true</test>
			<error>
				<message>Entry EA in 3DBackground has type %1 instead of type Boolean</message>
				<arguments>
					<argument>EAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="3DBackground-Subtype" testNumber="8"/>
			<description>Entry Subtype in 3DBackground shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DBackground has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="3DBackground-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in 3DBackground shall have value SC</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "SC"</test>
			<error>
				<message>Entry Subtype with type Name in 3DBackground has incorrect value %1 instead of SC</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="3DBackground-Type" testNumber="8"/>
			<description>Entry Type in 3DBackground shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DBackground has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="3DBackground-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in 3DBackground shall have value 3DBG</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DBG"</test>
			<error>
				<message>Entry Type with type Name in 3DBackground has incorrect value %1 instead of 3DBG</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="3DCrossSection" testNumber="1"/>
			<description>3DCrossSection shall not contain entries except C, IC, IV, O, PC, PO, PV, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IV' &amp;&amp; elem != 'O' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'PO' &amp;&amp; elem != 'PV' &amp;&amp; elem != 'SC' &amp;&amp; elem != 'ST' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DCrossSection contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IV' &amp;&amp; elem != 'O' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'PO' &amp;&amp; elem != 'PV' &amp;&amp; elem != 'SC' &amp;&amp; elem != 'ST' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="3DCrossSection" testNumber="22"/>
			<description>3DCrossSection shall not contain entries SC, ST in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'SC' || elem == 'ST').length == 0</test>
			<error>
				<message>3DCrossSection contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'SC' || elem == 'ST').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="3DCrossSection-C" testNumber="8"/>
			<description>Entry C in 3DCrossSection shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in 3DCrossSection has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="3DCrossSection-IC" testNumber="8"/>
			<description>Entry IC in 3DCrossSection shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in 3DCrossSection has type %1 instead of type Array</message>
				<arguments>
					<argument>ICType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="3DCrossSection-IV" testNumber="8"/>
			<description>Entry IV in 3DCrossSection shall have type Boolean</description>
			<test>containsIV == false || IVHasTypeBoolean == true</test>
			<error>
				<message>Entry IV in 3DCrossSection has type %1 instead of type Boolean</message>
				<arguments>
					<argument>IVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="3DCrossSection-O" testNumber="8"/>
			<description>Entry O in 3DCrossSection shall have type Array</description>
			<test>containsO == false || OHasTypeArray == true</test>
			<error>
				<message>Entry O in 3DCrossSection has type %1 instead of type Array</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="3DCrossSection-O" testNumber="7"/>
			<description>Entry O in 3DCrossSection is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in 3DCrossSection is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="3DCrossSection-PC" testNumber="8"/>
			<description>Entry PC in 3DCrossSection shall have type Array</description>
			<test>containsPC == false || PCHasTypeArray == true</test>
			<error>
				<message>Entry PC in 3DCrossSection has type %1 instead of type Array</message>
				<arguments>
					<argument>PCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="3DCrossSection-PO" testNumber="8"/>
			<description>Entry PO in 3DCrossSection shall have type Number</description>
			<test>containsPO == false || POHasTypeNumber == true</test>
			<error>
				<message>Entry PO in 3DCrossSection has type %1 instead of type Number</message>
				<arguments>
					<argument>POType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="3DCrossSection-PO-Number" testNumber="14"/>
			<description>Entry PO with type Number in 3DCrossSection shall satisfy possible value predicate: fn:Eval((@PO &gt;= 0) &amp;&amp; (@PO &lt;= 1))</description>
			<test>POHasTypeNumber != true || (PONumberValue &gt;= 0) &amp;&amp; (PONumberValue &lt;= 1)</test>
			<error>
				<message>Entry PO with type Number in 3DCrossSection does not satisfy possible value predicate: fn:Eval((@PO &gt;= 0) &amp;&amp; (@PO &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="3DCrossSection-PV" testNumber="8"/>
			<description>Entry PV in 3DCrossSection shall have type Boolean</description>
			<test>containsPV == false || PVHasTypeBoolean == true</test>
			<error>
				<message>Entry PV in 3DCrossSection has type %1 instead of type Boolean</message>
				<arguments>
					<argument>PVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="3DCrossSection-Type" testNumber="8"/>
			<description>Entry Type in 3DCrossSection shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DCrossSection has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="3DCrossSection-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in 3DCrossSection shall have value 3DCrossSection</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DCrossSection"</test>
			<error>
				<message>Entry Type with type Name in 3DCrossSection has incorrect value %1 instead of 3DCrossSection</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DLightingScheme">
			<id specification="ISO_32000_1_7" clause="3DLightingScheme" testNumber="1"/>
			<description>3DLightingScheme shall not contain entries except Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DLightingScheme contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DLightingScheme">
			<id specification="ISO_32000_1_7" clause="3DLightingScheme-Subtype" testNumber="8"/>
			<description>Entry Subtype in 3DLightingScheme shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DLightingScheme has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DLightingScheme">
			<id specification="ISO_32000_1_7" clause="3DLightingScheme-Subtype" testNumber="7"/>
			<description>Entry Subtype in 3DLightingScheme is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in 3DLightingScheme is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DLightingScheme">
			<id specification="ISO_32000_1_7" clause="3DLightingScheme-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in 3DLightingScheme shall have one of values: Red, Artwork, White, Night, Blue, Cube, Primary, CAD, Hard, Headlamp, None, Day</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Artwork" || SubtypeNameValue == "None" || SubtypeNameValue == "White" || SubtypeNameValue == "Day" || SubtypeNameValue == "Night" || SubtypeNameValue == "Hard" || SubtypeNameValue == "Primary" || SubtypeNameValue == "Blue" || SubtypeNameValue == "Red" || SubtypeNameValue == "Cube" || SubtypeNameValue == "CAD" || SubtypeNameValue == "Headlamp"</test>
			<error>
				<message>Entry Subtype with type Name in 3DLightingScheme has incorrect value %1 instead of Red, Artwork, White, Night, Blue, Cube, Primary, CAD, Hard, Headlamp, None, Day</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DLightingScheme">
			<id specification="ISO_32000_1_7" clause="3DLightingScheme-Type" testNumber="8"/>
			<description>Entry Type in 3DLightingScheme shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DLightingScheme has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DLightingScheme">
			<id specification="ISO_32000_1_7" clause="3DLightingScheme-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in 3DLightingScheme shall have value 3DLightingScheme</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DLightingScheme"</test>
			<error>
				<message>Entry Type with type Name in 3DLightingScheme has incorrect value %1 instead of 3DLightingScheme</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC" testNumber="1"/>
			<description>3DMeasure3DC shall not contain entries except A1, C, N1, S, Subtype, TB, TP, TRL, TS, Type, UT</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A1' &amp;&amp; elem != 'C' &amp;&amp; elem != 'N1' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TB' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UT' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DMeasure3DC contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A1' &amp;&amp; elem != 'C' &amp;&amp; elem != 'N1' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TB' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UT' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-A1" testNumber="8"/>
			<description>Entry A1 in 3DMeasure3DC shall have type Array</description>
			<test>containsA1 == false || A1HasTypeArray == true</test>
			<error>
				<message>Entry A1 in 3DMeasure3DC has type %1 instead of type Array</message>
				<arguments>
					<argument>A1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-A1" testNumber="7"/>
			<description>Entry A1 in 3DMeasure3DC is required</description>
			<test>containsA1 == true</test>
			<error>
				<message>Entry A1 in 3DMeasure3DC is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-A1" testNumber="23"/>
			<description>Entry A1 in 3DMeasure3DC can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsA1 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry A1 in 3DMeasure3DC is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-C" testNumber="8"/>
			<description>Entry C in 3DMeasure3DC shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in 3DMeasure3DC has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-C" testNumber="23"/>
			<description>Entry C in 3DMeasure3DC can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsC == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry C in 3DMeasure3DC is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-N1" testNumber="8"/>
			<description>Entry N1 in 3DMeasure3DC shall have type StringText</description>
			<test>containsN1 == false || N1HasTypeStringText == true</test>
			<error>
				<message>Entry N1 in 3DMeasure3DC has type %1 instead of type StringText</message>
				<arguments>
					<argument>N1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-N1" testNumber="23"/>
			<description>Entry N1 in 3DMeasure3DC can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsN1 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry N1 in 3DMeasure3DC is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-S" testNumber="8"/>
			<description>Entry S in 3DMeasure3DC shall have type Dictionary</description>
			<test>containsS == false || SHasTypeDictionary == true</test>
			<error>
				<message>Entry S in 3DMeasure3DC has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-S" testNumber="23"/>
			<description>Entry S in 3DMeasure3DC can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry S in 3DMeasure3DC is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-S-Dictionary" testNumber="10"/>
			<description>Entry S with type Dictionary in 3DMeasure3DC shall be indirect</description>
			<test>SHasTypeDictionary != true || isSIndirect == true</test>
			<error>
				<message>Entry S with type Dictionary in 3DMeasure3DC is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-Subtype" testNumber="8"/>
			<description>Entry Subtype in 3DMeasure3DC shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DMeasure3DC has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-Subtype" testNumber="7"/>
			<description>Entry Subtype in 3DMeasure3DC is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in 3DMeasure3DC is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-Subtype" testNumber="23"/>
			<description>Entry Subtype in 3DMeasure3DC can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSubtype == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Subtype in 3DMeasure3DC is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in 3DMeasure3DC shall have value 3DC</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "3DC"</test>
			<error>
				<message>Entry Subtype with type Name in 3DMeasure3DC has incorrect value %1 instead of 3DC</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-TB" testNumber="8"/>
			<description>Entry TB in 3DMeasure3DC shall have type Array</description>
			<test>containsTB == false || TBHasTypeArray == true</test>
			<error>
				<message>Entry TB in 3DMeasure3DC has type %1 instead of type Array</message>
				<arguments>
					<argument>TBType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-TB" testNumber="23"/>
			<description>Entry TB in 3DMeasure3DC can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTB == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TB in 3DMeasure3DC is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-TP" testNumber="8"/>
			<description>Entry TP in 3DMeasure3DC shall have type Array</description>
			<test>containsTP == false || TPHasTypeArray == true</test>
			<error>
				<message>Entry TP in 3DMeasure3DC has type %1 instead of type Array</message>
				<arguments>
					<argument>TPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-TP" testNumber="7"/>
			<description>Entry TP in 3DMeasure3DC is required</description>
			<test>containsTP == true</test>
			<error>
				<message>Entry TP in 3DMeasure3DC is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-TP" testNumber="23"/>
			<description>Entry TP in 3DMeasure3DC can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TP in 3DMeasure3DC is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-TRL" testNumber="8"/>
			<description>Entry TRL in 3DMeasure3DC shall have type StringText</description>
			<test>containsTRL == false || TRLHasTypeStringText == true</test>
			<error>
				<message>Entry TRL in 3DMeasure3DC has type %1 instead of type StringText</message>
				<arguments>
					<argument>TRLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-TRL" testNumber="23"/>
			<description>Entry TRL in 3DMeasure3DC can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTRL == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TRL in 3DMeasure3DC is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-TS" testNumber="8"/>
			<description>Entry TS in 3DMeasure3DC shall have type Number</description>
			<test>containsTS == false || TSHasTypeNumber == true</test>
			<error>
				<message>Entry TS in 3DMeasure3DC has type %1 instead of type Number</message>
				<arguments>
					<argument>TSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-TS" testNumber="23"/>
			<description>Entry TS in 3DMeasure3DC can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TS in 3DMeasure3DC is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-Type" testNumber="8"/>
			<description>Entry Type in 3DMeasure3DC shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DMeasure3DC has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-Type" testNumber="23"/>
			<description>Entry Type in 3DMeasure3DC can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in 3DMeasure3DC is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in 3DMeasure3DC shall have value 3DMeasure</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DMeasure"</test>
			<error>
				<message>Entry Type with type Name in 3DMeasure3DC has incorrect value %1 instead of 3DMeasure</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-UT" testNumber="8"/>
			<description>Entry UT in 3DMeasure3DC shall have type StringText</description>
			<test>containsUT == false || UTHasTypeStringText == true</test>
			<error>
				<message>Entry UT in 3DMeasure3DC has type %1 instead of type StringText</message>
				<arguments>
					<argument>UTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="3DMeasure3DC-UT" testNumber="23"/>
			<description>Entry UT in 3DMeasure3DC can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsUT == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry UT in 3DMeasure3DC is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3" testNumber="1"/>
			<description>3DMeasureAD3 shall not contain entries except A1, A2, AP, C, D1, D2, DR, N1, N2, P, S, Subtype, TP, TRL, TS, TX, TY, Type, UT, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A1' &amp;&amp; elem != 'A2' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D1' &amp;&amp; elem != 'D2' &amp;&amp; elem != 'DR' &amp;&amp; elem != 'N1' &amp;&amp; elem != 'N2' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'TX' &amp;&amp; elem != 'TY' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UT' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DMeasureAD3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A1' &amp;&amp; elem != 'A2' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D1' &amp;&amp; elem != 'D2' &amp;&amp; elem != 'DR' &amp;&amp; elem != 'N1' &amp;&amp; elem != 'N2' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'TX' &amp;&amp; elem != 'TY' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UT' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-A1" testNumber="8"/>
			<description>Entry A1 in 3DMeasureAD3 shall have type Array</description>
			<test>containsA1 == false || A1HasTypeArray == true</test>
			<error>
				<message>Entry A1 in 3DMeasureAD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>A1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-A1" testNumber="7"/>
			<description>Entry A1 in 3DMeasureAD3 is required</description>
			<test>containsA1 == true</test>
			<error>
				<message>Entry A1 in 3DMeasureAD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-A1" testNumber="23"/>
			<description>Entry A1 in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsA1 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry A1 in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-A2" testNumber="8"/>
			<description>Entry A2 in 3DMeasureAD3 shall have type Array</description>
			<test>containsA2 == false || A2HasTypeArray == true</test>
			<error>
				<message>Entry A2 in 3DMeasureAD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>A2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-A2" testNumber="7"/>
			<description>Entry A2 in 3DMeasureAD3 is required</description>
			<test>containsA2 == true</test>
			<error>
				<message>Entry A2 in 3DMeasureAD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-A2" testNumber="23"/>
			<description>Entry A2 in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsA2 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry A2 in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-AP" testNumber="8"/>
			<description>Entry AP in 3DMeasureAD3 shall have type Array</description>
			<test>containsAP == false || APHasTypeArray == true</test>
			<error>
				<message>Entry AP in 3DMeasureAD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-AP" testNumber="7"/>
			<description>Entry AP in 3DMeasureAD3 is required</description>
			<test>containsAP == true</test>
			<error>
				<message>Entry AP in 3DMeasureAD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-AP" testNumber="23"/>
			<description>Entry AP in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsAP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry AP in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-C" testNumber="8"/>
			<description>Entry C in 3DMeasureAD3 shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in 3DMeasureAD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-C" testNumber="23"/>
			<description>Entry C in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsC == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry C in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-D1" testNumber="8"/>
			<description>Entry D1 in 3DMeasureAD3 shall have type Array</description>
			<test>containsD1 == false || D1HasTypeArray == true</test>
			<error>
				<message>Entry D1 in 3DMeasureAD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>D1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-D1" testNumber="7"/>
			<description>Entry D1 in 3DMeasureAD3 is required</description>
			<test>containsD1 == true</test>
			<error>
				<message>Entry D1 in 3DMeasureAD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-D1" testNumber="23"/>
			<description>Entry D1 in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsD1 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry D1 in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-D2" testNumber="8"/>
			<description>Entry D2 in 3DMeasureAD3 shall have type Array</description>
			<test>containsD2 == false || D2HasTypeArray == true</test>
			<error>
				<message>Entry D2 in 3DMeasureAD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>D2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-D2" testNumber="7"/>
			<description>Entry D2 in 3DMeasureAD3 is required</description>
			<test>containsD2 == true</test>
			<error>
				<message>Entry D2 in 3DMeasureAD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-D2" testNumber="23"/>
			<description>Entry D2 in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsD2 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry D2 in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-DR" testNumber="8"/>
			<description>Entry DR in 3DMeasureAD3 shall have type Boolean</description>
			<test>containsDR == false || DRHasTypeBoolean == true</test>
			<error>
				<message>Entry DR in 3DMeasureAD3 has type %1 instead of type Boolean</message>
				<arguments>
					<argument>DRType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-DR" testNumber="23"/>
			<description>Entry DR in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsDR == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry DR in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-N1" testNumber="8"/>
			<description>Entry N1 in 3DMeasureAD3 shall have type StringText</description>
			<test>containsN1 == false || N1HasTypeStringText == true</test>
			<error>
				<message>Entry N1 in 3DMeasureAD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>N1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-N1" testNumber="23"/>
			<description>Entry N1 in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsN1 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry N1 in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-N2" testNumber="8"/>
			<description>Entry N2 in 3DMeasureAD3 shall have type StringText</description>
			<test>containsN2 == false || N2HasTypeStringText == true</test>
			<error>
				<message>Entry N2 in 3DMeasureAD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>N2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-N2" testNumber="23"/>
			<description>Entry N2 in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsN2 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry N2 in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-P" testNumber="8"/>
			<description>Entry P in 3DMeasureAD3 shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in 3DMeasureAD3 has type %1 instead of type Integer</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-P" testNumber="23"/>
			<description>Entry P in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry P in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-P-Integer" testNumber="14"/>
			<description>Entry P with type Integer in 3DMeasureAD3 shall satisfy possible value predicate: fn:Eval(@P &gt;= 0)</description>
			<test>PHasTypeInteger != true || PIntegerValue &gt;= 0</test>
			<error>
				<message>Entry P with type Integer in 3DMeasureAD3 does not satisfy possible value predicate: fn:Eval(@P &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-S" testNumber="8"/>
			<description>Entry S in 3DMeasureAD3 shall have type Dictionary</description>
			<test>containsS == false || SHasTypeDictionary == true</test>
			<error>
				<message>Entry S in 3DMeasureAD3 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-S" testNumber="23"/>
			<description>Entry S in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry S in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-S-Dictionary" testNumber="10"/>
			<description>Entry S with type Dictionary in 3DMeasureAD3 shall be indirect</description>
			<test>SHasTypeDictionary != true || isSIndirect == true</test>
			<error>
				<message>Entry S with type Dictionary in 3DMeasureAD3 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-Subtype" testNumber="8"/>
			<description>Entry Subtype in 3DMeasureAD3 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DMeasureAD3 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-Subtype" testNumber="7"/>
			<description>Entry Subtype in 3DMeasureAD3 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in 3DMeasureAD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-Subtype" testNumber="23"/>
			<description>Entry Subtype in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSubtype == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Subtype in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in 3DMeasureAD3 shall have value AD3</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "AD3"</test>
			<error>
				<message>Entry Subtype with type Name in 3DMeasureAD3 has incorrect value %1 instead of AD3</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-TP" testNumber="8"/>
			<description>Entry TP in 3DMeasureAD3 shall have type Array</description>
			<test>containsTP == false || TPHasTypeArray == true</test>
			<error>
				<message>Entry TP in 3DMeasureAD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>TPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-TP" testNumber="7"/>
			<description>Entry TP in 3DMeasureAD3 is required</description>
			<test>containsTP == true</test>
			<error>
				<message>Entry TP in 3DMeasureAD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-TP" testNumber="23"/>
			<description>Entry TP in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TP in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-TRL" testNumber="8"/>
			<description>Entry TRL in 3DMeasureAD3 shall have type StringText</description>
			<test>containsTRL == false || TRLHasTypeStringText == true</test>
			<error>
				<message>Entry TRL in 3DMeasureAD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>TRLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-TRL" testNumber="23"/>
			<description>Entry TRL in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTRL == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TRL in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-TS" testNumber="8"/>
			<description>Entry TS in 3DMeasureAD3 shall have type Number</description>
			<test>containsTS == false || TSHasTypeNumber == true</test>
			<error>
				<message>Entry TS in 3DMeasureAD3 has type %1 instead of type Number</message>
				<arguments>
					<argument>TSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-TS" testNumber="23"/>
			<description>Entry TS in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TS in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-TX" testNumber="8"/>
			<description>Entry TX in 3DMeasureAD3 shall have type Array</description>
			<test>containsTX == false || TXHasTypeArray == true</test>
			<error>
				<message>Entry TX in 3DMeasureAD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>TXType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-TX" testNumber="7"/>
			<description>Entry TX in 3DMeasureAD3 is required</description>
			<test>containsTX == true</test>
			<error>
				<message>Entry TX in 3DMeasureAD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-TX" testNumber="23"/>
			<description>Entry TX in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTX == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TX in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-TY" testNumber="8"/>
			<description>Entry TY in 3DMeasureAD3 shall have type Array</description>
			<test>containsTY == false || TYHasTypeArray == true</test>
			<error>
				<message>Entry TY in 3DMeasureAD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>TYType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-TY" testNumber="7"/>
			<description>Entry TY in 3DMeasureAD3 is required</description>
			<test>containsTY == true</test>
			<error>
				<message>Entry TY in 3DMeasureAD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-TY" testNumber="23"/>
			<description>Entry TY in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTY == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TY in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-Type" testNumber="8"/>
			<description>Entry Type in 3DMeasureAD3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DMeasureAD3 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-Type" testNumber="23"/>
			<description>Entry Type in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in 3DMeasureAD3 shall have value 3DMeasure</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DMeasure"</test>
			<error>
				<message>Entry Type with type Name in 3DMeasureAD3 has incorrect value %1 instead of 3DMeasure</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-UT" testNumber="8"/>
			<description>Entry UT in 3DMeasureAD3 shall have type StringText</description>
			<test>containsUT == false || UTHasTypeStringText == true</test>
			<error>
				<message>Entry UT in 3DMeasureAD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>UTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-UT" testNumber="23"/>
			<description>Entry UT in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsUT == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry UT in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-V" testNumber="8"/>
			<description>Entry V in 3DMeasureAD3 shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in 3DMeasureAD3 has type %1 instead of type Number</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-V" testNumber="7"/>
			<description>Entry V in 3DMeasureAD3 is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in 3DMeasureAD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureAD3-V" testNumber="23"/>
			<description>Entry V in 3DMeasureAD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsV == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry V in 3DMeasureAD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3" testNumber="1"/>
			<description>3DMeasureLD3 shall not contain entries except A1, A2, AP, C, N1, N2, P, S, Subtype, TP, TRL, TS, TY, Type, U, UT, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A1' &amp;&amp; elem != 'A2' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'C' &amp;&amp; elem != 'N1' &amp;&amp; elem != 'N2' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'TY' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U' &amp;&amp; elem != 'UT' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DMeasureLD3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A1' &amp;&amp; elem != 'A2' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'C' &amp;&amp; elem != 'N1' &amp;&amp; elem != 'N2' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'TY' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U' &amp;&amp; elem != 'UT' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-A1" testNumber="8"/>
			<description>Entry A1 in 3DMeasureLD3 shall have type Array</description>
			<test>containsA1 == false || A1HasTypeArray == true</test>
			<error>
				<message>Entry A1 in 3DMeasureLD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>A1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-A1" testNumber="7"/>
			<description>Entry A1 in 3DMeasureLD3 is required</description>
			<test>containsA1 == true</test>
			<error>
				<message>Entry A1 in 3DMeasureLD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-A1" testNumber="23"/>
			<description>Entry A1 in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsA1 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry A1 in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-A2" testNumber="8"/>
			<description>Entry A2 in 3DMeasureLD3 shall have type Array</description>
			<test>containsA2 == false || A2HasTypeArray == true</test>
			<error>
				<message>Entry A2 in 3DMeasureLD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>A2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-A2" testNumber="7"/>
			<description>Entry A2 in 3DMeasureLD3 is required</description>
			<test>containsA2 == true</test>
			<error>
				<message>Entry A2 in 3DMeasureLD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-A2" testNumber="23"/>
			<description>Entry A2 in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsA2 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry A2 in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-AP" testNumber="8"/>
			<description>Entry AP in 3DMeasureLD3 shall have type Array</description>
			<test>containsAP == false || APHasTypeArray == true</test>
			<error>
				<message>Entry AP in 3DMeasureLD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-AP" testNumber="7"/>
			<description>Entry AP in 3DMeasureLD3 is required</description>
			<test>containsAP == true</test>
			<error>
				<message>Entry AP in 3DMeasureLD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-AP" testNumber="23"/>
			<description>Entry AP in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsAP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry AP in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-C" testNumber="8"/>
			<description>Entry C in 3DMeasureLD3 shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in 3DMeasureLD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-C" testNumber="23"/>
			<description>Entry C in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsC == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry C in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-N1" testNumber="8"/>
			<description>Entry N1 in 3DMeasureLD3 shall have type StringText</description>
			<test>containsN1 == false || N1HasTypeStringText == true</test>
			<error>
				<message>Entry N1 in 3DMeasureLD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>N1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-N1" testNumber="23"/>
			<description>Entry N1 in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsN1 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry N1 in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-N2" testNumber="8"/>
			<description>Entry N2 in 3DMeasureLD3 shall have type StringText</description>
			<test>containsN2 == false || N2HasTypeStringText == true</test>
			<error>
				<message>Entry N2 in 3DMeasureLD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>N2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-N2" testNumber="23"/>
			<description>Entry N2 in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsN2 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry N2 in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-P" testNumber="8"/>
			<description>Entry P in 3DMeasureLD3 shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in 3DMeasureLD3 has type %1 instead of type Integer</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-P" testNumber="23"/>
			<description>Entry P in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry P in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-P-Integer" testNumber="14"/>
			<description>Entry P with type Integer in 3DMeasureLD3 shall satisfy possible value predicate: fn:Eval(@P &gt;= 0)</description>
			<test>PHasTypeInteger != true || PIntegerValue &gt;= 0</test>
			<error>
				<message>Entry P with type Integer in 3DMeasureLD3 does not satisfy possible value predicate: fn:Eval(@P &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-S" testNumber="8"/>
			<description>Entry S in 3DMeasureLD3 shall have type Dictionary</description>
			<test>containsS == false || SHasTypeDictionary == true</test>
			<error>
				<message>Entry S in 3DMeasureLD3 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-S" testNumber="23"/>
			<description>Entry S in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry S in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-S-Dictionary" testNumber="10"/>
			<description>Entry S with type Dictionary in 3DMeasureLD3 shall be indirect</description>
			<test>SHasTypeDictionary != true || isSIndirect == true</test>
			<error>
				<message>Entry S with type Dictionary in 3DMeasureLD3 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-Subtype" testNumber="8"/>
			<description>Entry Subtype in 3DMeasureLD3 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DMeasureLD3 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-Subtype" testNumber="7"/>
			<description>Entry Subtype in 3DMeasureLD3 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in 3DMeasureLD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-Subtype" testNumber="23"/>
			<description>Entry Subtype in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSubtype == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Subtype in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in 3DMeasureLD3 shall have value LD3</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "LD3"</test>
			<error>
				<message>Entry Subtype with type Name in 3DMeasureLD3 has incorrect value %1 instead of LD3</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-TP" testNumber="8"/>
			<description>Entry TP in 3DMeasureLD3 shall have type Array</description>
			<test>containsTP == false || TPHasTypeArray == true</test>
			<error>
				<message>Entry TP in 3DMeasureLD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>TPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-TP" testNumber="7"/>
			<description>Entry TP in 3DMeasureLD3 is required</description>
			<test>containsTP == true</test>
			<error>
				<message>Entry TP in 3DMeasureLD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-TP" testNumber="23"/>
			<description>Entry TP in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TP in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-TRL" testNumber="8"/>
			<description>Entry TRL in 3DMeasureLD3 shall have type StringText</description>
			<test>containsTRL == false || TRLHasTypeStringText == true</test>
			<error>
				<message>Entry TRL in 3DMeasureLD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>TRLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-TRL" testNumber="23"/>
			<description>Entry TRL in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTRL == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TRL in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-TS" testNumber="8"/>
			<description>Entry TS in 3DMeasureLD3 shall have type Number</description>
			<test>containsTS == false || TSHasTypeNumber == true</test>
			<error>
				<message>Entry TS in 3DMeasureLD3 has type %1 instead of type Number</message>
				<arguments>
					<argument>TSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-TS" testNumber="23"/>
			<description>Entry TS in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TS in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-TY" testNumber="8"/>
			<description>Entry TY in 3DMeasureLD3 shall have type Array</description>
			<test>containsTY == false || TYHasTypeArray == true</test>
			<error>
				<message>Entry TY in 3DMeasureLD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>TYType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-TY" testNumber="7"/>
			<description>Entry TY in 3DMeasureLD3 is required</description>
			<test>containsTY == true</test>
			<error>
				<message>Entry TY in 3DMeasureLD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-TY" testNumber="23"/>
			<description>Entry TY in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTY == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TY in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-Type" testNumber="8"/>
			<description>Entry Type in 3DMeasureLD3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DMeasureLD3 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-Type" testNumber="23"/>
			<description>Entry Type in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in 3DMeasureLD3 shall have value 3DMeasure</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DMeasure"</test>
			<error>
				<message>Entry Type with type Name in 3DMeasureLD3 has incorrect value %1 instead of 3DMeasure</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-U" testNumber="8"/>
			<description>Entry U in 3DMeasureLD3 shall have type StringText</description>
			<test>containsU == false || UHasTypeStringText == true</test>
			<error>
				<message>Entry U in 3DMeasureLD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>UType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-U" testNumber="7"/>
			<description>Entry U in 3DMeasureLD3 is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in 3DMeasureLD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-U" testNumber="23"/>
			<description>Entry U in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsU == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry U in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-UT" testNumber="8"/>
			<description>Entry UT in 3DMeasureLD3 shall have type StringText</description>
			<test>containsUT == false || UTHasTypeStringText == true</test>
			<error>
				<message>Entry UT in 3DMeasureLD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>UTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-UT" testNumber="23"/>
			<description>Entry UT in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsUT == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry UT in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-V" testNumber="8"/>
			<description>Entry V in 3DMeasureLD3 shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in 3DMeasureLD3 has type %1 instead of type Number</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-V" testNumber="7"/>
			<description>Entry V in 3DMeasureLD3 is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in 3DMeasureLD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureLD3-V" testNumber="23"/>
			<description>Entry V in 3DMeasureLD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsV == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry V in 3DMeasureLD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3" testNumber="1"/>
			<description>3DMeasurePD3 shall not contain entries except A1, A2, AP, C, D1, N1, N2, P, S, Subtype, TP, TRL, TS, TY, Type, U, UT, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A1' &amp;&amp; elem != 'A2' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D1' &amp;&amp; elem != 'N1' &amp;&amp; elem != 'N2' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'TY' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U' &amp;&amp; elem != 'UT' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DMeasurePD3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A1' &amp;&amp; elem != 'A2' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D1' &amp;&amp; elem != 'N1' &amp;&amp; elem != 'N2' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'TY' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U' &amp;&amp; elem != 'UT' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-A1" testNumber="8"/>
			<description>Entry A1 in 3DMeasurePD3 shall have type Array</description>
			<test>containsA1 == false || A1HasTypeArray == true</test>
			<error>
				<message>Entry A1 in 3DMeasurePD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>A1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-A1" testNumber="7"/>
			<description>Entry A1 in 3DMeasurePD3 is required</description>
			<test>containsA1 == true</test>
			<error>
				<message>Entry A1 in 3DMeasurePD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-A1" testNumber="23"/>
			<description>Entry A1 in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsA1 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry A1 in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-A2" testNumber="8"/>
			<description>Entry A2 in 3DMeasurePD3 shall have type Array</description>
			<test>containsA2 == false || A2HasTypeArray == true</test>
			<error>
				<message>Entry A2 in 3DMeasurePD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>A2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-A2" testNumber="7"/>
			<description>Entry A2 in 3DMeasurePD3 is required</description>
			<test>containsA2 == true</test>
			<error>
				<message>Entry A2 in 3DMeasurePD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-A2" testNumber="23"/>
			<description>Entry A2 in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsA2 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry A2 in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-AP" testNumber="8"/>
			<description>Entry AP in 3DMeasurePD3 shall have type Array</description>
			<test>containsAP == false || APHasTypeArray == true</test>
			<error>
				<message>Entry AP in 3DMeasurePD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-AP" testNumber="7"/>
			<description>Entry AP in 3DMeasurePD3 is required</description>
			<test>containsAP == true</test>
			<error>
				<message>Entry AP in 3DMeasurePD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-AP" testNumber="23"/>
			<description>Entry AP in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsAP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry AP in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-C" testNumber="8"/>
			<description>Entry C in 3DMeasurePD3 shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in 3DMeasurePD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-C" testNumber="23"/>
			<description>Entry C in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsC == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry C in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-D1" testNumber="8"/>
			<description>Entry D1 in 3DMeasurePD3 shall have type Array</description>
			<test>containsD1 == false || D1HasTypeArray == true</test>
			<error>
				<message>Entry D1 in 3DMeasurePD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>D1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-D1" testNumber="7"/>
			<description>Entry D1 in 3DMeasurePD3 is required</description>
			<test>containsD1 == true</test>
			<error>
				<message>Entry D1 in 3DMeasurePD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-D1" testNumber="23"/>
			<description>Entry D1 in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsD1 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry D1 in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-N1" testNumber="8"/>
			<description>Entry N1 in 3DMeasurePD3 shall have type StringText</description>
			<test>containsN1 == false || N1HasTypeStringText == true</test>
			<error>
				<message>Entry N1 in 3DMeasurePD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>N1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-N1" testNumber="23"/>
			<description>Entry N1 in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsN1 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry N1 in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-N2" testNumber="8"/>
			<description>Entry N2 in 3DMeasurePD3 shall have type StringText</description>
			<test>containsN2 == false || N2HasTypeStringText == true</test>
			<error>
				<message>Entry N2 in 3DMeasurePD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>N2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-N2" testNumber="23"/>
			<description>Entry N2 in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsN2 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry N2 in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-P" testNumber="8"/>
			<description>Entry P in 3DMeasurePD3 shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in 3DMeasurePD3 has type %1 instead of type Integer</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-P" testNumber="23"/>
			<description>Entry P in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry P in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-P-Integer" testNumber="14"/>
			<description>Entry P with type Integer in 3DMeasurePD3 shall satisfy possible value predicate: fn:Eval(@P &gt;= 0)</description>
			<test>PHasTypeInteger != true || PIntegerValue &gt;= 0</test>
			<error>
				<message>Entry P with type Integer in 3DMeasurePD3 does not satisfy possible value predicate: fn:Eval(@P &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-S" testNumber="8"/>
			<description>Entry S in 3DMeasurePD3 shall have type Dictionary</description>
			<test>containsS == false || SHasTypeDictionary == true</test>
			<error>
				<message>Entry S in 3DMeasurePD3 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-S" testNumber="23"/>
			<description>Entry S in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry S in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-S-Dictionary" testNumber="10"/>
			<description>Entry S with type Dictionary in 3DMeasurePD3 shall be indirect</description>
			<test>SHasTypeDictionary != true || isSIndirect == true</test>
			<error>
				<message>Entry S with type Dictionary in 3DMeasurePD3 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-Subtype" testNumber="8"/>
			<description>Entry Subtype in 3DMeasurePD3 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DMeasurePD3 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-Subtype" testNumber="7"/>
			<description>Entry Subtype in 3DMeasurePD3 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in 3DMeasurePD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-Subtype" testNumber="23"/>
			<description>Entry Subtype in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSubtype == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Subtype in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in 3DMeasurePD3 shall have value PD3</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PD3"</test>
			<error>
				<message>Entry Subtype with type Name in 3DMeasurePD3 has incorrect value %1 instead of PD3</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-TP" testNumber="8"/>
			<description>Entry TP in 3DMeasurePD3 shall have type Array</description>
			<test>containsTP == false || TPHasTypeArray == true</test>
			<error>
				<message>Entry TP in 3DMeasurePD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>TPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-TP" testNumber="7"/>
			<description>Entry TP in 3DMeasurePD3 is required</description>
			<test>containsTP == true</test>
			<error>
				<message>Entry TP in 3DMeasurePD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-TP" testNumber="23"/>
			<description>Entry TP in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TP in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-TRL" testNumber="8"/>
			<description>Entry TRL in 3DMeasurePD3 shall have type StringText</description>
			<test>containsTRL == false || TRLHasTypeStringText == true</test>
			<error>
				<message>Entry TRL in 3DMeasurePD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>TRLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-TRL" testNumber="23"/>
			<description>Entry TRL in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTRL == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TRL in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-TS" testNumber="8"/>
			<description>Entry TS in 3DMeasurePD3 shall have type Number</description>
			<test>containsTS == false || TSHasTypeNumber == true</test>
			<error>
				<message>Entry TS in 3DMeasurePD3 has type %1 instead of type Number</message>
				<arguments>
					<argument>TSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-TS" testNumber="23"/>
			<description>Entry TS in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TS in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-TY" testNumber="8"/>
			<description>Entry TY in 3DMeasurePD3 shall have type Array</description>
			<test>containsTY == false || TYHasTypeArray == true</test>
			<error>
				<message>Entry TY in 3DMeasurePD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>TYType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-TY" testNumber="7"/>
			<description>Entry TY in 3DMeasurePD3 is required</description>
			<test>containsTY == true</test>
			<error>
				<message>Entry TY in 3DMeasurePD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-TY" testNumber="23"/>
			<description>Entry TY in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTY == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TY in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-Type" testNumber="8"/>
			<description>Entry Type in 3DMeasurePD3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DMeasurePD3 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-Type" testNumber="23"/>
			<description>Entry Type in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in 3DMeasurePD3 shall have value 3DMeasure</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DMeasure"</test>
			<error>
				<message>Entry Type with type Name in 3DMeasurePD3 has incorrect value %1 instead of 3DMeasure</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-U" testNumber="8"/>
			<description>Entry U in 3DMeasurePD3 shall have type StringText</description>
			<test>containsU == false || UHasTypeStringText == true</test>
			<error>
				<message>Entry U in 3DMeasurePD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>UType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-U" testNumber="7"/>
			<description>Entry U in 3DMeasurePD3 is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in 3DMeasurePD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-U" testNumber="23"/>
			<description>Entry U in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsU == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry U in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-UT" testNumber="8"/>
			<description>Entry UT in 3DMeasurePD3 shall have type StringText</description>
			<test>containsUT == false || UTHasTypeStringText == true</test>
			<error>
				<message>Entry UT in 3DMeasurePD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>UTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-UT" testNumber="23"/>
			<description>Entry UT in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsUT == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry UT in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-V" testNumber="8"/>
			<description>Entry V in 3DMeasurePD3 shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in 3DMeasurePD3 has type %1 instead of type Number</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-V" testNumber="7"/>
			<description>Entry V in 3DMeasurePD3 is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in 3DMeasurePD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="3DMeasurePD3-V" testNumber="23"/>
			<description>Entry V in 3DMeasurePD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsV == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry V in 3DMeasurePD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3" testNumber="1"/>
			<description>3DMeasureRD3 shall not contain entries except A1, A2, A3, A4, AP, C, EL, N2, P, R, S, SC, Subtype, TP, TRL, TS, TX, TY, Type, U, UT, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A1' &amp;&amp; elem != 'A2' &amp;&amp; elem != 'A3' &amp;&amp; elem != 'A4' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'C' &amp;&amp; elem != 'EL' &amp;&amp; elem != 'N2' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SC' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'TX' &amp;&amp; elem != 'TY' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U' &amp;&amp; elem != 'UT' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DMeasureRD3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A1' &amp;&amp; elem != 'A2' &amp;&amp; elem != 'A3' &amp;&amp; elem != 'A4' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'C' &amp;&amp; elem != 'EL' &amp;&amp; elem != 'N2' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SC' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'TX' &amp;&amp; elem != 'TY' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U' &amp;&amp; elem != 'UT' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-A1" testNumber="8"/>
			<description>Entry A1 in 3DMeasureRD3 shall have type Array</description>
			<test>containsA1 == false || A1HasTypeArray == true</test>
			<error>
				<message>Entry A1 in 3DMeasureRD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>A1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-A1" testNumber="7"/>
			<description>Entry A1 in 3DMeasureRD3 is required</description>
			<test>containsA1 == true</test>
			<error>
				<message>Entry A1 in 3DMeasureRD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-A1" testNumber="23"/>
			<description>Entry A1 in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsA1 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry A1 in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-A2" testNumber="8"/>
			<description>Entry A2 in 3DMeasureRD3 shall have type Array</description>
			<test>containsA2 == false || A2HasTypeArray == true</test>
			<error>
				<message>Entry A2 in 3DMeasureRD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>A2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-A2" testNumber="7"/>
			<description>Entry A2 in 3DMeasureRD3 is required</description>
			<test>containsA2 == true</test>
			<error>
				<message>Entry A2 in 3DMeasureRD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-A2" testNumber="23"/>
			<description>Entry A2 in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsA2 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry A2 in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-A3" testNumber="8"/>
			<description>Entry A3 in 3DMeasureRD3 shall have type Array</description>
			<test>containsA3 == false || A3HasTypeArray == true</test>
			<error>
				<message>Entry A3 in 3DMeasureRD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>A3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-A3" testNumber="23"/>
			<description>Entry A3 in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsA3 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry A3 in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-A4" testNumber="8"/>
			<description>Entry A4 in 3DMeasureRD3 shall have type Array</description>
			<test>containsA4 == false || A4HasTypeArray == true</test>
			<error>
				<message>Entry A4 in 3DMeasureRD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>A4Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-A4" testNumber="23"/>
			<description>Entry A4 in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsA4 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry A4 in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-AP" testNumber="8"/>
			<description>Entry AP in 3DMeasureRD3 shall have type Array</description>
			<test>containsAP == false || APHasTypeArray == true</test>
			<error>
				<message>Entry AP in 3DMeasureRD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-AP" testNumber="7"/>
			<description>Entry AP in 3DMeasureRD3 is required</description>
			<test>containsAP == true</test>
			<error>
				<message>Entry AP in 3DMeasureRD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-AP" testNumber="23"/>
			<description>Entry AP in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsAP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry AP in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-C" testNumber="8"/>
			<description>Entry C in 3DMeasureRD3 shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in 3DMeasureRD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-C" testNumber="23"/>
			<description>Entry C in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsC == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry C in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-EL" testNumber="8"/>
			<description>Entry EL in 3DMeasureRD3 shall have type Number</description>
			<test>containsEL == false || ELHasTypeNumber == true</test>
			<error>
				<message>Entry EL in 3DMeasureRD3 has type %1 instead of type Number</message>
				<arguments>
					<argument>ELType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-EL" testNumber="23"/>
			<description>Entry EL in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsEL == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry EL in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-N2" testNumber="8"/>
			<description>Entry N2 in 3DMeasureRD3 shall have type StringText</description>
			<test>containsN2 == false || N2HasTypeStringText == true</test>
			<error>
				<message>Entry N2 in 3DMeasureRD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>N2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-N2" testNumber="23"/>
			<description>Entry N2 in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsN2 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry N2 in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-P" testNumber="8"/>
			<description>Entry P in 3DMeasureRD3 shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in 3DMeasureRD3 has type %1 instead of type Integer</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-P" testNumber="23"/>
			<description>Entry P in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry P in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-P-Integer" testNumber="14"/>
			<description>Entry P with type Integer in 3DMeasureRD3 shall satisfy possible value predicate: fn:Eval(@P &gt;= 0)</description>
			<test>PHasTypeInteger != true || PIntegerValue &gt;= 0</test>
			<error>
				<message>Entry P with type Integer in 3DMeasureRD3 does not satisfy possible value predicate: fn:Eval(@P &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-R" testNumber="8"/>
			<description>Entry R in 3DMeasureRD3 shall have type Boolean</description>
			<test>containsR == false || RHasTypeBoolean == true</test>
			<error>
				<message>Entry R in 3DMeasureRD3 has type %1 instead of type Boolean</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-R" testNumber="23"/>
			<description>Entry R in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsR == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry R in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-S" testNumber="8"/>
			<description>Entry S in 3DMeasureRD3 shall have type Dictionary</description>
			<test>containsS == false || SHasTypeDictionary == true</test>
			<error>
				<message>Entry S in 3DMeasureRD3 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-S" testNumber="23"/>
			<description>Entry S in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry S in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-S-Dictionary" testNumber="10"/>
			<description>Entry S with type Dictionary in 3DMeasureRD3 shall be indirect</description>
			<test>SHasTypeDictionary != true || isSIndirect == true</test>
			<error>
				<message>Entry S with type Dictionary in 3DMeasureRD3 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-SC" testNumber="8"/>
			<description>Entry SC in 3DMeasureRD3 shall have type Boolean</description>
			<test>containsSC == false || SCHasTypeBoolean == true</test>
			<error>
				<message>Entry SC in 3DMeasureRD3 has type %1 instead of type Boolean</message>
				<arguments>
					<argument>SCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-SC" testNumber="23"/>
			<description>Entry SC in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSC == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry SC in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-Subtype" testNumber="8"/>
			<description>Entry Subtype in 3DMeasureRD3 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DMeasureRD3 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-Subtype" testNumber="7"/>
			<description>Entry Subtype in 3DMeasureRD3 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in 3DMeasureRD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-Subtype" testNumber="23"/>
			<description>Entry Subtype in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSubtype == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Subtype in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in 3DMeasureRD3 shall have value RD3</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "RD3"</test>
			<error>
				<message>Entry Subtype with type Name in 3DMeasureRD3 has incorrect value %1 instead of RD3</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-TP" testNumber="8"/>
			<description>Entry TP in 3DMeasureRD3 shall have type Array</description>
			<test>containsTP == false || TPHasTypeArray == true</test>
			<error>
				<message>Entry TP in 3DMeasureRD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>TPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-TP" testNumber="7"/>
			<description>Entry TP in 3DMeasureRD3 is required</description>
			<test>containsTP == true</test>
			<error>
				<message>Entry TP in 3DMeasureRD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-TP" testNumber="23"/>
			<description>Entry TP in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TP in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-TRL" testNumber="8"/>
			<description>Entry TRL in 3DMeasureRD3 shall have type StringText</description>
			<test>containsTRL == false || TRLHasTypeStringText == true</test>
			<error>
				<message>Entry TRL in 3DMeasureRD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>TRLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-TRL" testNumber="23"/>
			<description>Entry TRL in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTRL == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TRL in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-TS" testNumber="8"/>
			<description>Entry TS in 3DMeasureRD3 shall have type Number</description>
			<test>containsTS == false || TSHasTypeNumber == true</test>
			<error>
				<message>Entry TS in 3DMeasureRD3 has type %1 instead of type Number</message>
				<arguments>
					<argument>TSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-TS" testNumber="23"/>
			<description>Entry TS in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TS in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-TX" testNumber="8"/>
			<description>Entry TX in 3DMeasureRD3 shall have type Array</description>
			<test>containsTX == false || TXHasTypeArray == true</test>
			<error>
				<message>Entry TX in 3DMeasureRD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>TXType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-TX" testNumber="7"/>
			<description>Entry TX in 3DMeasureRD3 is required</description>
			<test>containsTX == true</test>
			<error>
				<message>Entry TX in 3DMeasureRD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-TX" testNumber="23"/>
			<description>Entry TX in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTX == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TX in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-TY" testNumber="8"/>
			<description>Entry TY in 3DMeasureRD3 shall have type Array</description>
			<test>containsTY == false || TYHasTypeArray == true</test>
			<error>
				<message>Entry TY in 3DMeasureRD3 has type %1 instead of type Array</message>
				<arguments>
					<argument>TYType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-TY" testNumber="7"/>
			<description>Entry TY in 3DMeasureRD3 is required</description>
			<test>containsTY == true</test>
			<error>
				<message>Entry TY in 3DMeasureRD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-TY" testNumber="23"/>
			<description>Entry TY in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTY == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TY in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-Type" testNumber="8"/>
			<description>Entry Type in 3DMeasureRD3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DMeasureRD3 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-Type" testNumber="23"/>
			<description>Entry Type in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in 3DMeasureRD3 shall have value 3DMeasure</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DMeasure"</test>
			<error>
				<message>Entry Type with type Name in 3DMeasureRD3 has incorrect value %1 instead of 3DMeasure</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-U" testNumber="8"/>
			<description>Entry U in 3DMeasureRD3 shall have type StringText</description>
			<test>containsU == false || UHasTypeStringText == true</test>
			<error>
				<message>Entry U in 3DMeasureRD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>UType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-U" testNumber="7"/>
			<description>Entry U in 3DMeasureRD3 is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in 3DMeasureRD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-U" testNumber="23"/>
			<description>Entry U in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsU == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry U in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-UT" testNumber="8"/>
			<description>Entry UT in 3DMeasureRD3 shall have type StringText</description>
			<test>containsUT == false || UTHasTypeStringText == true</test>
			<error>
				<message>Entry UT in 3DMeasureRD3 has type %1 instead of type StringText</message>
				<arguments>
					<argument>UTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-UT" testNumber="23"/>
			<description>Entry UT in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsUT == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry UT in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-V" testNumber="8"/>
			<description>Entry V in 3DMeasureRD3 shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in 3DMeasureRD3 has type %1 instead of type Number</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-V" testNumber="7"/>
			<description>Entry V in 3DMeasureRD3 is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in 3DMeasureRD3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="3DMeasureRD3-V" testNumber="23"/>
			<description>Entry V in 3DMeasureRD3 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsV == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry V in 3DMeasureRD3 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="3DNode" testNumber="1"/>
			<description>3DNode shall not contain entries except M, N, O, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'Instance' &amp;&amp; elem != 'M' &amp;&amp; elem != 'N' &amp;&amp; elem != 'O' &amp;&amp; elem != 'RM' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DNode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'Instance' &amp;&amp; elem != 'M' &amp;&amp; elem != 'N' &amp;&amp; elem != 'O' &amp;&amp; elem != 'RM' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="3DNode" testNumber="22"/>
			<description>3DNode shall not contain entries Data, Instance, RM in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'Data' || elem == 'Instance' || elem == 'RM').length == 0</test>
			<error>
				<message>3DNode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'Data' || elem == 'Instance' || elem == 'RM').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="3DNode-M" testNumber="8"/>
			<description>Entry M in 3DNode shall have type Array</description>
			<test>containsM == false || MHasTypeArray == true</test>
			<error>
				<message>Entry M in 3DNode has type %1 instead of type Array</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="3DNode-N" testNumber="8"/>
			<description>Entry N in 3DNode shall have type String</description>
			<test>containsN == false || NHasTypeString == true</test>
			<error>
				<message>Entry N in 3DNode has type %1 instead of type String</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="3DNode-N" testNumber="7"/>
			<description>Entry N in 3DNode is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in 3DNode is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="3DNode-O" testNumber="8"/>
			<description>Entry O in 3DNode shall have type Number</description>
			<test>containsO == false || OHasTypeNumber == true</test>
			<error>
				<message>Entry O in 3DNode has type %1 instead of type Number</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="3DNode-O-Number" testNumber="14"/>
			<description>Entry O with type Number in 3DNode shall satisfy possible value predicate: fn:Eval((@O &gt;= 0) &amp;&amp; (@O &lt;= 1))</description>
			<test>OHasTypeNumber != true || (ONumberValue &gt;= 0) &amp;&amp; (ONumberValue &lt;= 1)</test>
			<error>
				<message>Entry O with type Number in 3DNode does not satisfy possible value predicate: fn:Eval((@O &gt;= 0) &amp;&amp; (@O &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="3DNode-Type" testNumber="8"/>
			<description>Entry Type in 3DNode shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DNode has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="3DNode-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in 3DNode shall have value 3DNode</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DNode"</test>
			<error>
				<message>Entry Type with type Name in 3DNode has incorrect value %1 instead of 3DNode</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="3DNode-V" testNumber="8"/>
			<description>Entry V in 3DNode shall have type Boolean</description>
			<test>containsV == false || VHasTypeBoolean == true</test>
			<error>
				<message>Entry V in 3DNode has type %1 instead of type Boolean</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DReference">
			<id specification="ISO_32000_1_7" clause="3DReference" testNumber="1"/>
			<description>3DReference shall not contain entries except 3DD, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != '3DD' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DReference contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != '3DD' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DReference">
			<id specification="ISO_32000_1_7" clause="3DReference-3DD" testNumber="8"/>
			<description>Entry 3DD in 3DReference shall have type Stream</description>
			<test>contains3DD == false || entry3DDHasTypeStream == true</test>
			<error>
				<message>Entry 3DD in 3DReference has type %1 instead of type Stream</message>
				<arguments>
					<argument>entry3DDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DReference">
			<id specification="ISO_32000_1_7" clause="3DReference-3DD" testNumber="7"/>
			<description>Entry 3DD in 3DReference is required</description>
			<test>contains3DD == true</test>
			<error>
				<message>Entry 3DD in 3DReference is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DReference">
			<id specification="ISO_32000_1_7" clause="3DReference-3DD-Stream" testNumber="10"/>
			<description>Entry 3DD with type Stream in 3DReference shall be indirect</description>
			<test>entry3DDHasTypeStream != true || isentry3DDIndirect == true</test>
			<error>
				<message>Entry 3DD with type Stream in 3DReference is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DReference">
			<id specification="ISO_32000_1_7" clause="3DReference-Type" testNumber="8"/>
			<description>Entry Type in 3DReference shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DReference has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DReference">
			<id specification="ISO_32000_1_7" clause="3DReference-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in 3DReference shall have value 3DRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DRef"</test>
			<error>
				<message>Entry Type with type Name in 3DReference has incorrect value %1 instead of 3DRef</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="3DRenderMode" testNumber="1"/>
			<description>3DRenderMode shall not contain entries except AC, CV, FC, O, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AC' &amp;&amp; elem != 'CV' &amp;&amp; elem != 'FC' &amp;&amp; elem != 'O' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DRenderMode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AC' &amp;&amp; elem != 'CV' &amp;&amp; elem != 'FC' &amp;&amp; elem != 'O' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="3DRenderMode-AC" testNumber="8"/>
			<description>Entry AC in 3DRenderMode shall have type Array</description>
			<test>containsAC == false || ACHasTypeArray == true</test>
			<error>
				<message>Entry AC in 3DRenderMode has type %1 instead of type Array</message>
				<arguments>
					<argument>ACType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="3DRenderMode-CV" testNumber="8"/>
			<description>Entry CV in 3DRenderMode shall have type Number</description>
			<test>containsCV == false || CVHasTypeNumber == true</test>
			<error>
				<message>Entry CV in 3DRenderMode has type %1 instead of type Number</message>
				<arguments>
					<argument>CVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="3DRenderMode-FC" testNumber="8"/>
			<description>Entry FC in 3DRenderMode shall have one of types: Array, Name</description>
			<test>containsFC == false || FCHasTypeArray == true || FCHasTypeName == true</test>
			<error>
				<message>Entry FC in 3DRenderMode has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="3DRenderMode-FC-Name" testNumber="6"/>
			<description>Entry FC with type Name in 3DRenderMode shall have value BG</description>
			<test>FCHasTypeName != true || FCNameValue == "BG"</test>
			<error>
				<message>Entry FC with type Name in 3DRenderMode has incorrect value %1 instead of BG</message>
				<arguments>
					<argument>FCNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="3DRenderMode-O" testNumber="8"/>
			<description>Entry O in 3DRenderMode shall have type Number</description>
			<test>containsO == false || OHasTypeNumber == true</test>
			<error>
				<message>Entry O in 3DRenderMode has type %1 instead of type Number</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="3DRenderMode-O-Number" testNumber="14"/>
			<description>Entry O with type Number in 3DRenderMode shall satisfy possible value predicate: fn:Eval((@O &gt;= 0) &amp;&amp; (@O &lt;= 1))</description>
			<test>OHasTypeNumber != true || (ONumberValue &gt;= 0) &amp;&amp; (ONumberValue &lt;= 1)</test>
			<error>
				<message>Entry O with type Number in 3DRenderMode does not satisfy possible value predicate: fn:Eval((@O &gt;= 0) &amp;&amp; (@O &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="3DRenderMode-Subtype" testNumber="8"/>
			<description>Entry Subtype in 3DRenderMode shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DRenderMode has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="3DRenderMode-Subtype" testNumber="7"/>
			<description>Entry Subtype in 3DRenderMode is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in 3DRenderMode is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="3DRenderMode-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in 3DRenderMode shall have one of values: TransparentWireframe, TransparentBoundingBox, ShadedVertices, Illustration, Wireframe, HiddenWireframe, SolidWireframe, ShadedIllustration, Solid, Vertices, ShadedWireframe, Transparent, BoundingBox, TransparentBoundingBoxOutline, SolidOutline</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Solid" || SubtypeNameValue == "SolidWireframe" || SubtypeNameValue == "Transparent" || SubtypeNameValue == "TransparentWireframe" || SubtypeNameValue == "BoundingBox" || SubtypeNameValue == "TransparentBoundingBox" || SubtypeNameValue == "TransparentBoundingBoxOutline" || SubtypeNameValue == "Wireframe" || SubtypeNameValue == "ShadedWireframe" || SubtypeNameValue == "HiddenWireframe" || SubtypeNameValue == "Vertices" || SubtypeNameValue == "ShadedVertices" || SubtypeNameValue == "Illustration" || SubtypeNameValue == "SolidOutline" || SubtypeNameValue == "ShadedIllustration"</test>
			<error>
				<message>Entry Subtype with type Name in 3DRenderMode has incorrect value %1 instead of TransparentWireframe, TransparentBoundingBox, ShadedVertices, Illustration, Wireframe, HiddenWireframe, SolidWireframe, ShadedIllustration, Solid, Vertices, ShadedWireframe, Transparent, BoundingBox, TransparentBoundingBoxOutline, SolidOutline</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="3DRenderMode-Type" testNumber="8"/>
			<description>Entry Type in 3DRenderMode shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DRenderMode has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="3DRenderMode-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in 3DRenderMode shall have value 3DRenderMode</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DRenderMode"</test>
			<error>
				<message>Entry Type with type Name in 3DRenderMode has incorrect value %1 instead of 3DRenderMode</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream" testNumber="1"/>
			<description>3DStream shall not contain entries except AN, DL, DV, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, OnInstantiate, Resources, Subtype, Type, VA</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AN' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'OnInstantiate' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'VA' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AN' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'OnInstantiate' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'VA' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream" testNumber="22"/>
			<description>3DStream shall not contain entry ColorSpace in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsColorSpace == false</test>
			<error>
				<message>3DStream contains entry ColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-AN" testNumber="8"/>
			<description>Entry AN in 3DStream shall have type Dictionary</description>
			<test>containsAN == false || ANHasTypeDictionary == true</test>
			<error>
				<message>Entry AN in 3DStream has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ANType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-DL" testNumber="8"/>
			<description>Entry DL in 3DStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in 3DStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in 3DStream shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in 3DStream does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-DV" testNumber="8"/>
			<description>Entry DV in 3DStream shall have one of types: Dictionary, Integer, Name, String</description>
			<test>containsDV == false || DVHasTypeDictionary == true || DVHasTypeInteger == true || DVHasTypeName == true || DVHasTypeString == true</test>
			<error>
				<message>Entry DV in 3DStream has type %1 instead of one of types: Dictionary, Integer, Name, String</message>
				<arguments>
					<argument>DVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-DV-Integer" testNumber="14"/>
			<description>Entry DV with type Integer in 3DStream shall satisfy possible value predicate: fn:Eval((@DV &gt;= 0) &amp;&amp; (@DV &lt; fn:ArrayLength(VA)))</description>
			<test>DVHasTypeInteger != true || (DVIntegerValue &gt;= 0) &amp;&amp; (VAHasTypeArray == false || (DVIntegerValue &lt; VAArraySize))</test>
			<error>
				<message>Entry DV with type Integer in 3DStream does not satisfy possible value predicate: fn:Eval((@DV &gt;= 0) &amp;&amp; (@DV &lt; fn:ArrayLength(VA)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-DV-Name" testNumber="6"/>
			<description>Entry DV with type Name in 3DStream shall have one of values: F, L</description>
			<test>DVHasTypeName != true || DVNameValue == "F" || DVNameValue == "L"</test>
			<error>
				<message>Entry DV with type Name in 3DStream has incorrect value %1 instead of F, L</message>
				<arguments>
					<argument>DVNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in 3DStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in 3DStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in 3DStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in 3DStream has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in 3DStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in 3DStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-F" testNumber="8"/>
			<description>Entry F in 3DStream shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in 3DStream has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in 3DStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in 3DStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in 3DStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in 3DStream has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in 3DStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in 3DStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-FFilter" testNumber="8"/>
			<description>Entry FFilter in 3DStream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in 3DStream has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in 3DStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in 3DStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in 3DStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in 3DStream has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-Filter" testNumber="8"/>
			<description>Entry Filter in 3DStream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in 3DStream has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in 3DStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in 3DStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in 3DStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in 3DStream has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-Length" testNumber="8"/>
			<description>Entry Length in 3DStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in 3DStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-Length" testNumber="7"/>
			<description>Entry Length in 3DStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in 3DStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-OnInstantiate" testNumber="8"/>
			<description>Entry OnInstantiate in 3DStream shall have type Stream</description>
			<test>containsOnInstantiate == false || OnInstantiateHasTypeStream == true</test>
			<error>
				<message>Entry OnInstantiate in 3DStream has type %1 instead of type Stream</message>
				<arguments>
					<argument>OnInstantiateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-OnInstantiate-Stream" testNumber="10"/>
			<description>Entry OnInstantiate with type Stream in 3DStream shall be indirect</description>
			<test>OnInstantiateHasTypeStream != true || isOnInstantiateIndirect == true</test>
			<error>
				<message>Entry OnInstantiate with type Stream in 3DStream is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-Resources" testNumber="8"/>
			<description>Entry Resources in 3DStream shall have type NameTree</description>
			<test>containsResources == false || ResourcesHasTypeNameTree == true</test>
			<error>
				<message>Entry Resources in 3DStream has type %1 instead of type NameTree</message>
				<arguments>
					<argument>ResourcesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-ResourcesTreeNode" testNumber="8"/>
			<description>Entry ResourcesTreeNode in 3DStream shall have type NameTree</description>
			<test>containsResourcesTreeNode == false || ResourcesTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry ResourcesTreeNode in 3DStream has type %1 instead of type NameTree</message>
				<arguments>
					<argument>ResourcesTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-Subtype" testNumber="8"/>
			<description>Entry Subtype in 3DStream shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DStream has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-Subtype" testNumber="7"/>
			<description>Entry Subtype in 3DStream is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in 3DStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in 3DStream shall have one of values: PRC, U3D</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "U3D" || SubtypeNameValue == "PRC"</test>
			<error>
				<message>Entry Subtype with type Name in 3DStream has incorrect value %1 instead of PRC, U3D</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-Type" testNumber="8"/>
			<description>Entry Type in 3DStream shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DStream has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in 3DStream shall have value 3D</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3D"</test>
			<error>
				<message>Entry Type with type Name in 3DStream has incorrect value %1 instead of 3D</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="3DStream-VA" testNumber="8"/>
			<description>Entry VA in 3DStream shall have type Array</description>
			<test>containsVA == false || VAHasTypeArray == true</test>
			<error>
				<message>Entry VA in 3DStream has type %1 instead of type Array</message>
				<arguments>
					<argument>VAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStreamNameTreeResourcesEntry">
			<id specification="ISO_32000_1_7" clause="3DStreamNameTreeResourcesEntry" testNumber="8"/>
			<description>Entry in 3DStreamNameTreeResources shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in 3DStreamNameTreeResources has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits" testNumber="1"/>
			<description>3DUnits shall not contain entries except DSm, DSn, DU, TSm, TSn, TU, USm, USn, UU</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DSm' &amp;&amp; elem != 'DSn' &amp;&amp; elem != 'DU' &amp;&amp; elem != 'TSm' &amp;&amp; elem != 'TSn' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'USm' &amp;&amp; elem != 'USn' &amp;&amp; elem != 'UU' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DUnits contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DSm' &amp;&amp; elem != 'DSn' &amp;&amp; elem != 'DU' &amp;&amp; elem != 'TSm' &amp;&amp; elem != 'TSn' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'USm' &amp;&amp; elem != 'USn' &amp;&amp; elem != 'UU' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-DSm" testNumber="8"/>
			<description>Entry DSm in 3DUnits shall have type Number</description>
			<test>containsDSm == false || DSmHasTypeNumber == true</test>
			<error>
				<message>Entry DSm in 3DUnits has type %1 instead of type Number</message>
				<arguments>
					<argument>DSmType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-DSm" testNumber="23"/>
			<description>Entry DSm in 3DUnits can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsDSm == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry DSm in 3DUnits is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-DSn" testNumber="8"/>
			<description>Entry DSn in 3DUnits shall have type Number</description>
			<test>containsDSn == false || DSnHasTypeNumber == true</test>
			<error>
				<message>Entry DSn in 3DUnits has type %1 instead of type Number</message>
				<arguments>
					<argument>DSnType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-DSn" testNumber="23"/>
			<description>Entry DSn in 3DUnits can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsDSn == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry DSn in 3DUnits is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-DU" testNumber="8"/>
			<description>Entry DU in 3DUnits shall have type StringText</description>
			<test>containsDU == false || DUHasTypeStringText == true</test>
			<error>
				<message>Entry DU in 3DUnits has type %1 instead of type StringText</message>
				<arguments>
					<argument>DUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-DU" testNumber="11"/>
			<description>Entry DU in 3DUnits is required, when fn:IsPresent(DSm) || fn:IsPresent(DSn)</description>
			<test>containsDU == true || ((containsDSm != true) &amp;&amp; (containsDSn != true))</test>
			<error>
				<message>Entry DU in 3DUnits is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-DU" testNumber="23"/>
			<description>Entry DU in 3DUnits can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsDU == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry DU in 3DUnits is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-TSm" testNumber="8"/>
			<description>Entry TSm in 3DUnits shall have type Number</description>
			<test>containsTSm == false || TSmHasTypeNumber == true</test>
			<error>
				<message>Entry TSm in 3DUnits has type %1 instead of type Number</message>
				<arguments>
					<argument>TSmType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-TSm" testNumber="23"/>
			<description>Entry TSm in 3DUnits can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTSm == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TSm in 3DUnits is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-TSn" testNumber="8"/>
			<description>Entry TSn in 3DUnits shall have type Number</description>
			<test>containsTSn == false || TSnHasTypeNumber == true</test>
			<error>
				<message>Entry TSn in 3DUnits has type %1 instead of type Number</message>
				<arguments>
					<argument>TSnType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-TSn" testNumber="23"/>
			<description>Entry TSn in 3DUnits can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTSn == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TSn in 3DUnits is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-TU" testNumber="8"/>
			<description>Entry TU in 3DUnits shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in 3DUnits has type %1 instead of type StringText</message>
				<arguments>
					<argument>TUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-TU" testNumber="11"/>
			<description>Entry TU in 3DUnits is required, when fn:IsPresent(TSm) || fn:IsPresent(TSn)</description>
			<test>containsTU == true || ((containsTSm != true) &amp;&amp; (containsTSn != true))</test>
			<error>
				<message>Entry TU in 3DUnits is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-TU" testNumber="23"/>
			<description>Entry TU in 3DUnits can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTU == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TU in 3DUnits is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-USm" testNumber="8"/>
			<description>Entry USm in 3DUnits shall have type Number</description>
			<test>containsUSm == false || USmHasTypeNumber == true</test>
			<error>
				<message>Entry USm in 3DUnits has type %1 instead of type Number</message>
				<arguments>
					<argument>USmType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-USm" testNumber="23"/>
			<description>Entry USm in 3DUnits can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsUSm == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry USm in 3DUnits is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-USn" testNumber="8"/>
			<description>Entry USn in 3DUnits shall have type Number</description>
			<test>containsUSn == false || USnHasTypeNumber == true</test>
			<error>
				<message>Entry USn in 3DUnits has type %1 instead of type Number</message>
				<arguments>
					<argument>USnType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-USn" testNumber="23"/>
			<description>Entry USn in 3DUnits can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsUSn == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry USn in 3DUnits is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-UU" testNumber="8"/>
			<description>Entry UU in 3DUnits shall have type StringText</description>
			<test>containsUU == false || UUHasTypeStringText == true</test>
			<error>
				<message>Entry UU in 3DUnits has type %1 instead of type StringText</message>
				<arguments>
					<argument>UUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-UU" testNumber="11"/>
			<description>Entry UU in 3DUnits is required, when fn:IsPresent(USm) || fn:IsPresent(USn)</description>
			<test>containsUU == true || ((containsUSm != true) &amp;&amp; (containsUSn != true))</test>
			<error>
				<message>Entry UU in 3DUnits is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="3DUnits-UU" testNumber="23"/>
			<description>Entry UU in 3DUnits can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsUU == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry UU in 3DUnits is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView" testNumber="1"/>
			<description>3DView shall not contain entries except BG, C2W, CO, IN, LS, MS, NA, NR, O, P, RM, SA, Type, U3DPath, XN</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BG' &amp;&amp; elem != 'C2W' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'IN' &amp;&amp; elem != 'LS' &amp;&amp; elem != 'MA' &amp;&amp; elem != 'MS' &amp;&amp; elem != 'NA' &amp;&amp; elem != 'NR' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'RM' &amp;&amp; elem != 'SA' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U3DPath' &amp;&amp; elem != 'XN' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DView contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BG' &amp;&amp; elem != 'C2W' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'IN' &amp;&amp; elem != 'LS' &amp;&amp; elem != 'MA' &amp;&amp; elem != 'MS' &amp;&amp; elem != 'NA' &amp;&amp; elem != 'NR' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'RM' &amp;&amp; elem != 'SA' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U3DPath' &amp;&amp; elem != 'XN' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView" testNumber="22"/>
			<description>3DView shall not contain entry MA in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsMA == false</test>
			<error>
				<message>3DView contains entry MA</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-BG" testNumber="8"/>
			<description>Entry BG in 3DView shall have type Dictionary</description>
			<test>containsBG == false || BGHasTypeDictionary == true</test>
			<error>
				<message>Entry BG in 3DView has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BGType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-C2W" testNumber="8"/>
			<description>Entry C2W in 3DView shall have type Array</description>
			<test>containsC2W == false || C2WHasTypeArray == true</test>
			<error>
				<message>Entry C2W in 3DView has type %1 instead of type Array</message>
				<arguments>
					<argument>C2WType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-C2W" testNumber="11"/>
			<description>Entry C2W in 3DView is required, when @MS == M</description>
			<test>containsC2W == true || (MSNameValue != "M")</test>
			<error>
				<message>Entry C2W in 3DView is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-CO" testNumber="8"/>
			<description>Entry CO in 3DView shall have type Number</description>
			<test>containsCO == false || COHasTypeNumber == true</test>
			<error>
				<message>Entry CO in 3DView has type %1 instead of type Number</message>
				<arguments>
					<argument>COType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-IN" testNumber="8"/>
			<description>Entry IN in 3DView shall have type StringText</description>
			<test>containsIN == false || INHasTypeStringText == true</test>
			<error>
				<message>Entry IN in 3DView has type %1 instead of type StringText</message>
				<arguments>
					<argument>INType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-LS" testNumber="8"/>
			<description>Entry LS in 3DView shall have type Dictionary</description>
			<test>containsLS == false || LSHasTypeDictionary == true</test>
			<error>
				<message>Entry LS in 3DView has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>LSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-MS" testNumber="8"/>
			<description>Entry MS in 3DView shall have type Name</description>
			<test>containsMS == false || MSHasTypeName == true</test>
			<error>
				<message>Entry MS in 3DView has type %1 instead of type Name</message>
				<arguments>
					<argument>MSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-MS-Name" testNumber="6"/>
			<description>Entry MS with type Name in 3DView shall have one of values: U3D, M</description>
			<test>MSHasTypeName != true || MSNameValue == "M" || MSNameValue == "U3D"</test>
			<error>
				<message>Entry MS with type Name in 3DView has incorrect value %1 instead of U3D, M</message>
				<arguments>
					<argument>MSNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-NA" testNumber="8"/>
			<description>Entry NA in 3DView shall have type Array</description>
			<test>containsNA == false || NAHasTypeArray == true</test>
			<error>
				<message>Entry NA in 3DView has type %1 instead of type Array</message>
				<arguments>
					<argument>NAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-NR" testNumber="8"/>
			<description>Entry NR in 3DView shall have type Boolean</description>
			<test>containsNR == false || NRHasTypeBoolean == true</test>
			<error>
				<message>Entry NR in 3DView has type %1 instead of type Boolean</message>
				<arguments>
					<argument>NRType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-O" testNumber="8"/>
			<description>Entry O in 3DView shall have type Stream</description>
			<test>containsO == false || OHasTypeStream == true</test>
			<error>
				<message>Entry O in 3DView has type %1 instead of type Stream</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-O-Stream" testNumber="10"/>
			<description>Entry O with type Stream in 3DView shall be indirect</description>
			<test>OHasTypeStream != true || isOIndirect == true</test>
			<error>
				<message>Entry O with type Stream in 3DView is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-P" testNumber="8"/>
			<description>Entry P in 3DView shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in 3DView has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-RM" testNumber="8"/>
			<description>Entry RM in 3DView shall have type Dictionary</description>
			<test>containsRM == false || RMHasTypeDictionary == true</test>
			<error>
				<message>Entry RM in 3DView has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>RMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-SA" testNumber="8"/>
			<description>Entry SA in 3DView shall have type Array</description>
			<test>containsSA == false || SAHasTypeArray == true</test>
			<error>
				<message>Entry SA in 3DView has type %1 instead of type Array</message>
				<arguments>
					<argument>SAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-Type" testNumber="8"/>
			<description>Entry Type in 3DView shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DView has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in 3DView shall have value 3DView</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DView"</test>
			<error>
				<message>Entry Type with type Name in 3DView has incorrect value %1 instead of 3DView</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-U3DPath" testNumber="8"/>
			<description>Entry U3DPath in 3DView shall have one of types: Array, StringText</description>
			<test>containsU3DPath == false || U3DPathHasTypeArray == true || U3DPathHasTypeStringText == true</test>
			<error>
				<message>Entry U3DPath in 3DView has type %1 instead of one of types: Array, StringText</message>
				<arguments>
					<argument>U3DPathType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-U3DPath" testNumber="11"/>
			<description>Entry U3DPath in 3DView is required, when @MS == U3D</description>
			<test>containsU3DPath == true || (MSNameValue != "U3D")</test>
			<error>
				<message>Entry U3DPath in 3DView is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-XN" testNumber="8"/>
			<description>Entry XN in 3DView shall have type StringText</description>
			<test>containsXN == false || XNHasTypeStringText == true</test>
			<error>
				<message>Entry XN in 3DView has type %1 instead of type StringText</message>
				<arguments>
					<argument>XNType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="3DView-XN" testNumber="7"/>
			<description>Entry XN in 3DView is required</description>
			<test>containsXN == true</test>
			<error>
				<message>Entry XN in 3DView is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DViewAddEntries">
			<id specification="ISO_32000_1_7" clause="3DViewAddEntries" testNumber="1"/>
			<description>3DViewAddEntries shall not contain entries except Params, Snapshot</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BG' &amp;&amp; elem != 'C2W' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'IN' &amp;&amp; elem != 'LS' &amp;&amp; elem != 'MA' &amp;&amp; elem != 'MS' &amp;&amp; elem != 'NA' &amp;&amp; elem != 'NR' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Params' &amp;&amp; elem != 'RM' &amp;&amp; elem != 'SA' &amp;&amp; elem != 'Snapshot' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U3DPath' &amp;&amp; elem != 'XN' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>3DViewAddEntries contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BG' &amp;&amp; elem != 'C2W' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'IN' &amp;&amp; elem != 'LS' &amp;&amp; elem != 'MA' &amp;&amp; elem != 'MS' &amp;&amp; elem != 'NA' &amp;&amp; elem != 'NR' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Params' &amp;&amp; elem != 'RM' &amp;&amp; elem != 'SA' &amp;&amp; elem != 'Snapshot' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U3DPath' &amp;&amp; elem != 'XN' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DViewAddEntries">
			<id specification="ISO_32000_1_7" clause="3DViewAddEntries" testNumber="22"/>
			<description>3DViewAddEntries shall not contain entries BG, C2W, CO, IN, LS, MA, MS, NA, NR, O, P, RM, SA, Type, U3DPath, XN in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BG' || elem == 'C2W' || elem == 'CO' || elem == 'IN' || elem == 'LS' || elem == 'MA' || elem == 'MS' || elem == 'NA' || elem == 'NR' || elem == 'O' || elem == 'P' || elem == 'RM' || elem == 'SA' || elem == 'Type' || elem == 'U3DPath' || elem == 'XN').length == 0</test>
			<error>
				<message>3DViewAddEntries contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BG' || elem == 'C2W' || elem == 'CO' || elem == 'IN' || elem == 'LS' || elem == 'MA' || elem == 'MS' || elem == 'NA' || elem == 'NR' || elem == 'O' || elem == 'P' || elem == 'RM' || elem == 'SA' || elem == 'Type' || elem == 'U3DPath' || elem == 'XN').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DViewAddEntries">
			<id specification="ISO_32000_1_7" clause="3DViewAddEntries-Params" testNumber="8"/>
			<description>Entry Params in 3DViewAddEntries shall have type Array</description>
			<test>containsParams == false || ParamsHasTypeArray == true</test>
			<error>
				<message>Entry Params in 3DViewAddEntries has type %1 instead of type Array</message>
				<arguments>
					<argument>ParamsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DViewAddEntries">
			<id specification="ISO_32000_1_7" clause="3DViewAddEntries-Params" testNumber="23"/>
			<description>Entry Params in 3DViewAddEntries can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsParams == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Params in 3DViewAddEntries is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DViewAddEntries">
			<id specification="ISO_32000_1_7" clause="3DViewAddEntries-Snapshot" testNumber="8"/>
			<description>Entry Snapshot in 3DViewAddEntries shall have type Stream</description>
			<test>containsSnapshot == false || SnapshotHasTypeStream == true</test>
			<error>
				<message>Entry Snapshot in 3DViewAddEntries has type %1 instead of type Stream</message>
				<arguments>
					<argument>SnapshotType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DViewAddEntries">
			<id specification="ISO_32000_1_7" clause="3DViewAddEntries-Snapshot" testNumber="23"/>
			<description>Entry Snapshot in 3DViewAddEntries can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSnapshot == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Snapshot in 3DViewAddEntries is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A3DViewAddEntries">
			<id specification="ISO_32000_1_7" clause="3DViewAddEntries-Snapshot-Stream" testNumber="10"/>
			<description>Entry Snapshot with type Stream in 3DViewAddEntries shall be indirect</description>
			<test>SnapshotHasTypeStream != true || isSnapshotIndirect == true</test>
			<error>
				<message>Entry Snapshot with type Stream in 3DViewAddEntries is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST" testNumber="1"/>
			<description>AAPL_ST shall not contain entries except Color, ColorSpace, Offset, Radius, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Color' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Offset' &amp;&amp; elem != 'Radius' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AAPL_ST contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Color' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Offset' &amp;&amp; elem != 'Radius' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-Color" testNumber="8"/>
			<description>Entry Color in AAPL_ST shall have type Array</description>
			<test>containsColor == false || ColorHasTypeArray == true</test>
			<error>
				<message>Entry Color in AAPL_ST has type %1 instead of type Array</message>
				<arguments>
					<argument>ColorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-Color" testNumber="23"/>
			<description>Entry Color in AAPL_ST can only be present, if satisfy predicate fn:Extension(AAPL, 1.2)</description>
			<test>containsColor == false || hasExtensionAAPL == true</test>
			<error>
				<message>Entry Color in AAPL_ST is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-ColorSpace-Array" testNumber="17"/>
			<description>Entry ColorSpace with type Array in AAPL_ST shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in AAPL_ST is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in AAPL_ST shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in AAPL_ST has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-ColorSpace" testNumber="23"/>
			<description>Entry ColorSpace in AAPL_ST can only be present, if satisfy predicate fn:Extension(AAPL, 1.2)</description>
			<test>containsColorSpace == false || hasExtensionAAPL == true</test>
			<error>
				<message>Entry ColorSpace in AAPL_ST is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-ColorSpace-Name" testNumber="6"/>
			<description>Entry ColorSpace with type Name in AAPL_ST shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in AAPL_ST has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-Offset" testNumber="8"/>
			<description>Entry Offset in AAPL_ST shall have type Array</description>
			<test>containsOffset == false || OffsetHasTypeArray == true</test>
			<error>
				<message>Entry Offset in AAPL_ST has type %1 instead of type Array</message>
				<arguments>
					<argument>OffsetType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-Offset" testNumber="23"/>
			<description>Entry Offset in AAPL_ST can only be present, if satisfy predicate fn:Extension(AAPL, 1.2)</description>
			<test>containsOffset == false || hasExtensionAAPL == true</test>
			<error>
				<message>Entry Offset in AAPL_ST is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-Radius" testNumber="8"/>
			<description>Entry Radius in AAPL_ST shall have type Number</description>
			<test>containsRadius == false || RadiusHasTypeNumber == true</test>
			<error>
				<message>Entry Radius in AAPL_ST has type %1 instead of type Number</message>
				<arguments>
					<argument>RadiusType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-Radius" testNumber="23"/>
			<description>Entry Radius in AAPL_ST can only be present, if satisfy predicate fn:Extension(AAPL, 1.2)</description>
			<test>containsRadius == false || hasExtensionAAPL == true</test>
			<error>
				<message>Entry Radius in AAPL_ST is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-Radius-Number" testNumber="9"/>
			<description>Entry Radius with type Number in AAPL_ST shall satisfy special case: fn:Eval(@Radius &gt; 0)</description>
			<test>RadiusHasTypeNumber != true || (RadiusNumberValue &gt; 0)</test>
			<error>
				<message>Entry Radius with type Number in AAPL_ST does not satisfy special case: fn:Eval(@Radius &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-Subtype" testNumber="8"/>
			<description>Entry Subtype in AAPL_ST shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AAPL_ST has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-Subtype" testNumber="23"/>
			<description>Entry Subtype in AAPL_ST can only be present, if satisfy predicate fn:Extension(AAPL, 1.2)</description>
			<test>containsSubtype == false || hasExtensionAAPL == true</test>
			<error>
				<message>Entry Subtype in AAPL_ST is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AAPL_ST shall have value Shadow</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Shadow"</test>
			<error>
				<message>Entry Subtype with type Name in AAPL_ST has incorrect value %1 instead of Shadow</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-Type" testNumber="8"/>
			<description>Entry Type in AAPL_ST shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AAPL_ST has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-Type" testNumber="23"/>
			<description>Entry Type in AAPL_ST can only be present, if satisfy predicate fn:Extension(AAPL, 1.2)</description>
			<test>containsType == false || hasExtensionAAPL == true</test>
			<error>
				<message>Entry Type in AAPL_ST is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="AAPL_ST-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AAPL_ST shall have value Style</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Style"</test>
			<error>
				<message>Entry Type with type Name in AAPL_ST has incorrect value %1 instead of Style</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="ActionECMAScript" testNumber="1"/>
			<description>ActionECMAScript shall not contain entries except JS, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'JS' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionECMAScript contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'JS' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="ActionECMAScript-JS" testNumber="8"/>
			<description>Entry JS in ActionECMAScript shall have one of types: Stream, StringText</description>
			<test>containsJS == false || JSHasTypeStream == true || JSHasTypeStringText == true</test>
			<error>
				<message>Entry JS in ActionECMAScript has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>JSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="ActionECMAScript-JS" testNumber="7"/>
			<description>Entry JS in ActionECMAScript is required</description>
			<test>containsJS == true</test>
			<error>
				<message>Entry JS in ActionECMAScript is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="ActionECMAScript-JS-Stream" testNumber="10"/>
			<description>Entry JS with type Stream in ActionECMAScript shall be indirect</description>
			<test>JSHasTypeStream != true || isJSIndirect == true</test>
			<error>
				<message>Entry JS with type Stream in ActionECMAScript is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="ActionECMAScript-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionECMAScript shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionECMAScript is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="ActionECMAScript-Next" testNumber="8"/>
			<description>Entry Next in ActionECMAScript shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionECMAScript has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="ActionECMAScript-S" testNumber="8"/>
			<description>Entry S in ActionECMAScript shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionECMAScript has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="ActionECMAScript-S" testNumber="7"/>
			<description>Entry S in ActionECMAScript is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionECMAScript is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="ActionECMAScript-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionECMAScript shall have value JavaScript</description>
			<test>SHasTypeName != true || SNameValue == "JavaScript"</test>
			<error>
				<message>Entry S with type Name in ActionECMAScript has incorrect value %1 instead of JavaScript</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="ActionECMAScript-Type" testNumber="8"/>
			<description>Entry Type in ActionECMAScript shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionECMAScript has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="ActionECMAScript-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionECMAScript shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionECMAScript has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="ActionGoTo" testNumber="1"/>
			<description>ActionGoTo shall not contain entries except D, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SD' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionGoTo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SD' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="ActionGoTo" testNumber="22"/>
			<description>ActionGoTo shall not contain entry SD in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsSD == false</test>
			<error>
				<message>ActionGoTo contains entry SD</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="ActionGoTo-D-Array" testNumber="17"/>
			<description>Entry D with type Array in ActionGoTo shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in ActionGoTo is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="ActionGoTo-D" testNumber="8"/>
			<description>Entry D in ActionGoTo shall have one of types: Array, Name, StringByte</description>
			<test>containsD == false || DHasTypeArray == true || DHasTypeName == true || DHasTypeStringByte == true</test>
			<error>
				<message>Entry D in ActionGoTo has type %1 instead of one of types: Array, Name, StringByte</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="ActionGoTo-D" testNumber="7"/>
			<description>Entry D in ActionGoTo is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionGoTo is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="ActionGoTo-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionGoTo shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionGoTo is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="ActionGoTo-Next" testNumber="8"/>
			<description>Entry Next in ActionGoTo shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionGoTo has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="ActionGoTo-S" testNumber="8"/>
			<description>Entry S in ActionGoTo shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionGoTo has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="ActionGoTo-S" testNumber="7"/>
			<description>Entry S in ActionGoTo is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionGoTo is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="ActionGoTo-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionGoTo shall have value GoTo</description>
			<test>SHasTypeName != true || SNameValue == "GoTo"</test>
			<error>
				<message>Entry S with type Name in ActionGoTo has incorrect value %1 instead of GoTo</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="ActionGoTo-Type" testNumber="8"/>
			<description>Entry Type in ActionGoTo shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionGoTo has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="ActionGoTo-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionGoTo shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionGoTo has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="ActionGoTo3DView" testNumber="1"/>
			<description>ActionGoTo3DView shall not contain entries except Next, S, TA, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TA' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionGoTo3DView contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TA' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="ActionGoTo3DView-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionGoTo3DView shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionGoTo3DView is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="ActionGoTo3DView-Next" testNumber="8"/>
			<description>Entry Next in ActionGoTo3DView shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionGoTo3DView has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="ActionGoTo3DView-S" testNumber="8"/>
			<description>Entry S in ActionGoTo3DView shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionGoTo3DView has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="ActionGoTo3DView-S" testNumber="7"/>
			<description>Entry S in ActionGoTo3DView is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionGoTo3DView is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="ActionGoTo3DView-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionGoTo3DView shall have value GoTo3DView</description>
			<test>SHasTypeName != true || SNameValue == "GoTo3DView"</test>
			<error>
				<message>Entry S with type Name in ActionGoTo3DView has incorrect value %1 instead of GoTo3DView</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="ActionGoTo3DView-TA" testNumber="8"/>
			<description>Entry TA in ActionGoTo3DView shall have type Dictionary</description>
			<test>containsTA == false || TAHasTypeDictionary == true</test>
			<error>
				<message>Entry TA in ActionGoTo3DView has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="ActionGoTo3DView-TA" testNumber="7"/>
			<description>Entry TA in ActionGoTo3DView is required</description>
			<test>containsTA == true</test>
			<error>
				<message>Entry TA in ActionGoTo3DView is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="ActionGoTo3DView-Type" testNumber="8"/>
			<description>Entry Type in ActionGoTo3DView shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionGoTo3DView has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="ActionGoTo3DView-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionGoTo3DView shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionGoTo3DView has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="ActionGoTo3DView-V" testNumber="8"/>
			<description>Entry V in ActionGoTo3DView shall have one of types: Dictionary, Integer, Name, StringText</description>
			<test>containsV == false || VHasTypeDictionary == true || VHasTypeInteger == true || VHasTypeName == true || VHasTypeStringText == true</test>
			<error>
				<message>Entry V in ActionGoTo3DView has type %1 instead of one of types: Dictionary, Integer, Name, StringText</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="ActionGoTo3DView-V" testNumber="7"/>
			<description>Entry V in ActionGoTo3DView is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in ActionGoTo3DView is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="ActionGoToE" testNumber="1"/>
			<description>ActionGoToE shall not contain entries except D, F, NewWindow, Next, S, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionGoToE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="ActionGoToE-D-Array" testNumber="17"/>
			<description>Entry D with type Array in ActionGoToE shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in ActionGoToE is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="ActionGoToE-D" testNumber="8"/>
			<description>Entry D in ActionGoToE shall have one of types: Array, Name, StringByte</description>
			<test>containsD == false || DHasTypeArray == true || DHasTypeName == true || DHasTypeStringByte == true</test>
			<error>
				<message>Entry D in ActionGoToE has type %1 instead of one of types: Array, Name, StringByte</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="ActionGoToE-D" testNumber="7"/>
			<description>Entry D in ActionGoToE is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionGoToE is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="ActionGoToE-F" testNumber="8"/>
			<description>Entry F in ActionGoToE shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ActionGoToE has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="ActionGoToE-NewWindow" testNumber="8"/>
			<description>Entry NewWindow in ActionGoToE shall have type Boolean</description>
			<test>containsNewWindow == false || NewWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry NewWindow in ActionGoToE has type %1 instead of type Boolean</message>
				<arguments>
					<argument>NewWindowType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="ActionGoToE-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionGoToE shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionGoToE is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="ActionGoToE-Next" testNumber="8"/>
			<description>Entry Next in ActionGoToE shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionGoToE has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="ActionGoToE-S" testNumber="8"/>
			<description>Entry S in ActionGoToE shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionGoToE has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="ActionGoToE-S" testNumber="7"/>
			<description>Entry S in ActionGoToE is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionGoToE is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="ActionGoToE-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionGoToE shall have value GoToE</description>
			<test>SHasTypeName != true || SNameValue == "GoToE"</test>
			<error>
				<message>Entry S with type Name in ActionGoToE has incorrect value %1 instead of GoToE</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="ActionGoToE-T" testNumber="8"/>
			<description>Entry T in ActionGoToE shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in ActionGoToE has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="ActionGoToE-T" testNumber="11"/>
			<description>Entry T in ActionGoToE is required, when fn:Not(fn:IsPresent(F))</description>
			<test>containsT == true || (containsF == true)</test>
			<error>
				<message>Entry T in ActionGoToE is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="ActionGoToE-Type" testNumber="8"/>
			<description>Entry Type in ActionGoToE shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionGoToE has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="ActionGoToE-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionGoToE shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionGoToE has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="ActionGoToR" testNumber="1"/>
			<description>ActionGoToR shall not contain entries except D, F, NewWindow, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SD' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionGoToR contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SD' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="ActionGoToR" testNumber="22"/>
			<description>ActionGoToR shall not contain entry SD in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsSD == false</test>
			<error>
				<message>ActionGoToR contains entry SD</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="ActionGoToR-D-Array" testNumber="17"/>
			<description>Entry D with type Array in ActionGoToR shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in ActionGoToR is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="ActionGoToR-D" testNumber="8"/>
			<description>Entry D in ActionGoToR shall have one of types: Array, Name, StringByte</description>
			<test>containsD == false || DHasTypeArray == true || DHasTypeName == true || DHasTypeStringByte == true</test>
			<error>
				<message>Entry D in ActionGoToR has type %1 instead of one of types: Array, Name, StringByte</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="ActionGoToR-D" testNumber="7"/>
			<description>Entry D in ActionGoToR is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionGoToR is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="ActionGoToR-F" testNumber="8"/>
			<description>Entry F in ActionGoToR shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ActionGoToR has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="ActionGoToR-F" testNumber="7"/>
			<description>Entry F in ActionGoToR is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in ActionGoToR is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="ActionGoToR-NewWindow" testNumber="8"/>
			<description>Entry NewWindow in ActionGoToR shall have type Boolean</description>
			<test>containsNewWindow == false || NewWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry NewWindow in ActionGoToR has type %1 instead of type Boolean</message>
				<arguments>
					<argument>NewWindowType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="ActionGoToR-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionGoToR shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionGoToR is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="ActionGoToR-Next" testNumber="8"/>
			<description>Entry Next in ActionGoToR shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionGoToR has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="ActionGoToR-S" testNumber="8"/>
			<description>Entry S in ActionGoToR shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionGoToR has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="ActionGoToR-S" testNumber="7"/>
			<description>Entry S in ActionGoToR is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionGoToR is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="ActionGoToR-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionGoToR shall have value GoToR</description>
			<test>SHasTypeName != true || SNameValue == "GoToR"</test>
			<error>
				<message>Entry S with type Name in ActionGoToR has incorrect value %1 instead of GoToR</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="ActionGoToR-Type" testNumber="8"/>
			<description>Entry Type in ActionGoToR shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionGoToR has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="ActionGoToR-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionGoToR shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionGoToR has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="ActionHide" testNumber="1"/>
			<description>ActionHide shall not contain entries except H, Next, S, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionHide contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="ActionHide-H" testNumber="8"/>
			<description>Entry H in ActionHide shall have type Boolean</description>
			<test>containsH == false || HHasTypeBoolean == true</test>
			<error>
				<message>Entry H in ActionHide has type %1 instead of type Boolean</message>
				<arguments>
					<argument>HType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="ActionHide-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionHide shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionHide is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="ActionHide-Next" testNumber="8"/>
			<description>Entry Next in ActionHide shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionHide has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="ActionHide-S" testNumber="8"/>
			<description>Entry S in ActionHide shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionHide has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="ActionHide-S" testNumber="7"/>
			<description>Entry S in ActionHide is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionHide is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="ActionHide-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionHide shall have value Hide</description>
			<test>SHasTypeName != true || SNameValue == "Hide"</test>
			<error>
				<message>Entry S with type Name in ActionHide has incorrect value %1 instead of Hide</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="ActionHide-T-Dictionary" testNumber="17"/>
			<description>Entry T with type Dictionary in ActionHide shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in ActionHide is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="ActionHide-T" testNumber="8"/>
			<description>Entry T in ActionHide shall have one of types: Array, Dictionary, StringText</description>
			<test>containsT == false || THasTypeArray == true || THasTypeDictionary == true || THasTypeStringText == true</test>
			<error>
				<message>Entry T in ActionHide has type %1 instead of one of types: Array, Dictionary, StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="ActionHide-T" testNumber="7"/>
			<description>Entry T in ActionHide is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in ActionHide is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="ActionHide-T-Dictionary" testNumber="10"/>
			<description>Entry T with type Dictionary in ActionHide shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in ActionHide is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="ActionHide-T-StringText" testNumber="9"/>
			<description>Entry T with type StringText in ActionHide shall satisfy special case: fn:Eval(fn:IsFieldName(@T))</description>
			<test>THasTypeStringText != true || (TIsFieldName == true)</test>
			<error>
				<message>Entry T with type StringText in ActionHide does not satisfy special case: fn:Eval(fn:IsFieldName(@T))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="ActionHide-Type" testNumber="8"/>
			<description>Entry Type in ActionHide shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionHide has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="ActionHide-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionHide shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionHide has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="ActionImportData" testNumber="1"/>
			<description>ActionImportData shall not contain entries except F, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionImportData contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="ActionImportData-F" testNumber="8"/>
			<description>Entry F in ActionImportData shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ActionImportData has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="ActionImportData-F" testNumber="7"/>
			<description>Entry F in ActionImportData is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in ActionImportData is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="ActionImportData-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionImportData shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionImportData is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="ActionImportData-Next" testNumber="8"/>
			<description>Entry Next in ActionImportData shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionImportData has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="ActionImportData-S" testNumber="8"/>
			<description>Entry S in ActionImportData shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionImportData has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="ActionImportData-S" testNumber="7"/>
			<description>Entry S in ActionImportData is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionImportData is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="ActionImportData-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionImportData shall have value ImportData</description>
			<test>SHasTypeName != true || SNameValue == "ImportData"</test>
			<error>
				<message>Entry S with type Name in ActionImportData has incorrect value %1 instead of ImportData</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="ActionImportData-Type" testNumber="8"/>
			<description>Entry Type in ActionImportData shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionImportData has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="ActionImportData-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionImportData shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionImportData has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="ActionLaunch" testNumber="1"/>
			<description>ActionLaunch shall not contain entries except F, Mac, NewWindow, Next, S, Type, Unix, Win</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Unix' &amp;&amp; elem != 'Win' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionLaunch contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Unix' &amp;&amp; elem != 'Win' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="ActionLaunch-F" testNumber="8"/>
			<description>Entry F in ActionLaunch shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ActionLaunch has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="ActionLaunch-F" testNumber="11"/>
			<description>Entry F in ActionLaunch is required, when fn:Not(fn:IsPresent(Win) || fn:IsPresent(Mac) || fn:IsPresent(Unix))</description>
			<test>containsF == true || ((containsWin == true) || (containsMac == true) || (containsUnix == true))</test>
			<error>
				<message>Entry F in ActionLaunch is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="ActionLaunch-Mac" testNumber="8"/>
			<description>Entry Mac in ActionLaunch shall have type Null</description>
			<test>containsMac == false || MacHasTypeNull == true</test>
			<error>
				<message>Entry Mac in ActionLaunch has type %1 instead of type Null</message>
				<arguments>
					<argument>MacType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="ActionLaunch-NewWindow" testNumber="8"/>
			<description>Entry NewWindow in ActionLaunch shall have type Boolean</description>
			<test>containsNewWindow == false || NewWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry NewWindow in ActionLaunch has type %1 instead of type Boolean</message>
				<arguments>
					<argument>NewWindowType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="ActionLaunch-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionLaunch shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionLaunch is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="ActionLaunch-Next" testNumber="8"/>
			<description>Entry Next in ActionLaunch shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionLaunch has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="ActionLaunch-S" testNumber="8"/>
			<description>Entry S in ActionLaunch shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionLaunch has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="ActionLaunch-S" testNumber="7"/>
			<description>Entry S in ActionLaunch is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionLaunch is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="ActionLaunch-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionLaunch shall have value Launch</description>
			<test>SHasTypeName != true || SNameValue == "Launch"</test>
			<error>
				<message>Entry S with type Name in ActionLaunch has incorrect value %1 instead of Launch</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="ActionLaunch-Type" testNumber="8"/>
			<description>Entry Type in ActionLaunch shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionLaunch has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="ActionLaunch-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionLaunch shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionLaunch has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="ActionLaunch-Unix" testNumber="8"/>
			<description>Entry Unix in ActionLaunch shall have type Null</description>
			<test>containsUnix == false || UnixHasTypeNull == true</test>
			<error>
				<message>Entry Unix in ActionLaunch has type %1 instead of type Null</message>
				<arguments>
					<argument>UnixType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="ActionLaunch-Win" testNumber="8"/>
			<description>Entry Win in ActionLaunch shall have type Dictionary</description>
			<test>containsWin == false || WinHasTypeDictionary == true</test>
			<error>
				<message>Entry Win in ActionLaunch has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>WinType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="ActionMovie" testNumber="1"/>
			<description>ActionMovie shall not contain entries except Annotation, Next, Operation, S, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Annotation' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Operation' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionMovie contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Annotation' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Operation' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="ActionMovie-Annotation" testNumber="8"/>
			<description>Entry Annotation in ActionMovie shall have type Dictionary</description>
			<test>containsAnnotation == false || AnnotationHasTypeDictionary == true</test>
			<error>
				<message>Entry Annotation in ActionMovie has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AnnotationType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="ActionMovie-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionMovie shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionMovie is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="ActionMovie-Next" testNumber="8"/>
			<description>Entry Next in ActionMovie shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionMovie has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="ActionMovie-Operation" testNumber="8"/>
			<description>Entry Operation in ActionMovie shall have type Name</description>
			<test>containsOperation == false || OperationHasTypeName == true</test>
			<error>
				<message>Entry Operation in ActionMovie has type %1 instead of type Name</message>
				<arguments>
					<argument>OperationType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="ActionMovie-Operation-Name" testNumber="6"/>
			<description>Entry Operation with type Name in ActionMovie shall have one of values: Play, Pause, Stop, Resume</description>
			<test>OperationHasTypeName != true || OperationNameValue == "Play" || OperationNameValue == "Stop" || OperationNameValue == "Pause" || OperationNameValue == "Resume"</test>
			<error>
				<message>Entry Operation with type Name in ActionMovie has incorrect value %1 instead of Play, Pause, Stop, Resume</message>
				<arguments>
					<argument>OperationNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="ActionMovie-S" testNumber="8"/>
			<description>Entry S in ActionMovie shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionMovie has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="ActionMovie-S" testNumber="7"/>
			<description>Entry S in ActionMovie is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionMovie is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="ActionMovie-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionMovie shall have value Movie</description>
			<test>SHasTypeName != true || SNameValue == "Movie"</test>
			<error>
				<message>Entry S with type Name in ActionMovie has incorrect value %1 instead of Movie</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="ActionMovie-T" testNumber="8"/>
			<description>Entry T in ActionMovie shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in ActionMovie has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="ActionMovie-Type" testNumber="8"/>
			<description>Entry Type in ActionMovie shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionMovie has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="ActionMovie-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionMovie shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionMovie has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="ActionNamed" testNumber="1"/>
			<description>ActionNamed shall not contain entries except N, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionNamed contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="ActionNamed-N" testNumber="8"/>
			<description>Entry N in ActionNamed shall have type Name</description>
			<test>containsN == false || NHasTypeName == true</test>
			<error>
				<message>Entry N in ActionNamed has type %1 instead of type Name</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="ActionNamed-N" testNumber="7"/>
			<description>Entry N in ActionNamed is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in ActionNamed is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="ActionNamed-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionNamed shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionNamed is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="ActionNamed-Next" testNumber="8"/>
			<description>Entry Next in ActionNamed shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionNamed has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="ActionNamed-S" testNumber="8"/>
			<description>Entry S in ActionNamed shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionNamed has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="ActionNamed-S" testNumber="7"/>
			<description>Entry S in ActionNamed is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionNamed is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="ActionNamed-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionNamed shall have value Named</description>
			<test>SHasTypeName != true || SNameValue == "Named"</test>
			<error>
				<message>Entry S with type Name in ActionNamed has incorrect value %1 instead of Named</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="ActionNamed-Type" testNumber="8"/>
			<description>Entry Type in ActionNamed shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionNamed has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="ActionNamed-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionNamed shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionNamed has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition" testNumber="1"/>
			<description>ActionRendition shall not contain entries except AN, JS, Next, OP, R, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AN' &amp;&amp; elem != 'JS' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'OP' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionRendition contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AN' &amp;&amp; elem != 'JS' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'OP' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-AN" testNumber="8"/>
			<description>Entry AN in ActionRendition shall have type Dictionary</description>
			<test>containsAN == false || ANHasTypeDictionary == true</test>
			<error>
				<message>Entry AN in ActionRendition has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ANType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-AN" testNumber="11"/>
			<description>Entry AN in ActionRendition is required, when (@OP &gt;= 0) &amp;&amp; (@OP &lt;= 4)</description>
			<test>OPHasTypeInteger == false || (containsAN == true || ((OPIntegerValue &lt; 0) || (OPIntegerValue &gt; 4)))</test>
			<error>
				<message>Entry AN in ActionRendition is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-AN-Dictionary" testNumber="10"/>
			<description>Entry AN with type Dictionary in ActionRendition shall be indirect</description>
			<test>ANHasTypeDictionary != true || isANIndirect == true</test>
			<error>
				<message>Entry AN with type Dictionary in ActionRendition is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-JS" testNumber="8"/>
			<description>Entry JS in ActionRendition shall have one of types: Stream, StringText</description>
			<test>containsJS == false || JSHasTypeStream == true || JSHasTypeStringText == true</test>
			<error>
				<message>Entry JS in ActionRendition has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>JSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-JS-Stream" testNumber="10"/>
			<description>Entry JS with type Stream in ActionRendition shall be indirect</description>
			<test>JSHasTypeStream != true || isJSIndirect == true</test>
			<error>
				<message>Entry JS with type Stream in ActionRendition is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionRendition shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionRendition is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-Next" testNumber="8"/>
			<description>Entry Next in ActionRendition shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionRendition has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-OP" testNumber="8"/>
			<description>Entry OP in ActionRendition shall have type Integer</description>
			<test>containsOP == false || OPHasTypeInteger == true</test>
			<error>
				<message>Entry OP in ActionRendition has type %1 instead of type Integer</message>
				<arguments>
					<argument>OPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-OP-Integer" testNumber="14"/>
			<description>Entry OP with type Integer in ActionRendition shall satisfy possible value predicate: fn:Eval((@OP &gt;= 0) &amp;&amp; (@OP &lt;= 4))</description>
			<test>OPHasTypeInteger != true || (OPIntegerValue &gt;= 0) &amp;&amp; (OPIntegerValue &lt;= 4)</test>
			<error>
				<message>Entry OP with type Integer in ActionRendition does not satisfy possible value predicate: fn:Eval((@OP &gt;= 0) &amp;&amp; (@OP &lt;= 4))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-R-Dictionary" testNumber="17"/>
			<description>Entry R with type Dictionary in ActionRendition shall be one of objects RenditionSelector, RenditionMedia</description>
			<test>RHasTypeDictionary != true || R_size == 1</test>
			<error>
				<message>Entry R with type Dictionary in ActionRendition is not one of objects RenditionSelector, RenditionMedia</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-R" testNumber="8"/>
			<description>Entry R in ActionRendition shall have type Dictionary</description>
			<test>containsR == false || RHasTypeDictionary == true</test>
			<error>
				<message>Entry R in ActionRendition has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-R" testNumber="11"/>
			<description>Entry R in ActionRendition is required, when (@OP == 0) || (@OP == 4)</description>
			<test>OPHasTypeInteger == false || (containsR == true || ((OPIntegerValue != 0) &amp;&amp; (OPIntegerValue != 4)))</test>
			<error>
				<message>Entry R in ActionRendition is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-S" testNumber="8"/>
			<description>Entry S in ActionRendition shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionRendition has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-S" testNumber="7"/>
			<description>Entry S in ActionRendition is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionRendition is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionRendition shall have value Rendition</description>
			<test>SHasTypeName != true || SNameValue == "Rendition"</test>
			<error>
				<message>Entry S with type Name in ActionRendition has incorrect value %1 instead of Rendition</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-Type" testNumber="8"/>
			<description>Entry Type in ActionRendition shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionRendition has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="ActionRendition-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionRendition shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionRendition has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="ActionResetForm" testNumber="1"/>
			<description>ActionResetForm shall not contain entries except Fields, Flags, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Fields' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionResetForm contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Fields' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="ActionResetForm-Fields" testNumber="8"/>
			<description>Entry Fields in ActionResetForm shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in ActionResetForm has type %1 instead of type Array</message>
				<arguments>
					<argument>FieldsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="ActionResetForm-Flags" testNumber="8"/>
			<description>Entry Flags in ActionResetForm shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in ActionResetForm has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FlagsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="ActionResetForm-Flags-Bitmask" testNumber="6"/>
			<description>Entry Flags with type Bitmask in ActionResetForm shall have one of values: 0, 1</description>
			<test>FlagsHasTypeBitmask != true || FlagsBitmaskValue == 0 || FlagsBitmaskValue == 1</test>
			<error>
				<message>Entry Flags with type Bitmask in ActionResetForm has incorrect value %1 instead of 0, 1</message>
				<arguments>
					<argument>FlagsBitmaskValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="ActionResetForm-Flags-Bitmask" testNumber="9"/>
			<description>Entry Flags with type Bitmask in ActionResetForm shall satisfy special case: fn:Eval(fn:BitsClear(2, 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 1 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 2 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry Flags with type Bitmask in ActionResetForm does not satisfy special case: fn:Eval(fn:BitsClear(2, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="ActionResetForm-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionResetForm shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionResetForm is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="ActionResetForm-Next" testNumber="8"/>
			<description>Entry Next in ActionResetForm shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionResetForm has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="ActionResetForm-S" testNumber="8"/>
			<description>Entry S in ActionResetForm shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionResetForm has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="ActionResetForm-S" testNumber="7"/>
			<description>Entry S in ActionResetForm is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionResetForm is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="ActionResetForm-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionResetForm shall have value ResetForm</description>
			<test>SHasTypeName != true || SNameValue == "ResetForm"</test>
			<error>
				<message>Entry S with type Name in ActionResetForm has incorrect value %1 instead of ResetForm</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="ActionResetForm-Type" testNumber="8"/>
			<description>Entry Type in ActionResetForm shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionResetForm has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="ActionResetForm-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionResetForm shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionResetForm has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute" testNumber="1"/>
			<description>ActionRichMediaExecute shall not contain entries except CMD, Next, S, TA, TI, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CMD' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TA' &amp;&amp; elem != 'TI' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionRichMediaExecute contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CMD' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TA' &amp;&amp; elem != 'TI' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-CMD" testNumber="8"/>
			<description>Entry CMD in ActionRichMediaExecute shall have type Dictionary</description>
			<test>containsCMD == false || CMDHasTypeDictionary == true</test>
			<error>
				<message>Entry CMD in ActionRichMediaExecute has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CMDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-CMD" testNumber="7"/>
			<description>Entry CMD in ActionRichMediaExecute is required</description>
			<test>containsCMD == true</test>
			<error>
				<message>Entry CMD in ActionRichMediaExecute is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-CMD" testNumber="23"/>
			<description>Entry CMD in ActionRichMediaExecute can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsCMD == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry CMD in ActionRichMediaExecute is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionRichMediaExecute shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript, ActionRichMediaExecute</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionRichMediaExecute is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript, ActionRichMediaExecute</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-Next" testNumber="8"/>
			<description>Entry Next in ActionRichMediaExecute shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionRichMediaExecute has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-Next" testNumber="23"/>
			<description>Entry Next in ActionRichMediaExecute can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsNext == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Next in ActionRichMediaExecute is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-S" testNumber="8"/>
			<description>Entry S in ActionRichMediaExecute shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionRichMediaExecute has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-S" testNumber="7"/>
			<description>Entry S in ActionRichMediaExecute is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionRichMediaExecute is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-S" testNumber="23"/>
			<description>Entry S in ActionRichMediaExecute can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry S in ActionRichMediaExecute is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionRichMediaExecute shall have value RichMediaExecute</description>
			<test>SHasTypeName != true || SNameValue == "RichMediaExecute"</test>
			<error>
				<message>Entry S with type Name in ActionRichMediaExecute has incorrect value %1 instead of RichMediaExecute</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-TA" testNumber="8"/>
			<description>Entry TA in ActionRichMediaExecute shall have type Dictionary</description>
			<test>containsTA == false || TAHasTypeDictionary == true</test>
			<error>
				<message>Entry TA in ActionRichMediaExecute has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-TA" testNumber="7"/>
			<description>Entry TA in ActionRichMediaExecute is required</description>
			<test>containsTA == true</test>
			<error>
				<message>Entry TA in ActionRichMediaExecute is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-TA" testNumber="23"/>
			<description>Entry TA in ActionRichMediaExecute can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTA == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TA in ActionRichMediaExecute is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-TA-Dictionary" testNumber="10"/>
			<description>Entry TA with type Dictionary in ActionRichMediaExecute shall be indirect</description>
			<test>TAHasTypeDictionary != true || isTAIndirect == true</test>
			<error>
				<message>Entry TA with type Dictionary in ActionRichMediaExecute is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-TI" testNumber="8"/>
			<description>Entry TI in ActionRichMediaExecute shall have type Dictionary</description>
			<test>containsTI == false || TIHasTypeDictionary == true</test>
			<error>
				<message>Entry TI in ActionRichMediaExecute has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-TI" testNumber="23"/>
			<description>Entry TI in ActionRichMediaExecute can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTI == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry TI in ActionRichMediaExecute is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-TI-Dictionary" testNumber="10"/>
			<description>Entry TI with type Dictionary in ActionRichMediaExecute shall be indirect</description>
			<test>TIHasTypeDictionary != true || isTIIndirect == true</test>
			<error>
				<message>Entry TI with type Dictionary in ActionRichMediaExecute is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-Type" testNumber="8"/>
			<description>Entry Type in ActionRichMediaExecute shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionRichMediaExecute has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-Type" testNumber="23"/>
			<description>Entry Type in ActionRichMediaExecute can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in ActionRichMediaExecute is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="ActionRichMediaExecute-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionRichMediaExecute shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionRichMediaExecute has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="ActionSetOCGState" testNumber="1"/>
			<description>ActionSetOCGState shall not contain entries except Next, PreserveRB, S, State, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Next' &amp;&amp; elem != 'PreserveRB' &amp;&amp; elem != 'S' &amp;&amp; elem != 'State' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionSetOCGState contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Next' &amp;&amp; elem != 'PreserveRB' &amp;&amp; elem != 'S' &amp;&amp; elem != 'State' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="ActionSetOCGState-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionSetOCGState shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionSetOCGState is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="ActionSetOCGState-Next" testNumber="8"/>
			<description>Entry Next in ActionSetOCGState shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionSetOCGState has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="ActionSetOCGState-PreserveRB" testNumber="8"/>
			<description>Entry PreserveRB in ActionSetOCGState shall have type Boolean</description>
			<test>containsPreserveRB == false || PreserveRBHasTypeBoolean == true</test>
			<error>
				<message>Entry PreserveRB in ActionSetOCGState has type %1 instead of type Boolean</message>
				<arguments>
					<argument>PreserveRBType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="ActionSetOCGState-S" testNumber="8"/>
			<description>Entry S in ActionSetOCGState shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionSetOCGState has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="ActionSetOCGState-S" testNumber="7"/>
			<description>Entry S in ActionSetOCGState is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionSetOCGState is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="ActionSetOCGState-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionSetOCGState shall have value SetOCGState</description>
			<test>SHasTypeName != true || SNameValue == "SetOCGState"</test>
			<error>
				<message>Entry S with type Name in ActionSetOCGState has incorrect value %1 instead of SetOCGState</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="ActionSetOCGState-State" testNumber="8"/>
			<description>Entry State in ActionSetOCGState shall have type Array</description>
			<test>containsState == false || StateHasTypeArray == true</test>
			<error>
				<message>Entry State in ActionSetOCGState has type %1 instead of type Array</message>
				<arguments>
					<argument>StateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="ActionSetOCGState-State" testNumber="7"/>
			<description>Entry State in ActionSetOCGState is required</description>
			<test>containsState == true</test>
			<error>
				<message>Entry State in ActionSetOCGState is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="ActionSetOCGState-Type" testNumber="8"/>
			<description>Entry Type in ActionSetOCGState shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionSetOCGState has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="ActionSetOCGState-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionSetOCGState shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionSetOCGState has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="ActionSound" testNumber="1"/>
			<description>ActionSound shall not contain entries except Mix, Next, Repeat, S, Sound, Synchronous, Type, Volume</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Mix' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Repeat' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Sound' &amp;&amp; elem != 'Synchronous' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Volume' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionSound contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Mix' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Repeat' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Sound' &amp;&amp; elem != 'Synchronous' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Volume' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="ActionSound-Mix" testNumber="8"/>
			<description>Entry Mix in ActionSound shall have type Boolean</description>
			<test>containsMix == false || MixHasTypeBoolean == true</test>
			<error>
				<message>Entry Mix in ActionSound has type %1 instead of type Boolean</message>
				<arguments>
					<argument>MixType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="ActionSound-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionSound shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionSound is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="ActionSound-Next" testNumber="8"/>
			<description>Entry Next in ActionSound shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionSound has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="ActionSound-Repeat" testNumber="8"/>
			<description>Entry Repeat in ActionSound shall have type Boolean</description>
			<test>containsRepeat == false || RepeatHasTypeBoolean == true</test>
			<error>
				<message>Entry Repeat in ActionSound has type %1 instead of type Boolean</message>
				<arguments>
					<argument>RepeatType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="ActionSound-S" testNumber="8"/>
			<description>Entry S in ActionSound shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionSound has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="ActionSound-S" testNumber="7"/>
			<description>Entry S in ActionSound is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionSound is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="ActionSound-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionSound shall have value Sound</description>
			<test>SHasTypeName != true || SNameValue == "Sound"</test>
			<error>
				<message>Entry S with type Name in ActionSound has incorrect value %1 instead of Sound</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="ActionSound-Sound" testNumber="8"/>
			<description>Entry Sound in ActionSound shall have type Stream</description>
			<test>containsSound == false || SoundHasTypeStream == true</test>
			<error>
				<message>Entry Sound in ActionSound has type %1 instead of type Stream</message>
				<arguments>
					<argument>SoundType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="ActionSound-Sound" testNumber="7"/>
			<description>Entry Sound in ActionSound is required</description>
			<test>containsSound == true</test>
			<error>
				<message>Entry Sound in ActionSound is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="ActionSound-Sound-Stream" testNumber="10"/>
			<description>Entry Sound with type Stream in ActionSound shall be indirect</description>
			<test>SoundHasTypeStream != true || isSoundIndirect == true</test>
			<error>
				<message>Entry Sound with type Stream in ActionSound is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="ActionSound-Synchronous" testNumber="8"/>
			<description>Entry Synchronous in ActionSound shall have type Boolean</description>
			<test>containsSynchronous == false || SynchronousHasTypeBoolean == true</test>
			<error>
				<message>Entry Synchronous in ActionSound has type %1 instead of type Boolean</message>
				<arguments>
					<argument>SynchronousType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="ActionSound-Type" testNumber="8"/>
			<description>Entry Type in ActionSound shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionSound has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="ActionSound-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionSound shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionSound has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="ActionSound-Volume" testNumber="8"/>
			<description>Entry Volume in ActionSound shall have type Number</description>
			<test>containsVolume == false || VolumeHasTypeNumber == true</test>
			<error>
				<message>Entry Volume in ActionSound has type %1 instead of type Number</message>
				<arguments>
					<argument>VolumeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="ActionSound-Volume-Number" testNumber="14"/>
			<description>Entry Volume with type Number in ActionSound shall satisfy possible value predicate: fn:Eval((@Volume &gt;= -1) &amp;&amp; (@Volume &lt;= 1))</description>
			<test>VolumeHasTypeNumber != true || (VolumeNumberValue &gt;= -1) &amp;&amp; (VolumeNumberValue &lt;= 1)</test>
			<error>
				<message>Entry Volume with type Number in ActionSound does not satisfy possible value predicate: fn:Eval((@Volume &gt;= -1) &amp;&amp; (@Volume &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="ActionSubmitForm" testNumber="1"/>
			<description>ActionSubmitForm shall not contain entries except CharSet, F, Fields, Flags, S</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CharSet' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'S' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionSubmitForm contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CharSet' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'S' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="ActionSubmitForm-CharSet" testNumber="8"/>
			<description>Entry CharSet in ActionSubmitForm shall have type String</description>
			<test>containsCharSet == false || CharSetHasTypeString == true</test>
			<error>
				<message>Entry CharSet in ActionSubmitForm has type %1 instead of type String</message>
				<arguments>
					<argument>CharSetType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="ActionSubmitForm-CharSet-String" testNumber="6"/>
			<description>Entry CharSet with type String in ActionSubmitForm shall have one of values: GBK, UHC, utf-16, utf-8, Shift-JIS, BigFive</description>
			<test>CharSetHasTypeString != true || CharSetStringValue == "utf-8" || CharSetStringValue == "utf-16" || CharSetStringValue == "Shift-JIS" || CharSetStringValue == "BigFive" || CharSetStringValue == "GBK" || CharSetStringValue == "UHC"</test>
			<error>
				<message>Entry CharSet with type String in ActionSubmitForm has incorrect value %1 instead of GBK, UHC, utf-16, utf-8, Shift-JIS, BigFive</message>
				<arguments>
					<argument>CharSetStringValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="ActionSubmitForm-F" testNumber="8"/>
			<description>Entry F in ActionSubmitForm shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ActionSubmitForm has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="ActionSubmitForm-F" testNumber="7"/>
			<description>Entry F in ActionSubmitForm is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in ActionSubmitForm is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="ActionSubmitForm-Fields" testNumber="8"/>
			<description>Entry Fields in ActionSubmitForm shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in ActionSubmitForm has type %1 instead of type Array</message>
				<arguments>
					<argument>FieldsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="ActionSubmitForm-Flags" testNumber="8"/>
			<description>Entry Flags in ActionSubmitForm shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in ActionSubmitForm has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FlagsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="ActionSubmitForm-Flags-Bitmask" testNumber="9"/>
			<description>Entry Flags with type Bitmask in ActionSubmitForm shall satisfy special case: fn:Eval(fn:BitClear(13) &amp;&amp; fn:BitsClear(15, 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in ActionSubmitForm does not satisfy special case: fn:Eval(fn:BitClear(13) &amp;&amp; fn:BitsClear(15, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="ActionSubmitForm-S" testNumber="8"/>
			<description>Entry S in ActionSubmitForm shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionSubmitForm has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="ActionSubmitForm-S" testNumber="7"/>
			<description>Entry S in ActionSubmitForm is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionSubmitForm is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="ActionSubmitForm-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionSubmitForm shall have value SubmitForm</description>
			<test>SHasTypeName != true || SNameValue == "SubmitForm"</test>
			<error>
				<message>Entry S with type Name in ActionSubmitForm has incorrect value %1 instead of SubmitForm</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="ActionThread" testNumber="1"/>
			<description>ActionThread shall not contain entries except B, D, F, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionThread contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="ActionThread-B" testNumber="8"/>
			<description>Entry B in ActionThread shall have one of types: Dictionary, Integer</description>
			<test>containsB == false || BHasTypeDictionary == true || BHasTypeInteger == true</test>
			<error>
				<message>Entry B in ActionThread has type %1 instead of one of types: Dictionary, Integer</message>
				<arguments>
					<argument>BType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="ActionThread-B-Dictionary" testNumber="10"/>
			<description>Entry B with type Dictionary in ActionThread shall be indirect</description>
			<test>BHasTypeDictionary != true || isBIndirect == true</test>
			<error>
				<message>Entry B with type Dictionary in ActionThread is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="ActionThread-B-Integer" testNumber="14"/>
			<description>Entry B with type Integer in ActionThread shall satisfy possible value predicate: fn:Eval(@B &gt;= 0)</description>
			<test>BHasTypeInteger != true || BIntegerValue &gt;= 0</test>
			<error>
				<message>Entry B with type Integer in ActionThread does not satisfy possible value predicate: fn:Eval(@B &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="ActionThread-D" testNumber="8"/>
			<description>Entry D in ActionThread shall have one of types: Dictionary, Integer, StringText</description>
			<test>containsD == false || DHasTypeDictionary == true || DHasTypeInteger == true || DHasTypeStringText == true</test>
			<error>
				<message>Entry D in ActionThread has type %1 instead of one of types: Dictionary, Integer, StringText</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="ActionThread-D" testNumber="7"/>
			<description>Entry D in ActionThread is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionThread is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="ActionThread-D-Dictionary" testNumber="10"/>
			<description>Entry D with type Dictionary in ActionThread shall be indirect</description>
			<test>DHasTypeDictionary != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Dictionary in ActionThread is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="ActionThread-D-Integer" testNumber="14"/>
			<description>Entry D with type Integer in ActionThread shall satisfy possible value predicate: fn:Eval((@D &gt;= 0) &amp;&amp; (@D &lt; fn:ArrayLength(trailer::Catalog::Threads)))</description>
			<test>DHasTypeInteger != true || (DIntegerValue &gt;= 0) &amp;&amp; (trailerCatalogThreadsHasTypeArray == false || (DIntegerValue &lt; trailerCatalogThreadsArraySize))</test>
			<error>
				<message>Entry D with type Integer in ActionThread does not satisfy possible value predicate: fn:Eval((@D &gt;= 0) &amp;&amp; (@D &lt; fn:ArrayLength(trailer::Catalog::Threads)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="ActionThread-F" testNumber="8"/>
			<description>Entry F in ActionThread shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ActionThread has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="ActionThread-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionThread shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionThread is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="ActionThread-Next" testNumber="8"/>
			<description>Entry Next in ActionThread shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionThread has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="ActionThread-S" testNumber="8"/>
			<description>Entry S in ActionThread shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionThread has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="ActionThread-S" testNumber="7"/>
			<description>Entry S in ActionThread is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionThread is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="ActionThread-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionThread shall have value Thread</description>
			<test>SHasTypeName != true || SNameValue == "Thread"</test>
			<error>
				<message>Entry S with type Name in ActionThread has incorrect value %1 instead of Thread</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="ActionThread-Type" testNumber="8"/>
			<description>Entry Type in ActionThread shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionThread has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="ActionThread-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionThread shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionThread has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="ActionTransition" testNumber="1"/>
			<description>ActionTransition shall not contain entries except Next, S, Trans, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionTransition contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="ActionTransition-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionTransition shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionTransition is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="ActionTransition-Next" testNumber="8"/>
			<description>Entry Next in ActionTransition shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionTransition has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="ActionTransition-S" testNumber="8"/>
			<description>Entry S in ActionTransition shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionTransition has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="ActionTransition-S" testNumber="7"/>
			<description>Entry S in ActionTransition is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionTransition is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="ActionTransition-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionTransition shall have value Trans</description>
			<test>SHasTypeName != true || SNameValue == "Trans"</test>
			<error>
				<message>Entry S with type Name in ActionTransition has incorrect value %1 instead of Trans</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="ActionTransition-Trans" testNumber="8"/>
			<description>Entry Trans in ActionTransition shall have type Dictionary</description>
			<test>containsTrans == false || TransHasTypeDictionary == true</test>
			<error>
				<message>Entry Trans in ActionTransition has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TransType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="ActionTransition-Trans" testNumber="7"/>
			<description>Entry Trans in ActionTransition is required</description>
			<test>containsTrans == true</test>
			<error>
				<message>Entry Trans in ActionTransition is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="ActionTransition-Type" testNumber="8"/>
			<description>Entry Type in ActionTransition shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionTransition has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="ActionTransition-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionTransition shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionTransition has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="ActionURI" testNumber="1"/>
			<description>ActionURI shall not contain entries except IsMap, Next, S, Type, URI</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'IsMap' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URI' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ActionURI contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'IsMap' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URI' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="ActionURI-IsMap" testNumber="8"/>
			<description>Entry IsMap in ActionURI shall have type Boolean</description>
			<test>containsIsMap == false || IsMapHasTypeBoolean == true</test>
			<error>
				<message>Entry IsMap in ActionURI has type %1 instead of type Boolean</message>
				<arguments>
					<argument>IsMapType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="ActionURI-Next-Dictionary" testNumber="17"/>
			<description>Entry Next with type Dictionary in ActionURI shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionURI is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="ActionURI-Next" testNumber="8"/>
			<description>Entry Next in ActionURI shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionURI has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="ActionURI-S" testNumber="8"/>
			<description>Entry S in ActionURI shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionURI has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="ActionURI-S" testNumber="7"/>
			<description>Entry S in ActionURI is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionURI is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="ActionURI-S-Name" testNumber="6"/>
			<description>Entry S with type Name in ActionURI shall have value URI</description>
			<test>SHasTypeName != true || SNameValue == "URI"</test>
			<error>
				<message>Entry S with type Name in ActionURI has incorrect value %1 instead of URI</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="ActionURI-Type" testNumber="8"/>
			<description>Entry Type in ActionURI shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionURI has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="ActionURI-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ActionURI shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionURI has incorrect value %1 instead of Action</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="ActionURI-URI" testNumber="8"/>
			<description>Entry URI in ActionURI shall have type StringAscii</description>
			<test>containsURI == false || URIHasTypeStringAscii == true</test>
			<error>
				<message>Entry URI in ActionURI has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>URIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="ActionURI-URI" testNumber="7"/>
			<description>Entry URI in ActionURI is required</description>
			<test>containsURI == true</test>
			<error>
				<message>Entry URI in ActionURI is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="AddActionCatalog" testNumber="1"/>
			<description>AddActionCatalog shall not contain entries except DC, DP, DS, WP, WS</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DC' &amp;&amp; elem != 'DP' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'WP' &amp;&amp; elem != 'WS' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AddActionCatalog contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DC' &amp;&amp; elem != 'DP' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'WP' &amp;&amp; elem != 'WS' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="AddActionCatalog-DC" testNumber="8"/>
			<description>Entry DC in AddActionCatalog shall have type Dictionary</description>
			<test>containsDC == false || DCHasTypeDictionary == true</test>
			<error>
				<message>Entry DC in AddActionCatalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="AddActionCatalog-DP" testNumber="8"/>
			<description>Entry DP in AddActionCatalog shall have type Dictionary</description>
			<test>containsDP == false || DPHasTypeDictionary == true</test>
			<error>
				<message>Entry DP in AddActionCatalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="AddActionCatalog-DS" testNumber="8"/>
			<description>Entry DS in AddActionCatalog shall have type Dictionary</description>
			<test>containsDS == false || DSHasTypeDictionary == true</test>
			<error>
				<message>Entry DS in AddActionCatalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="AddActionCatalog-WP" testNumber="8"/>
			<description>Entry WP in AddActionCatalog shall have type Dictionary</description>
			<test>containsWP == false || WPHasTypeDictionary == true</test>
			<error>
				<message>Entry WP in AddActionCatalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>WPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="AddActionCatalog-WS" testNumber="8"/>
			<description>Entry WS in AddActionCatalog shall have type Dictionary</description>
			<test>containsWS == false || WSHasTypeDictionary == true</test>
			<error>
				<message>Entry WS in AddActionCatalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>WSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_7" clause="AddActionFormField" testNumber="1"/>
			<description>AddActionFormField shall not contain entries except C, F, K, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'F' &amp;&amp; elem != 'K' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AddActionFormField contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'F' &amp;&amp; elem != 'K' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_7" clause="AddActionFormField-C" testNumber="8"/>
			<description>Entry C in AddActionFormField shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in AddActionFormField has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_7" clause="AddActionFormField-F" testNumber="8"/>
			<description>Entry F in AddActionFormField shall have type Dictionary</description>
			<test>containsF == false || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in AddActionFormField has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_7" clause="AddActionFormField-K" testNumber="8"/>
			<description>Entry K in AddActionFormField shall have type Dictionary</description>
			<test>containsK == false || KHasTypeDictionary == true</test>
			<error>
				<message>Entry K in AddActionFormField has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>KType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_7" clause="AddActionFormField-V" testNumber="8"/>
			<description>Entry V in AddActionFormField shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in AddActionFormField has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_7" clause="AddActionPageObject" testNumber="1"/>
			<description>AddActionPageObject shall not contain entries except C, O</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'O' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AddActionPageObject contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'O' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_7" clause="AddActionPageObject-C-Dictionary" testNumber="17"/>
			<description>Entry C with type Dictionary in AddActionPageObject shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in AddActionPageObject is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_7" clause="AddActionPageObject-C" testNumber="8"/>
			<description>Entry C in AddActionPageObject shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in AddActionPageObject has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_7" clause="AddActionPageObject-O-Dictionary" testNumber="17"/>
			<description>Entry O with type Dictionary in AddActionPageObject shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>OHasTypeDictionary != true || O_size == 1</test>
			<error>
				<message>Entry O with type Dictionary in AddActionPageObject is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_7" clause="AddActionPageObject-O" testNumber="8"/>
			<description>Entry O in AddActionPageObject shall have type Dictionary</description>
			<test>containsO == false || OHasTypeDictionary == true</test>
			<error>
				<message>Entry O in AddActionPageObject has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation" testNumber="1"/>
			<description>AddActionScreenAnnotation shall not contain entries except D, E, PC, PI, PO, PV, U, X</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'E' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'PI' &amp;&amp; elem != 'PO' &amp;&amp; elem != 'PV' &amp;&amp; elem != 'U' &amp;&amp; elem != 'X' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AddActionScreenAnnotation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'E' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'PI' &amp;&amp; elem != 'PO' &amp;&amp; elem != 'PV' &amp;&amp; elem != 'U' &amp;&amp; elem != 'X' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation-D-Dictionary" testNumber="17"/>
			<description>Entry D with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation-D" testNumber="8"/>
			<description>Entry D in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in AddActionScreenAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation-E-Dictionary" testNumber="17"/>
			<description>Entry E with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>EHasTypeDictionary != true || E_size == 1</test>
			<error>
				<message>Entry E with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation-E" testNumber="8"/>
			<description>Entry E in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsE == false || EHasTypeDictionary == true</test>
			<error>
				<message>Entry E in AddActionScreenAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>EType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation-PC-Dictionary" testNumber="17"/>
			<description>Entry PC with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>PCHasTypeDictionary != true || PC_size == 1</test>
			<error>
				<message>Entry PC with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation-PC" testNumber="8"/>
			<description>Entry PC in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsPC == false || PCHasTypeDictionary == true</test>
			<error>
				<message>Entry PC in AddActionScreenAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation-PI-Dictionary" testNumber="17"/>
			<description>Entry PI with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>PIHasTypeDictionary != true || PI_size == 1</test>
			<error>
				<message>Entry PI with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation-PI" testNumber="8"/>
			<description>Entry PI in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsPI == false || PIHasTypeDictionary == true</test>
			<error>
				<message>Entry PI in AddActionScreenAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation-PO-Dictionary" testNumber="17"/>
			<description>Entry PO with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>POHasTypeDictionary != true || PO_size == 1</test>
			<error>
				<message>Entry PO with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation-PO" testNumber="8"/>
			<description>Entry PO in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsPO == false || POHasTypeDictionary == true</test>
			<error>
				<message>Entry PO in AddActionScreenAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>POType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation-PV-Dictionary" testNumber="17"/>
			<description>Entry PV with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>PVHasTypeDictionary != true || PV_size == 1</test>
			<error>
				<message>Entry PV with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation-PV" testNumber="8"/>
			<description>Entry PV in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsPV == false || PVHasTypeDictionary == true</test>
			<error>
				<message>Entry PV in AddActionScreenAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation-U-Dictionary" testNumber="17"/>
			<description>Entry U with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>UHasTypeDictionary != true || U_size == 1</test>
			<error>
				<message>Entry U with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation-U" testNumber="8"/>
			<description>Entry U in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsU == false || UHasTypeDictionary == true</test>
			<error>
				<message>Entry U in AddActionScreenAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>UType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation-X-Dictionary" testNumber="17"/>
			<description>Entry X with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>XHasTypeDictionary != true || X_size == 1</test>
			<error>
				<message>Entry X with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionScreenAnnotation-X" testNumber="8"/>
			<description>Entry X in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsX == false || XHasTypeDictionary == true</test>
			<error>
				<message>Entry X in AddActionScreenAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>XType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation" testNumber="1"/>
			<description>AddActionWidgetAnnotation shall not contain entries except Bl, D, E, Fo, PC, PI, PO, PV, U, X</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Bl' &amp;&amp; elem != 'D' &amp;&amp; elem != 'E' &amp;&amp; elem != 'Fo' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'PI' &amp;&amp; elem != 'PO' &amp;&amp; elem != 'PV' &amp;&amp; elem != 'U' &amp;&amp; elem != 'X' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AddActionWidgetAnnotation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Bl' &amp;&amp; elem != 'D' &amp;&amp; elem != 'E' &amp;&amp; elem != 'Fo' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'PI' &amp;&amp; elem != 'PO' &amp;&amp; elem != 'PV' &amp;&amp; elem != 'U' &amp;&amp; elem != 'X' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-Bl-Dictionary" testNumber="17"/>
			<description>Entry Bl with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>BlHasTypeDictionary != true || Bl_size == 1</test>
			<error>
				<message>Entry Bl with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-Bl" testNumber="8"/>
			<description>Entry Bl in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsBl == false || BlHasTypeDictionary == true</test>
			<error>
				<message>Entry Bl in AddActionWidgetAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BlType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-D-Dictionary" testNumber="17"/>
			<description>Entry D with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-D" testNumber="8"/>
			<description>Entry D in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in AddActionWidgetAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-E-Dictionary" testNumber="17"/>
			<description>Entry E with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>EHasTypeDictionary != true || E_size == 1</test>
			<error>
				<message>Entry E with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-E" testNumber="8"/>
			<description>Entry E in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsE == false || EHasTypeDictionary == true</test>
			<error>
				<message>Entry E in AddActionWidgetAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>EType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-Fo-Dictionary" testNumber="17"/>
			<description>Entry Fo with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>FoHasTypeDictionary != true || Fo_size == 1</test>
			<error>
				<message>Entry Fo with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-Fo" testNumber="8"/>
			<description>Entry Fo in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsFo == false || FoHasTypeDictionary == true</test>
			<error>
				<message>Entry Fo in AddActionWidgetAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-PC-Dictionary" testNumber="17"/>
			<description>Entry PC with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>PCHasTypeDictionary != true || PC_size == 1</test>
			<error>
				<message>Entry PC with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-PC" testNumber="8"/>
			<description>Entry PC in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsPC == false || PCHasTypeDictionary == true</test>
			<error>
				<message>Entry PC in AddActionWidgetAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-PI-Dictionary" testNumber="17"/>
			<description>Entry PI with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>PIHasTypeDictionary != true || PI_size == 1</test>
			<error>
				<message>Entry PI with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-PI" testNumber="8"/>
			<description>Entry PI in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsPI == false || PIHasTypeDictionary == true</test>
			<error>
				<message>Entry PI in AddActionWidgetAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-PO-Dictionary" testNumber="17"/>
			<description>Entry PO with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>POHasTypeDictionary != true || PO_size == 1</test>
			<error>
				<message>Entry PO with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-PO" testNumber="8"/>
			<description>Entry PO in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsPO == false || POHasTypeDictionary == true</test>
			<error>
				<message>Entry PO in AddActionWidgetAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>POType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-PV-Dictionary" testNumber="17"/>
			<description>Entry PV with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>PVHasTypeDictionary != true || PV_size == 1</test>
			<error>
				<message>Entry PV with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-PV" testNumber="8"/>
			<description>Entry PV in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsPV == false || PVHasTypeDictionary == true</test>
			<error>
				<message>Entry PV in AddActionWidgetAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-U-Dictionary" testNumber="17"/>
			<description>Entry U with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>UHasTypeDictionary != true || U_size == 1</test>
			<error>
				<message>Entry U with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-U" testNumber="8"/>
			<description>Entry U in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsU == false || UHasTypeDictionary == true</test>
			<error>
				<message>Entry U in AddActionWidgetAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>UType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-X-Dictionary" testNumber="17"/>
			<description>Entry X with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>XHasTypeDictionary != true || X_size == 1</test>
			<error>
				<message>Entry X with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="AddActionWidgetAnnotation-X" testNumber="8"/>
			<description>Entry X in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsX == false || XHasTypeDictionary == true</test>
			<error>
				<message>Entry X in AddActionWidgetAnnotation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>XType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_7" clause="AlternateImage" testNumber="1"/>
			<description>AlternateImage shall not contain entries except DefaultForPrinting, Image, OC</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DefaultForPrinting' &amp;&amp; elem != 'Image' &amp;&amp; elem != 'OC' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AlternateImage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DefaultForPrinting' &amp;&amp; elem != 'Image' &amp;&amp; elem != 'OC' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_7" clause="AlternateImage-DefaultForPrinting" testNumber="8"/>
			<description>Entry DefaultForPrinting in AlternateImage shall have type Boolean</description>
			<test>containsDefaultForPrinting == false || DefaultForPrintingHasTypeBoolean == true</test>
			<error>
				<message>Entry DefaultForPrinting in AlternateImage has type %1 instead of type Boolean</message>
				<arguments>
					<argument>DefaultForPrintingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_7" clause="AlternateImage-Image" testNumber="8"/>
			<description>Entry Image in AlternateImage shall have type Stream</description>
			<test>containsImage == false || ImageHasTypeStream == true</test>
			<error>
				<message>Entry Image in AlternateImage has type %1 instead of type Stream</message>
				<arguments>
					<argument>ImageType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_7" clause="AlternateImage-Image" testNumber="7"/>
			<description>Entry Image in AlternateImage is required</description>
			<test>containsImage == true</test>
			<error>
				<message>Entry Image in AlternateImage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_7" clause="AlternateImage-Image-Stream" testNumber="10"/>
			<description>Entry Image with type Stream in AlternateImage shall be indirect</description>
			<test>ImageHasTypeStream != true || isImageIndirect == true</test>
			<error>
				<message>Entry Image with type Stream in AlternateImage is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_7" clause="AlternateImage-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AlternateImage shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AlternateImage is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_7" clause="AlternateImage-OC" testNumber="8"/>
			<description>Entry OC in AlternateImage shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AlternateImage has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D" testNumber="1"/>
			<description>Annot3D shall not contain entries except 3DA, 3DB, 3DD, 3DI, 3DU, 3DV, AP, AS, Border, C, Contents, F, M, NM, OC, P, Rect, StructParent, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != '3DA' &amp;&amp; elem != '3DB' &amp;&amp; elem != '3DD' &amp;&amp; elem != '3DI' &amp;&amp; elem != '3DU' &amp;&amp; elem != '3DV' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'GEO' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Annot3D contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != '3DA' &amp;&amp; elem != '3DB' &amp;&amp; elem != '3DD' &amp;&amp; elem != '3DI' &amp;&amp; elem != '3DU' &amp;&amp; elem != '3DV' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'GEO' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D" testNumber="22"/>
			<description>Annot3D shall not contain entries AF, BM, CA, GEO, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'BM' || elem == 'CA' || elem == 'GEO' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>Annot3D contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'BM' || elem == 'CA' || elem == 'GEO' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-3DA" testNumber="8"/>
			<description>Entry 3DA in Annot3D shall have type Dictionary</description>
			<test>contains3DA == false || entry3DAHasTypeDictionary == true</test>
			<error>
				<message>Entry 3DA in Annot3D has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>entry3DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-3DB" testNumber="8"/>
			<description>Entry 3DB in Annot3D shall have type Rectangle</description>
			<test>contains3DB == false || entry3DBHasTypeRectangle == true</test>
			<error>
				<message>Entry 3DB in Annot3D has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>entry3DBType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-3DD" testNumber="8"/>
			<description>Entry 3DD in Annot3D shall have one of types: Dictionary, Stream</description>
			<test>contains3DD == false || entry3DDHasTypeDictionary == true || entry3DDHasTypeStream == true</test>
			<error>
				<message>Entry 3DD in Annot3D has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>entry3DDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-3DD" testNumber="7"/>
			<description>Entry 3DD in Annot3D is required</description>
			<test>contains3DD == true</test>
			<error>
				<message>Entry 3DD in Annot3D is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-3DD-Stream" testNumber="10"/>
			<description>Entry 3DD with type Stream in Annot3D shall be indirect</description>
			<test>entry3DDHasTypeStream != true || isentry3DDIndirect == true</test>
			<error>
				<message>Entry 3DD with type Stream in Annot3D is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-3DI" testNumber="8"/>
			<description>Entry 3DI in Annot3D shall have type Boolean</description>
			<test>contains3DI == false || entry3DIHasTypeBoolean == true</test>
			<error>
				<message>Entry 3DI in Annot3D has type %1 instead of type Boolean</message>
				<arguments>
					<argument>entry3DIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-3DU" testNumber="8"/>
			<description>Entry 3DU in Annot3D shall have type Dictionary</description>
			<test>contains3DU == false || entry3DUHasTypeDictionary == true</test>
			<error>
				<message>Entry 3DU in Annot3D has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>entry3DUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-3DU" testNumber="23"/>
			<description>Entry 3DU in Annot3D can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>contains3DU == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry 3DU in Annot3D is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-3DV" testNumber="8"/>
			<description>Entry 3DV in Annot3D shall have one of types: Dictionary, Integer, Name, String</description>
			<test>contains3DV == false || entry3DVHasTypeDictionary == true || entry3DVHasTypeInteger == true || entry3DVHasTypeName == true || entry3DVHasTypeString == true</test>
			<error>
				<message>Entry 3DV in Annot3D has type %1 instead of one of types: Dictionary, Integer, Name, String</message>
				<arguments>
					<argument>entry3DVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-AP" testNumber="8"/>
			<description>Entry AP in Annot3D shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in Annot3D has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-AS" testNumber="8"/>
			<description>Entry AS in Annot3D shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in Annot3D has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-AS" testNumber="11"/>
			<description>Entry AS in Annot3D is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in Annot3D is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-Border" testNumber="8"/>
			<description>Entry Border in Annot3D shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in Annot3D has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-C" testNumber="8"/>
			<description>Entry C in Annot3D shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in Annot3D has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-Contents" testNumber="8"/>
			<description>Entry Contents in Annot3D shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in Annot3D has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-F" testNumber="8"/>
			<description>Entry F in Annot3D shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in Annot3D has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in Annot3D shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in Annot3D does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-M" testNumber="8"/>
			<description>Entry M in Annot3D shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in Annot3D has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-NM" testNumber="8"/>
			<description>Entry NM in Annot3D shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in Annot3D has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in Annot3D shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in Annot3D is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-OC" testNumber="8"/>
			<description>Entry OC in Annot3D shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in Annot3D has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-P" testNumber="8"/>
			<description>Entry P in Annot3D shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in Annot3D has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in Annot3D shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in Annot3D is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-Rect" testNumber="8"/>
			<description>Entry Rect in Annot3D shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in Annot3D has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-Rect" testNumber="7"/>
			<description>Entry Rect in Annot3D is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in Annot3D is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-StructParent" testNumber="8"/>
			<description>Entry StructParent in Annot3D shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in Annot3D has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-Subtype" testNumber="8"/>
			<description>Entry Subtype in Annot3D shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in Annot3D has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-Subtype" testNumber="7"/>
			<description>Entry Subtype in Annot3D is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in Annot3D is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in Annot3D shall have value 3D</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "3D"</test>
			<error>
				<message>Entry Subtype with type Name in Annot3D has incorrect value %1 instead of 3D</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-Type" testNumber="8"/>
			<description>Entry Type in Annot3D shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Annot3D has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="Annot3D-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Annot3D shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in Annot3D has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret" testNumber="1"/>
			<description>AnnotCaret shall not contain entries except AF, AP, AS, Border, C, CA, Contents, CreationDate, ExData, F, IRT, IT, M, NM, OC, P, Popup, RC, RD, RT, Rect, StructParent, Subj, Subtype, Sy, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Sy' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotCaret contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Sy' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret" testNumber="22"/>
			<description>AnnotCaret shall not contain entries BM, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotCaret contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-AF" testNumber="8"/>
			<description>Entry AF in AnnotCaret shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotCaret has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-AF" testNumber="23"/>
			<description>Entry AF in AnnotCaret can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotCaret is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-AP" testNumber="8"/>
			<description>Entry AP in AnnotCaret shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotCaret has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-AS" testNumber="8"/>
			<description>Entry AS in AnnotCaret shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotCaret has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-AS" testNumber="11"/>
			<description>Entry AS in AnnotCaret is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotCaret is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-Border" testNumber="8"/>
			<description>Entry Border in AnnotCaret shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotCaret has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-C" testNumber="8"/>
			<description>Entry C in AnnotCaret shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotCaret has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-CA" testNumber="8"/>
			<description>Entry CA in AnnotCaret shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotCaret has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotCaret shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotCaret does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotCaret shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotCaret has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotCaret shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotCaret has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotCaret shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotCaret is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotCaret shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotCaret has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-F" testNumber="8"/>
			<description>Entry F in AnnotCaret shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotCaret has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotCaret shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotCaret does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotCaret shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotCaret is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotCaret shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotCaret has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotCaret is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotCaret is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-IT" testNumber="8"/>
			<description>Entry IT in AnnotCaret shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotCaret has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-M" testNumber="8"/>
			<description>Entry M in AnnotCaret shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotCaret has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-NM" testNumber="8"/>
			<description>Entry NM in AnnotCaret shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotCaret has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotCaret shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotCaret is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-OC" testNumber="8"/>
			<description>Entry OC in AnnotCaret shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotCaret has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-P" testNumber="8"/>
			<description>Entry P in AnnotCaret shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotCaret has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotCaret shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotCaret is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotCaret shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotCaret has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotCaret shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotCaret is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-RC" testNumber="8"/>
			<description>Entry RC in AnnotCaret shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotCaret has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotCaret shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotCaret is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-RD" testNumber="8"/>
			<description>Entry RD in AnnotCaret shall have type Rectangle</description>
			<test>containsRD == false || RDHasTypeRectangle == true</test>
			<error>
				<message>Entry RD in AnnotCaret has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-RD-Rectangle" testNumber="9"/>
			<description>Entry RD with type Rectangle in AnnotCaret shall satisfy special case: fn:Eval((RD::@0 &gt;= 0) &amp;&amp; (RD::@1 &gt;= 0) &amp;&amp; (RD::@2 &gt;= 0) &amp;&amp; (RD::@3 &gt;= 0) &amp;&amp; ((RD::@1 + RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0 + RD::@2) &lt; fn:RectWidth(Rect)))</description>
			<test>RDHasTypeRectangle != true || ((RD0NumberValue &gt;= 0) &amp;&amp; (RD1NumberValue &gt;= 0) &amp;&amp; (RD2NumberValue &gt;= 0) &amp;&amp; (RD3NumberValue &gt;= 0) &amp;&amp; (RectHasTypeRectangle == false || ((RD1NumberValue + RD3NumberValue) &lt; RectRectHeight)) &amp;&amp; (RectHasTypeRectangle == false || ((RD0NumberValue + RD2NumberValue) &lt; RectRectWidth)))</test>
			<error>
				<message>Entry RD with type Rectangle in AnnotCaret does not satisfy special case: fn:Eval((RD::@0 &gt;= 0) &amp;&amp; (RD::@1 &gt;= 0) &amp;&amp; (RD::@2 &gt;= 0) &amp;&amp; (RD::@3 &gt;= 0) &amp;&amp; ((RD::@1 + RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0 + RD::@2) &lt; fn:RectWidth(Rect)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-RT" testNumber="8"/>
			<description>Entry RT in AnnotCaret shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotCaret has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotCaret shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotCaret has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotCaret shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotCaret has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotCaret is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotCaret is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotCaret shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotCaret has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotCaret shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotCaret has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotCaret shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotCaret has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotCaret is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotCaret is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotCaret shall have value Caret</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Caret"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotCaret has incorrect value %1 instead of Caret</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-Sy" testNumber="8"/>
			<description>Entry Sy in AnnotCaret shall have type Name</description>
			<test>containsSy == false || SyHasTypeName == true</test>
			<error>
				<message>Entry Sy in AnnotCaret has type %1 instead of type Name</message>
				<arguments>
					<argument>SyType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-Sy-Name" testNumber="6"/>
			<description>Entry Sy with type Name in AnnotCaret shall have one of values: P, None</description>
			<test>SyHasTypeName != true || SyNameValue == "P" || SyNameValue == "None"</test>
			<error>
				<message>Entry Sy with type Name in AnnotCaret has incorrect value %1 instead of P, None</message>
				<arguments>
					<argument>SyNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-T" testNumber="8"/>
			<description>Entry T in AnnotCaret shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotCaret has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-Type" testNumber="8"/>
			<description>Entry Type in AnnotCaret shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotCaret has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="AnnotCaret-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotCaret shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotCaret has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle" testNumber="1"/>
			<description>AnnotCircle shall not contain entries except AF, AP, AS, BE, BS, Border, C, CA, Contents, CreationDate, ExData, F, IC, IRT, IT, M, NM, OC, P, Popup, RC, RD, RT, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotCircle contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle" testNumber="22"/>
			<description>AnnotCircle shall not contain entries BM, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotCircle contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-AF" testNumber="8"/>
			<description>Entry AF in AnnotCircle shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotCircle has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-AF" testNumber="23"/>
			<description>Entry AF in AnnotCircle can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotCircle is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-AP" testNumber="8"/>
			<description>Entry AP in AnnotCircle shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotCircle has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-AS" testNumber="8"/>
			<description>Entry AS in AnnotCircle shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotCircle has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-AS" testNumber="11"/>
			<description>Entry AS in AnnotCircle is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotCircle is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-BE" testNumber="8"/>
			<description>Entry BE in AnnotCircle shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in AnnotCircle has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-BS" testNumber="8"/>
			<description>Entry BS in AnnotCircle shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotCircle has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-Border" testNumber="8"/>
			<description>Entry Border in AnnotCircle shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotCircle has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-C" testNumber="8"/>
			<description>Entry C in AnnotCircle shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotCircle has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-CA" testNumber="8"/>
			<description>Entry CA in AnnotCircle shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotCircle has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotCircle shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotCircle does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotCircle shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotCircle has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotCircle shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotCircle has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotCircle shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotCircle is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotCircle shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotCircle has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-F" testNumber="8"/>
			<description>Entry F in AnnotCircle shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotCircle has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotCircle shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotCircle does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-IC" testNumber="8"/>
			<description>Entry IC in AnnotCircle shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotCircle has type %1 instead of type Array</message>
				<arguments>
					<argument>ICType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotCircle shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotCircle is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotCircle shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotCircle has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotCircle is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotCircle is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-IT" testNumber="8"/>
			<description>Entry IT in AnnotCircle shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotCircle has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-M" testNumber="8"/>
			<description>Entry M in AnnotCircle shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotCircle has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-NM" testNumber="8"/>
			<description>Entry NM in AnnotCircle shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotCircle has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotCircle shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotCircle is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-OC" testNumber="8"/>
			<description>Entry OC in AnnotCircle shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotCircle has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-P" testNumber="8"/>
			<description>Entry P in AnnotCircle shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotCircle has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotCircle shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotCircle is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotCircle shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotCircle has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotCircle shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotCircle is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-RC" testNumber="8"/>
			<description>Entry RC in AnnotCircle shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotCircle has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotCircle shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotCircle is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-RD" testNumber="8"/>
			<description>Entry RD in AnnotCircle shall have type Rectangle</description>
			<test>containsRD == false || RDHasTypeRectangle == true</test>
			<error>
				<message>Entry RD in AnnotCircle has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-RD-Rectangle" testNumber="9"/>
			<description>Entry RD with type Rectangle in AnnotCircle shall satisfy special case: fn:Eval((RD::@0 &gt;= 0) &amp;&amp; (RD::@1 &gt;= 0) &amp;&amp; (RD::@2 &gt;= 0) &amp;&amp; (RD::@3 &gt;= 0) &amp;&amp; ((RD::@1 + RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0 + RD::@2) &lt; fn:RectWidth(Rect)))</description>
			<test>RDHasTypeRectangle != true || ((RD0NumberValue &gt;= 0) &amp;&amp; (RD1NumberValue &gt;= 0) &amp;&amp; (RD2NumberValue &gt;= 0) &amp;&amp; (RD3NumberValue &gt;= 0) &amp;&amp; (RectHasTypeRectangle == false || ((RD1NumberValue + RD3NumberValue) &lt; RectRectHeight)) &amp;&amp; (RectHasTypeRectangle == false || ((RD0NumberValue + RD2NumberValue) &lt; RectRectWidth)))</test>
			<error>
				<message>Entry RD with type Rectangle in AnnotCircle does not satisfy special case: fn:Eval((RD::@0 &gt;= 0) &amp;&amp; (RD::@1 &gt;= 0) &amp;&amp; (RD::@2 &gt;= 0) &amp;&amp; (RD::@3 &gt;= 0) &amp;&amp; ((RD::@1 + RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0 + RD::@2) &lt; fn:RectWidth(Rect)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-RT" testNumber="8"/>
			<description>Entry RT in AnnotCircle shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotCircle has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotCircle shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotCircle has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotCircle shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotCircle has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotCircle is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotCircle is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotCircle shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotCircle has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotCircle shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotCircle has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotCircle shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotCircle has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotCircle is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotCircle is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotCircle shall have value Circle</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Circle"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotCircle has incorrect value %1 instead of Circle</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-T" testNumber="8"/>
			<description>Entry T in AnnotCircle shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotCircle has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-Type" testNumber="8"/>
			<description>Entry Type in AnnotCircle shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotCircle has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="AnnotCircle-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotCircle shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotCircle has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment" testNumber="1"/>
			<description>AnnotFileAttachment shall not contain entries except AF, AP, AS, Border, C, CA, Contents, CreationDate, ExData, F, FS, IRT, IT, M, NM, Name, OC, P, Popup, RC, RT, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotFileAttachment contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment" testNumber="22"/>
			<description>AnnotFileAttachment shall not contain entries BM, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotFileAttachment contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-AF" testNumber="8"/>
			<description>Entry AF in AnnotFileAttachment shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotFileAttachment has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-AF" testNumber="23"/>
			<description>Entry AF in AnnotFileAttachment can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotFileAttachment is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-AP" testNumber="8"/>
			<description>Entry AP in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotFileAttachment has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-AS" testNumber="8"/>
			<description>Entry AS in AnnotFileAttachment shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotFileAttachment has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-AS" testNumber="11"/>
			<description>Entry AS in AnnotFileAttachment is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotFileAttachment is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-Border" testNumber="8"/>
			<description>Entry Border in AnnotFileAttachment shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotFileAttachment has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-C" testNumber="8"/>
			<description>Entry C in AnnotFileAttachment shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotFileAttachment has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-CA" testNumber="8"/>
			<description>Entry CA in AnnotFileAttachment shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotFileAttachment has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotFileAttachment shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotFileAttachment does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotFileAttachment shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotFileAttachment has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotFileAttachment shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotFileAttachment has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotFileAttachment shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotFileAttachment is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotFileAttachment has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-F" testNumber="8"/>
			<description>Entry F in AnnotFileAttachment shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotFileAttachment has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotFileAttachment shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotFileAttachment does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-FS" testNumber="8"/>
			<description>Entry FS in AnnotFileAttachment shall have one of types: Dictionary, String</description>
			<test>containsFS == false || FSHasTypeDictionary == true || FSHasTypeString == true</test>
			<error>
				<message>Entry FS in AnnotFileAttachment has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-FS" testNumber="7"/>
			<description>Entry FS in AnnotFileAttachment is required</description>
			<test>containsFS == true</test>
			<error>
				<message>Entry FS in AnnotFileAttachment is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotFileAttachment shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotFileAttachment is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotFileAttachment has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotFileAttachment is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotFileAttachment is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-IT" testNumber="8"/>
			<description>Entry IT in AnnotFileAttachment shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotFileAttachment has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-M" testNumber="8"/>
			<description>Entry M in AnnotFileAttachment shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotFileAttachment has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-NM" testNumber="8"/>
			<description>Entry NM in AnnotFileAttachment shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotFileAttachment has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-Name" testNumber="8"/>
			<description>Entry Name in AnnotFileAttachment shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotFileAttachment has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotFileAttachment shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotFileAttachment is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-OC" testNumber="8"/>
			<description>Entry OC in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotFileAttachment has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-P" testNumber="8"/>
			<description>Entry P in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotFileAttachment has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotFileAttachment shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotFileAttachment is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotFileAttachment has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotFileAttachment shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotFileAttachment is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-RC" testNumber="8"/>
			<description>Entry RC in AnnotFileAttachment shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotFileAttachment has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotFileAttachment shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotFileAttachment is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-RT" testNumber="8"/>
			<description>Entry RT in AnnotFileAttachment shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotFileAttachment has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotFileAttachment shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotFileAttachment has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotFileAttachment shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotFileAttachment has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotFileAttachment is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotFileAttachment is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotFileAttachment shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotFileAttachment has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotFileAttachment shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotFileAttachment has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotFileAttachment shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotFileAttachment has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotFileAttachment is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotFileAttachment is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotFileAttachment shall have value FileAttachment</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "FileAttachment"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotFileAttachment has incorrect value %1 instead of FileAttachment</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-T" testNumber="8"/>
			<description>Entry T in AnnotFileAttachment shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotFileAttachment has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-Type" testNumber="8"/>
			<description>Entry Type in AnnotFileAttachment shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotFileAttachment has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="AnnotFileAttachment-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotFileAttachment shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotFileAttachment has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText" testNumber="1"/>
			<description>AnnotFreeText shall not contain entries except AF, AP, AS, BE, BS, Border, C, CA, CL, Contents, CreationDate, DA, DS, ExData, F, IRT, IT, LE, M, NM, OC, P, Popup, Q, RC, RD, RT, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'CL' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotFreeText contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'CL' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText" testNumber="22"/>
			<description>AnnotFreeText shall not contain entries BM, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotFreeText contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-AF" testNumber="8"/>
			<description>Entry AF in AnnotFreeText shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotFreeText has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-AF" testNumber="23"/>
			<description>Entry AF in AnnotFreeText can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotFreeText is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-AP" testNumber="8"/>
			<description>Entry AP in AnnotFreeText shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotFreeText has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-AS" testNumber="8"/>
			<description>Entry AS in AnnotFreeText shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotFreeText has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-AS" testNumber="11"/>
			<description>Entry AS in AnnotFreeText is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotFreeText is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-BE" testNumber="8"/>
			<description>Entry BE in AnnotFreeText shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in AnnotFreeText has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-BS" testNumber="8"/>
			<description>Entry BS in AnnotFreeText shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotFreeText has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-Border" testNumber="8"/>
			<description>Entry Border in AnnotFreeText shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotFreeText has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-C" testNumber="8"/>
			<description>Entry C in AnnotFreeText shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotFreeText has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-CA" testNumber="8"/>
			<description>Entry CA in AnnotFreeText shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotFreeText has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotFreeText shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotFreeText does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-CL" testNumber="8"/>
			<description>Entry CL in AnnotFreeText shall have type Array</description>
			<test>containsCL == false || CLHasTypeArray == true</test>
			<error>
				<message>Entry CL in AnnotFreeText has type %1 instead of type Array</message>
				<arguments>
					<argument>CLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotFreeText shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotFreeText has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotFreeText shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotFreeText has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-DA" testNumber="8"/>
			<description>Entry DA in AnnotFreeText shall have type StringByte</description>
			<test>containsDA == false || DAHasTypeStringByte == true</test>
			<error>
				<message>Entry DA in AnnotFreeText has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-DA" testNumber="7"/>
			<description>Entry DA in AnnotFreeText is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in AnnotFreeText is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-DS" testNumber="8"/>
			<description>Entry DS in AnnotFreeText shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in AnnotFreeText has type %1 instead of type StringText</message>
				<arguments>
					<argument>DSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotFreeText shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotFreeText is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotFreeText shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotFreeText has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-F" testNumber="8"/>
			<description>Entry F in AnnotFreeText shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotFreeText has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotFreeText shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotFreeText does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotFreeText shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotFreeText is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotFreeText shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotFreeText has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotFreeText is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotFreeText is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-IT" testNumber="8"/>
			<description>Entry IT in AnnotFreeText shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotFreeText has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-IT-Name" testNumber="6"/>
			<description>Entry IT with type Name in AnnotFreeText shall have one of values: FreeText, FreeTextCallout, FreeTextTypeWriter</description>
			<test>ITHasTypeName != true || ITNameValue == "FreeText" || ITNameValue == "FreeTextCallout" || ITNameValue == "FreeTextTypeWriter"</test>
			<error>
				<message>Entry IT with type Name in AnnotFreeText has incorrect value %1 instead of FreeText, FreeTextCallout, FreeTextTypeWriter</message>
				<arguments>
					<argument>ITNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-LE" testNumber="8"/>
			<description>Entry LE in AnnotFreeText shall have type Name</description>
			<test>containsLE == false || LEHasTypeName == true</test>
			<error>
				<message>Entry LE in AnnotFreeText has type %1 instead of type Name</message>
				<arguments>
					<argument>LEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-LE-Name" testNumber="6"/>
			<description>Entry LE with type Name in AnnotFreeText shall have one of values: ClosedArrow, Circle, ROpenArrow, Slash, Diamond, OpenArrow, Square, Butt, None, RClosedArrow</description>
			<test>LEHasTypeName != true || LENameValue == "Square" || LENameValue == "Circle" || LENameValue == "Diamond" || LENameValue == "OpenArrow" || LENameValue == "ClosedArrow" || LENameValue == "None" || LENameValue == "Butt" || LENameValue == "ROpenArrow" || LENameValue == "RClosedArrow" || LENameValue == "Slash"</test>
			<error>
				<message>Entry LE with type Name in AnnotFreeText has incorrect value %1 instead of ClosedArrow, Circle, ROpenArrow, Slash, Diamond, OpenArrow, Square, Butt, None, RClosedArrow</message>
				<arguments>
					<argument>LENameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-M" testNumber="8"/>
			<description>Entry M in AnnotFreeText shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotFreeText has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-NM" testNumber="8"/>
			<description>Entry NM in AnnotFreeText shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotFreeText has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotFreeText shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotFreeText is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-OC" testNumber="8"/>
			<description>Entry OC in AnnotFreeText shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotFreeText has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-P" testNumber="8"/>
			<description>Entry P in AnnotFreeText shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotFreeText has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotFreeText shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotFreeText is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotFreeText shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotFreeText has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotFreeText shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotFreeText is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-Q" testNumber="8"/>
			<description>Entry Q in AnnotFreeText shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in AnnotFreeText has type %1 instead of type Integer</message>
				<arguments>
					<argument>QType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-Q-Integer" testNumber="6"/>
			<description>Entry Q with type Integer in AnnotFreeText shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in AnnotFreeText has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-RC" testNumber="8"/>
			<description>Entry RC in AnnotFreeText shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotFreeText has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotFreeText shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotFreeText is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-RD" testNumber="8"/>
			<description>Entry RD in AnnotFreeText shall have type Rectangle</description>
			<test>containsRD == false || RDHasTypeRectangle == true</test>
			<error>
				<message>Entry RD in AnnotFreeText has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-RD-Rectangle" testNumber="9"/>
			<description>Entry RD with type Rectangle in AnnotFreeText shall satisfy special case: fn:Eval((RD::@0 &gt;= 0) &amp;&amp; (RD::@1 &gt;= 0) &amp;&amp; (RD::@2 &gt;= 0) &amp;&amp; (RD::@3 &gt;= 0) &amp;&amp; ((RD::@1 + RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0 + RD::@2) &lt; fn:RectWidth(Rect)))</description>
			<test>RDHasTypeRectangle != true || ((RD0NumberValue &gt;= 0) &amp;&amp; (RD1NumberValue &gt;= 0) &amp;&amp; (RD2NumberValue &gt;= 0) &amp;&amp; (RD3NumberValue &gt;= 0) &amp;&amp; (RectHasTypeRectangle == false || ((RD1NumberValue + RD3NumberValue) &lt; RectRectHeight)) &amp;&amp; (RectHasTypeRectangle == false || ((RD0NumberValue + RD2NumberValue) &lt; RectRectWidth)))</test>
			<error>
				<message>Entry RD with type Rectangle in AnnotFreeText does not satisfy special case: fn:Eval((RD::@0 &gt;= 0) &amp;&amp; (RD::@1 &gt;= 0) &amp;&amp; (RD::@2 &gt;= 0) &amp;&amp; (RD::@3 &gt;= 0) &amp;&amp; ((RD::@1 + RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0 + RD::@2) &lt; fn:RectWidth(Rect)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-RT" testNumber="8"/>
			<description>Entry RT in AnnotFreeText shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotFreeText has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotFreeText shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotFreeText has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotFreeText shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotFreeText has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotFreeText is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotFreeText is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotFreeText shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotFreeText has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotFreeText shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotFreeText has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotFreeText shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotFreeText has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotFreeText is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotFreeText is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotFreeText shall have value FreeText</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "FreeText"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotFreeText has incorrect value %1 instead of FreeText</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-T" testNumber="8"/>
			<description>Entry T in AnnotFreeText shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotFreeText has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-Type" testNumber="8"/>
			<description>Entry Type in AnnotFreeText shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotFreeText has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="AnnotFreeText-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotFreeText shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotFreeText has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight" testNumber="1"/>
			<description>AnnotHighlight shall not contain entries except AF, AP, AS, Border, C, CA, Contents, CreationDate, ExData, F, IRT, IT, M, NM, OC, P, Popup, QuadPoints, RC, RT, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotHighlight contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight" testNumber="22"/>
			<description>AnnotHighlight shall not contain entries BM, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotHighlight contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-AF" testNumber="8"/>
			<description>Entry AF in AnnotHighlight shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotHighlight has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-AF" testNumber="23"/>
			<description>Entry AF in AnnotHighlight can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotHighlight is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-AP" testNumber="8"/>
			<description>Entry AP in AnnotHighlight shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotHighlight has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-AS" testNumber="8"/>
			<description>Entry AS in AnnotHighlight shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotHighlight has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-AS" testNumber="11"/>
			<description>Entry AS in AnnotHighlight is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotHighlight is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-Border" testNumber="8"/>
			<description>Entry Border in AnnotHighlight shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotHighlight has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-C" testNumber="8"/>
			<description>Entry C in AnnotHighlight shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotHighlight has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-CA" testNumber="8"/>
			<description>Entry CA in AnnotHighlight shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotHighlight has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotHighlight shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotHighlight does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotHighlight shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotHighlight has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotHighlight shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotHighlight has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotHighlight shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotHighlight is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotHighlight shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotHighlight has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-F" testNumber="8"/>
			<description>Entry F in AnnotHighlight shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotHighlight has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotHighlight shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotHighlight does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotHighlight shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotHighlight is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotHighlight shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotHighlight has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotHighlight is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotHighlight is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-IT" testNumber="8"/>
			<description>Entry IT in AnnotHighlight shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotHighlight has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-M" testNumber="8"/>
			<description>Entry M in AnnotHighlight shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotHighlight has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-NM" testNumber="8"/>
			<description>Entry NM in AnnotHighlight shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotHighlight has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotHighlight shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotHighlight is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-OC" testNumber="8"/>
			<description>Entry OC in AnnotHighlight shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotHighlight has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-P" testNumber="8"/>
			<description>Entry P in AnnotHighlight shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotHighlight has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotHighlight shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotHighlight is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotHighlight shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotHighlight has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotHighlight shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotHighlight is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-QuadPoints" testNumber="8"/>
			<description>Entry QuadPoints in AnnotHighlight shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotHighlight has type %1 instead of type Array</message>
				<arguments>
					<argument>QuadPointsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-QuadPoints" testNumber="7"/>
			<description>Entry QuadPoints in AnnotHighlight is required</description>
			<test>containsQuadPoints == true</test>
			<error>
				<message>Entry QuadPoints in AnnotHighlight is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-RC" testNumber="8"/>
			<description>Entry RC in AnnotHighlight shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotHighlight has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotHighlight shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotHighlight is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-RT" testNumber="8"/>
			<description>Entry RT in AnnotHighlight shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotHighlight has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotHighlight shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotHighlight has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotHighlight shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotHighlight has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotHighlight is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotHighlight is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotHighlight shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotHighlight has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotHighlight shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotHighlight has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotHighlight shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotHighlight has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotHighlight is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotHighlight is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotHighlight shall have value Highlight</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Highlight"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotHighlight has incorrect value %1 instead of Highlight</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-T" testNumber="8"/>
			<description>Entry T in AnnotHighlight shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotHighlight has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-Type" testNumber="8"/>
			<description>Entry Type in AnnotHighlight shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotHighlight has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="AnnotHighlight-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotHighlight shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotHighlight has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk" testNumber="1"/>
			<description>AnnotInk shall not contain entries except AF, AP, AS, BS, Border, C, CA, Contents, CreationDate, ExData, F, IRT, IT, InkList, M, NM, OC, P, Popup, RC, RT, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'InkList' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Path' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotInk contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'InkList' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Path' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk" testNumber="22"/>
			<description>AnnotInk shall not contain entries BM, Lang, Path, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'Path' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotInk contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'Path' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-AF" testNumber="8"/>
			<description>Entry AF in AnnotInk shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotInk has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-AF" testNumber="23"/>
			<description>Entry AF in AnnotInk can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotInk is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-AP" testNumber="8"/>
			<description>Entry AP in AnnotInk shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotInk has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-AS" testNumber="8"/>
			<description>Entry AS in AnnotInk shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotInk has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-AS" testNumber="11"/>
			<description>Entry AS in AnnotInk is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotInk is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-BS" testNumber="8"/>
			<description>Entry BS in AnnotInk shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotInk has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-Border" testNumber="8"/>
			<description>Entry Border in AnnotInk shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotInk has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-C" testNumber="8"/>
			<description>Entry C in AnnotInk shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotInk has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-CA" testNumber="8"/>
			<description>Entry CA in AnnotInk shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotInk has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotInk shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotInk does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotInk shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotInk has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotInk shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotInk has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotInk shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotInk is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotInk shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotInk has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-F" testNumber="8"/>
			<description>Entry F in AnnotInk shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotInk has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotInk shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotInk does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotInk shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotInk is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotInk shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotInk has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotInk is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotInk is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-IT" testNumber="8"/>
			<description>Entry IT in AnnotInk shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotInk has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-InkList" testNumber="8"/>
			<description>Entry InkList in AnnotInk shall have type Array</description>
			<test>containsInkList == false || InkListHasTypeArray == true</test>
			<error>
				<message>Entry InkList in AnnotInk has type %1 instead of type Array</message>
				<arguments>
					<argument>InkListType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-InkList" testNumber="7"/>
			<description>Entry InkList in AnnotInk is required</description>
			<test>containsInkList == true</test>
			<error>
				<message>Entry InkList in AnnotInk is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-M" testNumber="8"/>
			<description>Entry M in AnnotInk shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotInk has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-NM" testNumber="8"/>
			<description>Entry NM in AnnotInk shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotInk has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotInk shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotInk is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-OC" testNumber="8"/>
			<description>Entry OC in AnnotInk shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotInk has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-P" testNumber="8"/>
			<description>Entry P in AnnotInk shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotInk has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotInk shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotInk is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotInk shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotInk has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotInk shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotInk is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-RC" testNumber="8"/>
			<description>Entry RC in AnnotInk shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotInk has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotInk shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotInk is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-RT" testNumber="8"/>
			<description>Entry RT in AnnotInk shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotInk has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotInk shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotInk has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotInk shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotInk has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotInk is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotInk is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotInk shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotInk has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotInk shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotInk has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotInk shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotInk has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotInk is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotInk is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotInk shall have value Ink</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Ink"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotInk has incorrect value %1 instead of Ink</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-T" testNumber="8"/>
			<description>Entry T in AnnotInk shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotInk has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-Type" testNumber="8"/>
			<description>Entry Type in AnnotInk shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotInk has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="AnnotInk-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotInk shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotInk has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine" testNumber="1"/>
			<description>AnnotLine shall not contain entries except AF, AP, AS, BS, Border, C, CA, CO, CP, Cap, Contents, CreationDate, ExData, F, IC, IRT, IT, L, LE, LL, LLE, LLO, M, Measure, NM, OC, P, Popup, RC, RT, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'CP' &amp;&amp; elem != 'Cap' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'L' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'LL' &amp;&amp; elem != 'LLE' &amp;&amp; elem != 'LLO' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotLine contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'CP' &amp;&amp; elem != 'Cap' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'L' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'LL' &amp;&amp; elem != 'LLE' &amp;&amp; elem != 'LLO' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine" testNumber="22"/>
			<description>AnnotLine shall not contain entries BM, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotLine contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-AF" testNumber="8"/>
			<description>Entry AF in AnnotLine shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotLine has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-AF" testNumber="23"/>
			<description>Entry AF in AnnotLine can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotLine is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-AP" testNumber="8"/>
			<description>Entry AP in AnnotLine shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-AS" testNumber="8"/>
			<description>Entry AS in AnnotLine shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotLine has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-AS" testNumber="11"/>
			<description>Entry AS in AnnotLine is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotLine is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-BS" testNumber="8"/>
			<description>Entry BS in AnnotLine shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-Border" testNumber="8"/>
			<description>Entry Border in AnnotLine shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotLine has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-C" testNumber="8"/>
			<description>Entry C in AnnotLine shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotLine has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-CA" testNumber="8"/>
			<description>Entry CA in AnnotLine shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotLine has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotLine shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotLine does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-CO" testNumber="8"/>
			<description>Entry CO in AnnotLine shall have type Array</description>
			<test>containsCO == false || COHasTypeArray == true</test>
			<error>
				<message>Entry CO in AnnotLine has type %1 instead of type Array</message>
				<arguments>
					<argument>COType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-CP" testNumber="8"/>
			<description>Entry CP in AnnotLine shall have type Name</description>
			<test>containsCP == false || CPHasTypeName == true</test>
			<error>
				<message>Entry CP in AnnotLine has type %1 instead of type Name</message>
				<arguments>
					<argument>CPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-CP-Name" testNumber="6"/>
			<description>Entry CP with type Name in AnnotLine shall have one of values: Top, Inline</description>
			<test>CPHasTypeName != true || CPNameValue == "Inline" || CPNameValue == "Top"</test>
			<error>
				<message>Entry CP with type Name in AnnotLine has incorrect value %1 instead of Top, Inline</message>
				<arguments>
					<argument>CPNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-Cap" testNumber="8"/>
			<description>Entry Cap in AnnotLine shall have type Boolean</description>
			<test>containsCap == false || CapHasTypeBoolean == true</test>
			<error>
				<message>Entry Cap in AnnotLine has type %1 instead of type Boolean</message>
				<arguments>
					<argument>CapType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotLine shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotLine has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotLine shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotLine has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotLine shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotLine is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotLine shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-F" testNumber="8"/>
			<description>Entry F in AnnotLine shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotLine has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotLine shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotLine does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-IC" testNumber="8"/>
			<description>Entry IC in AnnotLine shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotLine has type %1 instead of type Array</message>
				<arguments>
					<argument>ICType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotLine shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotLine is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotLine shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotLine is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotLine is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-IT" testNumber="8"/>
			<description>Entry IT in AnnotLine shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotLine has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-IT-Name" testNumber="6"/>
			<description>Entry IT with type Name in AnnotLine shall have one of values: LineArrow, LineDimension</description>
			<test>ITHasTypeName != true || ITNameValue == "LineArrow" || ITNameValue == "LineDimension"</test>
			<error>
				<message>Entry IT with type Name in AnnotLine has incorrect value %1 instead of LineArrow, LineDimension</message>
				<arguments>
					<argument>ITNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-L" testNumber="8"/>
			<description>Entry L in AnnotLine shall have type Array</description>
			<test>containsL == false || LHasTypeArray == true</test>
			<error>
				<message>Entry L in AnnotLine has type %1 instead of type Array</message>
				<arguments>
					<argument>LType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-L" testNumber="7"/>
			<description>Entry L in AnnotLine is required</description>
			<test>containsL == true</test>
			<error>
				<message>Entry L in AnnotLine is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-LE" testNumber="8"/>
			<description>Entry LE in AnnotLine shall have type Array</description>
			<test>containsLE == false || LEHasTypeArray == true</test>
			<error>
				<message>Entry LE in AnnotLine has type %1 instead of type Array</message>
				<arguments>
					<argument>LEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-LL" testNumber="8"/>
			<description>Entry LL in AnnotLine shall have type Number</description>
			<test>containsLL == false || LLHasTypeNumber == true</test>
			<error>
				<message>Entry LL in AnnotLine has type %1 instead of type Number</message>
				<arguments>
					<argument>LLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-LL" testNumber="11"/>
			<description>Entry LL in AnnotLine is required, when fn:IsPresent(LLE)</description>
			<test>containsLL == true || (containsLLE != true)</test>
			<error>
				<message>Entry LL in AnnotLine is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-LLE" testNumber="8"/>
			<description>Entry LLE in AnnotLine shall have type Number</description>
			<test>containsLLE == false || LLEHasTypeNumber == true</test>
			<error>
				<message>Entry LLE in AnnotLine has type %1 instead of type Number</message>
				<arguments>
					<argument>LLEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-LLE-Number" testNumber="14"/>
			<description>Entry LLE with type Number in AnnotLine shall satisfy possible value predicate: fn:Eval(@LLE &gt;= 0)</description>
			<test>LLEHasTypeNumber != true || LLENumberValue &gt;= 0</test>
			<error>
				<message>Entry LLE with type Number in AnnotLine does not satisfy possible value predicate: fn:Eval(@LLE &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-LLO" testNumber="8"/>
			<description>Entry LLO in AnnotLine shall have type Number</description>
			<test>containsLLO == false || LLOHasTypeNumber == true</test>
			<error>
				<message>Entry LLO in AnnotLine has type %1 instead of type Number</message>
				<arguments>
					<argument>LLOType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-LLO-Number" testNumber="14"/>
			<description>Entry LLO with type Number in AnnotLine shall satisfy possible value predicate: fn:Eval(@LLO &gt; 0)</description>
			<test>LLOHasTypeNumber != true || LLONumberValue &gt; 0</test>
			<error>
				<message>Entry LLO with type Number in AnnotLine does not satisfy possible value predicate: fn:Eval(@LLO &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-M" testNumber="8"/>
			<description>Entry M in AnnotLine shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotLine has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-Measure" testNumber="8"/>
			<description>Entry Measure in AnnotLine shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in AnnotLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MeasureType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-NM" testNumber="8"/>
			<description>Entry NM in AnnotLine shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotLine has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotLine shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotLine is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-OC" testNumber="8"/>
			<description>Entry OC in AnnotLine shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-P" testNumber="8"/>
			<description>Entry P in AnnotLine shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotLine shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotLine is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotLine shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotLine shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotLine is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-RC" testNumber="8"/>
			<description>Entry RC in AnnotLine shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotLine has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotLine shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotLine is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-RT" testNumber="8"/>
			<description>Entry RT in AnnotLine shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotLine has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotLine shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotLine has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotLine shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotLine has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotLine is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotLine is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotLine shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotLine has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotLine shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotLine has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotLine shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotLine has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotLine is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotLine is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotLine shall have value Line</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Line"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotLine has incorrect value %1 instead of Line</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-T" testNumber="8"/>
			<description>Entry T in AnnotLine shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotLine has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-Type" testNumber="8"/>
			<description>Entry Type in AnnotLine shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotLine has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="AnnotLine-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotLine shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotLine has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink" testNumber="1"/>
			<description>AnnotLink shall not contain entries except A, AF, AP, AS, BS, Border, C, Contents, Dest, F, H, M, NM, OC, P, PA, QuadPoints, Rect, StructParent, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'F' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PA' &amp;&amp; elem != 'Path' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotLink contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'F' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PA' &amp;&amp; elem != 'Path' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink" testNumber="22"/>
			<description>AnnotLink shall not contain entries BM, CA, Lang, Path, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'Path' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotLink contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'Path' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-A-Dictionary" testNumber="17"/>
			<description>Entry A with type Dictionary in AnnotLink shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotLink is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-A" testNumber="8"/>
			<description>Entry A in AnnotLink shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotLink has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-AF" testNumber="8"/>
			<description>Entry AF in AnnotLink shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotLink has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-AF" testNumber="23"/>
			<description>Entry AF in AnnotLink can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotLink is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-AP" testNumber="8"/>
			<description>Entry AP in AnnotLink shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotLink has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-AS" testNumber="8"/>
			<description>Entry AS in AnnotLink shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotLink has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-AS" testNumber="11"/>
			<description>Entry AS in AnnotLink is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotLink is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-BS" testNumber="8"/>
			<description>Entry BS in AnnotLink shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotLink has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-Border" testNumber="8"/>
			<description>Entry Border in AnnotLink shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotLink has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-C" testNumber="8"/>
			<description>Entry C in AnnotLink shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotLink has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotLink shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotLink has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-Dest-Array" testNumber="17"/>
			<description>Entry Dest with type Array in AnnotLink shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DestHasTypeArray != true || Dest_size == 1</test>
			<error>
				<message>Entry Dest with type Array in AnnotLink is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-Dest" testNumber="8"/>
			<description>Entry Dest in AnnotLink shall have one of types: Array, Name, StringByte</description>
			<test>containsDest == false || DestHasTypeArray == true || DestHasTypeName == true || DestHasTypeStringByte == true</test>
			<error>
				<message>Entry Dest in AnnotLink has type %1 instead of one of types: Array, Name, StringByte</message>
				<arguments>
					<argument>DestType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-F" testNumber="8"/>
			<description>Entry F in AnnotLink shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotLink has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotLink shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotLink does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-H" testNumber="8"/>
			<description>Entry H in AnnotLink shall have type Name</description>
			<test>containsH == false || HHasTypeName == true</test>
			<error>
				<message>Entry H in AnnotLink has type %1 instead of type Name</message>
				<arguments>
					<argument>HType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-H-Name" testNumber="6"/>
			<description>Entry H with type Name in AnnotLink shall have one of values: P, I, N, O</description>
			<test>HHasTypeName != true || HNameValue == "N" || HNameValue == "I" || HNameValue == "O" || HNameValue == "P"</test>
			<error>
				<message>Entry H with type Name in AnnotLink has incorrect value %1 instead of P, I, N, O</message>
				<arguments>
					<argument>HNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-M" testNumber="8"/>
			<description>Entry M in AnnotLink shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotLink has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-NM" testNumber="8"/>
			<description>Entry NM in AnnotLink shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotLink has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotLink shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotLink is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-OC" testNumber="8"/>
			<description>Entry OC in AnnotLink shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotLink has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-P" testNumber="8"/>
			<description>Entry P in AnnotLink shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotLink has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotLink shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotLink is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-PA" testNumber="8"/>
			<description>Entry PA in AnnotLink shall have type Dictionary</description>
			<test>containsPA == false || PAHasTypeDictionary == true</test>
			<error>
				<message>Entry PA in AnnotLink has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-QuadPoints" testNumber="8"/>
			<description>Entry QuadPoints in AnnotLink shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotLink has type %1 instead of type Array</message>
				<arguments>
					<argument>QuadPointsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotLink shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotLink has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotLink is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotLink is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotLink shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotLink has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotLink shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotLink has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotLink is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotLink is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotLink shall have value Link</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Link"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotLink has incorrect value %1 instead of Link</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-Type" testNumber="8"/>
			<description>Entry Type in AnnotLink shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotLink has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="AnnotLink-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotLink shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotLink has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie" testNumber="1"/>
			<description>AnnotMovie shall not contain entries except A, AP, AS, Border, C, Contents, F, M, Movie, NM, OC, P, Rect, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Movie' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotMovie contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Movie' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie" testNumber="22"/>
			<description>AnnotMovie shall not contain entries AF, BM, CA, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotMovie contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-A" testNumber="8"/>
			<description>Entry A in AnnotMovie shall have one of types: Boolean, Dictionary</description>
			<test>containsA == false || AHasTypeBoolean == true || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotMovie has type %1 instead of one of types: Boolean, Dictionary</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-AP" testNumber="8"/>
			<description>Entry AP in AnnotMovie shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotMovie has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-AS" testNumber="8"/>
			<description>Entry AS in AnnotMovie shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotMovie has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-AS" testNumber="11"/>
			<description>Entry AS in AnnotMovie is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotMovie is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-Border" testNumber="8"/>
			<description>Entry Border in AnnotMovie shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotMovie has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-C" testNumber="8"/>
			<description>Entry C in AnnotMovie shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotMovie has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotMovie shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotMovie has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-F" testNumber="8"/>
			<description>Entry F in AnnotMovie shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotMovie has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotMovie shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotMovie does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-M" testNumber="8"/>
			<description>Entry M in AnnotMovie shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotMovie has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-Movie" testNumber="8"/>
			<description>Entry Movie in AnnotMovie shall have type Dictionary</description>
			<test>containsMovie == false || MovieHasTypeDictionary == true</test>
			<error>
				<message>Entry Movie in AnnotMovie has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MovieType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-Movie" testNumber="7"/>
			<description>Entry Movie in AnnotMovie is required</description>
			<test>containsMovie == true</test>
			<error>
				<message>Entry Movie in AnnotMovie is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-NM" testNumber="8"/>
			<description>Entry NM in AnnotMovie shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotMovie has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotMovie shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotMovie is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-OC" testNumber="8"/>
			<description>Entry OC in AnnotMovie shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotMovie has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-P" testNumber="8"/>
			<description>Entry P in AnnotMovie shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotMovie has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotMovie shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotMovie is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotMovie shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotMovie has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotMovie is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotMovie is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotMovie shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotMovie has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotMovie shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotMovie has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotMovie is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotMovie is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotMovie shall have value Movie</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Movie"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotMovie has incorrect value %1 instead of Movie</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-T" testNumber="8"/>
			<description>Entry T in AnnotMovie shall have type String</description>
			<test>containsT == false || THasTypeString == true</test>
			<error>
				<message>Entry T in AnnotMovie has type %1 instead of type String</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-Type" testNumber="8"/>
			<description>Entry Type in AnnotMovie shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotMovie has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="AnnotMovie-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotMovie shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotMovie has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine" testNumber="1"/>
			<description>AnnotPolyLine shall not contain entries except AF, AP, AS, BE, BS, Border, C, CA, Contents, CreationDate, ExData, F, IC, IRT, IT, LE, M, Measure, NM, OC, P, Popup, RC, RT, Rect, StructParent, Subj, Subtype, T, Type, Vertices</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Path' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Vertices' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotPolyLine contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Path' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Vertices' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine" testNumber="22"/>
			<description>AnnotPolyLine shall not contain entries BM, Lang, Path, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'Path' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotPolyLine contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'Path' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-AF" testNumber="8"/>
			<description>Entry AF in AnnotPolyLine shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotPolyLine has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-AF" testNumber="23"/>
			<description>Entry AF in AnnotPolyLine can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotPolyLine is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-AP" testNumber="8"/>
			<description>Entry AP in AnnotPolyLine shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotPolyLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-AS" testNumber="8"/>
			<description>Entry AS in AnnotPolyLine shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotPolyLine has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-AS" testNumber="11"/>
			<description>Entry AS in AnnotPolyLine is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotPolyLine is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-BE" testNumber="8"/>
			<description>Entry BE in AnnotPolyLine shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in AnnotPolyLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-BS" testNumber="8"/>
			<description>Entry BS in AnnotPolyLine shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotPolyLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-Border" testNumber="8"/>
			<description>Entry Border in AnnotPolyLine shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotPolyLine has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-C" testNumber="8"/>
			<description>Entry C in AnnotPolyLine shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotPolyLine has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-CA" testNumber="8"/>
			<description>Entry CA in AnnotPolyLine shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotPolyLine has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotPolyLine shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotPolyLine does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotPolyLine shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotPolyLine has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotPolyLine shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotPolyLine has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotPolyLine shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotPolyLine is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotPolyLine shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotPolyLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-F" testNumber="8"/>
			<description>Entry F in AnnotPolyLine shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotPolyLine has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotPolyLine shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotPolyLine does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-IC" testNumber="8"/>
			<description>Entry IC in AnnotPolyLine shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotPolyLine has type %1 instead of type Array</message>
				<arguments>
					<argument>ICType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotPolyLine shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotPolyLine is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotPolyLine shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotPolyLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotPolyLine is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotPolyLine is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-IT" testNumber="8"/>
			<description>Entry IT in AnnotPolyLine shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotPolyLine has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-IT-Name" testNumber="6"/>
			<description>Entry IT with type Name in AnnotPolyLine shall have one of values: PolygonDimension, PolygonCloud, PolyLineDimension</description>
			<test>ITHasTypeName != true || ITNameValue == "PolygonCloud" || ITNameValue == "PolyLineDimension" || ITNameValue == "PolygonDimension"</test>
			<error>
				<message>Entry IT with type Name in AnnotPolyLine has incorrect value %1 instead of PolygonDimension, PolygonCloud, PolyLineDimension</message>
				<arguments>
					<argument>ITNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-LE" testNumber="8"/>
			<description>Entry LE in AnnotPolyLine shall have type Array</description>
			<test>containsLE == false || LEHasTypeArray == true</test>
			<error>
				<message>Entry LE in AnnotPolyLine has type %1 instead of type Array</message>
				<arguments>
					<argument>LEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-M" testNumber="8"/>
			<description>Entry M in AnnotPolyLine shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotPolyLine has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-Measure" testNumber="8"/>
			<description>Entry Measure in AnnotPolyLine shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in AnnotPolyLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MeasureType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-NM" testNumber="8"/>
			<description>Entry NM in AnnotPolyLine shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotPolyLine has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotPolyLine shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotPolyLine is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-OC" testNumber="8"/>
			<description>Entry OC in AnnotPolyLine shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotPolyLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-P" testNumber="8"/>
			<description>Entry P in AnnotPolyLine shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotPolyLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotPolyLine shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPolyLine is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotPolyLine shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotPolyLine has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotPolyLine shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotPolyLine is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-RC" testNumber="8"/>
			<description>Entry RC in AnnotPolyLine shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotPolyLine has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotPolyLine shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotPolyLine is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-RT" testNumber="8"/>
			<description>Entry RT in AnnotPolyLine shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotPolyLine has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotPolyLine shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotPolyLine has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotPolyLine shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotPolyLine has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotPolyLine is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotPolyLine is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotPolyLine shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotPolyLine has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotPolyLine shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotPolyLine has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotPolyLine shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotPolyLine has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotPolyLine is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotPolyLine is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotPolyLine shall have value PolyLine</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PolyLine"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotPolyLine has incorrect value %1 instead of PolyLine</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-T" testNumber="8"/>
			<description>Entry T in AnnotPolyLine shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotPolyLine has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-Type" testNumber="8"/>
			<description>Entry Type in AnnotPolyLine shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotPolyLine has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotPolyLine shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotPolyLine has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-Vertices" testNumber="8"/>
			<description>Entry Vertices in AnnotPolyLine shall have type Array</description>
			<test>containsVertices == false || VerticesHasTypeArray == true</test>
			<error>
				<message>Entry Vertices in AnnotPolyLine has type %1 instead of type Array</message>
				<arguments>
					<argument>VerticesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="AnnotPolyLine-Vertices" testNumber="11"/>
			<description>Entry Vertices in AnnotPolyLine is required</description>
			<test>containsVertices == true</test>
			<error>
				<message>Entry Vertices in AnnotPolyLine is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon" testNumber="1"/>
			<description>AnnotPolygon shall not contain entries except AF, AP, AS, BE, BS, Border, C, CA, Contents, CreationDate, ExData, F, IC, IRT, IT, LE, M, Measure, NM, OC, P, Popup, RC, RT, Rect, StructParent, Subj, Subtype, T, Type, Vertices</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Path' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Vertices' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotPolygon contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Path' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Vertices' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon" testNumber="22"/>
			<description>AnnotPolygon shall not contain entries BM, Lang, Path, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'Path' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotPolygon contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'Path' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-AF" testNumber="8"/>
			<description>Entry AF in AnnotPolygon shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotPolygon has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-AF" testNumber="23"/>
			<description>Entry AF in AnnotPolygon can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotPolygon is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-AP" testNumber="8"/>
			<description>Entry AP in AnnotPolygon shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotPolygon has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-AS" testNumber="8"/>
			<description>Entry AS in AnnotPolygon shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotPolygon has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-AS" testNumber="11"/>
			<description>Entry AS in AnnotPolygon is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotPolygon is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-BE" testNumber="8"/>
			<description>Entry BE in AnnotPolygon shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in AnnotPolygon has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-BS" testNumber="8"/>
			<description>Entry BS in AnnotPolygon shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotPolygon has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-Border" testNumber="8"/>
			<description>Entry Border in AnnotPolygon shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotPolygon has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-C" testNumber="8"/>
			<description>Entry C in AnnotPolygon shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotPolygon has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-CA" testNumber="8"/>
			<description>Entry CA in AnnotPolygon shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotPolygon has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotPolygon shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotPolygon does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotPolygon shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotPolygon has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotPolygon shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotPolygon has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotPolygon shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotPolygon is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotPolygon shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotPolygon has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-F" testNumber="8"/>
			<description>Entry F in AnnotPolygon shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotPolygon has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotPolygon shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotPolygon does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-IC" testNumber="8"/>
			<description>Entry IC in AnnotPolygon shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotPolygon has type %1 instead of type Array</message>
				<arguments>
					<argument>ICType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotPolygon shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotPolygon is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotPolygon shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotPolygon has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotPolygon is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotPolygon is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-IT" testNumber="8"/>
			<description>Entry IT in AnnotPolygon shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotPolygon has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-IT-Name" testNumber="6"/>
			<description>Entry IT with type Name in AnnotPolygon shall have one of values: PolygonDimension, PolygonCloud, PolyLineDimension</description>
			<test>ITHasTypeName != true || ITNameValue == "PolygonCloud" || ITNameValue == "PolyLineDimension" || ITNameValue == "PolygonDimension"</test>
			<error>
				<message>Entry IT with type Name in AnnotPolygon has incorrect value %1 instead of PolygonDimension, PolygonCloud, PolyLineDimension</message>
				<arguments>
					<argument>ITNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-LE" testNumber="8"/>
			<description>Entry LE in AnnotPolygon shall have type Array</description>
			<test>containsLE == false || LEHasTypeArray == true</test>
			<error>
				<message>Entry LE in AnnotPolygon has type %1 instead of type Array</message>
				<arguments>
					<argument>LEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-M" testNumber="8"/>
			<description>Entry M in AnnotPolygon shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotPolygon has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-Measure" testNumber="8"/>
			<description>Entry Measure in AnnotPolygon shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in AnnotPolygon has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MeasureType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-NM" testNumber="8"/>
			<description>Entry NM in AnnotPolygon shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotPolygon has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotPolygon shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotPolygon is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-OC" testNumber="8"/>
			<description>Entry OC in AnnotPolygon shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotPolygon has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-P" testNumber="8"/>
			<description>Entry P in AnnotPolygon shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotPolygon has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotPolygon shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPolygon is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotPolygon shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotPolygon has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotPolygon shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotPolygon is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-RC" testNumber="8"/>
			<description>Entry RC in AnnotPolygon shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotPolygon has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotPolygon shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotPolygon is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-RT" testNumber="8"/>
			<description>Entry RT in AnnotPolygon shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotPolygon has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotPolygon shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotPolygon has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotPolygon shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotPolygon has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotPolygon is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotPolygon is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotPolygon shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotPolygon has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotPolygon shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotPolygon has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotPolygon shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotPolygon has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotPolygon is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotPolygon is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotPolygon shall have value Polygon</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Polygon"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotPolygon has incorrect value %1 instead of Polygon</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-T" testNumber="8"/>
			<description>Entry T in AnnotPolygon shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotPolygon has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-Type" testNumber="8"/>
			<description>Entry Type in AnnotPolygon shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotPolygon has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotPolygon shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotPolygon has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-Vertices" testNumber="8"/>
			<description>Entry Vertices in AnnotPolygon shall have type Array</description>
			<test>containsVertices == false || VerticesHasTypeArray == true</test>
			<error>
				<message>Entry Vertices in AnnotPolygon has type %1 instead of type Array</message>
				<arguments>
					<argument>VerticesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="AnnotPolygon-Vertices" testNumber="11"/>
			<description>Entry Vertices in AnnotPolygon is required</description>
			<test>containsVertices == true</test>
			<error>
				<message>Entry Vertices in AnnotPolygon is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup" testNumber="1"/>
			<description>AnnotPopup shall not contain entries except AF, AP, AS, Border, C, Contents, F, M, NM, OC, Open, P, Parent, Rect, StructParent, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotPopup contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup" testNumber="22"/>
			<description>AnnotPopup shall not contain entries BM, CA, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotPopup contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-AF" testNumber="8"/>
			<description>Entry AF in AnnotPopup shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotPopup has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-AF" testNumber="23"/>
			<description>Entry AF in AnnotPopup can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotPopup is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-AP" testNumber="8"/>
			<description>Entry AP in AnnotPopup shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotPopup has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-AS" testNumber="8"/>
			<description>Entry AS in AnnotPopup shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotPopup has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-AS" testNumber="11"/>
			<description>Entry AS in AnnotPopup is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotPopup is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-Border" testNumber="8"/>
			<description>Entry Border in AnnotPopup shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotPopup has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-C" testNumber="8"/>
			<description>Entry C in AnnotPopup shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotPopup has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotPopup shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotPopup has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-F" testNumber="8"/>
			<description>Entry F in AnnotPopup shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotPopup has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotPopup shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotPopup does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-M" testNumber="8"/>
			<description>Entry M in AnnotPopup shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotPopup has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-NM" testNumber="8"/>
			<description>Entry NM in AnnotPopup shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotPopup has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotPopup shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotPopup is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-OC" testNumber="8"/>
			<description>Entry OC in AnnotPopup shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotPopup has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-Open" testNumber="8"/>
			<description>Entry Open in AnnotPopup shall have type Boolean</description>
			<test>containsOpen == false || OpenHasTypeBoolean == true</test>
			<error>
				<message>Entry Open in AnnotPopup has type %1 instead of type Boolean</message>
				<arguments>
					<argument>OpenType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-P" testNumber="8"/>
			<description>Entry P in AnnotPopup shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotPopup has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotPopup shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPopup is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in AnnotPopup shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in AnnotPopup is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-Parent" testNumber="8"/>
			<description>Entry Parent in AnnotPopup shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in AnnotPopup has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotPopup shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotPopup has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotPopup is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotPopup is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotPopup shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotPopup has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotPopup shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotPopup has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotPopup is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotPopup is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotPopup shall have value Popup</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Popup"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotPopup has incorrect value %1 instead of Popup</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-Type" testNumber="8"/>
			<description>Entry Type in AnnotPopup shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotPopup has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="AnnotPopup-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotPopup shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotPopup has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark" testNumber="1"/>
			<description>AnnotPrinterMark shall not contain entries except AF, AP, AS, Border, C, Contents, F, M, MN, NM, OC, P, Rect, StructParent, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MN' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotPrinterMark contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MN' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark" testNumber="22"/>
			<description>AnnotPrinterMark shall not contain entries BM, CA, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotPrinterMark contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-AF" testNumber="8"/>
			<description>Entry AF in AnnotPrinterMark shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotPrinterMark has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-AF" testNumber="23"/>
			<description>Entry AF in AnnotPrinterMark can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotPrinterMark is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-AP" testNumber="8"/>
			<description>Entry AP in AnnotPrinterMark shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotPrinterMark has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-AS" testNumber="8"/>
			<description>Entry AS in AnnotPrinterMark shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotPrinterMark has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-AS" testNumber="11"/>
			<description>Entry AS in AnnotPrinterMark is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotPrinterMark is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-Border" testNumber="8"/>
			<description>Entry Border in AnnotPrinterMark shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotPrinterMark has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-C" testNumber="8"/>
			<description>Entry C in AnnotPrinterMark shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotPrinterMark has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotPrinterMark shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotPrinterMark has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-F" testNumber="8"/>
			<description>Entry F in AnnotPrinterMark shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotPrinterMark has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-F" testNumber="7"/>
			<description>Entry F in AnnotPrinterMark is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in AnnotPrinterMark is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotPrinterMark shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotPrinterMark does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-M" testNumber="8"/>
			<description>Entry M in AnnotPrinterMark shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotPrinterMark has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-MN" testNumber="8"/>
			<description>Entry MN in AnnotPrinterMark shall have type Name</description>
			<test>containsMN == false || MNHasTypeName == true</test>
			<error>
				<message>Entry MN in AnnotPrinterMark has type %1 instead of type Name</message>
				<arguments>
					<argument>MNType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-NM" testNumber="8"/>
			<description>Entry NM in AnnotPrinterMark shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotPrinterMark has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotPrinterMark shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotPrinterMark is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-OC" testNumber="8"/>
			<description>Entry OC in AnnotPrinterMark shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotPrinterMark has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-P" testNumber="8"/>
			<description>Entry P in AnnotPrinterMark shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotPrinterMark has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotPrinterMark shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPrinterMark is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotPrinterMark shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotPrinterMark has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotPrinterMark is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotPrinterMark is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotPrinterMark shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotPrinterMark has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotPrinterMark shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotPrinterMark has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotPrinterMark is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotPrinterMark is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotPrinterMark shall have value PrinterMark</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PrinterMark"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotPrinterMark has incorrect value %1 instead of PrinterMark</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-Type" testNumber="8"/>
			<description>Entry Type in AnnotPrinterMark shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotPrinterMark has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="AnnotPrinterMark-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotPrinterMark shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotPrinterMark has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection" testNumber="1"/>
			<description>AnnotProjection shall not contain entries except AP, AS, Border, C, CA, Contents, CreationDate, ExData, F, IRT, IT, M, NM, OC, P, Popup, RC, RT, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotProjection contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection" testNumber="22"/>
			<description>AnnotProjection shall not contain entries AF, BM, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'BM' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotProjection contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'BM' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-AP" testNumber="8"/>
			<description>Entry AP in AnnotProjection shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotProjection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-AP" testNumber="23"/>
			<description>Entry AP in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsAP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry AP in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-AS" testNumber="8"/>
			<description>Entry AS in AnnotProjection shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotProjection has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-AS" testNumber="11"/>
			<description>Entry AS in AnnotProjection is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotProjection is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-AS" testNumber="23"/>
			<description>Entry AS in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsAS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry AS in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Border" testNumber="8"/>
			<description>Entry Border in AnnotProjection shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotProjection has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Border" testNumber="23"/>
			<description>Entry Border in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsBorder == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Border in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-C" testNumber="8"/>
			<description>Entry C in AnnotProjection shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotProjection has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-C" testNumber="23"/>
			<description>Entry C in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsC == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry C in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-CA" testNumber="8"/>
			<description>Entry CA in AnnotProjection shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotProjection has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-CA" testNumber="23"/>
			<description>Entry CA in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsCA == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry CA in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotProjection shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotProjection does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotProjection shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotProjection has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Contents" testNumber="23"/>
			<description>Entry Contents in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsContents == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Contents in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotProjection shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotProjection has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-CreationDate" testNumber="23"/>
			<description>Entry CreationDate in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsCreationDate == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry CreationDate in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotProjection shall be one of objects ExData3DMarkup, ExDataMarkupGeo, ExDataProjection</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotProjection is not one of objects ExData3DMarkup, ExDataMarkupGeo, ExDataProjection</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotProjection shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotProjection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-ExData" testNumber="23"/>
			<description>Entry ExData in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsExData == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry ExData in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-F" testNumber="8"/>
			<description>Entry F in AnnotProjection shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotProjection has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-F" testNumber="23"/>
			<description>Entry F in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsF == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry F in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotProjection shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotProjection does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotProjection shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotProjection, AnnotRichMedia, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotProjection is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotProjection, AnnotRichMedia, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotProjection shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotProjection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotProjection is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotProjection is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-IRT" testNumber="23"/>
			<description>Entry IRT in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsIRT == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry IRT in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-IT" testNumber="8"/>
			<description>Entry IT in AnnotProjection shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotProjection has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-IT" testNumber="23"/>
			<description>Entry IT in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsIT == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry IT in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-M" testNumber="8"/>
			<description>Entry M in AnnotProjection shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotProjection has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-M" testNumber="23"/>
			<description>Entry M in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsM == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry M in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-NM" testNumber="8"/>
			<description>Entry NM in AnnotProjection shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotProjection has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-NM" testNumber="23"/>
			<description>Entry NM in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsNM == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry NM in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotProjection shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotProjection is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-OC" testNumber="8"/>
			<description>Entry OC in AnnotProjection shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotProjection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-OC" testNumber="23"/>
			<description>Entry OC in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsOC == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry OC in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-P" testNumber="8"/>
			<description>Entry P in AnnotProjection shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotProjection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-P" testNumber="23"/>
			<description>Entry P in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry P in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotProjection shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotProjection is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotProjection shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotProjection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Popup" testNumber="23"/>
			<description>Entry Popup in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsPopup == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Popup in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotProjection shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotProjection is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-RC" testNumber="8"/>
			<description>Entry RC in AnnotProjection shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotProjection has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-RC" testNumber="23"/>
			<description>Entry RC in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsRC == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry RC in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotProjection shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotProjection is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-RT" testNumber="8"/>
			<description>Entry RT in AnnotProjection shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotProjection has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-RT" testNumber="23"/>
			<description>Entry RT in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsRT == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry RT in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotProjection shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotProjection has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotProjection shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotProjection has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotProjection is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotProjection is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Rect" testNumber="23"/>
			<description>Entry Rect in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsRect == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Rect in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotProjection shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotProjection has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-StructParent" testNumber="23"/>
			<description>Entry StructParent in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsStructParent == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry StructParent in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotProjection shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotProjection has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Subj" testNumber="23"/>
			<description>Entry Subj in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSubj == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Subj in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotProjection shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotProjection has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotProjection is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotProjection is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Subtype" testNumber="23"/>
			<description>Entry Subtype in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSubtype == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Subtype in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotProjection shall have value Projection</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Projection"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotProjection has incorrect value %1 instead of Projection</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-T" testNumber="8"/>
			<description>Entry T in AnnotProjection shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotProjection has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-T" testNumber="23"/>
			<description>Entry T in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsT == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry T in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Type" testNumber="8"/>
			<description>Entry Type in AnnotProjection shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotProjection has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Type" testNumber="23"/>
			<description>Entry Type in AnnotProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in AnnotProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="AnnotProjection-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotProjection shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotProjection has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact" testNumber="1"/>
			<description>AnnotRedact shall not contain entries except AF, AP, AS, Border, C, CA, Contents, CreationDate, DA, ExData, F, IC, IRT, IT, M, NM, OC, OverlayText, P, Popup, Q, QuadPoints, RC, RO, RT, Rect, Repeat, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OverlayText' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RO' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'Repeat' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotRedact contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OverlayText' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RO' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'Repeat' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact" testNumber="22"/>
			<description>AnnotRedact shall not contain entries BM, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotRedact contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-AF" testNumber="8"/>
			<description>Entry AF in AnnotRedact shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotRedact has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-AF" testNumber="23"/>
			<description>Entry AF in AnnotRedact can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotRedact is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-AP" testNumber="8"/>
			<description>Entry AP in AnnotRedact shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotRedact has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-AS" testNumber="8"/>
			<description>Entry AS in AnnotRedact shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotRedact has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-AS" testNumber="11"/>
			<description>Entry AS in AnnotRedact is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotRedact is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-Border" testNumber="8"/>
			<description>Entry Border in AnnotRedact shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotRedact has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-C" testNumber="8"/>
			<description>Entry C in AnnotRedact shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotRedact has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-CA" testNumber="8"/>
			<description>Entry CA in AnnotRedact shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotRedact has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotRedact shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotRedact does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotRedact shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotRedact has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotRedact shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotRedact has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-DA" testNumber="8"/>
			<description>Entry DA in AnnotRedact shall have type StringByte</description>
			<test>containsDA == false || DAHasTypeStringByte == true</test>
			<error>
				<message>Entry DA in AnnotRedact has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotRedact shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotRedact is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotRedact shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotRedact has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-F" testNumber="8"/>
			<description>Entry F in AnnotRedact shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotRedact has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotRedact shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotRedact does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-IC" testNumber="8"/>
			<description>Entry IC in AnnotRedact shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotRedact has type %1 instead of type Array</message>
				<arguments>
					<argument>ICType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotRedact shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotRedact is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotRedact shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotRedact has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotRedact is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotRedact is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-IT" testNumber="8"/>
			<description>Entry IT in AnnotRedact shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotRedact has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-M" testNumber="8"/>
			<description>Entry M in AnnotRedact shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotRedact has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-NM" testNumber="8"/>
			<description>Entry NM in AnnotRedact shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotRedact has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotRedact shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotRedact is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-OC" testNumber="8"/>
			<description>Entry OC in AnnotRedact shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotRedact has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-OverlayText" testNumber="8"/>
			<description>Entry OverlayText in AnnotRedact shall have type StringText</description>
			<test>containsOverlayText == false || OverlayTextHasTypeStringText == true</test>
			<error>
				<message>Entry OverlayText in AnnotRedact has type %1 instead of type StringText</message>
				<arguments>
					<argument>OverlayTextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-P" testNumber="8"/>
			<description>Entry P in AnnotRedact shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotRedact has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotRedact shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotRedact is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotRedact shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotRedact has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotRedact shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotRedact is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-Q" testNumber="8"/>
			<description>Entry Q in AnnotRedact shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in AnnotRedact has type %1 instead of type Integer</message>
				<arguments>
					<argument>QType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-Q-Integer" testNumber="6"/>
			<description>Entry Q with type Integer in AnnotRedact shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in AnnotRedact has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-QuadPoints" testNumber="8"/>
			<description>Entry QuadPoints in AnnotRedact shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotRedact has type %1 instead of type Array</message>
				<arguments>
					<argument>QuadPointsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-RC" testNumber="8"/>
			<description>Entry RC in AnnotRedact shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotRedact has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotRedact shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotRedact is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-RO" testNumber="8"/>
			<description>Entry RO in AnnotRedact shall have type Stream</description>
			<test>containsRO == false || ROHasTypeStream == true</test>
			<error>
				<message>Entry RO in AnnotRedact has type %1 instead of type Stream</message>
				<arguments>
					<argument>ROType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-RO-Stream" testNumber="10"/>
			<description>Entry RO with type Stream in AnnotRedact shall be indirect</description>
			<test>ROHasTypeStream != true || isROIndirect == true</test>
			<error>
				<message>Entry RO with type Stream in AnnotRedact is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-RT" testNumber="8"/>
			<description>Entry RT in AnnotRedact shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotRedact has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotRedact shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotRedact has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotRedact shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotRedact has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotRedact is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotRedact is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-Repeat" testNumber="8"/>
			<description>Entry Repeat in AnnotRedact shall have type Boolean</description>
			<test>containsRepeat == false || RepeatHasTypeBoolean == true</test>
			<error>
				<message>Entry Repeat in AnnotRedact has type %1 instead of type Boolean</message>
				<arguments>
					<argument>RepeatType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotRedact shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotRedact has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotRedact shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotRedact has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotRedact shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotRedact has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotRedact is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotRedact is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotRedact shall have value Redact</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Redact"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotRedact has incorrect value %1 instead of Redact</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-T" testNumber="8"/>
			<description>Entry T in AnnotRedact shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotRedact has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-Type" testNumber="8"/>
			<description>Entry Type in AnnotRedact shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotRedact has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="AnnotRedact-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotRedact shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotRedact has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia" testNumber="1"/>
			<description>AnnotRichMedia shall not contain entries except AP, AS, Border, C, Contents, F, M, NM, OC, P, Rect, RichMediaContent, RichMediaSettings, StructParent, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'RichMediaContent' &amp;&amp; elem != 'RichMediaSettings' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotRichMedia contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'RichMediaContent' &amp;&amp; elem != 'RichMediaSettings' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia" testNumber="22"/>
			<description>AnnotRichMedia shall not contain entries AF, BM, CA, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotRichMedia contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-AP" testNumber="8"/>
			<description>Entry AP in AnnotRichMedia shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotRichMedia has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-AP" testNumber="23"/>
			<description>Entry AP in AnnotRichMedia can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsAP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry AP in AnnotRichMedia is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-AS" testNumber="8"/>
			<description>Entry AS in AnnotRichMedia shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotRichMedia has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-AS" testNumber="11"/>
			<description>Entry AS in AnnotRichMedia is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotRichMedia is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-AS" testNumber="23"/>
			<description>Entry AS in AnnotRichMedia can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsAS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry AS in AnnotRichMedia is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-Border" testNumber="8"/>
			<description>Entry Border in AnnotRichMedia shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotRichMedia has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-Border" testNumber="23"/>
			<description>Entry Border in AnnotRichMedia can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsBorder == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Border in AnnotRichMedia is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-C" testNumber="8"/>
			<description>Entry C in AnnotRichMedia shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotRichMedia has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-C" testNumber="23"/>
			<description>Entry C in AnnotRichMedia can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsC == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry C in AnnotRichMedia is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotRichMedia shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotRichMedia has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-Contents" testNumber="23"/>
			<description>Entry Contents in AnnotRichMedia can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsContents == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Contents in AnnotRichMedia is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-F" testNumber="8"/>
			<description>Entry F in AnnotRichMedia shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotRichMedia has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-F" testNumber="23"/>
			<description>Entry F in AnnotRichMedia can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsF == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry F in AnnotRichMedia is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotRichMedia shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotRichMedia does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-M" testNumber="8"/>
			<description>Entry M in AnnotRichMedia shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotRichMedia has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-M" testNumber="23"/>
			<description>Entry M in AnnotRichMedia can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsM == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry M in AnnotRichMedia is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-NM" testNumber="8"/>
			<description>Entry NM in AnnotRichMedia shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotRichMedia has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-NM" testNumber="23"/>
			<description>Entry NM in AnnotRichMedia can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsNM == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry NM in AnnotRichMedia is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotRichMedia shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotRichMedia is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-OC" testNumber="8"/>
			<description>Entry OC in AnnotRichMedia shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotRichMedia has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-OC" testNumber="23"/>
			<description>Entry OC in AnnotRichMedia can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsOC == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry OC in AnnotRichMedia is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-P" testNumber="8"/>
			<description>Entry P in AnnotRichMedia shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotRichMedia has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-P" testNumber="23"/>
			<description>Entry P in AnnotRichMedia can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry P in AnnotRichMedia is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotRichMedia shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotRichMedia is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotRichMedia shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotRichMedia has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotRichMedia is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotRichMedia is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-Rect" testNumber="23"/>
			<description>Entry Rect in AnnotRichMedia can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsRect == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Rect in AnnotRichMedia is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-RichMediaContent" testNumber="8"/>
			<description>Entry RichMediaContent in AnnotRichMedia shall have type Dictionary</description>
			<test>containsRichMediaContent == false || RichMediaContentHasTypeDictionary == true</test>
			<error>
				<message>Entry RichMediaContent in AnnotRichMedia has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>RichMediaContentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-RichMediaContent" testNumber="7"/>
			<description>Entry RichMediaContent in AnnotRichMedia is required</description>
			<test>containsRichMediaContent == true</test>
			<error>
				<message>Entry RichMediaContent in AnnotRichMedia is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-RichMediaContent" testNumber="23"/>
			<description>Entry RichMediaContent in AnnotRichMedia can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsRichMediaContent == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry RichMediaContent in AnnotRichMedia is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-RichMediaSettings" testNumber="8"/>
			<description>Entry RichMediaSettings in AnnotRichMedia shall have type Dictionary</description>
			<test>containsRichMediaSettings == false || RichMediaSettingsHasTypeDictionary == true</test>
			<error>
				<message>Entry RichMediaSettings in AnnotRichMedia has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>RichMediaSettingsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-RichMediaSettings" testNumber="23"/>
			<description>Entry RichMediaSettings in AnnotRichMedia can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsRichMediaSettings == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry RichMediaSettings in AnnotRichMedia is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotRichMedia shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotRichMedia has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-StructParent" testNumber="23"/>
			<description>Entry StructParent in AnnotRichMedia can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsStructParent == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry StructParent in AnnotRichMedia is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotRichMedia shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotRichMedia has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotRichMedia is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotRichMedia is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-Subtype" testNumber="23"/>
			<description>Entry Subtype in AnnotRichMedia can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSubtype == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Subtype in AnnotRichMedia is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotRichMedia shall have value RichMedia</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "RichMedia"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotRichMedia has incorrect value %1 instead of RichMedia</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-Type" testNumber="8"/>
			<description>Entry Type in AnnotRichMedia shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotRichMedia has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-Type" testNumber="23"/>
			<description>Entry Type in AnnotRichMedia can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in AnnotRichMedia is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="AnnotRichMedia-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotRichMedia shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotRichMedia has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen" testNumber="1"/>
			<description>AnnotScreen shall not contain entries except A, AA, AP, AS, Border, C, Contents, F, M, MK, NM, OC, P, Rect, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotScreen contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen" testNumber="22"/>
			<description>AnnotScreen shall not contain entries AF, BM, CA, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotScreen contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-A-Dictionary" testNumber="17"/>
			<description>Entry A with type Dictionary in AnnotScreen shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotScreen is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-A" testNumber="8"/>
			<description>Entry A in AnnotScreen shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotScreen has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-AA" testNumber="8"/>
			<description>Entry AA in AnnotScreen shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in AnnotScreen has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-AP" testNumber="8"/>
			<description>Entry AP in AnnotScreen shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotScreen has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-AS" testNumber="8"/>
			<description>Entry AS in AnnotScreen shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotScreen has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-AS" testNumber="11"/>
			<description>Entry AS in AnnotScreen is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotScreen is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-Border" testNumber="8"/>
			<description>Entry Border in AnnotScreen shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotScreen has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-C" testNumber="8"/>
			<description>Entry C in AnnotScreen shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotScreen has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotScreen shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotScreen has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-F" testNumber="8"/>
			<description>Entry F in AnnotScreen shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotScreen has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotScreen shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotScreen does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-M" testNumber="8"/>
			<description>Entry M in AnnotScreen shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotScreen has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-MK" testNumber="8"/>
			<description>Entry MK in AnnotScreen shall have type Dictionary</description>
			<test>containsMK == false || MKHasTypeDictionary == true</test>
			<error>
				<message>Entry MK in AnnotScreen has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MKType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-NM" testNumber="8"/>
			<description>Entry NM in AnnotScreen shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotScreen has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotScreen shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotScreen is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-OC" testNumber="8"/>
			<description>Entry OC in AnnotScreen shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotScreen has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-P" testNumber="8"/>
			<description>Entry P in AnnotScreen shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotScreen has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotScreen shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotScreen is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotScreen shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotScreen has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotScreen is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotScreen is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotScreen shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotScreen has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotScreen shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotScreen has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotScreen is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotScreen is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotScreen shall have value Screen</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Screen"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotScreen has incorrect value %1 instead of Screen</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-T" testNumber="8"/>
			<description>Entry T in AnnotScreen shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotScreen has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-Type" testNumber="8"/>
			<description>Entry Type in AnnotScreen shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotScreen has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="AnnotScreen-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotScreen shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotScreen has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound" testNumber="1"/>
			<description>AnnotSound shall not contain entries except AP, AS, Border, C, CA, Contents, CreationDate, ExData, F, IRT, IT, M, NM, Name, OC, P, Popup, RC, RT, Rect, Sound, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'Sound' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotSound contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'Sound' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound" testNumber="22"/>
			<description>AnnotSound shall not contain entries AF, BM, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'BM' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotSound contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'AF' || elem == 'BM' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-AP" testNumber="8"/>
			<description>Entry AP in AnnotSound shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotSound has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-AS" testNumber="8"/>
			<description>Entry AS in AnnotSound shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotSound has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-AS" testNumber="11"/>
			<description>Entry AS in AnnotSound is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotSound is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-Border" testNumber="8"/>
			<description>Entry Border in AnnotSound shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotSound has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-C" testNumber="8"/>
			<description>Entry C in AnnotSound shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotSound has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-CA" testNumber="8"/>
			<description>Entry CA in AnnotSound shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotSound has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotSound shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotSound does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotSound shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotSound has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotSound shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotSound has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotSound shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotSound is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotSound shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotSound has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-F" testNumber="8"/>
			<description>Entry F in AnnotSound shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotSound has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotSound shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotSound does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotSound shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotSound is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotSound shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotSound has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotSound is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotSound is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-IT" testNumber="8"/>
			<description>Entry IT in AnnotSound shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotSound has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-M" testNumber="8"/>
			<description>Entry M in AnnotSound shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotSound has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-NM" testNumber="8"/>
			<description>Entry NM in AnnotSound shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotSound has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-Name" testNumber="8"/>
			<description>Entry Name in AnnotSound shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotSound has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotSound shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotSound is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-OC" testNumber="8"/>
			<description>Entry OC in AnnotSound shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotSound has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-P" testNumber="8"/>
			<description>Entry P in AnnotSound shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotSound has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotSound shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSound is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotSound shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotSound has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotSound shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSound is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-RC" testNumber="8"/>
			<description>Entry RC in AnnotSound shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotSound has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotSound shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotSound is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-RT" testNumber="8"/>
			<description>Entry RT in AnnotSound shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotSound has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotSound shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotSound has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotSound shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotSound has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotSound is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotSound is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-Sound" testNumber="8"/>
			<description>Entry Sound in AnnotSound shall have type Stream</description>
			<test>containsSound == false || SoundHasTypeStream == true</test>
			<error>
				<message>Entry Sound in AnnotSound has type %1 instead of type Stream</message>
				<arguments>
					<argument>SoundType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-Sound" testNumber="7"/>
			<description>Entry Sound in AnnotSound is required</description>
			<test>containsSound == true</test>
			<error>
				<message>Entry Sound in AnnotSound is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-Sound-Stream" testNumber="10"/>
			<description>Entry Sound with type Stream in AnnotSound shall be indirect</description>
			<test>SoundHasTypeStream != true || isSoundIndirect == true</test>
			<error>
				<message>Entry Sound with type Stream in AnnotSound is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotSound shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotSound has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotSound shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotSound has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotSound shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotSound has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotSound is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotSound is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotSound shall have value Sound</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Sound"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotSound has incorrect value %1 instead of Sound</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-T" testNumber="8"/>
			<description>Entry T in AnnotSound shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotSound has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-Type" testNumber="8"/>
			<description>Entry Type in AnnotSound shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotSound has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="AnnotSound-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotSound shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotSound has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare" testNumber="1"/>
			<description>AnnotSquare shall not contain entries except AF, AP, AS, BE, BS, Border, C, Contents, CreationDate, ExData, F, IC, IRT, IT, M, NM, OC, P, Popup, RC, RD, RT, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotSquare contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare" testNumber="22"/>
			<description>AnnotSquare shall not contain entries BM, CA, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotSquare contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-AF" testNumber="8"/>
			<description>Entry AF in AnnotSquare shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotSquare has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-AF" testNumber="23"/>
			<description>Entry AF in AnnotSquare can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotSquare is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-AP" testNumber="8"/>
			<description>Entry AP in AnnotSquare shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotSquare has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-AS" testNumber="8"/>
			<description>Entry AS in AnnotSquare shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotSquare has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-AS" testNumber="11"/>
			<description>Entry AS in AnnotSquare is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotSquare is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-BE" testNumber="8"/>
			<description>Entry BE in AnnotSquare shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in AnnotSquare has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-BS" testNumber="8"/>
			<description>Entry BS in AnnotSquare shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotSquare has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-Border" testNumber="8"/>
			<description>Entry Border in AnnotSquare shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotSquare has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-C" testNumber="8"/>
			<description>Entry C in AnnotSquare shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotSquare has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotSquare shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotSquare has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotSquare shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotSquare has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotSquare shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotSquare is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotSquare shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotSquare has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-F" testNumber="8"/>
			<description>Entry F in AnnotSquare shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotSquare has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotSquare shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotSquare does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-IC" testNumber="8"/>
			<description>Entry IC in AnnotSquare shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotSquare has type %1 instead of type Array</message>
				<arguments>
					<argument>ICType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotSquare shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotSquare is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotSquare shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotSquare has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotSquare is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotSquare is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-IT" testNumber="8"/>
			<description>Entry IT in AnnotSquare shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotSquare has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-M" testNumber="8"/>
			<description>Entry M in AnnotSquare shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotSquare has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-NM" testNumber="8"/>
			<description>Entry NM in AnnotSquare shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotSquare has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotSquare shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotSquare is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-OC" testNumber="8"/>
			<description>Entry OC in AnnotSquare shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotSquare has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-P" testNumber="8"/>
			<description>Entry P in AnnotSquare shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotSquare has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotSquare shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSquare is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotSquare shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotSquare has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotSquare shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSquare is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-RC" testNumber="8"/>
			<description>Entry RC in AnnotSquare shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotSquare has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotSquare shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotSquare is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-RD" testNumber="8"/>
			<description>Entry RD in AnnotSquare shall have type Rectangle</description>
			<test>containsRD == false || RDHasTypeRectangle == true</test>
			<error>
				<message>Entry RD in AnnotSquare has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-RD-Rectangle" testNumber="9"/>
			<description>Entry RD with type Rectangle in AnnotSquare shall satisfy special case: fn:Eval((RD::@0 &gt;= 0) &amp;&amp; (RD::@1 &gt;= 0) &amp;&amp; (RD::@2 &gt;= 0) &amp;&amp; (RD::@3 &gt;= 0) &amp;&amp; ((RD::@1 + RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0 + RD::@2) &lt; fn:RectWidth(Rect)))</description>
			<test>RDHasTypeRectangle != true || ((RD0NumberValue &gt;= 0) &amp;&amp; (RD1NumberValue &gt;= 0) &amp;&amp; (RD2NumberValue &gt;= 0) &amp;&amp; (RD3NumberValue &gt;= 0) &amp;&amp; (RectHasTypeRectangle == false || ((RD1NumberValue + RD3NumberValue) &lt; RectRectHeight)) &amp;&amp; (RectHasTypeRectangle == false || ((RD0NumberValue + RD2NumberValue) &lt; RectRectWidth)))</test>
			<error>
				<message>Entry RD with type Rectangle in AnnotSquare does not satisfy special case: fn:Eval((RD::@0 &gt;= 0) &amp;&amp; (RD::@1 &gt;= 0) &amp;&amp; (RD::@2 &gt;= 0) &amp;&amp; (RD::@3 &gt;= 0) &amp;&amp; ((RD::@1 + RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0 + RD::@2) &lt; fn:RectWidth(Rect)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-RT" testNumber="8"/>
			<description>Entry RT in AnnotSquare shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotSquare has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotSquare shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotSquare has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotSquare shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotSquare has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotSquare is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotSquare is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotSquare shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotSquare has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotSquare shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotSquare has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotSquare shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotSquare has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotSquare is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotSquare is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotSquare shall have value Square</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Square"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotSquare has incorrect value %1 instead of Square</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-T" testNumber="8"/>
			<description>Entry T in AnnotSquare shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotSquare has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-Type" testNumber="8"/>
			<description>Entry Type in AnnotSquare shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotSquare has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="AnnotSquare-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotSquare shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotSquare has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly" testNumber="1"/>
			<description>AnnotSquiggly shall not contain entries except AF, AP, AS, Border, C, CA, Contents, CreationDate, ExData, F, IRT, IT, M, NM, OC, P, Popup, QuadPoints, RC, RT, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotSquiggly contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly" testNumber="22"/>
			<description>AnnotSquiggly shall not contain entries BM, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotSquiggly contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-AF" testNumber="8"/>
			<description>Entry AF in AnnotSquiggly shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotSquiggly has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-AF" testNumber="23"/>
			<description>Entry AF in AnnotSquiggly can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotSquiggly is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-AP" testNumber="8"/>
			<description>Entry AP in AnnotSquiggly shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotSquiggly has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-AS" testNumber="8"/>
			<description>Entry AS in AnnotSquiggly shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotSquiggly has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-AS" testNumber="11"/>
			<description>Entry AS in AnnotSquiggly is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotSquiggly is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-Border" testNumber="8"/>
			<description>Entry Border in AnnotSquiggly shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotSquiggly has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-C" testNumber="8"/>
			<description>Entry C in AnnotSquiggly shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotSquiggly has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-CA" testNumber="8"/>
			<description>Entry CA in AnnotSquiggly shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotSquiggly has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotSquiggly shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotSquiggly does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotSquiggly shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotSquiggly has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotSquiggly shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotSquiggly has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotSquiggly shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotSquiggly is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotSquiggly shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotSquiggly has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-F" testNumber="8"/>
			<description>Entry F in AnnotSquiggly shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotSquiggly has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotSquiggly shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotSquiggly does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotSquiggly shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotSquiggly is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotSquiggly shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotSquiggly has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotSquiggly is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotSquiggly is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-IT" testNumber="8"/>
			<description>Entry IT in AnnotSquiggly shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotSquiggly has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-M" testNumber="8"/>
			<description>Entry M in AnnotSquiggly shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotSquiggly has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-NM" testNumber="8"/>
			<description>Entry NM in AnnotSquiggly shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotSquiggly has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotSquiggly shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotSquiggly is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-OC" testNumber="8"/>
			<description>Entry OC in AnnotSquiggly shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotSquiggly has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-P" testNumber="8"/>
			<description>Entry P in AnnotSquiggly shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotSquiggly has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotSquiggly shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSquiggly is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotSquiggly shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotSquiggly has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotSquiggly shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSquiggly is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-QuadPoints" testNumber="8"/>
			<description>Entry QuadPoints in AnnotSquiggly shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotSquiggly has type %1 instead of type Array</message>
				<arguments>
					<argument>QuadPointsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-QuadPoints" testNumber="7"/>
			<description>Entry QuadPoints in AnnotSquiggly is required</description>
			<test>containsQuadPoints == true</test>
			<error>
				<message>Entry QuadPoints in AnnotSquiggly is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-RC" testNumber="8"/>
			<description>Entry RC in AnnotSquiggly shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotSquiggly has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotSquiggly shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotSquiggly is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-RT" testNumber="8"/>
			<description>Entry RT in AnnotSquiggly shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotSquiggly has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotSquiggly shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotSquiggly has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotSquiggly shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotSquiggly has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotSquiggly is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotSquiggly is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotSquiggly shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotSquiggly has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotSquiggly shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotSquiggly has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotSquiggly shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotSquiggly has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotSquiggly is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotSquiggly is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotSquiggly shall have value Squiggly</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Squiggly"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotSquiggly has incorrect value %1 instead of Squiggly</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-T" testNumber="8"/>
			<description>Entry T in AnnotSquiggly shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotSquiggly has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-Type" testNumber="8"/>
			<description>Entry Type in AnnotSquiggly shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotSquiggly has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="AnnotSquiggly-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotSquiggly shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotSquiggly has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp" testNumber="1"/>
			<description>AnnotStamp shall not contain entries except AF, AP, AS, Border, C, CA, Contents, CreationDate, ExData, F, IRT, M, NM, Name, OC, P, Popup, RC, RT, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotStamp contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp" testNumber="22"/>
			<description>AnnotStamp shall not contain entries BM, IT, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'IT' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotStamp contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'IT' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-AF" testNumber="8"/>
			<description>Entry AF in AnnotStamp shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotStamp has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-AF" testNumber="23"/>
			<description>Entry AF in AnnotStamp can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotStamp is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-AP" testNumber="8"/>
			<description>Entry AP in AnnotStamp shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotStamp has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-AS" testNumber="8"/>
			<description>Entry AS in AnnotStamp shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotStamp has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-AS" testNumber="11"/>
			<description>Entry AS in AnnotStamp is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotStamp is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-Border" testNumber="8"/>
			<description>Entry Border in AnnotStamp shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotStamp has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-C" testNumber="8"/>
			<description>Entry C in AnnotStamp shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotStamp has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-CA" testNumber="8"/>
			<description>Entry CA in AnnotStamp shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotStamp has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotStamp shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotStamp does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotStamp shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotStamp has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotStamp shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotStamp has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotStamp shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotStamp is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotStamp shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotStamp has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-F" testNumber="8"/>
			<description>Entry F in AnnotStamp shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotStamp has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotStamp shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotStamp does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotStamp shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotStamp is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotStamp shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotStamp has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotStamp is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotStamp is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-M" testNumber="8"/>
			<description>Entry M in AnnotStamp shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotStamp has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-NM" testNumber="8"/>
			<description>Entry NM in AnnotStamp shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotStamp has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-Name" testNumber="8"/>
			<description>Entry Name in AnnotStamp shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotStamp has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotStamp shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotStamp is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-OC" testNumber="8"/>
			<description>Entry OC in AnnotStamp shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotStamp has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-P" testNumber="8"/>
			<description>Entry P in AnnotStamp shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotStamp has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotStamp shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotStamp is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotStamp shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotStamp has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotStamp shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotStamp is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-RC" testNumber="8"/>
			<description>Entry RC in AnnotStamp shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotStamp has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotStamp shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotStamp is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-RT" testNumber="8"/>
			<description>Entry RT in AnnotStamp shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotStamp has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotStamp shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotStamp has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotStamp shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotStamp has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotStamp is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotStamp is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotStamp shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotStamp has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotStamp shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotStamp has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotStamp shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotStamp has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotStamp is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotStamp is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotStamp shall have value Stamp</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Stamp"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotStamp has incorrect value %1 instead of Stamp</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-T" testNumber="8"/>
			<description>Entry T in AnnotStamp shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotStamp has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-Type" testNumber="8"/>
			<description>Entry Type in AnnotStamp shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotStamp has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="AnnotStamp-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotStamp shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotStamp has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut" testNumber="1"/>
			<description>AnnotStrikeOut shall not contain entries except AF, AP, AS, Border, C, CA, Contents, CreationDate, ExData, F, IRT, IT, M, NM, OC, P, Popup, QuadPoints, RC, RT, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotStrikeOut contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut" testNumber="22"/>
			<description>AnnotStrikeOut shall not contain entries BM, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotStrikeOut contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-AF" testNumber="8"/>
			<description>Entry AF in AnnotStrikeOut shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotStrikeOut has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-AF" testNumber="23"/>
			<description>Entry AF in AnnotStrikeOut can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotStrikeOut is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-AP" testNumber="8"/>
			<description>Entry AP in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotStrikeOut has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-AS" testNumber="8"/>
			<description>Entry AS in AnnotStrikeOut shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotStrikeOut has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-AS" testNumber="11"/>
			<description>Entry AS in AnnotStrikeOut is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotStrikeOut is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-Border" testNumber="8"/>
			<description>Entry Border in AnnotStrikeOut shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotStrikeOut has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-C" testNumber="8"/>
			<description>Entry C in AnnotStrikeOut shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotStrikeOut has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-CA" testNumber="8"/>
			<description>Entry CA in AnnotStrikeOut shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotStrikeOut has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotStrikeOut shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotStrikeOut does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotStrikeOut shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotStrikeOut has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotStrikeOut shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotStrikeOut has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotStrikeOut shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotStrikeOut is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotStrikeOut has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-F" testNumber="8"/>
			<description>Entry F in AnnotStrikeOut shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotStrikeOut has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotStrikeOut shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotStrikeOut does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotStrikeOut shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotStrikeOut is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotStrikeOut has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotStrikeOut is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotStrikeOut is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-IT" testNumber="8"/>
			<description>Entry IT in AnnotStrikeOut shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotStrikeOut has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-M" testNumber="8"/>
			<description>Entry M in AnnotStrikeOut shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotStrikeOut has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-NM" testNumber="8"/>
			<description>Entry NM in AnnotStrikeOut shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotStrikeOut has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotStrikeOut shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotStrikeOut is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-OC" testNumber="8"/>
			<description>Entry OC in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotStrikeOut has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-P" testNumber="8"/>
			<description>Entry P in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotStrikeOut has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotStrikeOut shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotStrikeOut is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotStrikeOut has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotStrikeOut shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotStrikeOut is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-QuadPoints" testNumber="8"/>
			<description>Entry QuadPoints in AnnotStrikeOut shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotStrikeOut has type %1 instead of type Array</message>
				<arguments>
					<argument>QuadPointsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-QuadPoints" testNumber="7"/>
			<description>Entry QuadPoints in AnnotStrikeOut is required</description>
			<test>containsQuadPoints == true</test>
			<error>
				<message>Entry QuadPoints in AnnotStrikeOut is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-RC" testNumber="8"/>
			<description>Entry RC in AnnotStrikeOut shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotStrikeOut has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotStrikeOut shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotStrikeOut is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-RT" testNumber="8"/>
			<description>Entry RT in AnnotStrikeOut shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotStrikeOut has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotStrikeOut shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotStrikeOut has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotStrikeOut shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotStrikeOut has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotStrikeOut is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotStrikeOut is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotStrikeOut shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotStrikeOut has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotStrikeOut shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotStrikeOut has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotStrikeOut shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotStrikeOut has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotStrikeOut is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotStrikeOut is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotStrikeOut shall have value StrikeOut</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "StrikeOut"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotStrikeOut has incorrect value %1 instead of StrikeOut</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-T" testNumber="8"/>
			<description>Entry T in AnnotStrikeOut shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotStrikeOut has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-Type" testNumber="8"/>
			<description>Entry Type in AnnotStrikeOut shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotStrikeOut has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="AnnotStrikeOut-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotStrikeOut shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotStrikeOut has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText" testNumber="1"/>
			<description>AnnotText shall not contain entries except AF, AP, AS, Border, C, CA, Contents, CreationDate, ExData, F, IRT, IT, M, NM, Name, OC, Open, P, Popup, RC, RT, Rect, State, StateModel, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'State' &amp;&amp; elem != 'StateModel' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotText contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'State' &amp;&amp; elem != 'StateModel' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText" testNumber="22"/>
			<description>AnnotText shall not contain entries BM, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotText contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-AF" testNumber="8"/>
			<description>Entry AF in AnnotText shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotText has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-AF" testNumber="23"/>
			<description>Entry AF in AnnotText can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotText is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-AP" testNumber="8"/>
			<description>Entry AP in AnnotText shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotText has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-AS" testNumber="8"/>
			<description>Entry AS in AnnotText shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotText has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-AS" testNumber="11"/>
			<description>Entry AS in AnnotText is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotText is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-Border" testNumber="8"/>
			<description>Entry Border in AnnotText shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotText has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-C" testNumber="8"/>
			<description>Entry C in AnnotText shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotText has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-CA" testNumber="8"/>
			<description>Entry CA in AnnotText shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotText has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotText shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotText does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotText shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotText has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotText shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotText has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotText shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotText is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotText shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotText has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-F" testNumber="8"/>
			<description>Entry F in AnnotText shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotText has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotText shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotText does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotText shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotText is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotText shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotText has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotText is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotText is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-IT" testNumber="8"/>
			<description>Entry IT in AnnotText shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotText has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-M" testNumber="8"/>
			<description>Entry M in AnnotText shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotText has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-NM" testNumber="8"/>
			<description>Entry NM in AnnotText shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotText has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-Name" testNumber="8"/>
			<description>Entry Name in AnnotText shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotText has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-Name-Name" testNumber="6"/>
			<description>Entry Name with type Name in AnnotText shall have one of values: Comment, Help, Note, Insert, Key, NewParagraph, Paragraph</description>
			<test>NameHasTypeName != true || NameNameValue == "Comment" || NameNameValue == "Key" || NameNameValue == "Note" || NameNameValue == "Help" || NameNameValue == "NewParagraph" || NameNameValue == "Paragraph" || NameNameValue == "Insert"</test>
			<error>
				<message>Entry Name with type Name in AnnotText has incorrect value %1 instead of Comment, Help, Note, Insert, Key, NewParagraph, Paragraph</message>
				<arguments>
					<argument>NameNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotText shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotText is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-OC" testNumber="8"/>
			<description>Entry OC in AnnotText shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotText has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-Open" testNumber="8"/>
			<description>Entry Open in AnnotText shall have type Boolean</description>
			<test>containsOpen == false || OpenHasTypeBoolean == true</test>
			<error>
				<message>Entry Open in AnnotText has type %1 instead of type Boolean</message>
				<arguments>
					<argument>OpenType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-P" testNumber="8"/>
			<description>Entry P in AnnotText shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotText has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotText shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotText is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotText shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotText has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotText shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotText is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-RC" testNumber="8"/>
			<description>Entry RC in AnnotText shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotText has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotText shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotText is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-RT" testNumber="8"/>
			<description>Entry RT in AnnotText shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotText has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotText shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotText has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotText shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotText has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotText is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotText is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-State" testNumber="8"/>
			<description>Entry State in AnnotText shall have type StringText</description>
			<test>containsState == false || StateHasTypeStringText == true</test>
			<error>
				<message>Entry State in AnnotText has type %1 instead of type StringText</message>
				<arguments>
					<argument>StateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-State-StringText" testNumber="6"/>
			<description>Entry State with type StringText in AnnotText shall have one of values: Unmarked, Completed, Rejected, Cancelled, Marked, None, Accepted</description>
			<test>StateHasTypeStringText != true || StateStringTextValue == "Marked" || StateStringTextValue == "Unmarked" || StateStringTextValue == "Accepted" || StateStringTextValue == "Rejected" || StateStringTextValue == "Cancelled" || StateStringTextValue == "Completed" || StateStringTextValue == "None"</test>
			<error>
				<message>Entry State with type StringText in AnnotText has incorrect value %1 instead of Unmarked, Completed, Rejected, Cancelled, Marked, None, Accepted</message>
				<arguments>
					<argument>StateStringTextValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-StateModel" testNumber="8"/>
			<description>Entry StateModel in AnnotText shall have type StringText</description>
			<test>containsStateModel == false || StateModelHasTypeStringText == true</test>
			<error>
				<message>Entry StateModel in AnnotText has type %1 instead of type StringText</message>
				<arguments>
					<argument>StateModelType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-StateModel" testNumber="11"/>
			<description>Entry StateModel in AnnotText is required, when fn:IsPresent(State)</description>
			<test>containsStateModel == true || (containsState != true)</test>
			<error>
				<message>Entry StateModel in AnnotText is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-StateModel-StringText" testNumber="6"/>
			<description>Entry StateModel with type StringText in AnnotText shall have one of values: Review, Marked</description>
			<test>StateModelHasTypeStringText != true || StateModelStringTextValue == "Marked" || StateModelStringTextValue == "Review"</test>
			<error>
				<message>Entry StateModel with type StringText in AnnotText has incorrect value %1 instead of Review, Marked</message>
				<arguments>
					<argument>StateModelStringTextValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotText shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotText has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotText shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotText has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotText shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotText has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotText is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotText is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotText shall have value Text</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Text"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotText has incorrect value %1 instead of Text</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-T" testNumber="8"/>
			<description>Entry T in AnnotText shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotText has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-Type" testNumber="8"/>
			<description>Entry Type in AnnotText shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotText has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="AnnotText-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotText shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotText has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork" testNumber="1"/>
			<description>AnnotTrapNetwork shall not contain entries except AF, AP, AS, AnnotStates, Border, C, Contents, F, FontFauxing, LastModified, M, NM, OC, P, Rect, StructParent, Subtype, Type, Version</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'AnnotStates' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FontFauxing' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotTrapNetwork contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'AnnotStates' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FontFauxing' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork" testNumber="22"/>
			<description>AnnotTrapNetwork shall not contain entries BM, CA, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotTrapNetwork contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-AF" testNumber="8"/>
			<description>Entry AF in AnnotTrapNetwork shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotTrapNetwork has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-AF" testNumber="23"/>
			<description>Entry AF in AnnotTrapNetwork can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotTrapNetwork is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-AP" testNumber="8"/>
			<description>Entry AP in AnnotTrapNetwork shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotTrapNetwork has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-AP" testNumber="7"/>
			<description>Entry AP in AnnotTrapNetwork is required</description>
			<test>containsAP == true</test>
			<error>
				<message>Entry AP in AnnotTrapNetwork is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-AS" testNumber="8"/>
			<description>Entry AS in AnnotTrapNetwork shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotTrapNetwork has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-AS" testNumber="7"/>
			<description>Entry AS in AnnotTrapNetwork is required</description>
			<test>containsAS == true</test>
			<error>
				<message>Entry AS in AnnotTrapNetwork is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-AnnotStates" testNumber="8"/>
			<description>Entry AnnotStates in AnnotTrapNetwork shall have type Array</description>
			<test>containsAnnotStates == false || AnnotStatesHasTypeArray == true</test>
			<error>
				<message>Entry AnnotStates in AnnotTrapNetwork has type %1 instead of type Array</message>
				<arguments>
					<argument>AnnotStatesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-AnnotStates" testNumber="11"/>
			<description>Entry AnnotStates in AnnotTrapNetwork is required, when (fn:IsPresent(Version) &amp;&amp; fn:Not(fn:IsPresent(LastModified)))</description>
			<test>containsAnnotStates == true || ((containsVersion != true) || (containsLastModified == true))</test>
			<error>
				<message>Entry AnnotStates in AnnotTrapNetwork is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-Border" testNumber="8"/>
			<description>Entry Border in AnnotTrapNetwork shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotTrapNetwork has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-C" testNumber="8"/>
			<description>Entry C in AnnotTrapNetwork shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotTrapNetwork has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotTrapNetwork shall have type String</description>
			<test>containsContents == false || ContentsHasTypeString == true</test>
			<error>
				<message>Entry Contents in AnnotTrapNetwork has type %1 instead of type String</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-F" testNumber="8"/>
			<description>Entry F in AnnotTrapNetwork shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotTrapNetwork has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-F" testNumber="7"/>
			<description>Entry F in AnnotTrapNetwork is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in AnnotTrapNetwork is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotTrapNetwork shall satisfy special case: fn:Eval(fn:BitsClear(1, 2) &amp;&amp; fn:BitSet(3) &amp;&amp; fn:BitsClear(4, 6) &amp;&amp; fn:BitSet(7) &amp;&amp; fn:BitsClear(8, 32))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 0 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 1 &amp; 1) == 0) &amp;&amp; (FBitmaskValue &gt;&gt; 2 &amp; 1) == 1 &amp;&amp; ((FBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 5 &amp; 1) == 0) &amp;&amp; (FBitmaskValue &gt;&gt; 6 &amp; 1) == 1 &amp;&amp; ((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotTrapNetwork does not satisfy special case: fn:Eval(fn:BitsClear(1, 2) &amp;&amp; fn:BitSet(3) &amp;&amp; fn:BitsClear(4, 6) &amp;&amp; fn:BitSet(7) &amp;&amp; fn:BitsClear(8, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-FontFauxing" testNumber="8"/>
			<description>Entry FontFauxing in AnnotTrapNetwork shall have type Array</description>
			<test>containsFontFauxing == false || FontFauxingHasTypeArray == true</test>
			<error>
				<message>Entry FontFauxing in AnnotTrapNetwork has type %1 instead of type Array</message>
				<arguments>
					<argument>FontFauxingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-LastModified" testNumber="8"/>
			<description>Entry LastModified in AnnotTrapNetwork shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in AnnotTrapNetwork has type %1 instead of type Date</message>
				<arguments>
					<argument>LastModifiedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-LastModified" testNumber="11"/>
			<description>Entry LastModified in AnnotTrapNetwork is required, when fn:Not(fn:IsPresent(Version)) &amp;&amp; fn:Not(fn:IsPresent(AnnotStates))</description>
			<test>containsLastModified == true || ((containsVersion == true) || (containsAnnotStates == true))</test>
			<error>
				<message>Entry LastModified in AnnotTrapNetwork is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-M" testNumber="8"/>
			<description>Entry M in AnnotTrapNetwork shall have one of types: Date, String</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeString == true</test>
			<error>
				<message>Entry M in AnnotTrapNetwork has type %1 instead of one of types: Date, String</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-NM" testNumber="8"/>
			<description>Entry NM in AnnotTrapNetwork shall have type String</description>
			<test>containsNM == false || NMHasTypeString == true</test>
			<error>
				<message>Entry NM in AnnotTrapNetwork has type %1 instead of type String</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotTrapNetwork shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotTrapNetwork is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-OC" testNumber="8"/>
			<description>Entry OC in AnnotTrapNetwork shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotTrapNetwork has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-P" testNumber="8"/>
			<description>Entry P in AnnotTrapNetwork shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotTrapNetwork has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotTrapNetwork shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotTrapNetwork is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotTrapNetwork shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotTrapNetwork has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotTrapNetwork is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotTrapNetwork is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotTrapNetwork shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotTrapNetwork has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotTrapNetwork shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotTrapNetwork has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotTrapNetwork is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotTrapNetwork is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotTrapNetwork shall have value TrapNet</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "TrapNet"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotTrapNetwork has incorrect value %1 instead of TrapNet</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-Type" testNumber="8"/>
			<description>Entry Type in AnnotTrapNetwork shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotTrapNetwork has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotTrapNetwork shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotTrapNetwork has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-Version" testNumber="8"/>
			<description>Entry Version in AnnotTrapNetwork shall have type Array</description>
			<test>containsVersion == false || VersionHasTypeArray == true</test>
			<error>
				<message>Entry Version in AnnotTrapNetwork has type %1 instead of type Array</message>
				<arguments>
					<argument>VersionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="AnnotTrapNetwork-Version" testNumber="11"/>
			<description>Entry Version in AnnotTrapNetwork is required, when (fn:IsPresent(AnnotStates) &amp;&amp; fn:Not(fn:IsPresent(LastModified)))</description>
			<test>containsVersion == true || ((containsAnnotStates != true) || (containsLastModified == true))</test>
			<error>
				<message>Entry Version in AnnotTrapNetwork is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline" testNumber="1"/>
			<description>AnnotUnderline shall not contain entries except AF, AP, AS, Border, C, CA, Contents, CreationDate, ExData, F, IRT, IT, M, NM, OC, P, Popup, QuadPoints, RC, RT, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotUnderline contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline" testNumber="22"/>
			<description>AnnotUnderline shall not contain entries BM, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotUnderline contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-AF" testNumber="8"/>
			<description>Entry AF in AnnotUnderline shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotUnderline has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-AF" testNumber="23"/>
			<description>Entry AF in AnnotUnderline can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotUnderline is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-AP" testNumber="8"/>
			<description>Entry AP in AnnotUnderline shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotUnderline has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-AS" testNumber="8"/>
			<description>Entry AS in AnnotUnderline shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotUnderline has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-AS" testNumber="11"/>
			<description>Entry AS in AnnotUnderline is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotUnderline is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-Border" testNumber="8"/>
			<description>Entry Border in AnnotUnderline shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotUnderline has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-C" testNumber="8"/>
			<description>Entry C in AnnotUnderline shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotUnderline has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-CA" testNumber="8"/>
			<description>Entry CA in AnnotUnderline shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotUnderline has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in AnnotUnderline shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotUnderline does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotUnderline shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotUnderline has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in AnnotUnderline shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotUnderline has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-ExData-Dictionary" testNumber="17"/>
			<description>Entry ExData with type Dictionary in AnnotUnderline shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotUnderline is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3, ExDataMarkupGeo)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-ExData" testNumber="8"/>
			<description>Entry ExData in AnnotUnderline shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotUnderline has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-F" testNumber="8"/>
			<description>Entry F in AnnotUnderline shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotUnderline has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotUnderline shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotUnderline does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-IRT-Dictionary" testNumber="17"/>
			<description>Entry IRT with type Dictionary in AnnotUnderline shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotUnderline is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-IRT" testNumber="8"/>
			<description>Entry IRT in AnnotUnderline shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotUnderline has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IRTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-IRT" testNumber="11"/>
			<description>Entry IRT in AnnotUnderline is required, when fn:IsPresent(RT)</description>
			<test>containsIRT == true || (containsRT != true)</test>
			<error>
				<message>Entry IRT in AnnotUnderline is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-IT" testNumber="8"/>
			<description>Entry IT in AnnotUnderline shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotUnderline has type %1 instead of type Name</message>
				<arguments>
					<argument>ITType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-M" testNumber="8"/>
			<description>Entry M in AnnotUnderline shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotUnderline has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-NM" testNumber="8"/>
			<description>Entry NM in AnnotUnderline shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotUnderline has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotUnderline shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotUnderline is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-OC" testNumber="8"/>
			<description>Entry OC in AnnotUnderline shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotUnderline has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-P" testNumber="8"/>
			<description>Entry P in AnnotUnderline shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotUnderline has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotUnderline shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotUnderline is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-Popup" testNumber="8"/>
			<description>Entry Popup in AnnotUnderline shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotUnderline has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PopupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-Popup-Dictionary" testNumber="10"/>
			<description>Entry Popup with type Dictionary in AnnotUnderline shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotUnderline is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-QuadPoints" testNumber="8"/>
			<description>Entry QuadPoints in AnnotUnderline shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotUnderline has type %1 instead of type Array</message>
				<arguments>
					<argument>QuadPointsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-QuadPoints" testNumber="7"/>
			<description>Entry QuadPoints in AnnotUnderline is required</description>
			<test>containsQuadPoints == true</test>
			<error>
				<message>Entry QuadPoints in AnnotUnderline is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-RC" testNumber="8"/>
			<description>Entry RC in AnnotUnderline shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotUnderline has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-RC-Stream" testNumber="10"/>
			<description>Entry RC with type Stream in AnnotUnderline shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotUnderline is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-RT" testNumber="8"/>
			<description>Entry RT in AnnotUnderline shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotUnderline has type %1 instead of type Name</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-RT-Name" testNumber="6"/>
			<description>Entry RT with type Name in AnnotUnderline shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotUnderline has incorrect value %1 instead of Group, R</message>
				<arguments>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotUnderline shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotUnderline has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotUnderline is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotUnderline is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotUnderline shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotUnderline has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-Subj" testNumber="8"/>
			<description>Entry Subj in AnnotUnderline shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotUnderline has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotUnderline shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotUnderline has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotUnderline is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotUnderline is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotUnderline shall have value Underline</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Underline"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotUnderline has incorrect value %1 instead of Underline</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-T" testNumber="8"/>
			<description>Entry T in AnnotUnderline shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotUnderline has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-Type" testNumber="8"/>
			<description>Entry Type in AnnotUnderline shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotUnderline has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="AnnotUnderline-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotUnderline shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotUnderline has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark" testNumber="1"/>
			<description>AnnotWatermark shall not contain entries except AF, AP, AS, Border, C, Contents, F, FixedPrint, M, NM, OC, P, Rect, StructParent, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FixedPrint' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotWatermark contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FixedPrint' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark" testNumber="22"/>
			<description>AnnotWatermark shall not contain entries BM, CA, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotWatermark contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-AF" testNumber="8"/>
			<description>Entry AF in AnnotWatermark shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotWatermark has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-AF" testNumber="23"/>
			<description>Entry AF in AnnotWatermark can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotWatermark is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-AP" testNumber="8"/>
			<description>Entry AP in AnnotWatermark shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotWatermark has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-AS" testNumber="8"/>
			<description>Entry AS in AnnotWatermark shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotWatermark has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-AS" testNumber="11"/>
			<description>Entry AS in AnnotWatermark is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotWatermark is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-Border" testNumber="8"/>
			<description>Entry Border in AnnotWatermark shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotWatermark has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-C" testNumber="8"/>
			<description>Entry C in AnnotWatermark shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotWatermark has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotWatermark shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotWatermark has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-F" testNumber="8"/>
			<description>Entry F in AnnotWatermark shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotWatermark has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotWatermark shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotWatermark does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-FixedPrint" testNumber="8"/>
			<description>Entry FixedPrint in AnnotWatermark shall have type Dictionary</description>
			<test>containsFixedPrint == false || FixedPrintHasTypeDictionary == true</test>
			<error>
				<message>Entry FixedPrint in AnnotWatermark has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FixedPrintType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-M" testNumber="8"/>
			<description>Entry M in AnnotWatermark shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotWatermark has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-NM" testNumber="8"/>
			<description>Entry NM in AnnotWatermark shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotWatermark has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotWatermark shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotWatermark is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-OC" testNumber="8"/>
			<description>Entry OC in AnnotWatermark shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotWatermark has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-P" testNumber="8"/>
			<description>Entry P in AnnotWatermark shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotWatermark has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotWatermark shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWatermark is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotWatermark shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotWatermark has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotWatermark is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotWatermark is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotWatermark shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotWatermark has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotWatermark shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotWatermark has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotWatermark is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotWatermark is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotWatermark shall have value Watermark</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Watermark"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotWatermark has incorrect value %1 instead of Watermark</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-Type" testNumber="8"/>
			<description>Entry Type in AnnotWatermark shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotWatermark has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="AnnotWatermark-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotWatermark shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotWatermark has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget" testNumber="1"/>
			<description>AnnotWidget shall not contain entries except A, AA, AF, AP, AS, BS, Border, C, Contents, F, Ff, H, Kids, M, MK, NM, OC, P, PMD, Parent, Rect, StructParent, Subtype, T, TM, TU, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotWidget contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget" testNumber="22"/>
			<description>AnnotWidget shall not contain entries BM, CA, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotWidget contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-A-Dictionary" testNumber="17"/>
			<description>Entry A with type Dictionary in AnnotWidget shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotWidget is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-A" testNumber="8"/>
			<description>Entry A in AnnotWidget shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotWidget has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-AA" testNumber="8"/>
			<description>Entry AA in AnnotWidget shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in AnnotWidget has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-AF" testNumber="8"/>
			<description>Entry AF in AnnotWidget shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotWidget has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-AF" testNumber="23"/>
			<description>Entry AF in AnnotWidget can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotWidget is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-AP" testNumber="8"/>
			<description>Entry AP in AnnotWidget shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotWidget has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-AS" testNumber="8"/>
			<description>Entry AS in AnnotWidget shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotWidget has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-AS" testNumber="11"/>
			<description>Entry AS in AnnotWidget is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotWidget is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-BS" testNumber="8"/>
			<description>Entry BS in AnnotWidget shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotWidget has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-Border" testNumber="8"/>
			<description>Entry Border in AnnotWidget shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotWidget has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-C" testNumber="8"/>
			<description>Entry C in AnnotWidget shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotWidget has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotWidget shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotWidget has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-F" testNumber="8"/>
			<description>Entry F in AnnotWidget shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotWidget has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotWidget shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotWidget does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-Ff" testNumber="8"/>
			<description>Entry Ff in AnnotWidget shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in AnnotWidget has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-H" testNumber="8"/>
			<description>Entry H in AnnotWidget shall have type Name</description>
			<test>containsH == false || HHasTypeName == true</test>
			<error>
				<message>Entry H in AnnotWidget has type %1 instead of type Name</message>
				<arguments>
					<argument>HType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-H-Name" testNumber="6"/>
			<description>Entry H with type Name in AnnotWidget shall have one of values: P, T, I, N, O</description>
			<test>HHasTypeName != true || HNameValue == "N" || HNameValue == "I" || HNameValue == "O" || HNameValue == "P" || HNameValue == "T"</test>
			<error>
				<message>Entry H with type Name in AnnotWidget has incorrect value %1 instead of P, T, I, N, O</message>
				<arguments>
					<argument>HNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-Kids" testNumber="8"/>
			<description>Entry Kids in AnnotWidget shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in AnnotWidget has type %1 instead of type Array</message>
				<arguments>
					<argument>KidsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-M" testNumber="8"/>
			<description>Entry M in AnnotWidget shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotWidget has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-MK" testNumber="8"/>
			<description>Entry MK in AnnotWidget shall have type Dictionary</description>
			<test>containsMK == false || MKHasTypeDictionary == true</test>
			<error>
				<message>Entry MK in AnnotWidget has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MKType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-NM" testNumber="8"/>
			<description>Entry NM in AnnotWidget shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotWidget has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotWidget shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotWidget is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-OC" testNumber="8"/>
			<description>Entry OC in AnnotWidget shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotWidget has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-P" testNumber="8"/>
			<description>Entry P in AnnotWidget shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotWidget has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotWidget shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWidget is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-PMD" testNumber="8"/>
			<description>Entry PMD in AnnotWidget shall have type Dictionary</description>
			<test>containsPMD == false || PMDHasTypeDictionary == true</test>
			<error>
				<message>Entry PMD in AnnotWidget has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PMDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-PMD" testNumber="23"/>
			<description>Entry PMD in AnnotWidget can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsPMD == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PMD in AnnotWidget is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in AnnotWidget shall be one of objects Field, AnnotWidgetField</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in AnnotWidget is not one of objects Field, AnnotWidgetField</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-Parent" testNumber="8"/>
			<description>Entry Parent in AnnotWidget shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in AnnotWidget has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotWidget shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotWidget has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotWidget is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotWidget is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotWidget shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotWidget has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotWidget shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotWidget has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotWidget is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotWidget is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotWidget shall have value Widget</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Widget"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotWidget has incorrect value %1 instead of Widget</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-T" testNumber="8"/>
			<description>Entry T in AnnotWidget shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotWidget has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-TM" testNumber="8"/>
			<description>Entry TM in AnnotWidget shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in AnnotWidget has type %1 instead of type StringText</message>
				<arguments>
					<argument>TMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-TU" testNumber="8"/>
			<description>Entry TU in AnnotWidget shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in AnnotWidget has type %1 instead of type StringText</message>
				<arguments>
					<argument>TUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-Type" testNumber="8"/>
			<description>Entry Type in AnnotWidget shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotWidget has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="AnnotWidget-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotWidget shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotWidget has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField" testNumber="1"/>
			<description>AnnotWidgetField shall not contain entries except A, AA, AF, AP, AS, BS, Border, C, Contents, F, Ff, H, M, MK, NM, OC, P, PMD, Parent, Rect, StructParent, Subtype, T, TM, TU, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotWidgetField contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField" testNumber="22"/>
			<description>AnnotWidgetField shall not contain entries BM, CA, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotWidgetField contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-A-Dictionary" testNumber="17"/>
			<description>Entry A with type Dictionary in AnnotWidgetField shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotWidgetField is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-A" testNumber="8"/>
			<description>Entry A in AnnotWidgetField shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotWidgetField has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-AA" testNumber="8"/>
			<description>Entry AA in AnnotWidgetField shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in AnnotWidgetField has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-AF" testNumber="8"/>
			<description>Entry AF in AnnotWidgetField shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotWidgetField has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-AF" testNumber="23"/>
			<description>Entry AF in AnnotWidgetField can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotWidgetField is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-AP" testNumber="8"/>
			<description>Entry AP in AnnotWidgetField shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotWidgetField has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-AS" testNumber="8"/>
			<description>Entry AS in AnnotWidgetField shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotWidgetField has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-AS" testNumber="11"/>
			<description>Entry AS in AnnotWidgetField is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotWidgetField is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-BS" testNumber="8"/>
			<description>Entry BS in AnnotWidgetField shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotWidgetField has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-Border" testNumber="8"/>
			<description>Entry Border in AnnotWidgetField shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotWidgetField has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-C" testNumber="8"/>
			<description>Entry C in AnnotWidgetField shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotWidgetField has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotWidgetField shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotWidgetField has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-F" testNumber="8"/>
			<description>Entry F in AnnotWidgetField shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotWidgetField has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotWidgetField shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotWidgetField does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-Ff" testNumber="8"/>
			<description>Entry Ff in AnnotWidgetField shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in AnnotWidgetField has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-Ff-Bitmask" testNumber="9"/>
			<description>Entry Ff with type Bitmask in AnnotWidgetField shall satisfy special case: fn:Eval(fn:BitsClear(4, 32))</description>
			<test>FfHasTypeBitmask != true || ((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry Ff with type Bitmask in AnnotWidgetField does not satisfy special case: fn:Eval(fn:BitsClear(4, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-H" testNumber="8"/>
			<description>Entry H in AnnotWidgetField shall have type Name</description>
			<test>containsH == false || HHasTypeName == true</test>
			<error>
				<message>Entry H in AnnotWidgetField has type %1 instead of type Name</message>
				<arguments>
					<argument>HType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-H-Name" testNumber="6"/>
			<description>Entry H with type Name in AnnotWidgetField shall have one of values: P, T, I, N, O</description>
			<test>HHasTypeName != true || HNameValue == "N" || HNameValue == "I" || HNameValue == "O" || HNameValue == "P" || HNameValue == "T"</test>
			<error>
				<message>Entry H with type Name in AnnotWidgetField has incorrect value %1 instead of P, T, I, N, O</message>
				<arguments>
					<argument>HNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-M" testNumber="8"/>
			<description>Entry M in AnnotWidgetField shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotWidgetField has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-MK" testNumber="8"/>
			<description>Entry MK in AnnotWidgetField shall have type Dictionary</description>
			<test>containsMK == false || MKHasTypeDictionary == true</test>
			<error>
				<message>Entry MK in AnnotWidgetField has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MKType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-NM" testNumber="8"/>
			<description>Entry NM in AnnotWidgetField shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotWidgetField has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotWidgetField shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotWidgetField is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-OC" testNumber="8"/>
			<description>Entry OC in AnnotWidgetField shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotWidgetField has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-P" testNumber="8"/>
			<description>Entry P in AnnotWidgetField shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotWidgetField has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotWidgetField shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWidgetField is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-PMD" testNumber="8"/>
			<description>Entry PMD in AnnotWidgetField shall have type Dictionary</description>
			<test>containsPMD == false || PMDHasTypeDictionary == true</test>
			<error>
				<message>Entry PMD in AnnotWidgetField has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PMDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-PMD" testNumber="23"/>
			<description>Entry PMD in AnnotWidgetField can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsPMD == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PMD in AnnotWidgetField is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in AnnotWidgetField shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in AnnotWidgetField is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-Parent" testNumber="8"/>
			<description>Entry Parent in AnnotWidgetField shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in AnnotWidgetField has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotWidgetField shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotWidgetField has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotWidgetField is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotWidgetField is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotWidgetField shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotWidgetField has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotWidgetField shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotWidgetField has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotWidgetField is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotWidgetField is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotWidgetField shall have value Widget</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Widget"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotWidgetField has incorrect value %1 instead of Widget</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-T" testNumber="8"/>
			<description>Entry T in AnnotWidgetField shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotWidgetField has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-TM" testNumber="8"/>
			<description>Entry TM in AnnotWidgetField shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in AnnotWidgetField has type %1 instead of type StringText</message>
				<arguments>
					<argument>TMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-TU" testNumber="8"/>
			<description>Entry TU in AnnotWidgetField shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in AnnotWidgetField has type %1 instead of type StringText</message>
				<arguments>
					<argument>TUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-Type" testNumber="8"/>
			<description>Entry Type in AnnotWidgetField shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotWidgetField has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetField">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetField-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotWidgetField shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotWidgetField has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox" testNumber="1"/>
			<description>AnnotWidgetFieldBtnCheckbox shall not contain entries except A, AA, AF, AP, AS, BS, Border, C, Contents, DA, DS, DV, F, FT, Ff, H, M, MK, NM, OC, Opt, P, PMD, Parent, Q, RV, Rect, StructParent, Subtype, T, TM, TU, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotWidgetFieldBtnCheckbox contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox" testNumber="22"/>
			<description>AnnotWidgetFieldBtnCheckbox shall not contain entries BM, CA, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotWidgetFieldBtnCheckbox contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-A-Dictionary" testNumber="17"/>
			<description>Entry A with type Dictionary in AnnotWidgetFieldBtnCheckbox shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotWidgetFieldBtnCheckbox is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-A" testNumber="8"/>
			<description>Entry A in AnnotWidgetFieldBtnCheckbox shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-AA" testNumber="8"/>
			<description>Entry AA in AnnotWidgetFieldBtnCheckbox shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-AF" testNumber="8"/>
			<description>Entry AF in AnnotWidgetFieldBtnCheckbox shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-AF" testNumber="23"/>
			<description>Entry AF in AnnotWidgetFieldBtnCheckbox can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotWidgetFieldBtnCheckbox is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-AP" testNumber="8"/>
			<description>Entry AP in AnnotWidgetFieldBtnCheckbox shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-AS" testNumber="8"/>
			<description>Entry AS in AnnotWidgetFieldBtnCheckbox shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-AS" testNumber="11"/>
			<description>Entry AS in AnnotWidgetFieldBtnCheckbox is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotWidgetFieldBtnCheckbox is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-BS" testNumber="8"/>
			<description>Entry BS in AnnotWidgetFieldBtnCheckbox shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-Border" testNumber="8"/>
			<description>Entry Border in AnnotWidgetFieldBtnCheckbox shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-C" testNumber="8"/>
			<description>Entry C in AnnotWidgetFieldBtnCheckbox shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotWidgetFieldBtnCheckbox shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotWidgetFieldBtnCheckbox has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-DA" testNumber="8"/>
			<description>Entry DA in AnnotWidgetFieldBtnCheckbox shall have type StringByte</description>
			<test>containsDA == false || DAHasTypeStringByte == true</test>
			<error>
				<message>Entry DA in AnnotWidgetFieldBtnCheckbox has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-DA" testNumber="7"/>
			<description>Entry DA in AnnotWidgetFieldBtnCheckbox is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in AnnotWidgetFieldBtnCheckbox is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-DS" testNumber="8"/>
			<description>Entry DS in AnnotWidgetFieldBtnCheckbox shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in AnnotWidgetFieldBtnCheckbox has type %1 instead of type StringText</message>
				<arguments>
					<argument>DSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-DV" testNumber="8"/>
			<description>Entry DV in AnnotWidgetFieldBtnCheckbox shall have type Name</description>
			<test>containsDV == false || DVHasTypeName == true</test>
			<error>
				<message>Entry DV in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Name</message>
				<arguments>
					<argument>DVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-F" testNumber="8"/>
			<description>Entry F in AnnotWidgetFieldBtnCheckbox shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotWidgetFieldBtnCheckbox shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotWidgetFieldBtnCheckbox does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-FT" testNumber="8"/>
			<description>Entry FT in AnnotWidgetFieldBtnCheckbox shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Name</message>
				<arguments>
					<argument>FTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-FT" testNumber="7"/>
			<description>Entry FT in AnnotWidgetFieldBtnCheckbox is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in AnnotWidgetFieldBtnCheckbox is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-FT-Name" testNumber="6"/>
			<description>Entry FT with type Name in AnnotWidgetFieldBtnCheckbox shall have value Btn</description>
			<test>FTHasTypeName != true || FTNameValue == "Btn"</test>
			<error>
				<message>Entry FT with type Name in AnnotWidgetFieldBtnCheckbox has incorrect value %1 instead of Btn</message>
				<arguments>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-Ff" testNumber="8"/>
			<description>Entry Ff in AnnotWidgetFieldBtnCheckbox shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-Ff-Bitmask" testNumber="9"/>
			<description>Entry Ff with type Bitmask in AnnotWidgetFieldBtnCheckbox shall satisfy special case: fn:Eval(fn:BitsClear(4, 14) &amp;&amp; fn:BitsClear(16, 25) &amp;&amp; fn:BitsClear(27, 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in AnnotWidgetFieldBtnCheckbox does not satisfy special case: fn:Eval(fn:BitsClear(4, 14) &amp;&amp; fn:BitsClear(16, 25) &amp;&amp; fn:BitsClear(27, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-H" testNumber="8"/>
			<description>Entry H in AnnotWidgetFieldBtnCheckbox shall have type Name</description>
			<test>containsH == false || HHasTypeName == true</test>
			<error>
				<message>Entry H in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Name</message>
				<arguments>
					<argument>HType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-H-Name" testNumber="6"/>
			<description>Entry H with type Name in AnnotWidgetFieldBtnCheckbox shall have one of values: P, T, I, N, O</description>
			<test>HHasTypeName != true || HNameValue == "N" || HNameValue == "I" || HNameValue == "O" || HNameValue == "P" || HNameValue == "T"</test>
			<error>
				<message>Entry H with type Name in AnnotWidgetFieldBtnCheckbox has incorrect value %1 instead of P, T, I, N, O</message>
				<arguments>
					<argument>HNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-M" testNumber="8"/>
			<description>Entry M in AnnotWidgetFieldBtnCheckbox shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotWidgetFieldBtnCheckbox has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-MK" testNumber="8"/>
			<description>Entry MK in AnnotWidgetFieldBtnCheckbox shall have type Dictionary</description>
			<test>containsMK == false || MKHasTypeDictionary == true</test>
			<error>
				<message>Entry MK in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MKType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-NM" testNumber="8"/>
			<description>Entry NM in AnnotWidgetFieldBtnCheckbox shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotWidgetFieldBtnCheckbox has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotWidgetFieldBtnCheckbox shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotWidgetFieldBtnCheckbox is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-OC" testNumber="8"/>
			<description>Entry OC in AnnotWidgetFieldBtnCheckbox shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-Opt" testNumber="8"/>
			<description>Entry Opt in AnnotWidgetFieldBtnCheckbox shall have type Array</description>
			<test>containsOpt == false || OptHasTypeArray == true</test>
			<error>
				<message>Entry Opt in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Array</message>
				<arguments>
					<argument>OptType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-P" testNumber="8"/>
			<description>Entry P in AnnotWidgetFieldBtnCheckbox shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotWidgetFieldBtnCheckbox shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWidgetFieldBtnCheckbox is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-PMD" testNumber="8"/>
			<description>Entry PMD in AnnotWidgetFieldBtnCheckbox shall have type Dictionary</description>
			<test>containsPMD == false || PMDHasTypeDictionary == true</test>
			<error>
				<message>Entry PMD in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PMDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-PMD" testNumber="23"/>
			<description>Entry PMD in AnnotWidgetFieldBtnCheckbox can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsPMD == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PMD in AnnotWidgetFieldBtnCheckbox is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in AnnotWidgetFieldBtnCheckbox shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in AnnotWidgetFieldBtnCheckbox is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-Parent" testNumber="8"/>
			<description>Entry Parent in AnnotWidgetFieldBtnCheckbox shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-Q" testNumber="8"/>
			<description>Entry Q in AnnotWidgetFieldBtnCheckbox shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Integer</message>
				<arguments>
					<argument>QType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-Q-Integer" testNumber="6"/>
			<description>Entry Q with type Integer in AnnotWidgetFieldBtnCheckbox shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in AnnotWidgetFieldBtnCheckbox has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-RV" testNumber="8"/>
			<description>Entry RV in AnnotWidgetFieldBtnCheckbox shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in AnnotWidgetFieldBtnCheckbox has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-RV-Stream" testNumber="10"/>
			<description>Entry RV with type Stream in AnnotWidgetFieldBtnCheckbox shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in AnnotWidgetFieldBtnCheckbox is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotWidgetFieldBtnCheckbox shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotWidgetFieldBtnCheckbox is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotWidgetFieldBtnCheckbox is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotWidgetFieldBtnCheckbox shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotWidgetFieldBtnCheckbox shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotWidgetFieldBtnCheckbox is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotWidgetFieldBtnCheckbox is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotWidgetFieldBtnCheckbox shall have value Widget</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Widget"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotWidgetFieldBtnCheckbox has incorrect value %1 instead of Widget</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-T" testNumber="8"/>
			<description>Entry T in AnnotWidgetFieldBtnCheckbox shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotWidgetFieldBtnCheckbox has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-TM" testNumber="8"/>
			<description>Entry TM in AnnotWidgetFieldBtnCheckbox shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in AnnotWidgetFieldBtnCheckbox has type %1 instead of type StringText</message>
				<arguments>
					<argument>TMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-TU" testNumber="8"/>
			<description>Entry TU in AnnotWidgetFieldBtnCheckbox shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in AnnotWidgetFieldBtnCheckbox has type %1 instead of type StringText</message>
				<arguments>
					<argument>TUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-Type" testNumber="8"/>
			<description>Entry Type in AnnotWidgetFieldBtnCheckbox shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotWidgetFieldBtnCheckbox shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotWidgetFieldBtnCheckbox has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnCheckbox-V" testNumber="8"/>
			<description>Entry V in AnnotWidgetFieldBtnCheckbox shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in AnnotWidgetFieldBtnCheckbox has type %1 instead of type Name</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush" testNumber="1"/>
			<description>AnnotWidgetFieldBtnPush shall not contain entries except A, AA, AF, AP, AS, BS, Border, C, Contents, DA, DS, DV, F, FT, Ff, H, M, MK, NM, OC, P, PMD, Parent, Q, RV, Rect, StructParent, Subtype, T, TM, TU, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotWidgetFieldBtnPush contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush" testNumber="22"/>
			<description>AnnotWidgetFieldBtnPush shall not contain entries BM, CA, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotWidgetFieldBtnPush contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-A-Dictionary" testNumber="17"/>
			<description>Entry A with type Dictionary in AnnotWidgetFieldBtnPush shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotWidgetFieldBtnPush is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-A" testNumber="8"/>
			<description>Entry A in AnnotWidgetFieldBtnPush shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotWidgetFieldBtnPush has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-AA" testNumber="8"/>
			<description>Entry AA in AnnotWidgetFieldBtnPush shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in AnnotWidgetFieldBtnPush has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-AF" testNumber="8"/>
			<description>Entry AF in AnnotWidgetFieldBtnPush shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotWidgetFieldBtnPush has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-AF" testNumber="23"/>
			<description>Entry AF in AnnotWidgetFieldBtnPush can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotWidgetFieldBtnPush is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-AP" testNumber="8"/>
			<description>Entry AP in AnnotWidgetFieldBtnPush shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotWidgetFieldBtnPush has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-AS" testNumber="8"/>
			<description>Entry AS in AnnotWidgetFieldBtnPush shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotWidgetFieldBtnPush has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-AS" testNumber="11"/>
			<description>Entry AS in AnnotWidgetFieldBtnPush is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotWidgetFieldBtnPush is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-BS" testNumber="8"/>
			<description>Entry BS in AnnotWidgetFieldBtnPush shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotWidgetFieldBtnPush has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-Border" testNumber="8"/>
			<description>Entry Border in AnnotWidgetFieldBtnPush shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotWidgetFieldBtnPush has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-C" testNumber="8"/>
			<description>Entry C in AnnotWidgetFieldBtnPush shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotWidgetFieldBtnPush has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotWidgetFieldBtnPush shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotWidgetFieldBtnPush has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-DA" testNumber="8"/>
			<description>Entry DA in AnnotWidgetFieldBtnPush shall have type StringByte</description>
			<test>containsDA == false || DAHasTypeStringByte == true</test>
			<error>
				<message>Entry DA in AnnotWidgetFieldBtnPush has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-DA" testNumber="7"/>
			<description>Entry DA in AnnotWidgetFieldBtnPush is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in AnnotWidgetFieldBtnPush is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-DS" testNumber="8"/>
			<description>Entry DS in AnnotWidgetFieldBtnPush shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in AnnotWidgetFieldBtnPush has type %1 instead of type StringText</message>
				<arguments>
					<argument>DSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-DV" testNumber="8"/>
			<description>Entry DV in AnnotWidgetFieldBtnPush shall have type Name</description>
			<test>containsDV == false || DVHasTypeName == true</test>
			<error>
				<message>Entry DV in AnnotWidgetFieldBtnPush has type %1 instead of type Name</message>
				<arguments>
					<argument>DVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-F" testNumber="8"/>
			<description>Entry F in AnnotWidgetFieldBtnPush shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotWidgetFieldBtnPush has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotWidgetFieldBtnPush shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotWidgetFieldBtnPush does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-FT" testNumber="8"/>
			<description>Entry FT in AnnotWidgetFieldBtnPush shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in AnnotWidgetFieldBtnPush has type %1 instead of type Name</message>
				<arguments>
					<argument>FTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-FT" testNumber="7"/>
			<description>Entry FT in AnnotWidgetFieldBtnPush is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in AnnotWidgetFieldBtnPush is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-FT-Name" testNumber="6"/>
			<description>Entry FT with type Name in AnnotWidgetFieldBtnPush shall have value Btn</description>
			<test>FTHasTypeName != true || FTNameValue == "Btn"</test>
			<error>
				<message>Entry FT with type Name in AnnotWidgetFieldBtnPush has incorrect value %1 instead of Btn</message>
				<arguments>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-Ff" testNumber="8"/>
			<description>Entry Ff in AnnotWidgetFieldBtnPush shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in AnnotWidgetFieldBtnPush has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-Ff-Bitmask" testNumber="9"/>
			<description>Entry Ff with type Bitmask in AnnotWidgetFieldBtnPush shall satisfy special case: fn:Eval(fn:BitsClear(4, 14) &amp;&amp; fn:BitClear(16) &amp;&amp; fn:BitSet(17) &amp;&amp; fn:BitsClear(18, 25) &amp;&amp; fn:BitsClear(27, 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 1 &amp;&amp; ((FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in AnnotWidgetFieldBtnPush does not satisfy special case: fn:Eval(fn:BitsClear(4, 14) &amp;&amp; fn:BitClear(16) &amp;&amp; fn:BitSet(17) &amp;&amp; fn:BitsClear(18, 25) &amp;&amp; fn:BitsClear(27, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-H" testNumber="8"/>
			<description>Entry H in AnnotWidgetFieldBtnPush shall have type Name</description>
			<test>containsH == false || HHasTypeName == true</test>
			<error>
				<message>Entry H in AnnotWidgetFieldBtnPush has type %1 instead of type Name</message>
				<arguments>
					<argument>HType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-H-Name" testNumber="6"/>
			<description>Entry H with type Name in AnnotWidgetFieldBtnPush shall have one of values: P, T, I, N, O</description>
			<test>HHasTypeName != true || HNameValue == "N" || HNameValue == "I" || HNameValue == "O" || HNameValue == "P" || HNameValue == "T"</test>
			<error>
				<message>Entry H with type Name in AnnotWidgetFieldBtnPush has incorrect value %1 instead of P, T, I, N, O</message>
				<arguments>
					<argument>HNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-M" testNumber="8"/>
			<description>Entry M in AnnotWidgetFieldBtnPush shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotWidgetFieldBtnPush has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-MK" testNumber="8"/>
			<description>Entry MK in AnnotWidgetFieldBtnPush shall have type Dictionary</description>
			<test>containsMK == false || MKHasTypeDictionary == true</test>
			<error>
				<message>Entry MK in AnnotWidgetFieldBtnPush has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MKType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-NM" testNumber="8"/>
			<description>Entry NM in AnnotWidgetFieldBtnPush shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotWidgetFieldBtnPush has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotWidgetFieldBtnPush shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotWidgetFieldBtnPush is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-OC" testNumber="8"/>
			<description>Entry OC in AnnotWidgetFieldBtnPush shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotWidgetFieldBtnPush has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-P" testNumber="8"/>
			<description>Entry P in AnnotWidgetFieldBtnPush shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotWidgetFieldBtnPush has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotWidgetFieldBtnPush shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWidgetFieldBtnPush is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-PMD" testNumber="8"/>
			<description>Entry PMD in AnnotWidgetFieldBtnPush shall have type Dictionary</description>
			<test>containsPMD == false || PMDHasTypeDictionary == true</test>
			<error>
				<message>Entry PMD in AnnotWidgetFieldBtnPush has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PMDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-PMD" testNumber="23"/>
			<description>Entry PMD in AnnotWidgetFieldBtnPush can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsPMD == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PMD in AnnotWidgetFieldBtnPush is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in AnnotWidgetFieldBtnPush shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in AnnotWidgetFieldBtnPush is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-Parent" testNumber="8"/>
			<description>Entry Parent in AnnotWidgetFieldBtnPush shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in AnnotWidgetFieldBtnPush has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-Q" testNumber="8"/>
			<description>Entry Q in AnnotWidgetFieldBtnPush shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in AnnotWidgetFieldBtnPush has type %1 instead of type Integer</message>
				<arguments>
					<argument>QType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-Q-Integer" testNumber="6"/>
			<description>Entry Q with type Integer in AnnotWidgetFieldBtnPush shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in AnnotWidgetFieldBtnPush has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-RV" testNumber="8"/>
			<description>Entry RV in AnnotWidgetFieldBtnPush shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in AnnotWidgetFieldBtnPush has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-RV-Stream" testNumber="10"/>
			<description>Entry RV with type Stream in AnnotWidgetFieldBtnPush shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in AnnotWidgetFieldBtnPush is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotWidgetFieldBtnPush shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotWidgetFieldBtnPush has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotWidgetFieldBtnPush is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotWidgetFieldBtnPush is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotWidgetFieldBtnPush shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotWidgetFieldBtnPush has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotWidgetFieldBtnPush shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotWidgetFieldBtnPush has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotWidgetFieldBtnPush is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotWidgetFieldBtnPush is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotWidgetFieldBtnPush shall have value Widget</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Widget"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotWidgetFieldBtnPush has incorrect value %1 instead of Widget</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-T" testNumber="8"/>
			<description>Entry T in AnnotWidgetFieldBtnPush shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotWidgetFieldBtnPush has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-TM" testNumber="8"/>
			<description>Entry TM in AnnotWidgetFieldBtnPush shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in AnnotWidgetFieldBtnPush has type %1 instead of type StringText</message>
				<arguments>
					<argument>TMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-TU" testNumber="8"/>
			<description>Entry TU in AnnotWidgetFieldBtnPush shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in AnnotWidgetFieldBtnPush has type %1 instead of type StringText</message>
				<arguments>
					<argument>TUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-Type" testNumber="8"/>
			<description>Entry Type in AnnotWidgetFieldBtnPush shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotWidgetFieldBtnPush has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotWidgetFieldBtnPush shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotWidgetFieldBtnPush has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnPush-V" testNumber="8"/>
			<description>Entry V in AnnotWidgetFieldBtnPush shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in AnnotWidgetFieldBtnPush has type %1 instead of type Name</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio" testNumber="1"/>
			<description>AnnotWidgetFieldBtnRadio shall not contain entries except A, AA, AF, AP, AS, BS, Border, C, Contents, DA, DS, DV, F, FT, Ff, H, M, MK, NM, OC, Opt, P, PMD, Parent, Q, RV, Rect, StructParent, Subtype, T, TM, TU, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotWidgetFieldBtnRadio contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio" testNumber="22"/>
			<description>AnnotWidgetFieldBtnRadio shall not contain entries BM, CA, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotWidgetFieldBtnRadio contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-A-Dictionary" testNumber="17"/>
			<description>Entry A with type Dictionary in AnnotWidgetFieldBtnRadio shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotWidgetFieldBtnRadio is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-A" testNumber="8"/>
			<description>Entry A in AnnotWidgetFieldBtnRadio shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotWidgetFieldBtnRadio has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-AA" testNumber="8"/>
			<description>Entry AA in AnnotWidgetFieldBtnRadio shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in AnnotWidgetFieldBtnRadio has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-AF" testNumber="8"/>
			<description>Entry AF in AnnotWidgetFieldBtnRadio shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotWidgetFieldBtnRadio has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-AF" testNumber="23"/>
			<description>Entry AF in AnnotWidgetFieldBtnRadio can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotWidgetFieldBtnRadio is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-AP" testNumber="8"/>
			<description>Entry AP in AnnotWidgetFieldBtnRadio shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotWidgetFieldBtnRadio has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-AS" testNumber="8"/>
			<description>Entry AS in AnnotWidgetFieldBtnRadio shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotWidgetFieldBtnRadio has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-AS" testNumber="11"/>
			<description>Entry AS in AnnotWidgetFieldBtnRadio is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotWidgetFieldBtnRadio is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-BS" testNumber="8"/>
			<description>Entry BS in AnnotWidgetFieldBtnRadio shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotWidgetFieldBtnRadio has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-Border" testNumber="8"/>
			<description>Entry Border in AnnotWidgetFieldBtnRadio shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotWidgetFieldBtnRadio has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-C" testNumber="8"/>
			<description>Entry C in AnnotWidgetFieldBtnRadio shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotWidgetFieldBtnRadio has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotWidgetFieldBtnRadio shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotWidgetFieldBtnRadio has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-DA" testNumber="8"/>
			<description>Entry DA in AnnotWidgetFieldBtnRadio shall have type StringByte</description>
			<test>containsDA == false || DAHasTypeStringByte == true</test>
			<error>
				<message>Entry DA in AnnotWidgetFieldBtnRadio has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-DA" testNumber="7"/>
			<description>Entry DA in AnnotWidgetFieldBtnRadio is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in AnnotWidgetFieldBtnRadio is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-DS" testNumber="8"/>
			<description>Entry DS in AnnotWidgetFieldBtnRadio shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in AnnotWidgetFieldBtnRadio has type %1 instead of type StringText</message>
				<arguments>
					<argument>DSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-DV" testNumber="8"/>
			<description>Entry DV in AnnotWidgetFieldBtnRadio shall have type Name</description>
			<test>containsDV == false || DVHasTypeName == true</test>
			<error>
				<message>Entry DV in AnnotWidgetFieldBtnRadio has type %1 instead of type Name</message>
				<arguments>
					<argument>DVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-F" testNumber="8"/>
			<description>Entry F in AnnotWidgetFieldBtnRadio shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotWidgetFieldBtnRadio has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotWidgetFieldBtnRadio shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotWidgetFieldBtnRadio does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-FT" testNumber="8"/>
			<description>Entry FT in AnnotWidgetFieldBtnRadio shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in AnnotWidgetFieldBtnRadio has type %1 instead of type Name</message>
				<arguments>
					<argument>FTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-FT" testNumber="7"/>
			<description>Entry FT in AnnotWidgetFieldBtnRadio is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in AnnotWidgetFieldBtnRadio is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-FT-Name" testNumber="6"/>
			<description>Entry FT with type Name in AnnotWidgetFieldBtnRadio shall have value Btn</description>
			<test>FTHasTypeName != true || FTNameValue == "Btn"</test>
			<error>
				<message>Entry FT with type Name in AnnotWidgetFieldBtnRadio has incorrect value %1 instead of Btn</message>
				<arguments>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-Ff" testNumber="8"/>
			<description>Entry Ff in AnnotWidgetFieldBtnRadio shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in AnnotWidgetFieldBtnRadio has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-Ff-Bitmask" testNumber="9"/>
			<description>Entry Ff with type Bitmask in AnnotWidgetFieldBtnRadio shall satisfy special case: fn:Eval(fn:BitsClear(4, 14) &amp;&amp; fn:BitSet(16) &amp;&amp; fn:BitsClear(17, 25) &amp;&amp; fn:BitsClear(27, 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 1 &amp;&amp; ((FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in AnnotWidgetFieldBtnRadio does not satisfy special case: fn:Eval(fn:BitsClear(4, 14) &amp;&amp; fn:BitSet(16) &amp;&amp; fn:BitsClear(17, 25) &amp;&amp; fn:BitsClear(27, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-H" testNumber="8"/>
			<description>Entry H in AnnotWidgetFieldBtnRadio shall have type Name</description>
			<test>containsH == false || HHasTypeName == true</test>
			<error>
				<message>Entry H in AnnotWidgetFieldBtnRadio has type %1 instead of type Name</message>
				<arguments>
					<argument>HType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-H-Name" testNumber="6"/>
			<description>Entry H with type Name in AnnotWidgetFieldBtnRadio shall have one of values: P, T, I, N, O</description>
			<test>HHasTypeName != true || HNameValue == "N" || HNameValue == "I" || HNameValue == "O" || HNameValue == "P" || HNameValue == "T"</test>
			<error>
				<message>Entry H with type Name in AnnotWidgetFieldBtnRadio has incorrect value %1 instead of P, T, I, N, O</message>
				<arguments>
					<argument>HNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-M" testNumber="8"/>
			<description>Entry M in AnnotWidgetFieldBtnRadio shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotWidgetFieldBtnRadio has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-MK" testNumber="8"/>
			<description>Entry MK in AnnotWidgetFieldBtnRadio shall have type Dictionary</description>
			<test>containsMK == false || MKHasTypeDictionary == true</test>
			<error>
				<message>Entry MK in AnnotWidgetFieldBtnRadio has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MKType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-NM" testNumber="8"/>
			<description>Entry NM in AnnotWidgetFieldBtnRadio shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotWidgetFieldBtnRadio has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotWidgetFieldBtnRadio shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotWidgetFieldBtnRadio is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-OC" testNumber="8"/>
			<description>Entry OC in AnnotWidgetFieldBtnRadio shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotWidgetFieldBtnRadio has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-Opt" testNumber="8"/>
			<description>Entry Opt in AnnotWidgetFieldBtnRadio shall have type Array</description>
			<test>containsOpt == false || OptHasTypeArray == true</test>
			<error>
				<message>Entry Opt in AnnotWidgetFieldBtnRadio has type %1 instead of type Array</message>
				<arguments>
					<argument>OptType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-P" testNumber="8"/>
			<description>Entry P in AnnotWidgetFieldBtnRadio shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotWidgetFieldBtnRadio has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotWidgetFieldBtnRadio shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWidgetFieldBtnRadio is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-PMD" testNumber="8"/>
			<description>Entry PMD in AnnotWidgetFieldBtnRadio shall have type Dictionary</description>
			<test>containsPMD == false || PMDHasTypeDictionary == true</test>
			<error>
				<message>Entry PMD in AnnotWidgetFieldBtnRadio has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PMDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-PMD" testNumber="23"/>
			<description>Entry PMD in AnnotWidgetFieldBtnRadio can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsPMD == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PMD in AnnotWidgetFieldBtnRadio is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in AnnotWidgetFieldBtnRadio shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in AnnotWidgetFieldBtnRadio is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-Parent" testNumber="8"/>
			<description>Entry Parent in AnnotWidgetFieldBtnRadio shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in AnnotWidgetFieldBtnRadio has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-Q" testNumber="8"/>
			<description>Entry Q in AnnotWidgetFieldBtnRadio shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in AnnotWidgetFieldBtnRadio has type %1 instead of type Integer</message>
				<arguments>
					<argument>QType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-Q-Integer" testNumber="6"/>
			<description>Entry Q with type Integer in AnnotWidgetFieldBtnRadio shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in AnnotWidgetFieldBtnRadio has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-RV" testNumber="8"/>
			<description>Entry RV in AnnotWidgetFieldBtnRadio shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in AnnotWidgetFieldBtnRadio has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-RV-Stream" testNumber="10"/>
			<description>Entry RV with type Stream in AnnotWidgetFieldBtnRadio shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in AnnotWidgetFieldBtnRadio is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotWidgetFieldBtnRadio shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotWidgetFieldBtnRadio has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotWidgetFieldBtnRadio is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotWidgetFieldBtnRadio is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotWidgetFieldBtnRadio shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotWidgetFieldBtnRadio has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotWidgetFieldBtnRadio shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotWidgetFieldBtnRadio has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotWidgetFieldBtnRadio is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotWidgetFieldBtnRadio is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotWidgetFieldBtnRadio shall have value Widget</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Widget"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotWidgetFieldBtnRadio has incorrect value %1 instead of Widget</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-T" testNumber="8"/>
			<description>Entry T in AnnotWidgetFieldBtnRadio shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotWidgetFieldBtnRadio has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-TM" testNumber="8"/>
			<description>Entry TM in AnnotWidgetFieldBtnRadio shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in AnnotWidgetFieldBtnRadio has type %1 instead of type StringText</message>
				<arguments>
					<argument>TMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-TU" testNumber="8"/>
			<description>Entry TU in AnnotWidgetFieldBtnRadio shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in AnnotWidgetFieldBtnRadio has type %1 instead of type StringText</message>
				<arguments>
					<argument>TUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-Type" testNumber="8"/>
			<description>Entry Type in AnnotWidgetFieldBtnRadio shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotWidgetFieldBtnRadio has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotWidgetFieldBtnRadio shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotWidgetFieldBtnRadio has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldBtnRadio-V" testNumber="8"/>
			<description>Entry V in AnnotWidgetFieldBtnRadio shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in AnnotWidgetFieldBtnRadio has type %1 instead of type Name</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice" testNumber="1"/>
			<description>AnnotWidgetFieldChoice shall not contain entries except A, AA, AF, AP, AS, BS, Border, C, Contents, DA, DS, DV, F, FT, Ff, H, I, M, MK, NM, OC, Opt, P, PMD, Parent, Q, RV, Rect, StructParent, Subtype, T, TI, TM, TU, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'I' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TI' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotWidgetFieldChoice contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'I' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TI' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice" testNumber="22"/>
			<description>AnnotWidgetFieldChoice shall not contain entries BM, CA, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotWidgetFieldChoice contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-A-Dictionary" testNumber="17"/>
			<description>Entry A with type Dictionary in AnnotWidgetFieldChoice shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotWidgetFieldChoice is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-A" testNumber="8"/>
			<description>Entry A in AnnotWidgetFieldChoice shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotWidgetFieldChoice has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-AA" testNumber="8"/>
			<description>Entry AA in AnnotWidgetFieldChoice shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in AnnotWidgetFieldChoice has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-AF" testNumber="8"/>
			<description>Entry AF in AnnotWidgetFieldChoice shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotWidgetFieldChoice has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-AF" testNumber="23"/>
			<description>Entry AF in AnnotWidgetFieldChoice can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotWidgetFieldChoice is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-AP" testNumber="8"/>
			<description>Entry AP in AnnotWidgetFieldChoice shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotWidgetFieldChoice has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-AS" testNumber="8"/>
			<description>Entry AS in AnnotWidgetFieldChoice shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotWidgetFieldChoice has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-AS" testNumber="11"/>
			<description>Entry AS in AnnotWidgetFieldChoice is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotWidgetFieldChoice is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-BS" testNumber="8"/>
			<description>Entry BS in AnnotWidgetFieldChoice shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotWidgetFieldChoice has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-Border" testNumber="8"/>
			<description>Entry Border in AnnotWidgetFieldChoice shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotWidgetFieldChoice has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-C" testNumber="8"/>
			<description>Entry C in AnnotWidgetFieldChoice shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotWidgetFieldChoice has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotWidgetFieldChoice shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotWidgetFieldChoice has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-DA" testNumber="8"/>
			<description>Entry DA in AnnotWidgetFieldChoice shall have type StringByte</description>
			<test>containsDA == false || DAHasTypeStringByte == true</test>
			<error>
				<message>Entry DA in AnnotWidgetFieldChoice has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-DA" testNumber="7"/>
			<description>Entry DA in AnnotWidgetFieldChoice is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in AnnotWidgetFieldChoice is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-DS" testNumber="8"/>
			<description>Entry DS in AnnotWidgetFieldChoice shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in AnnotWidgetFieldChoice has type %1 instead of type StringText</message>
				<arguments>
					<argument>DSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-DV" testNumber="8"/>
			<description>Entry DV in AnnotWidgetFieldChoice shall have one of types: Array, StringText</description>
			<test>containsDV == false || DVHasTypeArray == true || DVHasTypeStringText == true</test>
			<error>
				<message>Entry DV in AnnotWidgetFieldChoice has type %1 instead of one of types: Array, StringText</message>
				<arguments>
					<argument>DVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-F" testNumber="8"/>
			<description>Entry F in AnnotWidgetFieldChoice shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotWidgetFieldChoice has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotWidgetFieldChoice shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotWidgetFieldChoice does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-FT" testNumber="8"/>
			<description>Entry FT in AnnotWidgetFieldChoice shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in AnnotWidgetFieldChoice has type %1 instead of type Name</message>
				<arguments>
					<argument>FTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-FT" testNumber="7"/>
			<description>Entry FT in AnnotWidgetFieldChoice is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in AnnotWidgetFieldChoice is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-FT-Name" testNumber="6"/>
			<description>Entry FT with type Name in AnnotWidgetFieldChoice shall have value Ch</description>
			<test>FTHasTypeName != true || FTNameValue == "Ch"</test>
			<error>
				<message>Entry FT with type Name in AnnotWidgetFieldChoice has incorrect value %1 instead of Ch</message>
				<arguments>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-Ff" testNumber="8"/>
			<description>Entry Ff in AnnotWidgetFieldChoice shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in AnnotWidgetFieldChoice has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-Ff-Bitmask" testNumber="9"/>
			<description>Entry Ff with type Bitmask in AnnotWidgetFieldChoice shall satisfy special case: fn:Eval(fn:BitsClear(4, 14) &amp;&amp; fn:BitClear(21) &amp;&amp; fn:BitsClear(24, 26) &amp;&amp; fn:BitsClear(28, 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; ((FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in AnnotWidgetFieldChoice does not satisfy special case: fn:Eval(fn:BitsClear(4, 14) &amp;&amp; fn:BitClear(21) &amp;&amp; fn:BitsClear(24, 26) &amp;&amp; fn:BitsClear(28, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-H" testNumber="8"/>
			<description>Entry H in AnnotWidgetFieldChoice shall have type Name</description>
			<test>containsH == false || HHasTypeName == true</test>
			<error>
				<message>Entry H in AnnotWidgetFieldChoice has type %1 instead of type Name</message>
				<arguments>
					<argument>HType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-H-Name" testNumber="6"/>
			<description>Entry H with type Name in AnnotWidgetFieldChoice shall have one of values: P, T, I, N, O</description>
			<test>HHasTypeName != true || HNameValue == "N" || HNameValue == "I" || HNameValue == "O" || HNameValue == "P" || HNameValue == "T"</test>
			<error>
				<message>Entry H with type Name in AnnotWidgetFieldChoice has incorrect value %1 instead of P, T, I, N, O</message>
				<arguments>
					<argument>HNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-I" testNumber="8"/>
			<description>Entry I in AnnotWidgetFieldChoice shall have type Array</description>
			<test>containsI == false || IHasTypeArray == true</test>
			<error>
				<message>Entry I in AnnotWidgetFieldChoice has type %1 instead of type Array</message>
				<arguments>
					<argument>IType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-I-Array" testNumber="9"/>
			<description>Entry I with type Array in AnnotWidgetFieldChoice shall satisfy special case: fn:Eval(fn:ArraySortAscending(I, 1))</description>
			<test>IHasTypeArray != true || (isIArraySortAscending1 == true)</test>
			<error>
				<message>Entry I with type Array in AnnotWidgetFieldChoice does not satisfy special case: fn:Eval(fn:ArraySortAscending(I, 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-M" testNumber="8"/>
			<description>Entry M in AnnotWidgetFieldChoice shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotWidgetFieldChoice has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-MK" testNumber="8"/>
			<description>Entry MK in AnnotWidgetFieldChoice shall have type Dictionary</description>
			<test>containsMK == false || MKHasTypeDictionary == true</test>
			<error>
				<message>Entry MK in AnnotWidgetFieldChoice has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MKType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-NM" testNumber="8"/>
			<description>Entry NM in AnnotWidgetFieldChoice shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotWidgetFieldChoice has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotWidgetFieldChoice shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotWidgetFieldChoice is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-OC" testNumber="8"/>
			<description>Entry OC in AnnotWidgetFieldChoice shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotWidgetFieldChoice has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-Opt" testNumber="8"/>
			<description>Entry Opt in AnnotWidgetFieldChoice shall have type Array</description>
			<test>containsOpt == false || OptHasTypeArray == true</test>
			<error>
				<message>Entry Opt in AnnotWidgetFieldChoice has type %1 instead of type Array</message>
				<arguments>
					<argument>OptType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-P" testNumber="8"/>
			<description>Entry P in AnnotWidgetFieldChoice shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotWidgetFieldChoice has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotWidgetFieldChoice shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWidgetFieldChoice is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-PMD" testNumber="8"/>
			<description>Entry PMD in AnnotWidgetFieldChoice shall have type Dictionary</description>
			<test>containsPMD == false || PMDHasTypeDictionary == true</test>
			<error>
				<message>Entry PMD in AnnotWidgetFieldChoice has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PMDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-PMD" testNumber="23"/>
			<description>Entry PMD in AnnotWidgetFieldChoice can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsPMD == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PMD in AnnotWidgetFieldChoice is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in AnnotWidgetFieldChoice shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in AnnotWidgetFieldChoice is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-Parent" testNumber="8"/>
			<description>Entry Parent in AnnotWidgetFieldChoice shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in AnnotWidgetFieldChoice has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-Q" testNumber="8"/>
			<description>Entry Q in AnnotWidgetFieldChoice shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in AnnotWidgetFieldChoice has type %1 instead of type Integer</message>
				<arguments>
					<argument>QType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-Q-Integer" testNumber="6"/>
			<description>Entry Q with type Integer in AnnotWidgetFieldChoice shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in AnnotWidgetFieldChoice has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-RV" testNumber="8"/>
			<description>Entry RV in AnnotWidgetFieldChoice shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in AnnotWidgetFieldChoice has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-RV-Stream" testNumber="10"/>
			<description>Entry RV with type Stream in AnnotWidgetFieldChoice shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in AnnotWidgetFieldChoice is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotWidgetFieldChoice shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotWidgetFieldChoice has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotWidgetFieldChoice is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotWidgetFieldChoice is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotWidgetFieldChoice shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotWidgetFieldChoice has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotWidgetFieldChoice shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotWidgetFieldChoice has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotWidgetFieldChoice is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotWidgetFieldChoice is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotWidgetFieldChoice shall have value Widget</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Widget"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotWidgetFieldChoice has incorrect value %1 instead of Widget</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-T" testNumber="8"/>
			<description>Entry T in AnnotWidgetFieldChoice shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotWidgetFieldChoice has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-TI" testNumber="8"/>
			<description>Entry TI in AnnotWidgetFieldChoice shall have type Integer</description>
			<test>containsTI == false || TIHasTypeInteger == true</test>
			<error>
				<message>Entry TI in AnnotWidgetFieldChoice has type %1 instead of type Integer</message>
				<arguments>
					<argument>TIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-TI-Integer" testNumber="14"/>
			<description>Entry TI with type Integer in AnnotWidgetFieldChoice shall satisfy possible value predicate: fn:Eval((@TI &gt;= 0) &amp;&amp; (@TI &lt; fn:ArrayLength(Opt)))</description>
			<test>TIHasTypeInteger != true || (TIIntegerValue &gt;= 0) &amp;&amp; (OptHasTypeArray == false || (TIIntegerValue &lt; OptArraySize))</test>
			<error>
				<message>Entry TI with type Integer in AnnotWidgetFieldChoice does not satisfy possible value predicate: fn:Eval((@TI &gt;= 0) &amp;&amp; (@TI &lt; fn:ArrayLength(Opt)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-TM" testNumber="8"/>
			<description>Entry TM in AnnotWidgetFieldChoice shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in AnnotWidgetFieldChoice has type %1 instead of type StringText</message>
				<arguments>
					<argument>TMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-TU" testNumber="8"/>
			<description>Entry TU in AnnotWidgetFieldChoice shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in AnnotWidgetFieldChoice has type %1 instead of type StringText</message>
				<arguments>
					<argument>TUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-Type" testNumber="8"/>
			<description>Entry Type in AnnotWidgetFieldChoice shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotWidgetFieldChoice has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotWidgetFieldChoice shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotWidgetFieldChoice has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldChoice">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldChoice-V" testNumber="8"/>
			<description>Entry V in AnnotWidgetFieldChoice shall have one of types: Array, StringText</description>
			<test>containsV == false || VHasTypeArray == true || VHasTypeStringText == true</test>
			<error>
				<message>Entry V in AnnotWidgetFieldChoice has type %1 instead of one of types: Array, StringText</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig" testNumber="1"/>
			<description>AnnotWidgetFieldSig shall not contain entries except A, AA, AF, AP, AS, BS, Border, C, Contents, DA, DS, DV, F, FT, Ff, H, Lock, M, MK, NM, OC, P, PMD, Parent, Q, RV, Rect, SV, StructParent, Subtype, T, TM, TU, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Lock' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'SV' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotWidgetFieldSig contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Lock' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'SV' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig" testNumber="22"/>
			<description>AnnotWidgetFieldSig shall not contain entries BM, CA, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotWidgetFieldSig contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-A-Dictionary" testNumber="17"/>
			<description>Entry A with type Dictionary in AnnotWidgetFieldSig shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotWidgetFieldSig is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-A" testNumber="8"/>
			<description>Entry A in AnnotWidgetFieldSig shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotWidgetFieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-AA" testNumber="8"/>
			<description>Entry AA in AnnotWidgetFieldSig shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in AnnotWidgetFieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-AF" testNumber="8"/>
			<description>Entry AF in AnnotWidgetFieldSig shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotWidgetFieldSig has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-AF" testNumber="23"/>
			<description>Entry AF in AnnotWidgetFieldSig can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotWidgetFieldSig is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-AP" testNumber="8"/>
			<description>Entry AP in AnnotWidgetFieldSig shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotWidgetFieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-AS" testNumber="8"/>
			<description>Entry AS in AnnotWidgetFieldSig shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotWidgetFieldSig has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-AS" testNumber="11"/>
			<description>Entry AS in AnnotWidgetFieldSig is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotWidgetFieldSig is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-BS" testNumber="8"/>
			<description>Entry BS in AnnotWidgetFieldSig shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotWidgetFieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Border" testNumber="8"/>
			<description>Entry Border in AnnotWidgetFieldSig shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotWidgetFieldSig has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-C" testNumber="8"/>
			<description>Entry C in AnnotWidgetFieldSig shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotWidgetFieldSig has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotWidgetFieldSig shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotWidgetFieldSig has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-DA" testNumber="8"/>
			<description>Entry DA in AnnotWidgetFieldSig shall have type StringByte</description>
			<test>containsDA == false || DAHasTypeStringByte == true</test>
			<error>
				<message>Entry DA in AnnotWidgetFieldSig has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-DS" testNumber="8"/>
			<description>Entry DS in AnnotWidgetFieldSig shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in AnnotWidgetFieldSig has type %1 instead of type StringText</message>
				<arguments>
					<argument>DSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-DV-Dictionary" testNumber="17"/>
			<description>Entry DV with type Dictionary in AnnotWidgetFieldSig shall be one of objects Signature, DocTimeStamp</description>
			<test>DVHasTypeDictionary != true || DV_size == 1</test>
			<error>
				<message>Entry DV with type Dictionary in AnnotWidgetFieldSig is not one of objects Signature, DocTimeStamp</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-DV" testNumber="8"/>
			<description>Entry DV in AnnotWidgetFieldSig shall have type Dictionary</description>
			<test>containsDV == false || DVHasTypeDictionary == true</test>
			<error>
				<message>Entry DV in AnnotWidgetFieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-F" testNumber="8"/>
			<description>Entry F in AnnotWidgetFieldSig shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotWidgetFieldSig has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotWidgetFieldSig shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotWidgetFieldSig does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-FT" testNumber="8"/>
			<description>Entry FT in AnnotWidgetFieldSig shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in AnnotWidgetFieldSig has type %1 instead of type Name</message>
				<arguments>
					<argument>FTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-FT" testNumber="7"/>
			<description>Entry FT in AnnotWidgetFieldSig is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in AnnotWidgetFieldSig is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-FT-Name" testNumber="6"/>
			<description>Entry FT with type Name in AnnotWidgetFieldSig shall have value Sig</description>
			<test>FTHasTypeName != true || FTNameValue == "Sig"</test>
			<error>
				<message>Entry FT with type Name in AnnotWidgetFieldSig has incorrect value %1 instead of Sig</message>
				<arguments>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Ff" testNumber="8"/>
			<description>Entry Ff in AnnotWidgetFieldSig shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in AnnotWidgetFieldSig has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Ff-Bitmask" testNumber="9"/>
			<description>Entry Ff with type Bitmask in AnnotWidgetFieldSig shall satisfy special case: fn:Eval(fn:BitsClear(4, 32))</description>
			<test>FfHasTypeBitmask != true || ((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry Ff with type Bitmask in AnnotWidgetFieldSig does not satisfy special case: fn:Eval(fn:BitsClear(4, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-H" testNumber="8"/>
			<description>Entry H in AnnotWidgetFieldSig shall have type Name</description>
			<test>containsH == false || HHasTypeName == true</test>
			<error>
				<message>Entry H in AnnotWidgetFieldSig has type %1 instead of type Name</message>
				<arguments>
					<argument>HType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-H-Name" testNumber="6"/>
			<description>Entry H with type Name in AnnotWidgetFieldSig shall have one of values: P, T, I, N, O</description>
			<test>HHasTypeName != true || HNameValue == "N" || HNameValue == "I" || HNameValue == "O" || HNameValue == "P" || HNameValue == "T"</test>
			<error>
				<message>Entry H with type Name in AnnotWidgetFieldSig has incorrect value %1 instead of P, T, I, N, O</message>
				<arguments>
					<argument>HNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Lock" testNumber="8"/>
			<description>Entry Lock in AnnotWidgetFieldSig shall have type Dictionary</description>
			<test>containsLock == false || LockHasTypeDictionary == true</test>
			<error>
				<message>Entry Lock in AnnotWidgetFieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>LockType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Lock-Dictionary" testNumber="10"/>
			<description>Entry Lock with type Dictionary in AnnotWidgetFieldSig shall be indirect</description>
			<test>LockHasTypeDictionary != true || isLockIndirect == true</test>
			<error>
				<message>Entry Lock with type Dictionary in AnnotWidgetFieldSig is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-M" testNumber="8"/>
			<description>Entry M in AnnotWidgetFieldSig shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotWidgetFieldSig has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-MK" testNumber="8"/>
			<description>Entry MK in AnnotWidgetFieldSig shall have type Dictionary</description>
			<test>containsMK == false || MKHasTypeDictionary == true</test>
			<error>
				<message>Entry MK in AnnotWidgetFieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MKType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-NM" testNumber="8"/>
			<description>Entry NM in AnnotWidgetFieldSig shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotWidgetFieldSig has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotWidgetFieldSig shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotWidgetFieldSig is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-OC" testNumber="8"/>
			<description>Entry OC in AnnotWidgetFieldSig shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotWidgetFieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-P" testNumber="8"/>
			<description>Entry P in AnnotWidgetFieldSig shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotWidgetFieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotWidgetFieldSig shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWidgetFieldSig is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-PMD" testNumber="8"/>
			<description>Entry PMD in AnnotWidgetFieldSig shall have type Dictionary</description>
			<test>containsPMD == false || PMDHasTypeDictionary == true</test>
			<error>
				<message>Entry PMD in AnnotWidgetFieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PMDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-PMD" testNumber="23"/>
			<description>Entry PMD in AnnotWidgetFieldSig can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsPMD == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PMD in AnnotWidgetFieldSig is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in AnnotWidgetFieldSig shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in AnnotWidgetFieldSig is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Parent" testNumber="8"/>
			<description>Entry Parent in AnnotWidgetFieldSig shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in AnnotWidgetFieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Q" testNumber="8"/>
			<description>Entry Q in AnnotWidgetFieldSig shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in AnnotWidgetFieldSig has type %1 instead of type Integer</message>
				<arguments>
					<argument>QType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Q-Integer" testNumber="6"/>
			<description>Entry Q with type Integer in AnnotWidgetFieldSig shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in AnnotWidgetFieldSig has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-RV" testNumber="8"/>
			<description>Entry RV in AnnotWidgetFieldSig shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in AnnotWidgetFieldSig has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-RV-Stream" testNumber="10"/>
			<description>Entry RV with type Stream in AnnotWidgetFieldSig shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in AnnotWidgetFieldSig is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotWidgetFieldSig shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotWidgetFieldSig has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotWidgetFieldSig is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotWidgetFieldSig is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-SV" testNumber="8"/>
			<description>Entry SV in AnnotWidgetFieldSig shall have type Dictionary</description>
			<test>containsSV == false || SVHasTypeDictionary == true</test>
			<error>
				<message>Entry SV in AnnotWidgetFieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-SV-Dictionary" testNumber="10"/>
			<description>Entry SV with type Dictionary in AnnotWidgetFieldSig shall be indirect</description>
			<test>SVHasTypeDictionary != true || isSVIndirect == true</test>
			<error>
				<message>Entry SV with type Dictionary in AnnotWidgetFieldSig is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotWidgetFieldSig shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotWidgetFieldSig has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotWidgetFieldSig shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotWidgetFieldSig has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotWidgetFieldSig is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotWidgetFieldSig is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotWidgetFieldSig shall have value Widget</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Widget"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotWidgetFieldSig has incorrect value %1 instead of Widget</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-T" testNumber="8"/>
			<description>Entry T in AnnotWidgetFieldSig shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotWidgetFieldSig has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-TM" testNumber="8"/>
			<description>Entry TM in AnnotWidgetFieldSig shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in AnnotWidgetFieldSig has type %1 instead of type StringText</message>
				<arguments>
					<argument>TMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-TU" testNumber="8"/>
			<description>Entry TU in AnnotWidgetFieldSig shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in AnnotWidgetFieldSig has type %1 instead of type StringText</message>
				<arguments>
					<argument>TUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Type" testNumber="8"/>
			<description>Entry Type in AnnotWidgetFieldSig shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotWidgetFieldSig has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotWidgetFieldSig shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotWidgetFieldSig has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-V-Dictionary" testNumber="17"/>
			<description>Entry V with type Dictionary in AnnotWidgetFieldSig shall be one of objects Signature, DocTimeStamp</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in AnnotWidgetFieldSig is not one of objects Signature, DocTimeStamp</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldSig">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldSig-V" testNumber="8"/>
			<description>Entry V in AnnotWidgetFieldSig shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in AnnotWidgetFieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx" testNumber="1"/>
			<description>AnnotWidgetFieldTx shall not contain entries except A, AA, AF, AP, AS, BS, Border, C, Contents, DA, DS, DV, F, FT, Ff, H, M, MK, MaxLen, NM, OC, P, PMD, Parent, Q, RV, Rect, StructParent, Subtype, T, TM, TU, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'MaxLen' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AnnotWidgetFieldTx contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'MaxLen' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'ca' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx" testNumber="22"/>
			<description>AnnotWidgetFieldTx shall not contain entries BM, CA, Lang, ca in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').length == 0</test>
			<error>
				<message>AnnotWidgetFieldTx contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'BM' || elem == 'CA' || elem == 'Lang' || elem == 'ca').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-A-Dictionary" testNumber="17"/>
			<description>Entry A with type Dictionary in AnnotWidgetFieldTx shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotWidgetFieldTx is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-A" testNumber="8"/>
			<description>Entry A in AnnotWidgetFieldTx shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotWidgetFieldTx has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-AA" testNumber="8"/>
			<description>Entry AA in AnnotWidgetFieldTx shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in AnnotWidgetFieldTx has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-AF" testNumber="8"/>
			<description>Entry AF in AnnotWidgetFieldTx shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in AnnotWidgetFieldTx has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-AF" testNumber="23"/>
			<description>Entry AF in AnnotWidgetFieldTx can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in AnnotWidgetFieldTx is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-AP" testNumber="8"/>
			<description>Entry AP in AnnotWidgetFieldTx shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotWidgetFieldTx has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-AS" testNumber="8"/>
			<description>Entry AS in AnnotWidgetFieldTx shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotWidgetFieldTx has type %1 instead of type Name</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-AS" testNumber="11"/>
			<description>Entry AS in AnnotWidgetFieldTx is required, when fn:IsDictionary(AP::N) || fn:IsDictionary(AP::R) || fn:IsDictionary(AP::D)</description>
			<test>containsAS == true || (APNHasTypeDictionary != true &amp;&amp; APRHasTypeDictionary != true &amp;&amp; APDHasTypeDictionary != true)</test>
			<error>
				<message>Entry AS in AnnotWidgetFieldTx is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-BS" testNumber="8"/>
			<description>Entry BS in AnnotWidgetFieldTx shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotWidgetFieldTx has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-Border" testNumber="8"/>
			<description>Entry Border in AnnotWidgetFieldTx shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotWidgetFieldTx has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-C" testNumber="8"/>
			<description>Entry C in AnnotWidgetFieldTx shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotWidgetFieldTx has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-Contents" testNumber="8"/>
			<description>Entry Contents in AnnotWidgetFieldTx shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotWidgetFieldTx has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-DA" testNumber="8"/>
			<description>Entry DA in AnnotWidgetFieldTx shall have type StringByte</description>
			<test>containsDA == false || DAHasTypeStringByte == true</test>
			<error>
				<message>Entry DA in AnnotWidgetFieldTx has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-DA" testNumber="7"/>
			<description>Entry DA in AnnotWidgetFieldTx is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in AnnotWidgetFieldTx is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-DS" testNumber="8"/>
			<description>Entry DS in AnnotWidgetFieldTx shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in AnnotWidgetFieldTx has type %1 instead of type StringText</message>
				<arguments>
					<argument>DSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-DV" testNumber="8"/>
			<description>Entry DV in AnnotWidgetFieldTx shall have one of types: Stream, StringText</description>
			<test>containsDV == false || DVHasTypeStream == true || DVHasTypeStringText == true</test>
			<error>
				<message>Entry DV in AnnotWidgetFieldTx has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>DVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-DV-Stream" testNumber="10"/>
			<description>Entry DV with type Stream in AnnotWidgetFieldTx shall be indirect</description>
			<test>DVHasTypeStream != true || isDVIndirect == true</test>
			<error>
				<message>Entry DV with type Stream in AnnotWidgetFieldTx is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-F" testNumber="8"/>
			<description>Entry F in AnnotWidgetFieldTx shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotWidgetFieldTx has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in AnnotWidgetFieldTx shall satisfy special case: fn:Eval(fn:BitsClear(11, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotWidgetFieldTx does not satisfy special case: fn:Eval(fn:BitsClear(11, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-FT" testNumber="8"/>
			<description>Entry FT in AnnotWidgetFieldTx shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in AnnotWidgetFieldTx has type %1 instead of type Name</message>
				<arguments>
					<argument>FTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-FT" testNumber="7"/>
			<description>Entry FT in AnnotWidgetFieldTx is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in AnnotWidgetFieldTx is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-FT-Name" testNumber="6"/>
			<description>Entry FT with type Name in AnnotWidgetFieldTx shall have value Tx</description>
			<test>FTHasTypeName != true || FTNameValue == "Tx"</test>
			<error>
				<message>Entry FT with type Name in AnnotWidgetFieldTx has incorrect value %1 instead of Tx</message>
				<arguments>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-Ff" testNumber="8"/>
			<description>Entry Ff in AnnotWidgetFieldTx shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in AnnotWidgetFieldTx has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-Ff-Bitmask" testNumber="9"/>
			<description>Entry Ff with type Bitmask in AnnotWidgetFieldTx shall satisfy special case: fn:Eval(fn:BitsClear(15, 20) &amp;&amp; fn:BitClear(22) &amp;&amp; fn:BitsClear(27, 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in AnnotWidgetFieldTx does not satisfy special case: fn:Eval(fn:BitsClear(15, 20) &amp;&amp; fn:BitClear(22) &amp;&amp; fn:BitsClear(27, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-H" testNumber="8"/>
			<description>Entry H in AnnotWidgetFieldTx shall have type Name</description>
			<test>containsH == false || HHasTypeName == true</test>
			<error>
				<message>Entry H in AnnotWidgetFieldTx has type %1 instead of type Name</message>
				<arguments>
					<argument>HType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-H-Name" testNumber="6"/>
			<description>Entry H with type Name in AnnotWidgetFieldTx shall have one of values: P, T, I, N, O</description>
			<test>HHasTypeName != true || HNameValue == "N" || HNameValue == "I" || HNameValue == "O" || HNameValue == "P" || HNameValue == "T"</test>
			<error>
				<message>Entry H with type Name in AnnotWidgetFieldTx has incorrect value %1 instead of P, T, I, N, O</message>
				<arguments>
					<argument>HNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-M" testNumber="8"/>
			<description>Entry M in AnnotWidgetFieldTx shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotWidgetFieldTx has type %1 instead of one of types: Date, StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-MK" testNumber="8"/>
			<description>Entry MK in AnnotWidgetFieldTx shall have type Dictionary</description>
			<test>containsMK == false || MKHasTypeDictionary == true</test>
			<error>
				<message>Entry MK in AnnotWidgetFieldTx has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MKType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-MaxLen" testNumber="8"/>
			<description>Entry MaxLen in AnnotWidgetFieldTx shall have type Integer</description>
			<test>containsMaxLen == false || MaxLenHasTypeInteger == true</test>
			<error>
				<message>Entry MaxLen in AnnotWidgetFieldTx has type %1 instead of type Integer</message>
				<arguments>
					<argument>MaxLenType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-MaxLen-Integer" testNumber="9"/>
			<description>Entry MaxLen with type Integer in AnnotWidgetFieldTx shall satisfy special case: fn:Eval(@MaxLen &gt;= 0)</description>
			<test>MaxLenHasTypeInteger != true || (MaxLenIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry MaxLen with type Integer in AnnotWidgetFieldTx does not satisfy special case: fn:Eval(@MaxLen &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-NM" testNumber="8"/>
			<description>Entry NM in AnnotWidgetFieldTx shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotWidgetFieldTx has type %1 instead of type StringText</message>
				<arguments>
					<argument>NMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in AnnotWidgetFieldTx shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotWidgetFieldTx is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-OC" testNumber="8"/>
			<description>Entry OC in AnnotWidgetFieldTx shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotWidgetFieldTx has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-P" testNumber="8"/>
			<description>Entry P in AnnotWidgetFieldTx shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotWidgetFieldTx has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in AnnotWidgetFieldTx shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWidgetFieldTx is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-PMD" testNumber="8"/>
			<description>Entry PMD in AnnotWidgetFieldTx shall have type Dictionary</description>
			<test>containsPMD == false || PMDHasTypeDictionary == true</test>
			<error>
				<message>Entry PMD in AnnotWidgetFieldTx has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PMDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-PMD" testNumber="23"/>
			<description>Entry PMD in AnnotWidgetFieldTx can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsPMD == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PMD in AnnotWidgetFieldTx is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in AnnotWidgetFieldTx shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in AnnotWidgetFieldTx is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-Parent" testNumber="8"/>
			<description>Entry Parent in AnnotWidgetFieldTx shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in AnnotWidgetFieldTx has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-Q" testNumber="8"/>
			<description>Entry Q in AnnotWidgetFieldTx shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in AnnotWidgetFieldTx has type %1 instead of type Integer</message>
				<arguments>
					<argument>QType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-Q-Integer" testNumber="6"/>
			<description>Entry Q with type Integer in AnnotWidgetFieldTx shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in AnnotWidgetFieldTx has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-RV" testNumber="8"/>
			<description>Entry RV in AnnotWidgetFieldTx shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in AnnotWidgetFieldTx has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-RV-Stream" testNumber="10"/>
			<description>Entry RV with type Stream in AnnotWidgetFieldTx shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in AnnotWidgetFieldTx is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-Rect" testNumber="8"/>
			<description>Entry Rect in AnnotWidgetFieldTx shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotWidgetFieldTx has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-Rect" testNumber="7"/>
			<description>Entry Rect in AnnotWidgetFieldTx is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotWidgetFieldTx is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-StructParent" testNumber="8"/>
			<description>Entry StructParent in AnnotWidgetFieldTx shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotWidgetFieldTx has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-Subtype" testNumber="8"/>
			<description>Entry Subtype in AnnotWidgetFieldTx shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotWidgetFieldTx has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-Subtype" testNumber="7"/>
			<description>Entry Subtype in AnnotWidgetFieldTx is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotWidgetFieldTx is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in AnnotWidgetFieldTx shall have value Widget</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Widget"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotWidgetFieldTx has incorrect value %1 instead of Widget</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-T" testNumber="8"/>
			<description>Entry T in AnnotWidgetFieldTx shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotWidgetFieldTx has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-TM" testNumber="8"/>
			<description>Entry TM in AnnotWidgetFieldTx shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in AnnotWidgetFieldTx has type %1 instead of type StringText</message>
				<arguments>
					<argument>TMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-TU" testNumber="8"/>
			<description>Entry TU in AnnotWidgetFieldTx shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in AnnotWidgetFieldTx has type %1 instead of type StringText</message>
				<arguments>
					<argument>TUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-Type" testNumber="8"/>
			<description>Entry Type in AnnotWidgetFieldTx shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotWidgetFieldTx has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in AnnotWidgetFieldTx shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotWidgetFieldTx has incorrect value %1 instead of Annot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-V" testNumber="8"/>
			<description>Entry V in AnnotWidgetFieldTx shall have one of types: Stream, StringText</description>
			<test>containsV == false || VHasTypeStream == true || VHasTypeStringText == true</test>
			<error>
				<message>Entry V in AnnotWidgetFieldTx has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidgetFieldTx">
			<id specification="ISO_32000_1_7" clause="AnnotWidgetFieldTx-V-Stream" testNumber="10"/>
			<description>Entry V with type Stream in AnnotWidgetFieldTx shall be indirect</description>
			<test>VHasTypeStream != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Stream in AnnotWidgetFieldTx is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="Appearance" testNumber="1"/>
			<description>Appearance shall not contain entries except D, N, R</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Appearance contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="Appearance-D-Stream" testNumber="17"/>
			<description>Entry D with type Stream in Appearance shall be one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>DHasTypeStream != true || D_size == 1</test>
			<error>
				<message>Entry D with type Stream in Appearance is not one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="Appearance-D" testNumber="8"/>
			<description>Entry D in Appearance shall have one of types: Dictionary, Stream</description>
			<test>containsD == false || DHasTypeDictionary == true || DHasTypeStream == true</test>
			<error>
				<message>Entry D in Appearance has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="Appearance-D-Stream" testNumber="10"/>
			<description>Entry D with type Stream in Appearance shall be indirect</description>
			<test>DHasTypeStream != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Stream in Appearance is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="Appearance-N-Stream" testNumber="17"/>
			<description>Entry N with type Stream in Appearance shall be one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>NHasTypeStream != true || N_size == 1</test>
			<error>
				<message>Entry N with type Stream in Appearance is not one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="Appearance-N" testNumber="8"/>
			<description>Entry N in Appearance shall have one of types: Dictionary, Stream</description>
			<test>containsN == false || NHasTypeDictionary == true || NHasTypeStream == true</test>
			<error>
				<message>Entry N in Appearance has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="Appearance-N" testNumber="7"/>
			<description>Entry N in Appearance is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in Appearance is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="Appearance-N-Stream" testNumber="10"/>
			<description>Entry N with type Stream in Appearance shall be indirect</description>
			<test>NHasTypeStream != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Stream in Appearance is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="Appearance-R-Stream" testNumber="17"/>
			<description>Entry R with type Stream in Appearance shall be one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>RHasTypeStream != true || R_size == 1</test>
			<error>
				<message>Entry R with type Stream in Appearance is not one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="Appearance-R" testNumber="8"/>
			<description>Entry R in Appearance shall have one of types: Dictionary, Stream</description>
			<test>containsR == false || RHasTypeDictionary == true || RHasTypeStream == true</test>
			<error>
				<message>Entry R in Appearance has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="Appearance-R-Stream" testNumber="10"/>
			<description>Entry R with type Stream in Appearance shall be indirect</description>
			<test>RHasTypeStream != true || isRIndirect == true</test>
			<error>
				<message>Entry R with type Stream in Appearance is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics" testNumber="1"/>
			<description>AppearanceCharacteristics shall not contain entries except AC, BC, BG, CA, I, IF, IX, R, RC, RI, TP</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AC' &amp;&amp; elem != 'BC' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'I' &amp;&amp; elem != 'IF' &amp;&amp; elem != 'IX' &amp;&amp; elem != 'R' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RI' &amp;&amp; elem != 'TP' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AppearanceCharacteristics contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AC' &amp;&amp; elem != 'BC' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'I' &amp;&amp; elem != 'IF' &amp;&amp; elem != 'IX' &amp;&amp; elem != 'R' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RI' &amp;&amp; elem != 'TP' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-AC" testNumber="8"/>
			<description>Entry AC in AppearanceCharacteristics shall have type StringText</description>
			<test>containsAC == false || ACHasTypeStringText == true</test>
			<error>
				<message>Entry AC in AppearanceCharacteristics has type %1 instead of type StringText</message>
				<arguments>
					<argument>ACType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-BC" testNumber="8"/>
			<description>Entry BC in AppearanceCharacteristics shall have type Array</description>
			<test>containsBC == false || BCHasTypeArray == true</test>
			<error>
				<message>Entry BC in AppearanceCharacteristics has type %1 instead of type Array</message>
				<arguments>
					<argument>BCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-BG" testNumber="8"/>
			<description>Entry BG in AppearanceCharacteristics shall have type Array</description>
			<test>containsBG == false || BGHasTypeArray == true</test>
			<error>
				<message>Entry BG in AppearanceCharacteristics has type %1 instead of type Array</message>
				<arguments>
					<argument>BGType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-CA" testNumber="8"/>
			<description>Entry CA in AppearanceCharacteristics shall have type StringText</description>
			<test>containsCA == false || CAHasTypeStringText == true</test>
			<error>
				<message>Entry CA in AppearanceCharacteristics has type %1 instead of type StringText</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-I-Stream" testNumber="17"/>
			<description>Entry I with type Stream in AppearanceCharacteristics shall be one of objects XObjectFormType1, XObjectImage</description>
			<test>IHasTypeStream != true || I_size == 1</test>
			<error>
				<message>Entry I with type Stream in AppearanceCharacteristics is not one of objects XObjectFormType1, XObjectImage</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-I" testNumber="8"/>
			<description>Entry I in AppearanceCharacteristics shall have type Stream</description>
			<test>containsI == false || IHasTypeStream == true</test>
			<error>
				<message>Entry I in AppearanceCharacteristics has type %1 instead of type Stream</message>
				<arguments>
					<argument>IType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-I-Stream" testNumber="10"/>
			<description>Entry I with type Stream in AppearanceCharacteristics shall be indirect</description>
			<test>IHasTypeStream != true || isIIndirect == true</test>
			<error>
				<message>Entry I with type Stream in AppearanceCharacteristics is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-IF" testNumber="8"/>
			<description>Entry IF in AppearanceCharacteristics shall have type Dictionary</description>
			<test>containsIF == false || IFHasTypeDictionary == true</test>
			<error>
				<message>Entry IF in AppearanceCharacteristics has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-IX-Stream" testNumber="17"/>
			<description>Entry IX with type Stream in AppearanceCharacteristics shall be one of objects XObjectFormType1, XObjectImage</description>
			<test>IXHasTypeStream != true || IX_size == 1</test>
			<error>
				<message>Entry IX with type Stream in AppearanceCharacteristics is not one of objects XObjectFormType1, XObjectImage</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-IX" testNumber="8"/>
			<description>Entry IX in AppearanceCharacteristics shall have type Stream</description>
			<test>containsIX == false || IXHasTypeStream == true</test>
			<error>
				<message>Entry IX in AppearanceCharacteristics has type %1 instead of type Stream</message>
				<arguments>
					<argument>IXType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-IX-Stream" testNumber="10"/>
			<description>Entry IX with type Stream in AppearanceCharacteristics shall be indirect</description>
			<test>IXHasTypeStream != true || isIXIndirect == true</test>
			<error>
				<message>Entry IX with type Stream in AppearanceCharacteristics is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-R" testNumber="8"/>
			<description>Entry R in AppearanceCharacteristics shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in AppearanceCharacteristics has type %1 instead of type Integer</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-RC" testNumber="8"/>
			<description>Entry RC in AppearanceCharacteristics shall have type StringText</description>
			<test>containsRC == false || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AppearanceCharacteristics has type %1 instead of type StringText</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-RI-Stream" testNumber="17"/>
			<description>Entry RI with type Stream in AppearanceCharacteristics shall be one of objects XObjectFormType1, XObjectImage</description>
			<test>RIHasTypeStream != true || RI_size == 1</test>
			<error>
				<message>Entry RI with type Stream in AppearanceCharacteristics is not one of objects XObjectFormType1, XObjectImage</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-RI" testNumber="8"/>
			<description>Entry RI in AppearanceCharacteristics shall have type Stream</description>
			<test>containsRI == false || RIHasTypeStream == true</test>
			<error>
				<message>Entry RI in AppearanceCharacteristics has type %1 instead of type Stream</message>
				<arguments>
					<argument>RIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-RI-Stream" testNumber="10"/>
			<description>Entry RI with type Stream in AppearanceCharacteristics shall be indirect</description>
			<test>RIHasTypeStream != true || isRIIndirect == true</test>
			<error>
				<message>Entry RI with type Stream in AppearanceCharacteristics is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-TP" testNumber="8"/>
			<description>Entry TP in AppearanceCharacteristics shall have type Integer</description>
			<test>containsTP == false || TPHasTypeInteger == true</test>
			<error>
				<message>Entry TP in AppearanceCharacteristics has type %1 instead of type Integer</message>
				<arguments>
					<argument>TPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="AppearanceCharacteristics-TP-Integer" testNumber="6"/>
			<description>Entry TP with type Integer in AppearanceCharacteristics shall have one of values: 0, 1, 2, 3, 4, 5, 6</description>
			<test>TPHasTypeInteger != true || TPIntegerValue == 0 || TPIntegerValue == 1 || TPIntegerValue == 2 || TPIntegerValue == 3 || TPIntegerValue == 4 || TPIntegerValue == 5 || TPIntegerValue == 6</test>
			<error>
				<message>Entry TP with type Integer in AppearanceCharacteristics has incorrect value %1 instead of 0, 1, 2, 3, 4, 5, 6</message>
				<arguments>
					<argument>TPIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="AppearancePrinterMark" testNumber="1"/>
			<description>AppearancePrinterMark shall not contain entries except D, N, R</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AppearancePrinterMark contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="AppearancePrinterMark-D" testNumber="8"/>
			<description>Entry D in AppearancePrinterMark shall have one of types: Dictionary, Stream</description>
			<test>containsD == false || DHasTypeDictionary == true || DHasTypeStream == true</test>
			<error>
				<message>Entry D in AppearancePrinterMark has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="AppearancePrinterMark-D-Stream" testNumber="10"/>
			<description>Entry D with type Stream in AppearancePrinterMark shall be indirect</description>
			<test>DHasTypeStream != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Stream in AppearancePrinterMark is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="AppearancePrinterMark-N" testNumber="8"/>
			<description>Entry N in AppearancePrinterMark shall have one of types: Dictionary, Stream</description>
			<test>containsN == false || NHasTypeDictionary == true || NHasTypeStream == true</test>
			<error>
				<message>Entry N in AppearancePrinterMark has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="AppearancePrinterMark-N" testNumber="7"/>
			<description>Entry N in AppearancePrinterMark is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in AppearancePrinterMark is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="AppearancePrinterMark-N-Stream" testNumber="10"/>
			<description>Entry N with type Stream in AppearancePrinterMark shall be indirect</description>
			<test>NHasTypeStream != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Stream in AppearancePrinterMark is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="AppearancePrinterMark-R" testNumber="8"/>
			<description>Entry R in AppearancePrinterMark shall have one of types: Dictionary, Stream</description>
			<test>containsR == false || RHasTypeDictionary == true || RHasTypeStream == true</test>
			<error>
				<message>Entry R in AppearancePrinterMark has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="AppearancePrinterMark-R-Stream" testNumber="10"/>
			<description>Entry R with type Stream in AppearancePrinterMark shall be indirect</description>
			<test>RHasTypeStream != true || isRIndirect == true</test>
			<error>
				<message>Entry R with type Stream in AppearancePrinterMark is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMarkSubDictEntry">
			<id specification="ISO_32000_1_7" clause="AppearancePrinterMarkSubDictEntry" testNumber="8"/>
			<description>Entry in AppearancePrinterMarkSubDict shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in AppearancePrinterMarkSubDict has type %1 instead of type Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMarkSubDictEntry">
			<id specification="ISO_32000_1_7" clause="AppearancePrinterMarkSubDictEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in AppearancePrinterMarkSubDict shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in AppearancePrinterMarkSubDict is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceSubDictEntry">
			<id specification="ISO_32000_1_7" clause="AppearanceSubDictEntry" testNumber="8"/>
			<description>Entry in AppearanceSubDict shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in AppearanceSubDict has type %1 instead of type Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceSubDictEntry">
			<id specification="ISO_32000_1_7" clause="AppearanceSubDictEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in AppearanceSubDict shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in AppearanceSubDict is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="AppearanceTrapNet" testNumber="1"/>
			<description>AppearanceTrapNet shall not contain entries except D, N, R</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>AppearanceTrapNet contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="AppearanceTrapNet-D" testNumber="8"/>
			<description>Entry D in AppearanceTrapNet shall have one of types: Dictionary, Stream</description>
			<test>containsD == false || DHasTypeDictionary == true || DHasTypeStream == true</test>
			<error>
				<message>Entry D in AppearanceTrapNet has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="AppearanceTrapNet-D-Stream" testNumber="10"/>
			<description>Entry D with type Stream in AppearanceTrapNet shall be indirect</description>
			<test>DHasTypeStream != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Stream in AppearanceTrapNet is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="AppearanceTrapNet-N" testNumber="8"/>
			<description>Entry N in AppearanceTrapNet shall have one of types: Dictionary, Stream</description>
			<test>containsN == false || NHasTypeDictionary == true || NHasTypeStream == true</test>
			<error>
				<message>Entry N in AppearanceTrapNet has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="AppearanceTrapNet-N" testNumber="7"/>
			<description>Entry N in AppearanceTrapNet is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in AppearanceTrapNet is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="AppearanceTrapNet-N-Stream" testNumber="10"/>
			<description>Entry N with type Stream in AppearanceTrapNet shall be indirect</description>
			<test>NHasTypeStream != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Stream in AppearanceTrapNet is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="AppearanceTrapNet-R" testNumber="8"/>
			<description>Entry R in AppearanceTrapNet shall have one of types: Dictionary, Stream</description>
			<test>containsR == false || RHasTypeDictionary == true || RHasTypeStream == true</test>
			<error>
				<message>Entry R in AppearanceTrapNet has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="AppearanceTrapNet-R-Stream" testNumber="10"/>
			<description>Entry R with type Stream in AppearanceTrapNet shall be indirect</description>
			<test>RHasTypeStream != true || isRIndirect == true</test>
			<error>
				<message>Entry R with type Stream in AppearanceTrapNet is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNetSubDictEntry">
			<id specification="ISO_32000_1_7" clause="AppearanceTrapNetSubDictEntry" testNumber="8"/>
			<description>Entry in AppearanceTrapNetSubDict shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in AppearanceTrapNetSubDict has type %1 instead of type Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNetSubDictEntry">
			<id specification="ISO_32000_1_7" clause="AppearanceTrapNetSubDictEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in AppearanceTrapNetSubDict shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in AppearanceTrapNetSubDict is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DCrossSectionEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DCrossSectionEntry" testNumber="8"/>
			<description>Entry in ArrayOf3DCrossSection shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOf3DCrossSection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DNodeEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DNodeEntry" testNumber="8"/>
			<description>Entry in ArrayOf3DNode shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOf3DNode has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DTransMatrix" testNumber="2"/>
			<description>ArrayOf3DTransMatrix shall contain exactly 12 elements</description>
			<test>size == 12</test>
			<error>
				<message>ArrayOf3DTransMatrix contains %1 element(s) instead of 12</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DTransMatrix-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf3DTransMatrix has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DTransMatrix-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf3DTransMatrix has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DTransMatrix-10" testNumber="8"/>
			<description>Entry 10 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 10 || entry10HasTypeNumber == true</test>
			<error>
				<message>Entry 10 in ArrayOf3DTransMatrix has type %1 instead of type Number</message>
				<arguments>
					<argument>entry10Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DTransMatrix-11" testNumber="8"/>
			<description>Entry 11 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 11 || entry11HasTypeNumber == true</test>
			<error>
				<message>Entry 11 in ArrayOf3DTransMatrix has type %1 instead of type Number</message>
				<arguments>
					<argument>entry11Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DTransMatrix-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf3DTransMatrix has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DTransMatrix-3" testNumber="8"/>
			<description>Entry 3 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf3DTransMatrix has type %1 instead of type Number</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DTransMatrix-4" testNumber="8"/>
			<description>Entry 4 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf3DTransMatrix has type %1 instead of type Number</message>
				<arguments>
					<argument>entry4Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DTransMatrix-5" testNumber="8"/>
			<description>Entry 5 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf3DTransMatrix has type %1 instead of type Number</message>
				<arguments>
					<argument>entry5Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DTransMatrix-6" testNumber="8"/>
			<description>Entry 6 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 6 || entry6HasTypeNumber == true</test>
			<error>
				<message>Entry 6 in ArrayOf3DTransMatrix has type %1 instead of type Number</message>
				<arguments>
					<argument>entry6Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DTransMatrix-7" testNumber="8"/>
			<description>Entry 7 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 7 || entry7HasTypeNumber == true</test>
			<error>
				<message>Entry 7 in ArrayOf3DTransMatrix has type %1 instead of type Number</message>
				<arguments>
					<argument>entry7Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DTransMatrix-8" testNumber="8"/>
			<description>Entry 8 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 8 || entry8HasTypeNumber == true</test>
			<error>
				<message>Entry 8 in ArrayOf3DTransMatrix has type %1 instead of type Number</message>
				<arguments>
					<argument>entry8Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DTransMatrix-9" testNumber="8"/>
			<description>Entry 9 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 9 || entry9HasTypeNumber == true</test>
			<error>
				<message>Entry 9 in ArrayOf3DTransMatrix has type %1 instead of type Number</message>
				<arguments>
					<argument>entry9Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DViewAddEntriesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DViewAddEntriesEntry" testNumber="8"/>
			<description>Entry in ArrayOf3DViewAddEntries shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOf3DViewAddEntries has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DViewAddEntriesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DViewAddEntriesEntry" testNumber="23"/>
			<description>Entry in ArrayOf3DViewAddEntries can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry %keyName% in ArrayOf3DViewAddEntries is present</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DViewAddEntriesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DViewAddEntriesEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOf3DViewAddEntries shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOf3DViewAddEntries is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DViewEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DViewEntry" testNumber="8"/>
			<description>Entry in ArrayOf3DView shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOf3DView has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DViewEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOf3DViewEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOf3DView shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOf3DView is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf3PDUNames" testNumber="2"/>
			<description>ArrayOf3PDUNames shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOf3PDUNames contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf3PDUNames-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf3PDUNames shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ArrayOf3PDUNames has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf3PDUNames-0" testNumber="23"/>
			<description>Entry 0 in ArrayOf3PDUNames can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>contains0 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry 0 in ArrayOf3PDUNames is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf3PDUNames-0-Name" testNumber="6"/>
			<description>Entry 0 with type Name in ArrayOf3PDUNames shall have one of values: A, KM, SQKM, DEG, SQFT, USFT, M, FT, SQM, GRD, HA, MI, SQMI, NM</description>
			<test>entry0HasTypeName != true || entry0NameValue == "M" || entry0NameValue == "KM" || entry0NameValue == "FT" || entry0NameValue == "USFT" || entry0NameValue == "MI" || entry0NameValue == "NM" || entry0NameValue == "SQM" || entry0NameValue == "HA" || entry0NameValue == "SQKM" || entry0NameValue == "SQFT" || entry0NameValue == "A" || entry0NameValue == "SQMI" || entry0NameValue == "DEG" || entry0NameValue == "GRD"</test>
			<error>
				<message>Entry 0 with type Name in ArrayOf3PDUNames has incorrect value %1 instead of A, KM, SQKM, DEG, SQFT, USFT, M, FT, SQM, GRD, HA, MI, SQMI, NM</message>
				<arguments>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf3PDUNames-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf3PDUNames shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in ArrayOf3PDUNames has type %1 instead of type Name</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf3PDUNames-1" testNumber="23"/>
			<description>Entry 1 in ArrayOf3PDUNames can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>contains1 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry 1 in ArrayOf3PDUNames is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf3PDUNames-1-Name" testNumber="6"/>
			<description>Entry 1 with type Name in ArrayOf3PDUNames shall have one of values: A, KM, SQKM, DEG, SQFT, USFT, M, FT, SQM, GRD, HA, MI, SQMI, NM</description>
			<test>entry1HasTypeName != true || entry1NameValue == "M" || entry1NameValue == "KM" || entry1NameValue == "FT" || entry1NameValue == "USFT" || entry1NameValue == "MI" || entry1NameValue == "NM" || entry1NameValue == "SQM" || entry1NameValue == "HA" || entry1NameValue == "SQKM" || entry1NameValue == "SQFT" || entry1NameValue == "A" || entry1NameValue == "SQMI" || entry1NameValue == "DEG" || entry1NameValue == "GRD"</test>
			<error>
				<message>Entry 1 with type Name in ArrayOf3PDUNames has incorrect value %1 instead of A, KM, SQKM, DEG, SQFT, USFT, M, FT, SQM, GRD, HA, MI, SQMI, NM</message>
				<arguments>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf3PDUNames-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf3PDUNames shall have type Name</description>
			<test>size &lt;= 2 || entry2HasTypeName == true</test>
			<error>
				<message>Entry 2 in ArrayOf3PDUNames has type %1 instead of type Name</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf3PDUNames-2" testNumber="23"/>
			<description>Entry 2 in ArrayOf3PDUNames can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>contains2 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry 2 in ArrayOf3PDUNames is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf3PDUNames-2-Name" testNumber="6"/>
			<description>Entry 2 with type Name in ArrayOf3PDUNames shall have one of values: A, KM, SQKM, DEG, SQFT, USFT, M, FT, SQM, GRD, HA, MI, SQMI, NM</description>
			<test>entry2HasTypeName != true || entry2NameValue == "M" || entry2NameValue == "KM" || entry2NameValue == "FT" || entry2NameValue == "USFT" || entry2NameValue == "MI" || entry2NameValue == "NM" || entry2NameValue == "SQM" || entry2NameValue == "HA" || entry2NameValue == "SQKM" || entry2NameValue == "SQFT" || entry2NameValue == "A" || entry2NameValue == "SQMI" || entry2NameValue == "DEG" || entry2NameValue == "GRD"</test>
			<error>
				<message>Entry 2 with type Name in ArrayOf3PDUNames has incorrect value %1 instead of A, KM, SQKM, DEG, SQFT, USFT, M, FT, SQM, GRD, HA, MI, SQMI, NM</message>
				<arguments>
					<argument>entry2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions" testNumber="2"/>
			<description>ArrayOf4Functions shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf4Functions contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions-0-Dictionary" testNumber="17"/>
			<description>Entry 0 with type Dictionary in ArrayOf4Functions shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOf4Functions is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions-0-Stream" testNumber="17"/>
			<description>Entry 0 with type Stream in ArrayOf4Functions shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry0HasTypeStream != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Stream in ArrayOf4Functions is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf4Functions shall have one of types: Dictionary, Stream</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeStream == true</test>
			<error>
				<message>Entry 0 in ArrayOf4Functions has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions-0-Stream" testNumber="10"/>
			<description>Entry 0 with type Stream in ArrayOf4Functions shall be indirect</description>
			<test>entry0HasTypeStream != true || isentry0Indirect == true</test>
			<error>
				<message>Entry 0 with type Stream in ArrayOf4Functions is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions-1-Dictionary" testNumber="17"/>
			<description>Entry 1 with type Dictionary in ArrayOf4Functions shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in ArrayOf4Functions is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions-1-Stream" testNumber="17"/>
			<description>Entry 1 with type Stream in ArrayOf4Functions shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry1HasTypeStream != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Stream in ArrayOf4Functions is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf4Functions shall have one of types: Dictionary, Stream</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true || entry1HasTypeStream == true</test>
			<error>
				<message>Entry 1 in ArrayOf4Functions has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions-1-Stream" testNumber="10"/>
			<description>Entry 1 with type Stream in ArrayOf4Functions shall be indirect</description>
			<test>entry1HasTypeStream != true || isentry1Indirect == true</test>
			<error>
				<message>Entry 1 with type Stream in ArrayOf4Functions is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions-2-Dictionary" testNumber="17"/>
			<description>Entry 2 with type Dictionary in ArrayOf4Functions shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry2HasTypeDictionary != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Dictionary in ArrayOf4Functions is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions-2-Stream" testNumber="17"/>
			<description>Entry 2 with type Stream in ArrayOf4Functions shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry2HasTypeStream != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Stream in ArrayOf4Functions is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf4Functions shall have one of types: Dictionary, Stream</description>
			<test>size &lt;= 2 || entry2HasTypeDictionary == true || entry2HasTypeStream == true</test>
			<error>
				<message>Entry 2 in ArrayOf4Functions has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions-2-Stream" testNumber="10"/>
			<description>Entry 2 with type Stream in ArrayOf4Functions shall be indirect</description>
			<test>entry2HasTypeStream != true || isentry2Indirect == true</test>
			<error>
				<message>Entry 2 with type Stream in ArrayOf4Functions is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions-3-Dictionary" testNumber="17"/>
			<description>Entry 3 with type Dictionary in ArrayOf4Functions shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry3HasTypeDictionary != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Dictionary in ArrayOf4Functions is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions-3-Stream" testNumber="17"/>
			<description>Entry 3 with type Stream in ArrayOf4Functions shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry3HasTypeStream != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Stream in ArrayOf4Functions is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions-3" testNumber="8"/>
			<description>Entry 3 in ArrayOf4Functions shall have one of types: Dictionary, Stream</description>
			<test>size &lt;= 3 || entry3HasTypeDictionary == true || entry3HasTypeStream == true</test>
			<error>
				<message>Entry 3 in ArrayOf4Functions has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="ArrayOf4Functions-3-Stream" testNumber="10"/>
			<description>Entry 3 with type Stream in ArrayOf4Functions shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in ArrayOf4Functions is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionHideAnnotsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfActionHideAnnotsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfActionHideAnnots shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfActionHideAnnots is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork, AnnotWatermark, Annot3D, AnnotRedact, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionHideAnnotsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfActionHideAnnotsEntry" testNumber="8"/>
			<description>Entry in ArrayOfActionHideAnnots shall have one of types: Dictionary, StringText</description>
			<test>HasTypeDictionary == true || HasTypeStringText == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfActionHideAnnots has type %1 instead of one of types: Dictionary, StringText</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionHideAnnotsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfActionHideAnnotsEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOfActionHideAnnots shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfActionHideAnnots is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionHideAnnotsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfActionHideAnnotsEntry-StringText" testNumber="9"/>
			<description>Entry with type StringText in ArrayOfActionHideAnnots shall satisfy special case: fn:Eval(fn:IsFieldName(@*))</description>
			<test>HasTypeStringText != true || (IsFieldName == true)</test>
			<error>
				<message>Entry %keyName% with type StringText in ArrayOfActionHideAnnots does not satisfy special case: fn:Eval(fn:IsFieldName(@*))</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfActionsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfActions shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfActions is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfActionsEntry" testNumber="8"/>
			<description>Entry in ArrayOfActions shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfActions has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAnnotStatesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfAnnotStatesEntry" testNumber="8"/>
			<description>Entry in ArrayOfAnnotStates shall have one of types: Name, Null</description>
			<test>HasTypeName == true || HasTypeNull == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfAnnotStates has type %1 instead of one of types: Name, Null</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAnnotsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfAnnotsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfAnnots shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork, AnnotWatermark, Annot3D, AnnotRedact, fn:Extension(ADBE_Extn3, AnnotProjection), fn:Extension(ADBE_Extn3, AnnotRichMedia), AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfAnnots is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork, AnnotWatermark, Annot3D, AnnotRedact, fn:Extension(ADBE_Extn3, AnnotProjection), fn:Extension(ADBE_Extn3, AnnotRichMedia), AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAnnotsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfAnnotsEntry" testNumber="8"/>
			<description>Entry in ArrayOfAnnots shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfAnnots has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysInkListEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfArraysInkListEntry" testNumber="8"/>
			<description>Entry in ArrayOfArraysInkList shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfArraysInkList has type %1 instead of type Array</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysRBGroupsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfArraysRBGroupsEntry" testNumber="8"/>
			<description>Entry in ArrayOfArraysRBGroups shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfArraysRBGroups has type %1 instead of type Array</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysRBGroupsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfArraysRBGroupsEntry-Array" testNumber="9"/>
			<description>Entry with type Array in ArrayOfArraysRBGroups shall satisfy special case: fn:Eval(fn:ArrayLength(*) &gt; 0)</description>
			<test>HasTypeArray != true || (ArraySize &gt; 0)</test>
			<error>
				<message>Entry %keyName% with type Array in ArrayOfArraysRBGroups does not satisfy special case: fn:Eval(fn:ArrayLength(*) &gt; 0)</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysURLStringsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfArraysURLStringsEntry" testNumber="8"/>
			<description>Entry in ArrayOfArraysURLStrings shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfArraysURLStrings has type %1 instead of type Array</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysXPTSValuesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfArraysXPTSValuesEntry" testNumber="8"/>
			<description>Entry in ArrayOfArraysXPTSValues shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfArraysXPTSValues has type %1 instead of type Array</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysXPTSValuesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfArraysXPTSValuesEntry" testNumber="23"/>
			<description>Entry in ArrayOfArraysXPTSValues can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfArraysXPTSValues is present</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysXPTSValuesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfArraysXPTSValuesEntry-Array" testNumber="9"/>
			<description>Entry with type Array in ArrayOfArraysXPTSValues shall satisfy special case: fn:Eval(fn:ArrayLength(*) == fn:ArrayLength(parent::Names))</description>
			<test>HasTypeArray != true || (parentNamesHasTypeArray == false || ArraySize == parentNamesArraySize)</test>
			<error>
				<message>Entry %keyName% with type Array in ArrayOfArraysXPTSValues does not satisfy special case: fn:Eval(fn:ArrayLength(*) == fn:ArrayLength(parent::Names))</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeObjectsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfAttributeObjectsEntry" testNumber="8"/>
			<description>Entry in ArrayOfAttributeObjects shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfAttributeObjects has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfAttributeRevisionsSubArray" testNumber="24"/>
			<description>ArrayOfAttributeRevisionsSubArray shall contain 1 to 2 elements</description>
			<test>size &gt;= 1 &amp;&amp; size &lt;= 2</test>
			<error>
				<message>ArrayOfAttributeRevisionsSubArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfAttributeRevisionsSubArray-0" testNumber="8"/>
			<description>Entry 0 in ArrayOfAttributeRevisionsSubArray shall have one of types: Dictionary, Stream</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeStream == true</test>
			<error>
				<message>Entry 0 in ArrayOfAttributeRevisionsSubArray has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfAttributeRevisionsSubArray-0-Stream" testNumber="10"/>
			<description>Entry 0 with type Stream in ArrayOfAttributeRevisionsSubArray shall be indirect</description>
			<test>entry0HasTypeStream != true || isentry0Indirect == true</test>
			<error>
				<message>Entry 0 with type Stream in ArrayOfAttributeRevisionsSubArray is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfAttributeRevisionsSubArray-1" testNumber="8"/>
			<description>Entry 1 in ArrayOfAttributeRevisionsSubArray shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfAttributeRevisionsSubArray has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfAttributeRevisionsSubArray-1-Integer" testNumber="14"/>
			<description>Entry 1 with type Integer in ArrayOfAttributeRevisionsSubArray shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfAttributeRevisionsSubArray does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBeadsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfBeadsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfBeads shall be one of objects BeadFirst, Bead</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfBeads is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBeadsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfBeadsEntry" testNumber="8"/>
			<description>Entry in ArrayOfBeads shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfBeads has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBeadsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfBeadsEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOfBeads shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfBeads is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBlendModesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfBlendModesEntry" testNumber="8"/>
			<description>Entry in ArrayOfBlendModes shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfBlendModes has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBlendModesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfBlendModesEntry-Name" testNumber="19"/>
			<description>Entry with type Name in ArrayOfBlendModes should not have deprecated value Compatible</description>
			<test>NameValue != "Compatible"</test>
			<error>
				<message>Entry %keyName% with type Name in ArrayOfBlendModes has deprecated value Compatible</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBlendModesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfBlendModesEntry-Name" testNumber="6"/>
			<description>Entry with type Name in ArrayOfBlendModes shall have one of values: Screen, ColorDodge, Saturation, Color, Luminosity, Darken, Difference, Compatible, Normal, SoftLight, ColorBurn, Multiply, Exclusion, HardLight, Hue, Overlay, Lighten</description>
			<test>HasTypeName != true || NameValue == "Compatible" || NameValue == "Normal" || NameValue == "Multiply" || NameValue == "Screen" || NameValue == "Difference" || NameValue == "Darken" || NameValue == "Lighten" || NameValue == "ColorDodge" || NameValue == "ColorBurn" || NameValue == "Exclusion" || NameValue == "HardLight" || NameValue == "Overlay" || NameValue == "SoftLight" || NameValue == "Luminosity" || NameValue == "Hue" || NameValue == "Saturation" || NameValue == "Color"</test>
			<error>
				<message>Entry %keyName% with type Name in ArrayOfBlendModes has incorrect value %1 instead of Screen, ColorDodge, Saturation, Color, Luminosity, Darken, Difference, Compatible, Normal, SoftLight, ColorBurn, Multiply, Exclusion, HardLight, Hue, Overlay, Lighten</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBooleansGeneralEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfBooleansGeneralEntry" testNumber="8"/>
			<description>Entry in ArrayOfBooleansGeneral shall have type Boolean</description>
			<test>HasTypeBoolean == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfBooleansGeneral has type %1 instead of type Boolean</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsW2Entry">
			<id specification="ISO_32000_1_7" clause="ArrayOfCIDGlyphMetricsW2Entry" testNumber="8"/>
			<description>Entry in ArrayOfCIDGlyphMetricsW2 shall have one of types: Array, Integer, Number</description>
			<test>HasTypeArray == true || HasTypeInteger == true || HasTypeNumber == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfCIDGlyphMetricsW2 has type %1 instead of one of types: Array, Integer, Number</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsW2Entry">
			<id specification="ISO_32000_1_7" clause="ArrayOfCIDGlyphMetricsW2Entry-Array" testNumber="9"/>
			<description>Entry with type Array in ArrayOfCIDGlyphMetricsW2 shall satisfy special case: fn:Eval((fn:ArrayLength(*) mod 3) == 0)</description>
			<test>HasTypeArray != true || ((ArraySize % 3) == 0)</test>
			<error>
				<message>Entry %keyName% with type Array in ArrayOfCIDGlyphMetricsW2 does not satisfy special case: fn:Eval((fn:ArrayLength(*) mod 3) == 0)</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsWEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfCIDGlyphMetricsWEntry" testNumber="8"/>
			<description>Entry in ArrayOfCIDGlyphMetricsW shall have one of types: Array, Integer, Number</description>
			<test>HasTypeArray == true || HasTypeInteger == true || HasTypeNumber == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfCIDGlyphMetricsW has type %1 instead of one of types: Array, Integer, Number</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfClassNamesRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfClassNamesRevisionsSubArray" testNumber="24"/>
			<description>ArrayOfClassNamesRevisionsSubArray shall contain 1 to 2 elements</description>
			<test>size &gt;= 1 &amp;&amp; size &lt;= 2</test>
			<error>
				<message>ArrayOfClassNamesRevisionsSubArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfClassNamesRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfClassNamesRevisionsSubArray-0" testNumber="8"/>
			<description>Entry 0 in ArrayOfClassNamesRevisionsSubArray shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ArrayOfClassNamesRevisionsSubArray has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfClassNamesRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfClassNamesRevisionsSubArray-1" testNumber="8"/>
			<description>Entry 1 in ArrayOfClassNamesRevisionsSubArray shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfClassNamesRevisionsSubArray has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfClassNamesRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfClassNamesRevisionsSubArray-1-Integer" testNumber="14"/>
			<description>Entry 1 with type Integer in ArrayOfClassNamesRevisionsSubArray shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfClassNamesRevisionsSubArray does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCompressionFilterNamesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfCompressionFilterNamesEntry" testNumber="8"/>
			<description>Entry in ArrayOfCompressionFilterNames shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfCompressionFilterNames has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCompressionFilterNamesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfCompressionFilterNamesEntry-Name" testNumber="6"/>
			<description>Entry with type Name in ArrayOfCompressionFilterNames shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>HasTypeName != true || NameValue == "ASCIIHexDecode" || NameValue == "ASCII85Decode" || NameValue == "LZWDecode" || NameValue == "FlateDecode" || NameValue == "RunLengthDecode" || NameValue == "Crypt"</test>
			<error>
				<message>Entry %keyName% with type Name in ArrayOfCompressionFilterNames has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDPartArraysEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfDPartArraysEntry" testNumber="8"/>
			<description>Entry in ArrayOfDPartArrays shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfDPartArrays has type %1 instead of type Array</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDPartArraysEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfDPartArraysEntry" testNumber="23"/>
			<description>Entry in ArrayOfDPartArrays can only be present, if satisfy predicate fn:Eval(fn:Extension(PDF_VT2, 1.6) || 2.0)</description>
			<test>hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfDPartArrays is present</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDPartsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfDPartsEntry" testNumber="8"/>
			<description>Entry in ArrayOfDParts shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfDParts has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDPartsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfDPartsEntry" testNumber="23"/>
			<description>Entry in ArrayOfDParts can only be present, if satisfy predicate fn:Eval(fn:Extension(PDF_VT2, 1.6) || 2.0)</description>
			<test>hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfDParts is present</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDPartsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfDPartsEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOfDParts shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfDParts is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDashPatternsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfDashPatternsEntry" testNumber="8"/>
			<description>Entry in ArrayOfDashPatterns shall have type Number</description>
			<test>HasTypeNumber == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfDashPatterns has type %1 instead of type Number</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDecodeParamsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfDecodeParamsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfDecodeParams shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfDecodeParams is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDecodeParamsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfDecodeParamsEntry" testNumber="8"/>
			<description>Entry in ArrayOfDecodeParams shall have one of types: Dictionary, Null</description>
			<test>HasTypeDictionary == true || HasTypeNull == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfDecodeParams has type %1 instead of one of types: Dictionary, Null</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDescendantFonts">
			<id specification="ISO_32000_1_7" clause="ArrayOfDescendantFonts" testNumber="2"/>
			<description>ArrayOfDescendantFonts shall contain exactly 1 element</description>
			<test>size == 1</test>
			<error>
				<message>ArrayOfDescendantFonts contains %1 element(s) instead of 1</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDescendantFonts">
			<id specification="ISO_32000_1_7" clause="ArrayOfDescendantFonts-0-Dictionary" testNumber="17"/>
			<description>Entry 0 with type Dictionary in ArrayOfDescendantFonts shall be one of objects FontCIDType0, FontCIDType2</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfDescendantFonts is not one of objects FontCIDType0, FontCIDType2</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDescendantFonts">
			<id specification="ISO_32000_1_7" clause="ArrayOfDescendantFonts-0" testNumber="8"/>
			<description>Entry 0 in ArrayOfDescendantFonts shall have type Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in ArrayOfDescendantFonts has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDifferencesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfDifferencesEntry" testNumber="8"/>
			<description>Entry in ArrayOfDifferences shall have one of types: Integer, Name</description>
			<test>HasTypeInteger == true || HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfDifferences has type %1 instead of one of types: Integer, Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDigestMethodEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfDigestMethodEntry" testNumber="8"/>
			<description>Entry in ArrayOfDigestMethod shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfDigestMethod has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDigestMethodEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfDigestMethodEntry-Name" testNumber="6"/>
			<description>Entry with type Name in ArrayOfDigestMethod shall have one of values: SHA256, SHA3-512, SHA1, SHAKE256, SHA384, RIPEMD160, SHA3-384, SHA3-256, SHA512</description>
			<test>HasTypeName != true || NameValue == "SHA1" || NameValue == "SHA256" || NameValue == "SHA384" || NameValue == "SHA512" || NameValue == "RIPEMD160" || NameValue == "SHA3-256" || NameValue == "SHA3-384" || NameValue == "SHA3-512" || NameValue == "SHAKE256"</test>
			<error>
				<message>Entry %keyName% with type Name in ArrayOfDigestMethod has incorrect value %1 instead of SHA256, SHA3-512, SHA1, SHAKE256, SHA384, RIPEMD160, SHA3-384, SHA3-256, SHA512</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_7" clause="ArrayOfDuration" testNumber="2"/>
			<description>ArrayOfDuration shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfDuration contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_7" clause="ArrayOfDuration-0" testNumber="8"/>
			<description>Entry 0 in ArrayOfDuration shall have one of types: Integer, StringByte</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true || entry0HasTypeStringByte == true</test>
			<error>
				<message>Entry 0 in ArrayOfDuration has type %1 instead of one of types: Integer, StringByte</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_7" clause="ArrayOfDuration-0-Integer" testNumber="14"/>
			<description>Entry 0 with type Integer in ArrayOfDuration shall satisfy possible value predicate: fn:Eval(@0 &gt; 0)</description>
			<test>entry0HasTypeInteger != true || entry0IntegerValue &gt; 0</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOfDuration does not satisfy possible value predicate: fn:Eval(@0 &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_7" clause="ArrayOfDuration-0-StringByte" testNumber="14"/>
			<description>Entry 0 with type StringByte in ArrayOfDuration shall satisfy possible value predicate: fn:Eval(fn:StringLength(0) == 8)</description>
			<test>entry0HasTypeStringByte != true || entry0StringSize == 8</test>
			<error>
				<message>Entry 0 with type StringByte in ArrayOfDuration does not satisfy possible value predicate: fn:Eval(fn:StringLength(0) == 8)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_7" clause="ArrayOfDuration-1" testNumber="8"/>
			<description>Entry 1 in ArrayOfDuration shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfDuration has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_7" clause="ArrayOfDuration-1-Integer" testNumber="14"/>
			<description>Entry 1 with type Integer in ArrayOfDuration shall satisfy possible value predicate: fn:Eval(@1 &gt; 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt; 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfDuration does not satisfy possible value predicate: fn:Eval(@1 &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldChoiceOptEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfFieldChoiceOptEntry" testNumber="8"/>
			<description>Entry in ArrayOfFieldChoiceOpt shall have one of types: Array, StringText</description>
			<test>HasTypeArray == true || HasTypeStringText == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfFieldChoiceOpt has type %1 instead of one of types: Array, StringText</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldIDEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfFieldIDEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfFieldID shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfFieldID is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldIDEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfFieldIDEntry" testNumber="8"/>
			<description>Entry in ArrayOfFieldID shall have one of types: Dictionary, StringText</description>
			<test>HasTypeDictionary == true || HasTypeStringText == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfFieldID has type %1 instead of one of types: Dictionary, StringText</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfFieldsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfFields shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidget, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfFields is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidget, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField, AnnotWidgetFieldSig, AnnotWidgetFieldChoice, AnnotWidgetField, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldTx, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnPush</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfFieldsEntry" testNumber="8"/>
			<description>Entry in ArrayOfFields shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfFields has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFileSpecifications">
			<id specification="ISO_32000_1_7" clause="ArrayOfFileSpecifications" testNumber="4"/>
			<description>ArrayOfFileSpecifications shall contain at least 1 element</description>
			<test>size &gt;= 1</test>
			<error>
				<message>ArrayOfFileSpecifications contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFileSpecifications">
			<id specification="ISO_32000_1_7" clause="ArrayOfFileSpecifications-0" testNumber="8"/>
			<description>Entry 0 in ArrayOfFileSpecifications shall have type Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in ArrayOfFileSpecifications has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFileSpecifications">
			<id specification="ISO_32000_1_7" clause="ArrayOfFileSpecifications-0" testNumber="23"/>
			<description>Entry 0 in ArrayOfFileSpecifications can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>contains0 == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry 0 in ArrayOfFileSpecifications is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFileSpecificationsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfFileSpecificationsEntry" testNumber="8"/>
			<description>Entry in ArrayOfFileSpecifications shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfFileSpecifications has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFileSpecificationsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfFileSpecificationsEntry" testNumber="23"/>
			<description>Entry in ArrayOfFileSpecifications can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfFileSpecifications is present</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFilterNamesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfFilterNamesEntry" testNumber="8"/>
			<description>Entry in ArrayOfFilterNames shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfFilterNames has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFilterNamesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfFilterNamesEntry-Name" testNumber="6"/>
			<description>Entry with type Name in ArrayOfFilterNames shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>HasTypeName != true || NameValue == "ASCIIHexDecode" || NameValue == "ASCII85Decode" || NameValue == "LZWDecode" || NameValue == "FlateDecode" || NameValue == "RunLengthDecode" || NameValue == "CCITTFaxDecode" || NameValue == "JBIG2Decode" || NameValue == "DCTDecode" || NameValue == "JPXDecode" || NameValue == "Crypt"</test>
			<error>
				<message>Entry %keyName% with type Name in ArrayOfFilterNames has incorrect value %1 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_7" clause="ArrayOfFontAndSize" testNumber="2"/>
			<description>ArrayOfFontAndSize shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfFontAndSize contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_7" clause="ArrayOfFontAndSize-0-Dictionary" testNumber="17"/>
			<description>Entry 0 with type Dictionary in ArrayOfFontAndSize shall be one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfFontAndSize is not one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_7" clause="ArrayOfFontAndSize-0" testNumber="8"/>
			<description>Entry 0 in ArrayOfFontAndSize shall have type Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in ArrayOfFontAndSize has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_7" clause="ArrayOfFontAndSize-0-Dictionary" testNumber="10"/>
			<description>Entry 0 with type Dictionary in ArrayOfFontAndSize shall be indirect</description>
			<test>entry0HasTypeDictionary != true || isentry0Indirect == true</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfFontAndSize is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_7" clause="ArrayOfFontAndSize-1" testNumber="8"/>
			<description>Entry 1 in ArrayOfFontAndSize shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfFontAndSize has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfFontsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfFonts shall be one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfFonts is not one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfFontsEntry" testNumber="8"/>
			<description>Entry in ArrayOfFonts shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfFonts has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFunctionsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfFunctionsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfFunctions shall be one of objects FunctionType2, FunctionType3</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfFunctions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFunctionsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfFunctionsEntry-Stream" testNumber="17"/>
			<description>Entry with type Stream in ArrayOfFunctions shall be one of objects FunctionType0, FunctionType4</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Stream in ArrayOfFunctions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFunctionsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfFunctionsEntry" testNumber="8"/>
			<description>Entry in ArrayOfFunctions shall have one of types: Dictionary, Stream</description>
			<test>HasTypeDictionary == true || HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfFunctions has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFunctionsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfFunctionsEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in ArrayOfFunctions shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in ArrayOfFunctions is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfGSPDashPatterns">
			<id specification="ISO_32000_1_7" clause="ArrayOfGSPDashPatterns" testNumber="2"/>
			<description>ArrayOfGSPDashPatterns shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfGSPDashPatterns contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfGSPDashPatterns">
			<id specification="ISO_32000_1_7" clause="ArrayOfGSPDashPatterns-0" testNumber="8"/>
			<description>Entry 0 in ArrayOfGSPDashPatterns shall have type Array</description>
			<test>size &lt;= 0 || entry0HasTypeArray == true</test>
			<error>
				<message>Entry 0 in ArrayOfGSPDashPatterns has type %1 instead of type Array</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfGSPDashPatterns">
			<id specification="ISO_32000_1_7" clause="ArrayOfGSPDashPatterns-1" testNumber="8"/>
			<description>Entry 1 in ArrayOfGSPDashPatterns shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfGSPDashPatterns has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfImageAlternatesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfImageAlternatesEntry" testNumber="8"/>
			<description>Entry in ArrayOfImageAlternates shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfImageAlternates has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfIndirectFileSpecificationsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfIndirectFileSpecificationsEntry" testNumber="8"/>
			<description>Entry in ArrayOfIndirectFileSpecifications shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfIndirectFileSpecifications has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfIndirectFileSpecificationsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfIndirectFileSpecificationsEntry" testNumber="23"/>
			<description>Entry in ArrayOfIndirectFileSpecifications can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfIndirectFileSpecifications is present</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfIndirectFileSpecificationsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfIndirectFileSpecificationsEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOfIndirectFileSpecifications shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfIndirectFileSpecifications is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfIndirectFileSpecificationsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfIndirectFileSpecificationsEntry-Dictionary" testNumber="9"/>
			<description>Entry with type Dictionary in ArrayOfIndirectFileSpecifications shall satisfy special case: fn:InNameTree(parent::RichMediaContent::Assets)</description>
			<test>HasTypeDictionary != true || (EntryIsIndexInNameTreeparentRichMediaContentAssets == true)</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfIndirectFileSpecifications does not satisfy special case: fn:InNameTree(parent::RichMediaContent::Assets)</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfIntegersGeneralEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfIntegersGeneralEntry" testNumber="8"/>
			<description>Entry in ArrayOfIntegersGeneral shall have type Integer</description>
			<test>HasTypeInteger == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfIntegersGeneral has type %1 instead of type Integer</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfIntegersGreaterThanZeroEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfIntegersGreaterThanZeroEntry" testNumber="8"/>
			<description>Entry in ArrayOfIntegersGreaterThanZero shall have type Integer</description>
			<test>HasTypeInteger == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfIntegersGreaterThanZero has type %1 instead of type Integer</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfIntegersGreaterThanZeroEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfIntegersGreaterThanZeroEntry-Integer" testNumber="14"/>
			<description>Entry with type Integer in ArrayOfIntegersGreaterThanZero shall satisfy possible value predicate: fn:Eval(@* &gt; 0)</description>
			<test>HasTypeInteger != true || IntegerValue &gt; 0</test>
			<error>
				<message>Entry %keyName% with type Integer in ArrayOfIntegersGreaterThanZero does not satisfy possible value predicate: fn:Eval(@* &gt; 0)</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfMediaPlayerInfoEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfMediaPlayerInfoEntry" testNumber="8"/>
			<description>Entry in ArrayOfMediaPlayerInfo shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfMediaPlayerInfo has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForEnforceEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfNamesForEnforceEntry" testNumber="8"/>
			<description>Entry in ArrayOfNamesForEnforce shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfNamesForEnforce has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForEnforceEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfNamesForEnforceEntry" testNumber="23"/>
			<description>Entry in ArrayOfNamesForEnforce can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfNamesForEnforce is present</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForEnforceEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfNamesForEnforceEntry-Name" testNumber="6"/>
			<description>Entry with type Name in ArrayOfNamesForEnforce shall have value PrintScaling</description>
			<test>HasTypeName != true || NameValue == "PrintScaling"</test>
			<error>
				<message>Entry %keyName% with type Name in ArrayOfNamesForEnforce has incorrect value %1 instead of PrintScaling</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForEnforceEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfNamesForEnforceEntry-Name" testNumber="9"/>
			<description>Entry with type Name in ArrayOfNamesForEnforce shall satisfy special case: fn:Eval(parent::@PrintScaling != AppDefault)</description>
			<test>HasTypeName != true || (parentPrintScalingNameValue != "AppDefault")</test>
			<error>
				<message>Entry %keyName% with type Name in ArrayOfNamesForEnforce does not satisfy special case: fn:Eval(parent::@PrintScaling != AppDefault)</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForPrintingOrderEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfNamesForPrintingOrderEntry" testNumber="8"/>
			<description>Entry in ArrayOfNamesForPrintingOrder shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfNamesForPrintingOrder has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForProcSetEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfNamesForProcSetEntry" testNumber="8"/>
			<description>Entry in ArrayOfNamesForProcSet shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfNamesForProcSet has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForProcSetEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfNamesForProcSetEntry-Name" testNumber="6"/>
			<description>Entry with type Name in ArrayOfNamesForProcSet shall have one of values: ImageI, PDF, ImageC, ImageB, Text</description>
			<test>HasTypeName != true || NameValue == "PDF" || NameValue == "Text" || NameValue == "ImageB" || NameValue == "ImageC" || NameValue == "ImageI"</test>
			<error>
				<message>Entry %keyName% with type Name in ArrayOfNamesForProcSet has incorrect value %1 instead of ImageI, PDF, ImageC, ImageB, Text</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesGeneralEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfNamesGeneralEntry" testNumber="8"/>
			<description>Entry in ArrayOfNamesGeneral shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfNamesGeneral has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesInPtDataEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfNamesInPtDataEntry" testNumber="8"/>
			<description>Entry in ArrayOfNamesInPtData shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfNamesInPtData has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesInPtDataEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfNamesInPtDataEntry" testNumber="23"/>
			<description>Entry in ArrayOfNamesInPtData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfNamesInPtData is present</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesInPtDataEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfNamesInPtDataEntry-Name" testNumber="6"/>
			<description>Entry with type Name in ArrayOfNamesInPtData shall have one of values: ALT, LON, LAT</description>
			<test>HasTypeName != true || NameValue == "LAT" || NameValue == "LON" || NameValue == "ALT"</test>
			<error>
				<message>Entry %keyName% with type Name in ArrayOfNamesInPtData has incorrect value %1 instead of ALT, LON, LAT</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNonNegativeIntegersGeneralEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfNonNegativeIntegersGeneralEntry" testNumber="8"/>
			<description>Entry in ArrayOfNonNegativeIntegersGeneral shall have type Integer</description>
			<test>HasTypeInteger == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfNonNegativeIntegersGeneral has type %1 instead of type Integer</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNonNegativeIntegersGeneralEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfNonNegativeIntegersGeneralEntry-Integer" testNumber="9"/>
			<description>Entry with type Integer in ArrayOfNonNegativeIntegersGeneral shall satisfy special case: fn:Eval(@* &gt;= 0)</description>
			<test>HasTypeInteger != true || (IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry %keyName% with type Integer in ArrayOfNonNegativeIntegersGeneral does not satisfy special case: fn:Eval(@* &gt;= 0)</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNumberFormatsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfNumberFormatsEntry" testNumber="8"/>
			<description>Entry in ArrayOfNumberFormats shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfNumberFormats has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNumbersGeneralEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfNumbersGeneralEntry" testNumber="8"/>
			<description>Entry in ArrayOfNumbersGeneral shall have type Number</description>
			<test>HasTypeNumber == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfNumbersGeneral has type %1 instead of type Number</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCConfigEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfOCConfigEntry" testNumber="8"/>
			<description>Entry in ArrayOfOCConfig shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfOCConfig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfOCGEntry" testNumber="8"/>
			<description>Entry in ArrayOfOCG shall have one of types: Dictionary, Null</description>
			<test>HasTypeDictionary == true || HasTypeNull == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfOCG has type %1 instead of one of types: Dictionary, Null</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGStateEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfOCGStateEntry" testNumber="8"/>
			<description>Entry in ArrayOfOCGState shall have one of types: Dictionary, Name</description>
			<test>HasTypeDictionary == true || HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfOCGState has type %1 instead of one of types: Dictionary, Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGStateEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfOCGStateEntry-Name" testNumber="6"/>
			<description>Entry with type Name in ArrayOfOCGState shall have one of values: Toggle, OFF, ON</description>
			<test>HasTypeName != true || NameValue == "ON" || NameValue == "OFF" || NameValue == "Toggle"</test>
			<error>
				<message>Entry %keyName% with type Name in ArrayOfOCGState has incorrect value %1 instead of Toggle, OFF, ON</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGindirectEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfOCGindirectEntry" testNumber="8"/>
			<description>Entry in ArrayOfOCGindirect shall have one of types: Dictionary, Null</description>
			<test>HasTypeDictionary == true || HasTypeNull == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfOCGindirect has type %1 instead of one of types: Dictionary, Null</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGindirectEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfOCGindirectEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOfOCGindirect shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfOCGindirect is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGindirectEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfOCGindirectEntry-Null" testNumber="10"/>
			<description>Entry with type Null in ArrayOfOCGindirect shall be indirect</description>
			<test>HasTypeNull != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Null in ArrayOfOCGindirect is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCUsageEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfOCUsageEntry" testNumber="8"/>
			<description>Entry in ArrayOfOCUsage shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfOCUsage has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI13Color" testNumber="2"/>
			<description>ArrayOfOPI13Color shall contain exactly 5 elements</description>
			<test>size == 5</test>
			<error>
				<message>ArrayOfOPI13Color contains %1 element(s) instead of 5</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI13Color-0" testNumber="8"/>
			<description>Entry 0 in ArrayOfOPI13Color shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOfOPI13Color has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI13Color-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in ArrayOfOPI13Color shall satisfy possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</description>
			<test>entry0HasTypeNumber != true || (entry0NumberValue &gt;= 0) &amp;&amp; (entry0NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 0 with type Number in ArrayOfOPI13Color does not satisfy possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI13Color-1" testNumber="8"/>
			<description>Entry 1 in ArrayOfOPI13Color shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfOPI13Color has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI13Color-1-Number" testNumber="14"/>
			<description>Entry 1 with type Number in ArrayOfOPI13Color shall satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOfOPI13Color does not satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI13Color-2" testNumber="8"/>
			<description>Entry 2 in ArrayOfOPI13Color shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOfOPI13Color has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI13Color-2-Number" testNumber="14"/>
			<description>Entry 2 with type Number in ArrayOfOPI13Color shall satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</description>
			<test>entry2HasTypeNumber != true || (entry2NumberValue &gt;= 0) &amp;&amp; (entry2NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 2 with type Number in ArrayOfOPI13Color does not satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI13Color-3" testNumber="8"/>
			<description>Entry 3 in ArrayOfOPI13Color shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOfOPI13Color has type %1 instead of type Number</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI13Color-3-Number" testNumber="14"/>
			<description>Entry 3 with type Number in ArrayOfOPI13Color shall satisfy possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</description>
			<test>entry3HasTypeNumber != true || (entry3NumberValue &gt;= 0) &amp;&amp; (entry3NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 3 with type Number in ArrayOfOPI13Color does not satisfy possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI13Color-4" testNumber="8"/>
			<description>Entry 4 in ArrayOfOPI13Color shall have type StringByte</description>
			<test>size &lt;= 4 || entry4HasTypeStringByte == true</test>
			<error>
				<message>Entry 4 in ArrayOfOPI13Color has type %1 instead of type StringByte</message>
				<arguments>
					<argument>entry4Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2Inks">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI2Inks" testNumber="3"/>
			<description>ArrayOfOPI2Inks shall contain 2 * n + 1 elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 1</test>
			<error>
				<message>ArrayOfOPI2Inks contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2Inks">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI2Inks-0" testNumber="8"/>
			<description>Entry 0 in ArrayOfOPI2Inks shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ArrayOfOPI2Inks has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2Inks">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI2Inks-0-Name" testNumber="6"/>
			<description>Entry 0 with type Name in ArrayOfOPI2Inks shall have value monochrome</description>
			<test>entry0HasTypeName != true || entry0NameValue == "monochrome"</test>
			<error>
				<message>Entry 0 with type Name in ArrayOfOPI2Inks has incorrect value %1 instead of monochrome</message>
				<arguments>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2InksSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI2InksSubArray" testNumber="2"/>
			<description>ArrayOfOPI2InksSubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfOPI2InksSubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2InksSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI2InksSubArray-0" testNumber="8"/>
			<description>Entry 0 in ArrayOfOPI2InksSubArray shall have type String</description>
			<test>size &lt;= 0 || entry0HasTypeString == true</test>
			<error>
				<message>Entry 0 in ArrayOfOPI2InksSubArray has type %1 instead of type String</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2InksSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI2InksSubArray-1" testNumber="8"/>
			<description>Entry 1 in ArrayOfOPI2InksSubArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfOPI2InksSubArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2InksSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfOPI2InksSubArray-1-Number" testNumber="14"/>
			<description>Entry 1 with type Number in ArrayOfOPI2InksSubArray shall satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOfOPI2InksSubArray does not satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfObjectStreamsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfObjectStreamsEntry" testNumber="8"/>
			<description>ObjectStream shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>ObjectStream has type %1 instead of type Stream</message>
				<arguments>
					<argument>Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentGroupsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfOptContentGroupsEntry" testNumber="8"/>
			<description>Entry in ArrayOfOptContentGroups shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfOptContentGroups has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrderElementsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfOptContentOrderElementsEntry" testNumber="8"/>
			<description>Entry in ArrayOfOptContentOrderElements shall have one of types: Array, Dictionary</description>
			<test>HasTypeArray == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfOptContentOrderElements has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrders">
			<id specification="ISO_32000_1_7" clause="ArrayOfOptContentOrders" testNumber="4"/>
			<description>ArrayOfOptContentOrders shall contain at least 1 element</description>
			<test>size &gt;= 1</test>
			<error>
				<message>ArrayOfOptContentOrders contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrders">
			<id specification="ISO_32000_1_7" clause="ArrayOfOptContentOrders-0" testNumber="8"/>
			<description>Entry 0 in ArrayOfOptContentOrders shall have one of types: Dictionary, StringText</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeStringText == true</test>
			<error>
				<message>Entry 0 in ArrayOfOptContentOrders has type %1 instead of one of types: Dictionary, StringText</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrdersEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfOptContentOrdersEntry" testNumber="8"/>
			<description>Entry in ArrayOfOptContentOrders shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfOptContentOrders has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOutputIntentsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfOutputIntentsEntry" testNumber="8"/>
			<description>Entry in ArrayOfOutputIntents shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfOutputIntents has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPageTreeNodeKidsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfPageTreeNodeKidsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfPageTreeNodeKids shall be one of objects PageTreeNode, PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfPageTreeNodeKids is not one of objects PageTreeNode, PageObject</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPageTreeNodeKidsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfPageTreeNodeKidsEntry" testNumber="8"/>
			<description>Entry in ArrayOfPageTreeNodeKids shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfPageTreeNodeKids has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPageTreeNodeKidsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfPageTreeNodeKidsEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOfPageTreeNodeKids shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfPageTreeNodeKids is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPagesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfPagesEntry" testNumber="8"/>
			<description>Entry in ArrayOfPages shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfPages has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPagesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfPagesEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOfPages shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfPages is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPagesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfPagesEntry-Dictionary" testNumber="9"/>
			<description>Entry with type Dictionary in ArrayOfPages shall satisfy special case: fn:Eval(fn:IsPresent(*::SeparationInfo))</description>
			<test>HasTypeDictionary != true || (containsAnySeparationInfo == true)</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfPages does not satisfy special case: fn:Eval(fn:IsPresent(*::SeparationInfo))</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPoints">
			<id specification="ISO_32000_1_7" clause="ArrayOfQuadPoints" testNumber="3"/>
			<description>ArrayOfQuadPoints shall contain 8 * n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 8 == 0</test>
			<error>
				<message>ArrayOfQuadPoints contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfQuadPointsSubArray" testNumber="2"/>
			<description>ArrayOfQuadPointsSubArray shall contain exactly 8 elements</description>
			<test>size == 8</test>
			<error>
				<message>ArrayOfQuadPointsSubArray contains %1 element(s) instead of 8</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfQuadPointsSubArray-0" testNumber="8"/>
			<description>Entry 0 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOfQuadPointsSubArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfQuadPointsSubArray-1" testNumber="8"/>
			<description>Entry 1 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfQuadPointsSubArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfQuadPointsSubArray-2" testNumber="8"/>
			<description>Entry 2 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOfQuadPointsSubArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfQuadPointsSubArray-3" testNumber="8"/>
			<description>Entry 3 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOfQuadPointsSubArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfQuadPointsSubArray-4" testNumber="8"/>
			<description>Entry 4 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOfQuadPointsSubArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry4Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfQuadPointsSubArray-5" testNumber="8"/>
			<description>Entry 5 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOfQuadPointsSubArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry5Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfQuadPointsSubArray-6" testNumber="8"/>
			<description>Entry 6 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 6 || entry6HasTypeNumber == true</test>
			<error>
				<message>Entry 6 in ArrayOfQuadPointsSubArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry6Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfQuadPointsSubArray-7" testNumber="8"/>
			<description>Entry 7 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 7 || entry7HasTypeNumber == true</test>
			<error>
				<message>Entry 7 in ArrayOfQuadPointsSubArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry7Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRenditionsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfRenditionsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfRenditions shall be one of objects RenditionMedia, RenditionSelector</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfRenditions is not one of objects RenditionMedia, RenditionSelector</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRenditionsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfRenditionsEntry" testNumber="8"/>
			<description>Entry in ArrayOfRenditions shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfRenditions has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRequirementsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfRequirementsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfRequirements shall be one of objects RequirementsEnableJavaScripts, RequirementsHandler</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfRequirements is not one of objects RequirementsEnableJavaScripts, RequirementsHandler</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRequirementsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfRequirementsEntry" testNumber="8"/>
			<description>Entry in ArrayOfRequirements shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfRequirements has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRequirementsHandlersEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfRequirementsHandlersEntry" testNumber="8"/>
			<description>Entry in ArrayOfRequirementsHandlers shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfRequirementsHandlers has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRichMediaConfigurationEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfRichMediaConfigurationEntry" testNumber="8"/>
			<description>Entry in ArrayOfRichMediaConfiguration shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfRichMediaConfiguration has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRichMediaConfigurationEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfRichMediaConfigurationEntry" testNumber="23"/>
			<description>Entry in ArrayOfRichMediaConfiguration can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfRichMediaConfiguration is present</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRichMediaConfigurationEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfRichMediaConfigurationEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOfRichMediaConfiguration shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfRichMediaConfiguration is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRichMediaCuePointsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfRichMediaCuePointsEntry" testNumber="8"/>
			<description>Entry in ArrayOfRichMediaCuePoints shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfRichMediaCuePoints has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRichMediaCuePointsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfRichMediaCuePointsEntry" testNumber="23"/>
			<description>Entry in ArrayOfRichMediaCuePoints can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfRichMediaCuePoints is present</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRichMediaInstancesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfRichMediaInstancesEntry" testNumber="8"/>
			<description>Entry in ArrayOfRichMediaInstances shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfRichMediaInstances has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRichMediaInstancesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfRichMediaInstancesEntry" testNumber="23"/>
			<description>Entry in ArrayOfRichMediaInstances can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfRichMediaInstances is present</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRichMediaInstancesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfRichMediaInstancesEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOfRichMediaInstances shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfRichMediaInstances is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSignatureReferencesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfSignatureReferencesEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfSignatureReferences shall be one of objects SignatureReferenceDocMDP, SignatureReferenceFieldMDP, SignatureReferenceIdentity, SignatureReferenceUR</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfSignatureReferences is not one of objects SignatureReferenceDocMDP, SignatureReferenceFieldMDP, SignatureReferenceIdentity, SignatureReferenceUR</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSignatureReferencesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfSignatureReferencesEntry" testNumber="8"/>
			<description>Entry in ArrayOfSignatureReferences shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfSignatureReferences has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSignatureSubFilterNamesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfSignatureSubFilterNamesEntry" testNumber="8"/>
			<description>Entry in ArrayOfSignatureSubFilterNames shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfSignatureSubFilterNames has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSignatureSubFilterNamesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfSignatureSubFilterNamesEntry-Name" testNumber="6"/>
			<description>Entry with type Name in ArrayOfSignatureSubFilterNames shall have one of values: adbe.pkcs7.detached, adbe.x509.rsa_sha1, adbe.pkcs7.sha1</description>
			<test>HasTypeName != true || NameValue == "adbe.pkcs7.detached" || NameValue == "adbe.pkcs7.sha1" || NameValue == "adbe.x509.rsa_sha1"</test>
			<error>
				<message>Entry %keyName% with type Name in ArrayOfSignatureSubFilterNames has incorrect value %1 instead of adbe.pkcs7.detached, adbe.x509.rsa_sha1, adbe.pkcs7.sha1</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSoftwareIdentifiersEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfSoftwareIdentifiersEntry" testNumber="8"/>
			<description>Entry in ArrayOfSoftwareIdentifiers shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfSoftwareIdentifiers has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSoftwareVersionsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfSoftwareVersionsEntry" testNumber="8"/>
			<description>Entry in ArrayOfSoftwareVersions shall have type Integer</description>
			<test>HasTypeInteger == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfSoftwareVersions has type %1 instead of type Integer</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSoftwareVersionsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfSoftwareVersionsEntry-Integer" testNumber="14"/>
			<description>Entry with type Integer in ArrayOfSoftwareVersions shall satisfy possible value predicate: fn:Eval(@* &gt;= 0)</description>
			<test>HasTypeInteger != true || IntegerValue &gt;= 0</test>
			<error>
				<message>Entry %keyName% with type Integer in ArrayOfSoftwareVersions does not satisfy possible value predicate: fn:Eval(@* &gt;= 0)</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSourceInformationEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfSourceInformationEntry" testNumber="8"/>
			<description>Entry in ArrayOfSourceInformation shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfSourceInformation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStreamsGeneralEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfStreamsGeneralEntry" testNumber="8"/>
			<description>Entry in ArrayOfStreamsGeneral shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfStreamsGeneral has type %1 instead of type Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStreamsGeneralEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfStreamsGeneralEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in ArrayOfStreamsGeneral shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in ArrayOfStreamsGeneral is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStringsASCIIEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfStringsASCIIEntry" testNumber="8"/>
			<description>Entry in ArrayOfStringsASCII shall have type StringAscii</description>
			<test>HasTypeStringAscii == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfStringsASCII has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStringsByteEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfStringsByteEntry" testNumber="8"/>
			<description>Entry in ArrayOfStringsByte shall have type StringByte</description>
			<test>HasTypeStringByte == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfStringsByte has type %1 instead of type StringByte</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStringsTextEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfStringsTextEntry" testNumber="8"/>
			<description>Entry in ArrayOfStringsText shall have type StringText</description>
			<test>HasTypeStringText == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfStringsText has type %1 instead of type StringText</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfStructElemEntry" testNumber="8"/>
			<description>Entry in ArrayOfStructElem shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfStructElem has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfStructElemEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOfStructElem shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfStructElem is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemKidsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfStructElemKidsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfStructElemKids shall be one of objects StructElem, MarkedContentReference, ObjectReference</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfStructElemKids is not one of objects StructElem, MarkedContentReference, ObjectReference</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemKidsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfStructElemKidsEntry" testNumber="8"/>
			<description>Entry in ArrayOfStructElemKids shall have one of types: Dictionary, Integer</description>
			<test>HasTypeDictionary == true || HasTypeInteger == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfStructElemKids has type %1 instead of one of types: Dictionary, Integer</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemParentTreeEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfStructElemParentTreeEntry" testNumber="8"/>
			<description>Entry in ArrayOfStructElemParentTree shall have one of types: Dictionary, Null</description>
			<test>HasTypeDictionary == true || HasTypeNull == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfStructElemParentTree has type %1 instead of one of types: Dictionary, Null</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemParentTreeEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfStructElemParentTreeEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOfStructElemParentTree shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfStructElemParentTree is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSubjectDNEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfSubjectDNEntry" testNumber="8"/>
			<description>Entry in ArrayOfSubjectDN shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfSubjectDN has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTags">
			<id specification="ISO_32000_1_7" clause="ArrayOfTags" testNumber="3"/>
			<description>ArrayOfTags shall contain 2 * n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>ArrayOfTags contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTagsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfTagsSubArray" testNumber="2"/>
			<description>ArrayOfTagsSubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfTagsSubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTagsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfTagsSubArray-0" testNumber="8"/>
			<description>Entry 0 in ArrayOfTagsSubArray shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOfTagsSubArray has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTagsSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfTagsSubArray-1" testNumber="8"/>
			<description>Entry 1 in ArrayOfTagsSubArray shall have type StringAscii</description>
			<test>size &lt;= 1 || entry1HasTypeStringAscii == true</test>
			<error>
				<message>Entry 1 in ArrayOfTagsSubArray has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfThreadsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfThreadsEntry" testNumber="8"/>
			<description>Entry in ArrayOfThreads shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfThreads has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfTrapNetVersionObjectsEntry-Array" testNumber="17"/>
			<description>Entry with type Array in ArrayOfTrapNetVersionObjects shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Array in ArrayOfTrapNetVersionObjects is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfTrapNetVersionObjectsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ArrayOfTrapNetVersionObjects shall be one of objects OPIVersion13Dict, OPIVersion20Dict, GraphicsStateParameter, PatternType2, ShadingType1, ShadingType2, ShadingType3, XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough, FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfTrapNetVersionObjects is not one of objects OPIVersion13Dict, OPIVersion20Dict, GraphicsStateParameter, PatternType2, ShadingType1, ShadingType2, ShadingType3, XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough, FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfTrapNetVersionObjectsEntry-Stream" testNumber="17"/>
			<description>Entry with type Stream in ArrayOfTrapNetVersionObjects shall be one of objects PatternType1, ShadingType4, ShadingType5, ShadingType6, ShadingType7, Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Stream in ArrayOfTrapNetVersionObjects is not one of objects PatternType1, ShadingType4, ShadingType5, ShadingType6, ShadingType7, Stream</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfTrapNetVersionObjectsEntry" testNumber="8"/>
			<description>Entry in ArrayOfTrapNetVersionObjects shall have one of types: Array, Dictionary, Stream</description>
			<test>HasTypeArray == true || HasTypeDictionary == true || HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfTrapNetVersionObjects has type %1 instead of one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfTrapNetVersionObjectsEntry-Array" testNumber="10"/>
			<description>Entry with type Array in ArrayOfTrapNetVersionObjects shall be indirect</description>
			<test>HasTypeArray != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Array in ArrayOfTrapNetVersionObjects is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfTrapNetVersionObjectsEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOfTrapNetVersionObjects shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfTrapNetVersionObjects is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfTrapNetVersionObjectsEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in ArrayOfTrapNetVersionObjects shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in ArrayOfTrapNetVersionObjects is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapRegionsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfTrapRegionsEntry" testNumber="8"/>
			<description>Entry in ArrayOfTrapRegions shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfTrapRegions has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapRegionsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfTrapRegionsEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOfTrapRegions shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfTrapRegions is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfURLStringsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfURLStringsEntry" testNumber="8"/>
			<description>Entry in ArrayOfURLStrings shall have type StringText</description>
			<test>HasTypeStringText == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfURLStrings has type %1 instead of type StringText</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfUserPropertyEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfUserPropertyEntry" testNumber="8"/>
			<description>Entry in ArrayOfUserProperty shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfUserProperty has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfViewParamsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfViewParamsEntry" testNumber="8"/>
			<description>Entry in ArrayOfViewParams shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfViewParams has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfViewParamsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfViewParamsEntry" testNumber="23"/>
			<description>Entry in ArrayOfViewParams can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfViewParams is present</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfViewportsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfViewportsEntry" testNumber="8"/>
			<description>Entry in ArrayOfViewports shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfViewports has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureCommandsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfWebCaptureCommandsEntry" testNumber="8"/>
			<description>Entry in ArrayOfWebCaptureCommands shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfWebCaptureCommands has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureCommandsEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfWebCaptureCommandsEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOfWebCaptureCommands shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfWebCaptureCommands is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureImagesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfWebCaptureImagesEntry" testNumber="8"/>
			<description>Entry in ArrayOfWebCaptureImages shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfWebCaptureImages has type %1 instead of type Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureImagesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfWebCaptureImagesEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in ArrayOfWebCaptureImages shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in ArrayOfWebCaptureImages is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCapturePagesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfWebCapturePagesEntry" testNumber="8"/>
			<description>Entry in ArrayOfWebCapturePages shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfWebCapturePages has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCapturePagesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfWebCapturePagesEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in ArrayOfWebCapturePages shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ArrayOfWebCapturePages is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXFA">
			<id specification="ISO_32000_1_7" clause="ArrayOfXFA" testNumber="3"/>
			<description>ArrayOfXFA shall contain 2 * n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>ArrayOfXFA contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXFASubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfXFASubArray" testNumber="2"/>
			<description>ArrayOfXFASubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfXFASubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXFASubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfXFASubArray-0" testNumber="8"/>
			<description>Entry 0 in ArrayOfXFASubArray shall have type StringText</description>
			<test>size &lt;= 0 || entry0HasTypeStringText == true</test>
			<error>
				<message>Entry 0 in ArrayOfXFASubArray has type %1 instead of type StringText</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXFASubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfXFASubArray-1" testNumber="8"/>
			<description>Entry 1 in ArrayOfXFASubArray shall have type Stream</description>
			<test>size &lt;= 1 || entry1HasTypeStream == true</test>
			<error>
				<message>Entry 1 in ArrayOfXFASubArray has type %1 instead of type Stream</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXFASubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfXFASubArray-1-Stream" testNumber="10"/>
			<description>Entry 1 with type Stream in ArrayOfXFASubArray shall be indirect</description>
			<test>entry1HasTypeStream != true || isentry1Indirect == true</test>
			<error>
				<message>Entry 1 with type Stream in ArrayOfXFASubArray is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXPTSValuesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfXPTSValuesEntry" testNumber="8"/>
			<description>Entry in ArrayOfXPTSValues shall have type Number</description>
			<test>HasTypeNumber == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfXPTSValues has type %1 instead of type Number</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXPTSValuesEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOfXPTSValuesEntry" testNumber="23"/>
			<description>Entry in ArrayOfXPTSValues can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry %keyName% in ArrayOfXPTSValues is present</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegers">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefIndexIntegers" testNumber="3"/>
			<description>ArrayOfXRefIndexIntegers shall contain 2 * n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>ArrayOfXRefIndexIntegers contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefIndexIntegersSubArray" testNumber="2"/>
			<description>ArrayOfXRefIndexIntegersSubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfXRefIndexIntegersSubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefIndexIntegersSubArray-0" testNumber="8"/>
			<description>Entry 0 in ArrayOfXRefIndexIntegersSubArray shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOfXRefIndexIntegersSubArray has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefIndexIntegersSubArray-0-Integer" testNumber="10"/>
			<description>Entry 0 with type Integer in ArrayOfXRefIndexIntegersSubArray shall be direct</description>
			<test>entry0HasTypeInteger != true || isentry0Indirect == false</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOfXRefIndexIntegersSubArray is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefIndexIntegersSubArray-0-Integer" testNumber="9"/>
			<description>Entry 0 with type Integer in ArrayOfXRefIndexIntegersSubArray shall satisfy special case: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeInteger != true || (entry0IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOfXRefIndexIntegersSubArray does not satisfy special case: fn:Eval(@0 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefIndexIntegersSubArray-1" testNumber="8"/>
			<description>Entry 1 in ArrayOfXRefIndexIntegersSubArray shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfXRefIndexIntegersSubArray has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefIndexIntegersSubArray-1-Integer" testNumber="10"/>
			<description>Entry 1 with type Integer in ArrayOfXRefIndexIntegersSubArray shall be direct</description>
			<test>entry1HasTypeInteger != true || isentry1Indirect == false</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfXRefIndexIntegersSubArray is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefIndexIntegersSubArray-1-Integer" testNumber="9"/>
			<description>Entry 1 with type Integer in ArrayOfXRefIndexIntegersSubArray shall satisfy special case: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeInteger != true || (entry1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfXRefIndexIntegersSubArray does not satisfy special case: fn:Eval(@1 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefWIntegers" testNumber="2"/>
			<description>ArrayOfXRefWIntegers shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOfXRefWIntegers contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefWIntegers-0" testNumber="8"/>
			<description>Entry 0 in ArrayOfXRefWIntegers shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOfXRefWIntegers has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefWIntegers-0-Integer" testNumber="10"/>
			<description>Entry 0 with type Integer in ArrayOfXRefWIntegers shall be direct</description>
			<test>entry0HasTypeInteger != true || isentry0Indirect == false</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOfXRefWIntegers is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefWIntegers-0-Integer" testNumber="14"/>
			<description>Entry 0 with type Integer in ArrayOfXRefWIntegers shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeInteger != true || entry0IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOfXRefWIntegers does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefWIntegers-1" testNumber="8"/>
			<description>Entry 1 in ArrayOfXRefWIntegers shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfXRefWIntegers has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefWIntegers-1-Integer" testNumber="10"/>
			<description>Entry 1 with type Integer in ArrayOfXRefWIntegers shall be direct</description>
			<test>entry1HasTypeInteger != true || isentry1Indirect == false</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfXRefWIntegers is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefWIntegers-1-Integer" testNumber="14"/>
			<description>Entry 1 with type Integer in ArrayOfXRefWIntegers shall satisfy possible value predicate: fn:Eval(@1 &gt; 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt; 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfXRefWIntegers does not satisfy possible value predicate: fn:Eval(@1 &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefWIntegers-2" testNumber="8"/>
			<description>Entry 2 in ArrayOfXRefWIntegers shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in ArrayOfXRefWIntegers has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefWIntegers-2-Integer" testNumber="10"/>
			<description>Entry 2 with type Integer in ArrayOfXRefWIntegers shall be direct</description>
			<test>entry2HasTypeInteger != true || isentry2Indirect == false</test>
			<error>
				<message>Entry 2 with type Integer in ArrayOfXRefWIntegers is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="ArrayOfXRefWIntegers-2-Integer" testNumber="14"/>
			<description>Entry 2 with type Integer in ArrayOfXRefWIntegers shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeInteger != true || entry2IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Integer in ArrayOfXRefWIntegers does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Booleans">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2Booleans" testNumber="2"/>
			<description>ArrayOf_2Booleans shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2Booleans contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Booleans">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2Booleans-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_2Booleans shall have type Boolean</description>
			<test>size &lt;= 0 || entry0HasTypeBoolean == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2Booleans has type %1 instead of type Boolean</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Booleans">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2Booleans-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_2Booleans shall have type Boolean</description>
			<test>size &lt;= 1 || entry1HasTypeBoolean == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2Booleans has type %1 instead of type Boolean</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2DashNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2DashNumbers" testNumber="2"/>
			<description>ArrayOf_2DashNumbers shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2DashNumbers contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2DashNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2DashNumbers-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_2DashNumbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2DashNumbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2DashNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2DashNumbers-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_2DashNumbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2DashNumbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Integers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2Integers" testNumber="2"/>
			<description>ArrayOf_2Integers shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2Integers contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Integers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2Integers-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_2Integers shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2Integers has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Integers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2Integers-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_2Integers shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2Integers has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2LineEndingsNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2LineEndingsNames" testNumber="2"/>
			<description>ArrayOf_2LineEndingsNames shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2LineEndingsNames contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2LineEndingsNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2LineEndingsNames-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_2LineEndingsNames shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2LineEndingsNames has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2LineEndingsNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2LineEndingsNames-0-Name" testNumber="6"/>
			<description>Entry 0 with type Name in ArrayOf_2LineEndingsNames shall have one of values: ClosedArrow, Circle, ROpenArrow, Slash, Diamond, OpenArrow, Square, Butt, None, RClosedArrow</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Square" || entry0NameValue == "Circle" || entry0NameValue == "Diamond" || entry0NameValue == "OpenArrow" || entry0NameValue == "ClosedArrow" || entry0NameValue == "None" || entry0NameValue == "Butt" || entry0NameValue == "ROpenArrow" || entry0NameValue == "RClosedArrow" || entry0NameValue == "Slash"</test>
			<error>
				<message>Entry 0 with type Name in ArrayOf_2LineEndingsNames has incorrect value %1 instead of ClosedArrow, Circle, ROpenArrow, Slash, Diamond, OpenArrow, Square, Butt, None, RClosedArrow</message>
				<arguments>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2LineEndingsNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2LineEndingsNames-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_2LineEndingsNames shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2LineEndingsNames has type %1 instead of type Name</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2LineEndingsNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2LineEndingsNames-1-Name" testNumber="6"/>
			<description>Entry 1 with type Name in ArrayOf_2LineEndingsNames shall have one of values: ClosedArrow, Circle, ROpenArrow, Slash, Diamond, OpenArrow, Square, Butt, None, RClosedArrow</description>
			<test>entry1HasTypeName != true || entry1NameValue == "Square" || entry1NameValue == "Circle" || entry1NameValue == "Diamond" || entry1NameValue == "OpenArrow" || entry1NameValue == "ClosedArrow" || entry1NameValue == "None" || entry1NameValue == "Butt" || entry1NameValue == "ROpenArrow" || entry1NameValue == "RClosedArrow" || entry1NameValue == "Slash"</test>
			<error>
				<message>Entry 1 with type Name in ArrayOf_2LineEndingsNames has incorrect value %1 instead of ClosedArrow, Circle, ROpenArrow, Slash, Diamond, OpenArrow, Square, Butt, None, RClosedArrow</message>
				<arguments>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2Numbers" testNumber="2"/>
			<description>ArrayOf_2Numbers shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2Numbers contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2Numbers-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_2Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2Numbers-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_2Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsByte">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2StringsByte" testNumber="2"/>
			<description>ArrayOf_2StringsByte shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2StringsByte contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsByte">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2StringsByte-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_2StringsByte shall have type StringByte</description>
			<test>size &lt;= 0 || entry0HasTypeStringByte == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2StringsByte has type %1 instead of type StringByte</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsByte">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2StringsByte-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_2StringsByte shall have type StringByte</description>
			<test>size &lt;= 1 || entry1HasTypeStringByte == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2StringsByte has type %1 instead of type StringByte</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsText">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2StringsText" testNumber="2"/>
			<description>ArrayOf_2StringsText shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2StringsText contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsText">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2StringsText-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_2StringsText shall have type StringText</description>
			<test>size &lt;= 0 || entry0HasTypeStringText == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2StringsText has type %1 instead of type StringText</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsText">
			<id specification="ISO_32000_1_7" clause="ArrayOf_2StringsText-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_2StringsText shall have type StringText</description>
			<test>size &lt;= 1 || entry1HasTypeStringText == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2StringsText has type %1 instead of type StringText</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3CenterOfRotationNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3CenterOfRotationNumbers" testNumber="2"/>
			<description>ArrayOf_3CenterOfRotationNumbers shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOf_3CenterOfRotationNumbers contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3CenterOfRotationNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3CenterOfRotationNumbers-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_3CenterOfRotationNumbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_3CenterOfRotationNumbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3CenterOfRotationNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3CenterOfRotationNumbers-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_3CenterOfRotationNumbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_3CenterOfRotationNumbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3CenterOfRotationNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3CenterOfRotationNumbers-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_3CenterOfRotationNumbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_3CenterOfRotationNumbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3Integers" testNumber="2"/>
			<description>ArrayOf_3Integers shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOf_3Integers contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3Integers-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_3Integers shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOf_3Integers has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3Integers-0-Integer" testNumber="14"/>
			<description>Entry 0 with type Integer in ArrayOf_3Integers shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeInteger != true || entry0IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOf_3Integers does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3Integers-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_3Integers shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOf_3Integers has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3Integers-1-Integer" testNumber="14"/>
			<description>Entry 1 with type Integer in ArrayOf_3Integers shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOf_3Integers does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3Integers-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_3Integers shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in ArrayOf_3Integers has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3Integers-2-Integer" testNumber="14"/>
			<description>Entry 2 with type Integer in ArrayOf_3Integers shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeInteger != true || entry2IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Integer in ArrayOf_3Integers does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3Numbers" testNumber="2"/>
			<description>ArrayOf_3Numbers shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOf_3Numbers contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3Numbers-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_3Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_3Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3Numbers-0" testNumber="23"/>
			<description>Entry 0 in ArrayOf_3Numbers can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>contains0 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry 0 in ArrayOf_3Numbers is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3Numbers-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_3Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_3Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3Numbers-1" testNumber="23"/>
			<description>Entry 1 in ArrayOf_3Numbers can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>contains1 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry 1 in ArrayOf_3Numbers is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3Numbers-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_3Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_3Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3Numbers-2" testNumber="23"/>
			<description>Entry 2 in ArrayOf_3Numbers can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>contains2 == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry 2 in ArrayOf_3Numbers is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3OrientationNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3OrientationNumbers" testNumber="2"/>
			<description>ArrayOf_3OrientationNumbers shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOf_3OrientationNumbers contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3OrientationNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3OrientationNumbers-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_3OrientationNumbers shall have one of types: Null, Number</description>
			<test>size &lt;= 0 || entry0HasTypeNull == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_3OrientationNumbers has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3OrientationNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3OrientationNumbers-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_3OrientationNumbers shall have one of types: Null, Number</description>
			<test>size &lt;= 1 || entry1HasTypeNull == true || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_3OrientationNumbers has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3OrientationNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3OrientationNumbers-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_3OrientationNumbers shall have one of types: Null, Number</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_3OrientationNumbers has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3RGBNumbers" testNumber="2"/>
			<description>ArrayOf_3RGBNumbers shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOf_3RGBNumbers contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3RGBNumbers-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_3RGBNumbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_3RGBNumbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3RGBNumbers-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in ArrayOf_3RGBNumbers shall satisfy possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</description>
			<test>entry0HasTypeNumber != true || (entry0NumberValue &gt;= 0) &amp;&amp; (entry0NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_3RGBNumbers does not satisfy possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3RGBNumbers-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_3RGBNumbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_3RGBNumbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3RGBNumbers-1-Number" testNumber="14"/>
			<description>Entry 1 with type Number in ArrayOf_3RGBNumbers shall satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_3RGBNumbers does not satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3RGBNumbers-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_3RGBNumbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_3RGBNumbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3RGBNumbers-2-Number" testNumber="14"/>
			<description>Entry 2 with type Number in ArrayOf_3RGBNumbers shall satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</description>
			<test>entry2HasTypeNumber != true || (entry2NumberValue &gt;= 0) &amp;&amp; (entry2NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_3RGBNumbers does not satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3or4CalloutLineNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3or4CalloutLineNumbers" testNumber="24"/>
			<description>ArrayOf_3or4CalloutLineNumbers shall contain 4 to 6 elements</description>
			<test>size &gt;= 4 &amp;&amp; size &lt;= 6</test>
			<error>
				<message>ArrayOf_3or4CalloutLineNumbers contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3or4CalloutLineNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3or4CalloutLineNumbers-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_3or4CalloutLineNumbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_3or4CalloutLineNumbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3or4CalloutLineNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3or4CalloutLineNumbers-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_3or4CalloutLineNumbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_3or4CalloutLineNumbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3or4CalloutLineNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3or4CalloutLineNumbers-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_3or4CalloutLineNumbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_3or4CalloutLineNumbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3or4CalloutLineNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3or4CalloutLineNumbers-3" testNumber="8"/>
			<description>Entry 3 in ArrayOf_3or4CalloutLineNumbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_3or4CalloutLineNumbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3or4CalloutLineNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3or4CalloutLineNumbers-4" testNumber="8"/>
			<description>Entry 4 in ArrayOf_3or4CalloutLineNumbers shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf_3or4CalloutLineNumbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry4Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3or4CalloutLineNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_3or4CalloutLineNumbers-5" testNumber="8"/>
			<description>Entry 5 in ArrayOf_3or4CalloutLineNumbers shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf_3or4CalloutLineNumbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry5Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4AnnotBorderCharacteristics" testNumber="24"/>
			<description>ArrayOf_4AnnotBorderCharacteristics shall contain 3 to 4 elements</description>
			<test>size &gt;= 3 &amp;&amp; size &lt;= 4</test>
			<error>
				<message>ArrayOf_4AnnotBorderCharacteristics contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4AnnotBorderCharacteristics-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4AnnotBorderCharacteristics has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4AnnotBorderCharacteristics-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in ArrayOf_4AnnotBorderCharacteristics shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_4AnnotBorderCharacteristics does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4AnnotBorderCharacteristics-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4AnnotBorderCharacteristics has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4AnnotBorderCharacteristics-1-Number" testNumber="14"/>
			<description>Entry 1 with type Number in ArrayOf_4AnnotBorderCharacteristics shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4AnnotBorderCharacteristics does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4AnnotBorderCharacteristics-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4AnnotBorderCharacteristics has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4AnnotBorderCharacteristics-2-Number" testNumber="14"/>
			<description>Entry 2 with type Number in ArrayOf_4AnnotBorderCharacteristics shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_4AnnotBorderCharacteristics does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4AnnotBorderCharacteristics-3" testNumber="8"/>
			<description>Entry 3 in ArrayOf_4AnnotBorderCharacteristics shall have type Array</description>
			<test>size &lt;= 3 || entry3HasTypeArray == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4AnnotBorderCharacteristics has type %1 instead of type Array</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderColorArrays" testNumber="2"/>
			<description>ArrayOf_4BorderColorArrays shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4BorderColorArrays contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderColorArrays-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_4BorderColorArrays shall have one of types: Array, Null</description>
			<test>size &lt;= 0 || entry0HasTypeArray == true || entry0HasTypeNull == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4BorderColorArrays has type %1 instead of one of types: Array, Null</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderColorArrays-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_4BorderColorArrays shall have one of types: Array, Null</description>
			<test>size &lt;= 1 || entry1HasTypeArray == true || entry1HasTypeNull == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4BorderColorArrays has type %1 instead of one of types: Array, Null</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderColorArrays-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_4BorderColorArrays shall have one of types: Array, Null</description>
			<test>size &lt;= 2 || entry2HasTypeArray == true || entry2HasTypeNull == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4BorderColorArrays has type %1 instead of one of types: Array, Null</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderColorArrays-3" testNumber="8"/>
			<description>Entry 3 in ArrayOf_4BorderColorArrays shall have one of types: Array, Null</description>
			<test>size &lt;= 3 || entry3HasTypeArray == true || entry3HasTypeNull == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4BorderColorArrays has type %1 instead of one of types: Array, Null</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderStyleNames" testNumber="2"/>
			<description>ArrayOf_4BorderStyleNames shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4BorderStyleNames contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderStyleNames-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_4BorderStyleNames shall have one of types: Name, Null</description>
			<test>size &lt;= 0 || entry0HasTypeName == true || entry0HasTypeNull == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4BorderStyleNames has type %1 instead of one of types: Name, Null</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderStyleNames-0-Name" testNumber="6"/>
			<description>Entry 0 with type Name in ArrayOf_4BorderStyleNames shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>entry0HasTypeName != true || entry0NameValue == "None" || entry0NameValue == "Hidden" || entry0NameValue == "Dotted" || entry0NameValue == "Dashed" || entry0NameValue == "Solid" || entry0NameValue == "Double" || entry0NameValue == "Groove" || entry0NameValue == "Ridge" || entry0NameValue == "Inset" || entry0NameValue == "Outset"</test>
			<error>
				<message>Entry 0 with type Name in ArrayOf_4BorderStyleNames has incorrect value %1 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderStyleNames-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_4BorderStyleNames shall have one of types: Name, Null</description>
			<test>size &lt;= 1 || entry1HasTypeName == true || entry1HasTypeNull == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4BorderStyleNames has type %1 instead of one of types: Name, Null</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderStyleNames-1-Name" testNumber="6"/>
			<description>Entry 1 with type Name in ArrayOf_4BorderStyleNames shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>entry1HasTypeName != true || entry1NameValue == "None" || entry1NameValue == "Hidden" || entry1NameValue == "Dotted" || entry1NameValue == "Dashed" || entry1NameValue == "Solid" || entry1NameValue == "Double" || entry1NameValue == "Groove" || entry1NameValue == "Ridge" || entry1NameValue == "Inset" || entry1NameValue == "Outset"</test>
			<error>
				<message>Entry 1 with type Name in ArrayOf_4BorderStyleNames has incorrect value %1 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderStyleNames-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_4BorderStyleNames shall have one of types: Name, Null</description>
			<test>size &lt;= 2 || entry2HasTypeName == true || entry2HasTypeNull == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4BorderStyleNames has type %1 instead of one of types: Name, Null</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderStyleNames-2-Name" testNumber="6"/>
			<description>Entry 2 with type Name in ArrayOf_4BorderStyleNames shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>entry2HasTypeName != true || entry2NameValue == "None" || entry2NameValue == "Hidden" || entry2NameValue == "Dotted" || entry2NameValue == "Dashed" || entry2NameValue == "Solid" || entry2NameValue == "Double" || entry2NameValue == "Groove" || entry2NameValue == "Ridge" || entry2NameValue == "Inset" || entry2NameValue == "Outset"</test>
			<error>
				<message>Entry 2 with type Name in ArrayOf_4BorderStyleNames has incorrect value %1 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>entry2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderStyleNames-3" testNumber="8"/>
			<description>Entry 3 in ArrayOf_4BorderStyleNames shall have one of types: Name, Null</description>
			<test>size &lt;= 3 || entry3HasTypeName == true || entry3HasTypeNull == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4BorderStyleNames has type %1 instead of one of types: Name, Null</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderStyleNames-3-Name" testNumber="6"/>
			<description>Entry 3 with type Name in ArrayOf_4BorderStyleNames shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>entry3HasTypeName != true || entry3NameValue == "None" || entry3NameValue == "Hidden" || entry3NameValue == "Dotted" || entry3NameValue == "Dashed" || entry3NameValue == "Solid" || entry3NameValue == "Double" || entry3NameValue == "Groove" || entry3NameValue == "Ridge" || entry3NameValue == "Inset" || entry3NameValue == "Outset"</test>
			<error>
				<message>Entry 3 with type Name in ArrayOf_4BorderStyleNames has incorrect value %1 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>entry3NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderThicknessNumbers" testNumber="2"/>
			<description>ArrayOf_4BorderThicknessNumbers shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4BorderThicknessNumbers contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderThicknessNumbers-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_4BorderThicknessNumbers shall have one of types: Null, Number</description>
			<test>size &lt;= 0 || entry0HasTypeNull == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4BorderThicknessNumbers has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderThicknessNumbers-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in ArrayOf_4BorderThicknessNumbers shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_4BorderThicknessNumbers does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderThicknessNumbers-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_4BorderThicknessNumbers shall have one of types: Null, Number</description>
			<test>size &lt;= 1 || entry1HasTypeNull == true || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4BorderThicknessNumbers has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderThicknessNumbers-1-Number" testNumber="14"/>
			<description>Entry 1 with type Number in ArrayOf_4BorderThicknessNumbers shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4BorderThicknessNumbers does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderThicknessNumbers-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_4BorderThicknessNumbers shall have one of types: Null, Number</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4BorderThicknessNumbers has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderThicknessNumbers-2-Number" testNumber="14"/>
			<description>Entry 2 with type Number in ArrayOf_4BorderThicknessNumbers shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_4BorderThicknessNumbers does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderThicknessNumbers-3" testNumber="8"/>
			<description>Entry 3 in ArrayOf_4BorderThicknessNumbers shall have one of types: Null, Number</description>
			<test>size &lt;= 3 || entry3HasTypeNull == true || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4BorderThicknessNumbers has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4BorderThicknessNumbers-3-Number" testNumber="14"/>
			<description>Entry 3 with type Number in ArrayOf_4BorderThicknessNumbers shall satisfy possible value predicate: fn:Eval(@3 &gt;= 0)</description>
			<test>entry3HasTypeNumber != true || entry3NumberValue &gt;= 0</test>
			<error>
				<message>Entry 3 with type Number in ArrayOf_4BorderThicknessNumbers does not satisfy possible value predicate: fn:Eval(@3 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4ColourSpaceEntries" testNumber="2"/>
			<description>ArrayOf_4ColourSpaceEntries shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4ColourSpaceEntries contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4ColourSpaceEntries-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_4ColourSpaceEntries shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4ColourSpaceEntries has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4ColourSpaceEntries-0-Name" testNumber="6"/>
			<description>Entry 0 with type Name in ArrayOf_4ColourSpaceEntries shall have value DeviceRGB</description>
			<test>entry0HasTypeName != true || entry0NameValue == "DeviceRGB"</test>
			<error>
				<message>Entry 0 with type Name in ArrayOf_4ColourSpaceEntries has incorrect value %1 instead of DeviceRGB</message>
				<arguments>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4ColourSpaceEntries-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_4ColourSpaceEntries shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4ColourSpaceEntries has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4ColourSpaceEntries-1-Number" testNumber="14"/>
			<description>Entry 1 with type Number in ArrayOf_4ColourSpaceEntries shall satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4ColourSpaceEntries does not satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4ColourSpaceEntries-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_4ColourSpaceEntries shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4ColourSpaceEntries has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4ColourSpaceEntries-2-Number" testNumber="14"/>
			<description>Entry 2 with type Number in ArrayOf_4ColourSpaceEntries shall satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</description>
			<test>entry2HasTypeNumber != true || (entry2NumberValue &gt;= 0) &amp;&amp; (entry2NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_4ColourSpaceEntries does not satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4ColourSpaceEntries-3" testNumber="8"/>
			<description>Entry 3 in ArrayOf_4ColourSpaceEntries shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4ColourSpaceEntries has type %1 instead of type Number</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4ColourSpaceEntries-3-Number" testNumber="14"/>
			<description>Entry 3 with type Number in ArrayOf_4ColourSpaceEntries shall satisfy possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</description>
			<test>entry3HasTypeNumber != true || (entry3NumberValue &gt;= 0) &amp;&amp; (entry3NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 3 with type Number in ArrayOf_4ColourSpaceEntries does not satisfy possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4Integers" testNumber="2"/>
			<description>ArrayOf_4Integers shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4Integers contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4Integers-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_4Integers shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4Integers has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4Integers-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_4Integers shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4Integers has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4Integers-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_4Integers shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4Integers has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4Integers-3" testNumber="8"/>
			<description>Entry 3 in ArrayOf_4Integers shall have type Integer</description>
			<test>size &lt;= 3 || entry3HasTypeInteger == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4Integers has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4Numbers" testNumber="2"/>
			<description>ArrayOf_4Numbers shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4Numbers contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4Numbers-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_4Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4Numbers-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_4Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4Numbers-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_4Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4Numbers-3" testNumber="8"/>
			<description>Entry 3 in ArrayOf_4Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4NumbersColorAnnotation" testNumber="24"/>
			<description>ArrayOf_4NumbersColorAnnotation shall contain 0 to 4 elements</description>
			<test>size &gt;= 0 &amp;&amp; size &lt;= 4</test>
			<error>
				<message>ArrayOf_4NumbersColorAnnotation contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4NumbersColorAnnotation-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4NumbersColorAnnotation has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4NumbersColorAnnotation-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in ArrayOf_4NumbersColorAnnotation shall satisfy possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</description>
			<test>entry0HasTypeNumber != true || (entry0NumberValue &gt;= 0) &amp;&amp; (entry0NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_4NumbersColorAnnotation does not satisfy possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4NumbersColorAnnotation-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4NumbersColorAnnotation has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4NumbersColorAnnotation-1-Number" testNumber="14"/>
			<description>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation shall satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation does not satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4NumbersColorAnnotation-1-Number" testNumber="9"/>
			<description>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation shall satisfy special case: fn:Eval(fn:IsPresent(2))</description>
			<test>entry1HasTypeNumber != true || (contains2 == true)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation does not satisfy special case: fn:Eval(fn:IsPresent(2))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4NumbersColorAnnotation-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4NumbersColorAnnotation has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4NumbersColorAnnotation-2-Number" testNumber="14"/>
			<description>Entry 2 with type Number in ArrayOf_4NumbersColorAnnotation shall satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</description>
			<test>entry2HasTypeNumber != true || (entry2NumberValue &gt;= 0) &amp;&amp; (entry2NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_4NumbersColorAnnotation does not satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4NumbersColorAnnotation-3" testNumber="8"/>
			<description>Entry 3 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4NumbersColorAnnotation has type %1 instead of type Number</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="ArrayOf_4NumbersColorAnnotation-3-Number" testNumber="14"/>
			<description>Entry 3 with type Number in ArrayOf_4NumbersColorAnnotation shall satisfy possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</description>
			<test>entry3HasTypeNumber != true || (entry3NumberValue &gt;= 0) &amp;&amp; (entry3NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 3 with type Number in ArrayOf_4NumbersColorAnnotation does not satisfy possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_6Numbers" testNumber="2"/>
			<description>ArrayOf_6Numbers shall contain exactly 6 elements</description>
			<test>size == 6</test>
			<error>
				<message>ArrayOf_6Numbers contains %1 element(s) instead of 6</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_6Numbers-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_6Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_6Numbers-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_6Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_6Numbers-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_6Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_6Numbers-3" testNumber="8"/>
			<description>Entry 3 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_6Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_6Numbers-4" testNumber="8"/>
			<description>Entry 4 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf_6Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry4Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_6Numbers-5" testNumber="8"/>
			<description>Entry 5 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf_6Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry5Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_8Numbers" testNumber="2"/>
			<description>ArrayOf_8Numbers shall contain exactly 8 elements</description>
			<test>size == 8</test>
			<error>
				<message>ArrayOf_8Numbers contains %1 element(s) instead of 8</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_8Numbers-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_8Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_8Numbers-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_8Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_8Numbers-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_8Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_8Numbers-3" testNumber="8"/>
			<description>Entry 3 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_8Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_8Numbers-4" testNumber="8"/>
			<description>Entry 4 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf_8Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry4Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_8Numbers-5" testNumber="8"/>
			<description>Entry 5 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf_8Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry5Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_8Numbers-6" testNumber="8"/>
			<description>Entry 6 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 6 || entry6HasTypeNumber == true</test>
			<error>
				<message>Entry 6 in ArrayOf_8Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry6Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_8Numbers-7" testNumber="8"/>
			<description>Entry 7 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 7 || entry7HasTypeNumber == true</test>
			<error>
				<message>Entry 7 in ArrayOf_8Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry7Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_9Numbers" testNumber="2"/>
			<description>ArrayOf_9Numbers shall contain exactly 9 elements</description>
			<test>size == 9</test>
			<error>
				<message>ArrayOf_9Numbers contains %1 element(s) instead of 9</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_9Numbers-0" testNumber="8"/>
			<description>Entry 0 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_9Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_9Numbers-1" testNumber="8"/>
			<description>Entry 1 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_9Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_9Numbers-2" testNumber="8"/>
			<description>Entry 2 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_9Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_9Numbers-3" testNumber="8"/>
			<description>Entry 3 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_9Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_9Numbers-4" testNumber="8"/>
			<description>Entry 4 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf_9Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry4Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_9Numbers-5" testNumber="8"/>
			<description>Entry 5 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf_9Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry5Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_9Numbers-6" testNumber="8"/>
			<description>Entry 6 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 6 || entry6HasTypeNumber == true</test>
			<error>
				<message>Entry 6 in ArrayOf_9Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry6Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_9Numbers-7" testNumber="8"/>
			<description>Entry 7 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 7 || entry7HasTypeNumber == true</test>
			<error>
				<message>Entry 7 in ArrayOf_9Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry7Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="ArrayOf_9Numbers-8" testNumber="8"/>
			<description>Entry 8 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 8 || entry8HasTypeNumber == true</test>
			<error>
				<message>Entry 8 in ArrayOf_9Numbers has type %1 instead of type Number</message>
				<arguments>
					<argument>entry8Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_ArrayOfNumbersEntry">
			<id specification="ISO_32000_1_7" clause="ArrayOf_ArrayOfNumbersEntry" testNumber="8"/>
			<description>Entry in ArrayOf_ArrayOfNumbers shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %keyName% in ArrayOf_ArrayOfNumbers has type %1 instead of type Array</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead" testNumber="1"/>
			<description>Bead shall not contain entries except N, P, R, T, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Bead contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-N-Dictionary" testNumber="17"/>
			<description>Entry N with type Dictionary in Bead shall be one of objects BeadFirst, Bead</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in Bead is not one of objects BeadFirst, Bead</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-N" testNumber="8"/>
			<description>Entry N in Bead shall have type Dictionary</description>
			<test>containsN == false || NHasTypeDictionary == true</test>
			<error>
				<message>Entry N in Bead has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-N" testNumber="7"/>
			<description>Entry N in Bead is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in Bead is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-N-Dictionary" testNumber="10"/>
			<description>Entry N with type Dictionary in Bead shall be indirect</description>
			<test>NHasTypeDictionary != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Dictionary in Bead is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-P" testNumber="8"/>
			<description>Entry P in Bead shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in Bead has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-P" testNumber="7"/>
			<description>Entry P in Bead is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in Bead is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in Bead shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in Bead is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-R" testNumber="8"/>
			<description>Entry R in Bead shall have type Rectangle</description>
			<test>containsR == false || RHasTypeRectangle == true</test>
			<error>
				<message>Entry R in Bead has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-R" testNumber="7"/>
			<description>Entry R in Bead is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in Bead is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-T" testNumber="8"/>
			<description>Entry T in Bead shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in Bead has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-T-Dictionary" testNumber="10"/>
			<description>Entry T with type Dictionary in Bead shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in Bead is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-Type" testNumber="8"/>
			<description>Entry Type in Bead shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Bead has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Bead shall have value Bead</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Bead"</test>
			<error>
				<message>Entry Type with type Name in Bead has incorrect value %1 instead of Bead</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-V-Dictionary" testNumber="17"/>
			<description>Entry V with type Dictionary in Bead shall be one of objects BeadFirst, Bead</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in Bead is not one of objects BeadFirst, Bead</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-V" testNumber="8"/>
			<description>Entry V in Bead shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in Bead has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-V" testNumber="7"/>
			<description>Entry V in Bead is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in Bead is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="Bead-V-Dictionary" testNumber="10"/>
			<description>Entry V with type Dictionary in Bead shall be indirect</description>
			<test>VHasTypeDictionary != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Dictionary in Bead is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst" testNumber="1"/>
			<description>BeadFirst shall not contain entries except N, P, R, T, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>BeadFirst contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-N-Dictionary" testNumber="17"/>
			<description>Entry N with type Dictionary in BeadFirst shall be one of objects BeadFirst, Bead</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in BeadFirst is not one of objects BeadFirst, Bead</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-N" testNumber="8"/>
			<description>Entry N in BeadFirst shall have type Dictionary</description>
			<test>containsN == false || NHasTypeDictionary == true</test>
			<error>
				<message>Entry N in BeadFirst has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-N" testNumber="7"/>
			<description>Entry N in BeadFirst is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in BeadFirst is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-N-Dictionary" testNumber="10"/>
			<description>Entry N with type Dictionary in BeadFirst shall be indirect</description>
			<test>NHasTypeDictionary != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Dictionary in BeadFirst is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-P" testNumber="8"/>
			<description>Entry P in BeadFirst shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in BeadFirst has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-P" testNumber="7"/>
			<description>Entry P in BeadFirst is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in BeadFirst is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in BeadFirst shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in BeadFirst is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-R" testNumber="8"/>
			<description>Entry R in BeadFirst shall have type Rectangle</description>
			<test>containsR == false || RHasTypeRectangle == true</test>
			<error>
				<message>Entry R in BeadFirst has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-R" testNumber="7"/>
			<description>Entry R in BeadFirst is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in BeadFirst is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-T" testNumber="8"/>
			<description>Entry T in BeadFirst shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in BeadFirst has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-T" testNumber="7"/>
			<description>Entry T in BeadFirst is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in BeadFirst is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-T-Dictionary" testNumber="10"/>
			<description>Entry T with type Dictionary in BeadFirst shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in BeadFirst is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-Type" testNumber="8"/>
			<description>Entry Type in BeadFirst shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in BeadFirst has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in BeadFirst shall have value Bead</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Bead"</test>
			<error>
				<message>Entry Type with type Name in BeadFirst has incorrect value %1 instead of Bead</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-V-Dictionary" testNumber="17"/>
			<description>Entry V with type Dictionary in BeadFirst shall be one of objects BeadFirst, Bead</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in BeadFirst is not one of objects BeadFirst, Bead</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-V" testNumber="8"/>
			<description>Entry V in BeadFirst shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in BeadFirst has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-V" testNumber="7"/>
			<description>Entry V in BeadFirst is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in BeadFirst is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="BeadFirst-V-Dictionary" testNumber="10"/>
			<description>Entry V with type Dictionary in BeadFirst shall be indirect</description>
			<test>VHasTypeDictionary != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Dictionary in BeadFirst is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_7" clause="BlackpointArray" testNumber="2"/>
			<description>BlackpointArray shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>BlackpointArray contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_7" clause="BlackpointArray-0" testNumber="8"/>
			<description>Entry 0 in BlackpointArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in BlackpointArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_7" clause="BlackpointArray-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in BlackpointArray shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in BlackpointArray does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_7" clause="BlackpointArray-1" testNumber="8"/>
			<description>Entry 1 in BlackpointArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in BlackpointArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_7" clause="BlackpointArray-1-Number" testNumber="14"/>
			<description>Entry 1 with type Number in BlackpointArray shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in BlackpointArray does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_7" clause="BlackpointArray-2" testNumber="8"/>
			<description>Entry 2 in BlackpointArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in BlackpointArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_7" clause="BlackpointArray-2-Number" testNumber="14"/>
			<description>Entry 2 with type Number in BlackpointArray shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in BlackpointArray does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABorderEffect">
			<id specification="ISO_32000_1_7" clause="BorderEffect" testNumber="1"/>
			<description>BorderEffect shall not contain entries except I, S</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'I' &amp;&amp; elem != 'S' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>BorderEffect contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'I' &amp;&amp; elem != 'S' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderEffect">
			<id specification="ISO_32000_1_7" clause="BorderEffect-I" testNumber="8"/>
			<description>Entry I in BorderEffect shall have type Number</description>
			<test>containsI == false || IHasTypeNumber == true</test>
			<error>
				<message>Entry I in BorderEffect has type %1 instead of type Number</message>
				<arguments>
					<argument>IType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderEffect">
			<id specification="ISO_32000_1_7" clause="BorderEffect-I-Number" testNumber="14"/>
			<description>Entry I with type Number in BorderEffect shall satisfy possible value predicate: fn:Eval((@I &gt;= 0.0) &amp;&amp; (@I &lt;= 2.0))</description>
			<test>IHasTypeNumber != true || (INumberValue &gt;= 0.0) &amp;&amp; (INumberValue &lt;= 2.0)</test>
			<error>
				<message>Entry I with type Number in BorderEffect does not satisfy possible value predicate: fn:Eval((@I &gt;= 0.0) &amp;&amp; (@I &lt;= 2.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABorderEffect">
			<id specification="ISO_32000_1_7" clause="BorderEffect-S" testNumber="8"/>
			<description>Entry S in BorderEffect shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in BorderEffect has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderEffect">
			<id specification="ISO_32000_1_7" clause="BorderEffect-S-Name" testNumber="6"/>
			<description>Entry S with type Name in BorderEffect shall have one of values: C, S</description>
			<test>SHasTypeName != true || SNameValue == "C" || SNameValue == "S"</test>
			<error>
				<message>Entry S with type Name in BorderEffect has incorrect value %1 instead of C, S</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="BorderStyle" testNumber="1"/>
			<description>BorderStyle shall not contain entries except D, S, Type, W</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>BorderStyle contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="BorderStyle-D" testNumber="8"/>
			<description>Entry D in BorderStyle shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in BorderStyle has type %1 instead of type Array</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="BorderStyle-S" testNumber="8"/>
			<description>Entry S in BorderStyle shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in BorderStyle has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="BorderStyle-S-Name" testNumber="6"/>
			<description>Entry S with type Name in BorderStyle shall have one of values: B, S, D, U, I</description>
			<test>SHasTypeName != true || SNameValue == "S" || SNameValue == "B" || SNameValue == "D" || SNameValue == "I" || SNameValue == "U"</test>
			<error>
				<message>Entry S with type Name in BorderStyle has incorrect value %1 instead of B, S, D, U, I</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="BorderStyle-Type" testNumber="8"/>
			<description>Entry Type in BorderStyle shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in BorderStyle has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="BorderStyle-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in BorderStyle shall have value Border</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Border"</test>
			<error>
				<message>Entry Type with type Name in BorderStyle has incorrect value %1 instead of Border</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="BorderStyle-W" testNumber="8"/>
			<description>Entry W in BorderStyle shall have type Number</description>
			<test>containsW == false || WHasTypeNumber == true</test>
			<error>
				<message>Entry W in BorderStyle has type %1 instead of type Number</message>
				<arguments>
					<argument>WType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="BorderStyle-W-Number" testNumber="14"/>
			<description>Entry W with type Number in BorderStyle shall satisfy possible value predicate: fn:Eval(@W &gt;= 0.0)</description>
			<test>WHasTypeNumber != true || WNumberValue &gt;= 0.0</test>
			<error>
				<message>Entry W with type Number in BorderStyle does not satisfy possible value predicate: fn:Eval(@W &gt;= 0.0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_7" clause="BoxColorInfo" testNumber="1"/>
			<description>BoxColorInfo shall not contain entries except ArtBox, BleedBox, CropBox, TrimBox</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ArtBox' &amp;&amp; elem != 'BleedBox' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'TrimBox' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>BoxColorInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ArtBox' &amp;&amp; elem != 'BleedBox' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'TrimBox' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_7" clause="BoxColorInfo-ArtBox" testNumber="8"/>
			<description>Entry ArtBox in BoxColorInfo shall have type Dictionary</description>
			<test>containsArtBox == false || ArtBoxHasTypeDictionary == true</test>
			<error>
				<message>Entry ArtBox in BoxColorInfo has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ArtBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_7" clause="BoxColorInfo-BleedBox" testNumber="8"/>
			<description>Entry BleedBox in BoxColorInfo shall have type Dictionary</description>
			<test>containsBleedBox == false || BleedBoxHasTypeDictionary == true</test>
			<error>
				<message>Entry BleedBox in BoxColorInfo has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BleedBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_7" clause="BoxColorInfo-CropBox" testNumber="8"/>
			<description>Entry CropBox in BoxColorInfo shall have type Dictionary</description>
			<test>containsCropBox == false || CropBoxHasTypeDictionary == true</test>
			<error>
				<message>Entry CropBox in BoxColorInfo has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CropBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_7" clause="BoxColorInfo-TrimBox" testNumber="8"/>
			<description>Entry TrimBox in BoxColorInfo shall have type Dictionary</description>
			<test>containsTrimBox == false || TrimBoxHasTypeDictionary == true</test>
			<error>
				<message>Entry TrimBox in BoxColorInfo has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TrimBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_7" clause="BoxStyle" testNumber="1"/>
			<description>BoxStyle shall not contain entries except C, D, S, W</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'S' &amp;&amp; elem != 'W' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>BoxStyle contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'S' &amp;&amp; elem != 'W' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_7" clause="BoxStyle-C" testNumber="8"/>
			<description>Entry C in BoxStyle shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in BoxStyle has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_7" clause="BoxStyle-D" testNumber="8"/>
			<description>Entry D in BoxStyle shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in BoxStyle has type %1 instead of type Array</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_7" clause="BoxStyle-S" testNumber="8"/>
			<description>Entry S in BoxStyle shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in BoxStyle has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_7" clause="BoxStyle-S-Name" testNumber="6"/>
			<description>Entry S with type Name in BoxStyle shall have one of values: S, D</description>
			<test>SHasTypeName != true || SNameValue == "S" || SNameValue == "D"</test>
			<error>
				<message>Entry S with type Name in BoxStyle has incorrect value %1 instead of S, D</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_7" clause="BoxStyle-W" testNumber="8"/>
			<description>Entry W in BoxStyle shall have type Number</description>
			<test>containsW == false || WHasTypeNumber == true</test>
			<error>
				<message>Entry W in BoxStyle has type %1 instead of type Number</message>
				<arguments>
					<argument>WType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics" testNumber="1"/>
			<description>CIDFontDescriptorMetrics shall not contain entries except Ascent, AvgWidth, CapHeight, CharSet, Descent, Flags, FontBBox, FontName, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>CIDFontDescriptorMetrics contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-Ascent" testNumber="8"/>
			<description>Entry Ascent in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in CIDFontDescriptorMetrics has type %1 instead of type Number</message>
				<arguments>
					<argument>AscentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-Ascent" testNumber="7"/>
			<description>Entry Ascent in CIDFontDescriptorMetrics is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in CIDFontDescriptorMetrics is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-AvgWidth" testNumber="8"/>
			<description>Entry AvgWidth in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in CIDFontDescriptorMetrics has type %1 instead of type Number</message>
				<arguments>
					<argument>AvgWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-CapHeight" testNumber="8"/>
			<description>Entry CapHeight in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in CIDFontDescriptorMetrics has type %1 instead of type Number</message>
				<arguments>
					<argument>CapHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-CharSet" testNumber="8"/>
			<description>Entry CharSet in CIDFontDescriptorMetrics shall have type String</description>
			<test>containsCharSet == false || CharSetHasTypeString == true</test>
			<error>
				<message>Entry CharSet in CIDFontDescriptorMetrics has type %1 instead of type String</message>
				<arguments>
					<argument>CharSetType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-Descent" testNumber="8"/>
			<description>Entry Descent in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in CIDFontDescriptorMetrics has type %1 instead of type Number</message>
				<arguments>
					<argument>DescentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-Descent" testNumber="7"/>
			<description>Entry Descent in CIDFontDescriptorMetrics is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in CIDFontDescriptorMetrics is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-Descent-Number" testNumber="14"/>
			<description>Entry Descent with type Number in CIDFontDescriptorMetrics shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in CIDFontDescriptorMetrics does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-Flags" testNumber="8"/>
			<description>Entry Flags in CIDFontDescriptorMetrics shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in CIDFontDescriptorMetrics has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FlagsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-Flags" testNumber="7"/>
			<description>Entry Flags in CIDFontDescriptorMetrics is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in CIDFontDescriptorMetrics is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-Flags-Bitmask" testNumber="9"/>
			<description>Entry Flags with type Bitmask in CIDFontDescriptorMetrics shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in CIDFontDescriptorMetrics does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-FontBBox" testNumber="8"/>
			<description>Entry FontBBox in CIDFontDescriptorMetrics shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in CIDFontDescriptorMetrics has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>FontBBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-FontBBox" testNumber="7"/>
			<description>Entry FontBBox in CIDFontDescriptorMetrics is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in CIDFontDescriptorMetrics is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-FontName" testNumber="8"/>
			<description>Entry FontName in CIDFontDescriptorMetrics shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in CIDFontDescriptorMetrics has type %1 instead of type Name</message>
				<arguments>
					<argument>FontNameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-FontName" testNumber="7"/>
			<description>Entry FontName in CIDFontDescriptorMetrics is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in CIDFontDescriptorMetrics is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-ItalicAngle" testNumber="8"/>
			<description>Entry ItalicAngle in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in CIDFontDescriptorMetrics has type %1 instead of type Number</message>
				<arguments>
					<argument>ItalicAngleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-ItalicAngle" testNumber="7"/>
			<description>Entry ItalicAngle in CIDFontDescriptorMetrics is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in CIDFontDescriptorMetrics is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-Leading" testNumber="8"/>
			<description>Entry Leading in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in CIDFontDescriptorMetrics has type %1 instead of type Number</message>
				<arguments>
					<argument>LeadingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-MaxWidth" testNumber="8"/>
			<description>Entry MaxWidth in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in CIDFontDescriptorMetrics has type %1 instead of type Number</message>
				<arguments>
					<argument>MaxWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-MissingWidth" testNumber="8"/>
			<description>Entry MissingWidth in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in CIDFontDescriptorMetrics has type %1 instead of type Number</message>
				<arguments>
					<argument>MissingWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-StemH" testNumber="8"/>
			<description>Entry StemH in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in CIDFontDescriptorMetrics has type %1 instead of type Number</message>
				<arguments>
					<argument>StemHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-StemV" testNumber="8"/>
			<description>Entry StemV in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in CIDFontDescriptorMetrics has type %1 instead of type Number</message>
				<arguments>
					<argument>StemVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-StemV" testNumber="7"/>
			<description>Entry StemV in CIDFontDescriptorMetrics is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in CIDFontDescriptorMetrics is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-Type" testNumber="8"/>
			<description>Entry Type in CIDFontDescriptorMetrics shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CIDFontDescriptorMetrics has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-Type" testNumber="7"/>
			<description>Entry Type in CIDFontDescriptorMetrics is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in CIDFontDescriptorMetrics is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in CIDFontDescriptorMetrics shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in CIDFontDescriptorMetrics has incorrect value %1 instead of FontDescriptor</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="CIDFontDescriptorMetrics-XHeight" testNumber="8"/>
			<description>Entry XHeight in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in CIDFontDescriptorMetrics has type %1 instead of type Number</message>
				<arguments>
					<argument>XHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_7" clause="CIDSystemInfo" testNumber="1"/>
			<description>CIDSystemInfo shall not contain entries except Ordering, Registry, Supplement</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ordering' &amp;&amp; elem != 'Registry' &amp;&amp; elem != 'Supplement' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>CIDSystemInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ordering' &amp;&amp; elem != 'Registry' &amp;&amp; elem != 'Supplement' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_7" clause="CIDSystemInfo-Ordering" testNumber="8"/>
			<description>Entry Ordering in CIDSystemInfo shall have type StringAscii</description>
			<test>containsOrdering == false || OrderingHasTypeStringAscii == true</test>
			<error>
				<message>Entry Ordering in CIDSystemInfo has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>OrderingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_7" clause="CIDSystemInfo-Ordering" testNumber="7"/>
			<description>Entry Ordering in CIDSystemInfo is required</description>
			<test>containsOrdering == true</test>
			<error>
				<message>Entry Ordering in CIDSystemInfo is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_7" clause="CIDSystemInfo-Registry" testNumber="8"/>
			<description>Entry Registry in CIDSystemInfo shall have type StringAscii</description>
			<test>containsRegistry == false || RegistryHasTypeStringAscii == true</test>
			<error>
				<message>Entry Registry in CIDSystemInfo has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>RegistryType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_7" clause="CIDSystemInfo-Registry" testNumber="7"/>
			<description>Entry Registry in CIDSystemInfo is required</description>
			<test>containsRegistry == true</test>
			<error>
				<message>Entry Registry in CIDSystemInfo is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_7" clause="CIDSystemInfo-Supplement" testNumber="8"/>
			<description>Entry Supplement in CIDSystemInfo shall have type Integer</description>
			<test>containsSupplement == false || SupplementHasTypeInteger == true</test>
			<error>
				<message>Entry Supplement in CIDSystemInfo has type %1 instead of type Integer</message>
				<arguments>
					<argument>SupplementType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_7" clause="CIDSystemInfo-Supplement" testNumber="7"/>
			<description>Entry Supplement in CIDSystemInfo is required</description>
			<test>containsSupplement == true</test>
			<error>
				<message>Entry Supplement in CIDSystemInfo is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream" testNumber="1"/>
			<description>CMapStream shall not contain entries except CIDSystemInfo, CMapName, DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Type, UseCMap, WMode</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CMapName' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UseCMap' &amp;&amp; elem != 'WMode' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>CMapStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CMapName' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UseCMap' &amp;&amp; elem != 'WMode' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-CIDSystemInfo" testNumber="8"/>
			<description>Entry CIDSystemInfo in CMapStream shall have type Dictionary</description>
			<test>containsCIDSystemInfo == false || CIDSystemInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry CIDSystemInfo in CMapStream has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CIDSystemInfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-CIDSystemInfo" testNumber="7"/>
			<description>Entry CIDSystemInfo in CMapStream is required</description>
			<test>containsCIDSystemInfo == true</test>
			<error>
				<message>Entry CIDSystemInfo in CMapStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-CMapName" testNumber="8"/>
			<description>Entry CMapName in CMapStream shall have type Name</description>
			<test>containsCMapName == false || CMapNameHasTypeName == true</test>
			<error>
				<message>Entry CMapName in CMapStream has type %1 instead of type Name</message>
				<arguments>
					<argument>CMapNameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-CMapName" testNumber="7"/>
			<description>Entry CMapName in CMapStream is required</description>
			<test>containsCMapName == true</test>
			<error>
				<message>Entry CMapName in CMapStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-DL" testNumber="8"/>
			<description>Entry DL in CMapStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in CMapStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in CMapStream shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in CMapStream does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in CMapStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in CMapStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in CMapStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in CMapStream has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in CMapStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in CMapStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-F" testNumber="8"/>
			<description>Entry F in CMapStream shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in CMapStream has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in CMapStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in CMapStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in CMapStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in CMapStream has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in CMapStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in CMapStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-FFilter" testNumber="8"/>
			<description>Entry FFilter in CMapStream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in CMapStream has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in CMapStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in CMapStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in CMapStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in CMapStream has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-Filter" testNumber="8"/>
			<description>Entry Filter in CMapStream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in CMapStream has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in CMapStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in CMapStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in CMapStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in CMapStream has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-Length" testNumber="8"/>
			<description>Entry Length in CMapStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in CMapStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-Length" testNumber="7"/>
			<description>Entry Length in CMapStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in CMapStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-Type" testNumber="8"/>
			<description>Entry Type in CMapStream shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CMapStream has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-Type" testNumber="7"/>
			<description>Entry Type in CMapStream is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in CMapStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in CMapStream shall have value CMap</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CMap"</test>
			<error>
				<message>Entry Type with type Name in CMapStream has incorrect value %1 instead of CMap</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-UseCMap" testNumber="8"/>
			<description>Entry UseCMap in CMapStream shall have one of types: Name, Stream</description>
			<test>containsUseCMap == false || UseCMapHasTypeName == true || UseCMapHasTypeStream == true</test>
			<error>
				<message>Entry UseCMap in CMapStream has type %1 instead of one of types: Name, Stream</message>
				<arguments>
					<argument>UseCMapType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-UseCMap-Name" testNumber="6"/>
			<description>Entry UseCMap with type Name in CMapStream shall have one of values: GBK2K-V, ETenms-B5-H, 83pv-RKSJ-H, UniKS-UTF16-V, KSCpc-EUC-H, KSCms-UHC-HW-V, GB-EUC-H, B5pc-V, KSC-EUC-H, HKscs-B5-V, GBK2K-H, B5pc-H, KSCms-UHC-H, HKscs-B5-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H, GB-EUC-V, 90msp-RKSJ-H, UniJIS-UTF16-H, KSC-EUC-V, ETen-B5-V, CNS-EUC-H, UniCNS-UCS2-H, UniJIS-UCS2-H, UniJIS-UCS2-HW-V, ETenms-B5-V, CNS-EUC-V, 90msp-RKSJ-V, UniKS-UCS2-H, UniKS-UTF16-H, ETen-B5-H, 90ms-RKSJ-V, GBpc-EUC-H, Ext-RKSJ-H, UniKS-UCS2-V, Identity-V, H, GBpc-EUC-V, GBKp-EUC-H, KSCms-UHC-V, Add-RKSJ-H, UniCNS-UTF16-H, UniJIS-UTF16-V, V, UniCNS-UCS2-V, GBKp-EUC-V, Add-RKSJ-V, 90pv-RKSJ-H, GBK-EUC-V, UniGB-UTF16-V, UniCNS-UTF16-V, GBK-EUC-H, UniGB-UCS2-H, EUC-V, UniGB-UTF16-H, Ext-RKSJ-V, 90ms-RKSJ-H, Identity-H, UniGB-UCS2-V, EUC-H, KSCms-UHC-HW-H</description>
			<test>UseCMapHasTypeName != true || UseCMapNameValue == "GB-EUC-H" || UseCMapNameValue == "GB-EUC-V" || UseCMapNameValue == "GBpc-EUC-H" || UseCMapNameValue == "GBpc-EUC-V" || UseCMapNameValue == "GBK-EUC-H" || UseCMapNameValue == "GBK-EUC-V" || UseCMapNameValue == "GBKp-EUC-H" || UseCMapNameValue == "GBKp-EUC-V" || UseCMapNameValue == "GBK2K-H" || UseCMapNameValue == "GBK2K-V" || UseCMapNameValue == "UniGB-UCS2-H" || UseCMapNameValue == "UniGB-UCS2-V" || UseCMapNameValue == "UniGB-UTF16-H" || UseCMapNameValue == "UniGB-UTF16-V" || UseCMapNameValue == "B5pc-H" || UseCMapNameValue == "B5pc-V" || UseCMapNameValue == "HKscs-B5-H" || UseCMapNameValue == "HKscs-B5-V" || UseCMapNameValue == "ETen-B5-H" || UseCMapNameValue == "ETen-B5-V" || UseCMapNameValue == "ETenms-B5-H" || UseCMapNameValue == "ETenms-B5-V" || UseCMapNameValue == "CNS-EUC-H" || UseCMapNameValue == "CNS-EUC-V" || UseCMapNameValue == "UniCNS-UCS2-H" || UseCMapNameValue == "UniCNS-UCS2-V" || UseCMapNameValue == "UniCNS-UTF16-H" || UseCMapNameValue == "UniCNS-UTF16-V" || UseCMapNameValue == "83pv-RKSJ-H" || UseCMapNameValue == "90ms-RKSJ-H" || UseCMapNameValue == "90ms-RKSJ-V" || UseCMapNameValue == "90msp-RKSJ-H" || UseCMapNameValue == "90msp-RKSJ-V" || UseCMapNameValue == "90pv-RKSJ-H" || UseCMapNameValue == "Add-RKSJ-H" || UseCMapNameValue == "Add-RKSJ-V" || UseCMapNameValue == "EUC-H" || UseCMapNameValue == "EUC-V" || UseCMapNameValue == "Ext-RKSJ-H" || UseCMapNameValue == "Ext-RKSJ-V" || UseCMapNameValue == "H" || UseCMapNameValue == "V" || UseCMapNameValue == "UniJIS-UCS2-H" || UseCMapNameValue == "UniJIS-UCS2-V" || UseCMapNameValue == "UniJIS-UCS2-HW-H" || UseCMapNameValue == "UniJIS-UCS2-HW-V" || UseCMapNameValue == "UniJIS-UTF16-H" || UseCMapNameValue == "UniJIS-UTF16-V" || UseCMapNameValue == "KSC-EUC-H" || UseCMapNameValue == "KSC-EUC-V" || UseCMapNameValue == "KSCms-UHC-H" || UseCMapNameValue == "KSCms-UHC-V" || UseCMapNameValue == "KSCms-UHC-HW-H" || UseCMapNameValue == "KSCms-UHC-HW-V" || UseCMapNameValue == "KSCpc-EUC-H" || UseCMapNameValue == "UniKS-UCS2-H" || UseCMapNameValue == "UniKS-UCS2-V" || UseCMapNameValue == "UniKS-UTF16-H" || UseCMapNameValue == "UniKS-UTF16-V" || UseCMapNameValue == "Identity-H" || UseCMapNameValue == "Identity-V"</test>
			<error>
				<message>Entry UseCMap with type Name in CMapStream has incorrect value %1 instead of GBK2K-V, ETenms-B5-H, 83pv-RKSJ-H, UniKS-UTF16-V, KSCpc-EUC-H, KSCms-UHC-HW-V, GB-EUC-H, B5pc-V, KSC-EUC-H, HKscs-B5-V, GBK2K-H, B5pc-H, KSCms-UHC-H, HKscs-B5-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H, GB-EUC-V, 90msp-RKSJ-H, UniJIS-UTF16-H, KSC-EUC-V, ETen-B5-V, CNS-EUC-H, UniCNS-UCS2-H, UniJIS-UCS2-H, UniJIS-UCS2-HW-V, ETenms-B5-V, CNS-EUC-V, 90msp-RKSJ-V, UniKS-UCS2-H, UniKS-UTF16-H, ETen-B5-H, 90ms-RKSJ-V, GBpc-EUC-H, Ext-RKSJ-H, UniKS-UCS2-V, Identity-V, H, GBpc-EUC-V, GBKp-EUC-H, KSCms-UHC-V, Add-RKSJ-H, UniCNS-UTF16-H, UniJIS-UTF16-V, V, UniCNS-UCS2-V, GBKp-EUC-V, Add-RKSJ-V, 90pv-RKSJ-H, GBK-EUC-V, UniGB-UTF16-V, UniCNS-UTF16-V, GBK-EUC-H, UniGB-UCS2-H, EUC-V, UniGB-UTF16-H, Ext-RKSJ-V, 90ms-RKSJ-H, Identity-H, UniGB-UCS2-V, EUC-H, KSCms-UHC-HW-H</message>
				<arguments>
					<argument>UseCMapNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-UseCMap-Stream" testNumber="10"/>
			<description>Entry UseCMap with type Stream in CMapStream shall be indirect</description>
			<test>UseCMapHasTypeStream != true || isUseCMapIndirect == true</test>
			<error>
				<message>Entry UseCMap with type Stream in CMapStream is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-WMode" testNumber="8"/>
			<description>Entry WMode in CMapStream shall have type Integer</description>
			<test>containsWMode == false || WModeHasTypeInteger == true</test>
			<error>
				<message>Entry WMode in CMapStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>WModeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="CMapStream-WMode-Integer" testNumber="6"/>
			<description>Entry WMode with type Integer in CMapStream shall have one of values: 0, 1</description>
			<test>WModeHasTypeInteger != true || WModeIntegerValue == 1 || WModeIntegerValue == 0</test>
			<error>
				<message>Entry WMode with type Integer in CMapStream has incorrect value %1 instead of 0, 1</message>
				<arguments>
					<argument>WModeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_7" clause="CalGrayColorSpace" testNumber="2"/>
			<description>CalGrayColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>CalGrayColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_7" clause="CalGrayColorSpace-0" testNumber="8"/>
			<description>Entry 0 in CalGrayColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in CalGrayColorSpace has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_7" clause="CalGrayColorSpace-0-Name" testNumber="6"/>
			<description>Entry 0 with type Name in CalGrayColorSpace shall have value CalGray</description>
			<test>entry0HasTypeName != true || entry0NameValue == "CalGray"</test>
			<error>
				<message>Entry 0 with type Name in CalGrayColorSpace has incorrect value %1 instead of CalGray</message>
				<arguments>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_7" clause="CalGrayColorSpace-1" testNumber="8"/>
			<description>Entry 1 in CalGrayColorSpace shall have type Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in CalGrayColorSpace has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_7" clause="CalGrayDict" testNumber="1"/>
			<description>CalGrayDict shall not contain entries except BlackPoint, Gamma, WhitePoint</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Gamma' &amp;&amp; elem != 'WhitePoint' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>CalGrayDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Gamma' &amp;&amp; elem != 'WhitePoint' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_7" clause="CalGrayDict-BlackPoint" testNumber="8"/>
			<description>Entry BlackPoint in CalGrayDict shall have type Array</description>
			<test>containsBlackPoint == false || BlackPointHasTypeArray == true</test>
			<error>
				<message>Entry BlackPoint in CalGrayDict has type %1 instead of type Array</message>
				<arguments>
					<argument>BlackPointType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_7" clause="CalGrayDict-Gamma" testNumber="8"/>
			<description>Entry Gamma in CalGrayDict shall have type Number</description>
			<test>containsGamma == false || GammaHasTypeNumber == true</test>
			<error>
				<message>Entry Gamma in CalGrayDict has type %1 instead of type Number</message>
				<arguments>
					<argument>GammaType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_7" clause="CalGrayDict-Gamma-Number" testNumber="14"/>
			<description>Entry Gamma with type Number in CalGrayDict shall satisfy possible value predicate: fn:Eval(@Gamma &gt; 0)</description>
			<test>GammaHasTypeNumber != true || GammaNumberValue &gt; 0</test>
			<error>
				<message>Entry Gamma with type Number in CalGrayDict does not satisfy possible value predicate: fn:Eval(@Gamma &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_7" clause="CalGrayDict-WhitePoint" testNumber="8"/>
			<description>Entry WhitePoint in CalGrayDict shall have type Array</description>
			<test>containsWhitePoint == false || WhitePointHasTypeArray == true</test>
			<error>
				<message>Entry WhitePoint in CalGrayDict has type %1 instead of type Array</message>
				<arguments>
					<argument>WhitePointType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_7" clause="CalGrayDict-WhitePoint" testNumber="7"/>
			<description>Entry WhitePoint in CalGrayDict is required</description>
			<test>containsWhitePoint == true</test>
			<error>
				<message>Entry WhitePoint in CalGrayDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_7" clause="CalRGBColorSpace" testNumber="2"/>
			<description>CalRGBColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>CalRGBColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_7" clause="CalRGBColorSpace-0" testNumber="8"/>
			<description>Entry 0 in CalRGBColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in CalRGBColorSpace has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_7" clause="CalRGBColorSpace-0-Name" testNumber="6"/>
			<description>Entry 0 with type Name in CalRGBColorSpace shall have value CalRGB</description>
			<test>entry0HasTypeName != true || entry0NameValue == "CalRGB"</test>
			<error>
				<message>Entry 0 with type Name in CalRGBColorSpace has incorrect value %1 instead of CalRGB</message>
				<arguments>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_7" clause="CalRGBColorSpace-1" testNumber="8"/>
			<description>Entry 1 in CalRGBColorSpace shall have type Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in CalRGBColorSpace has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_7" clause="CalRGBDict" testNumber="1"/>
			<description>CalRGBDict shall not contain entries except BlackPoint, Gamma, Matrix, WhitePoint</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Gamma' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'WhitePoint' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>CalRGBDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Gamma' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'WhitePoint' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_7" clause="CalRGBDict-BlackPoint" testNumber="8"/>
			<description>Entry BlackPoint in CalRGBDict shall have type Array</description>
			<test>containsBlackPoint == false || BlackPointHasTypeArray == true</test>
			<error>
				<message>Entry BlackPoint in CalRGBDict has type %1 instead of type Array</message>
				<arguments>
					<argument>BlackPointType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_7" clause="CalRGBDict-Gamma" testNumber="8"/>
			<description>Entry Gamma in CalRGBDict shall have type Array</description>
			<test>containsGamma == false || GammaHasTypeArray == true</test>
			<error>
				<message>Entry Gamma in CalRGBDict has type %1 instead of type Array</message>
				<arguments>
					<argument>GammaType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_7" clause="CalRGBDict-Matrix" testNumber="8"/>
			<description>Entry Matrix in CalRGBDict shall have type Array</description>
			<test>containsMatrix == false || MatrixHasTypeArray == true</test>
			<error>
				<message>Entry Matrix in CalRGBDict has type %1 instead of type Array</message>
				<arguments>
					<argument>MatrixType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_7" clause="CalRGBDict-WhitePoint" testNumber="8"/>
			<description>Entry WhitePoint in CalRGBDict shall have type Array</description>
			<test>containsWhitePoint == false || WhitePointHasTypeArray == true</test>
			<error>
				<message>Entry WhitePoint in CalRGBDict has type %1 instead of type Array</message>
				<arguments>
					<argument>WhitePointType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_7" clause="CalRGBDict-WhitePoint" testNumber="7"/>
			<description>Entry WhitePoint in CalRGBDict is required</description>
			<test>containsWhitePoint == true</test>
			<error>
				<message>Entry WhitePoint in CalRGBDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog" testNumber="1"/>
			<description>Catalog shall not contain entries except AA, AF, AcroForm, Collection, DPartRoot, Dests, Extensions, Lang, Legal, MarkInfo, Metadata, Names, NeedsRendering, OCProperties, OpenAction, Outlines, OutputIntents, PageLabels, PageLayout, PageMode, Pages, Perms, PieceInfo, Requirements, SpiderInfo, StructTreeRoot, Threads, Type, URI, Version, ViewerPreferences</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AcroForm' &amp;&amp; elem != 'Collection' &amp;&amp; elem != 'DPartRoot' &amp;&amp; elem != 'DSS' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'Extensions' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Legal' &amp;&amp; elem != 'MarkInfo' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Names' &amp;&amp; elem != 'NeedsRendering' &amp;&amp; elem != 'OCProperties' &amp;&amp; elem != 'OpenAction' &amp;&amp; elem != 'Outlines' &amp;&amp; elem != 'OutputIntents' &amp;&amp; elem != 'PageLabels' &amp;&amp; elem != 'PageLayout' &amp;&amp; elem != 'PageMode' &amp;&amp; elem != 'Pages' &amp;&amp; elem != 'Perms' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Requirements' &amp;&amp; elem != 'SpiderInfo' &amp;&amp; elem != 'StructTreeRoot' &amp;&amp; elem != 'Threads' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URI' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'ViewerPreferences' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Catalog contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'AcroForm' &amp;&amp; elem != 'Collection' &amp;&amp; elem != 'DPartRoot' &amp;&amp; elem != 'DSS' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'Extensions' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Legal' &amp;&amp; elem != 'MarkInfo' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Names' &amp;&amp; elem != 'NeedsRendering' &amp;&amp; elem != 'OCProperties' &amp;&amp; elem != 'OpenAction' &amp;&amp; elem != 'Outlines' &amp;&amp; elem != 'OutputIntents' &amp;&amp; elem != 'PageLabels' &amp;&amp; elem != 'PageLayout' &amp;&amp; elem != 'PageMode' &amp;&amp; elem != 'Pages' &amp;&amp; elem != 'Perms' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Requirements' &amp;&amp; elem != 'SpiderInfo' &amp;&amp; elem != 'StructTreeRoot' &amp;&amp; elem != 'Threads' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URI' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'ViewerPreferences' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog" testNumber="22"/>
			<description>Catalog shall not contain entry DSS in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsDSS == false</test>
			<error>
				<message>Catalog contains entry DSS</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-AA" testNumber="8"/>
			<description>Entry AA in Catalog shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-AF" testNumber="8"/>
			<description>Entry AF in Catalog shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in Catalog has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-AF" testNumber="23"/>
			<description>Entry AF in Catalog can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in Catalog is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-AcroForm" testNumber="8"/>
			<description>Entry AcroForm in Catalog shall have type Dictionary</description>
			<test>containsAcroForm == false || AcroFormHasTypeDictionary == true</test>
			<error>
				<message>Entry AcroForm in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AcroFormType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Collection" testNumber="8"/>
			<description>Entry Collection in Catalog shall have type Dictionary</description>
			<test>containsCollection == false || CollectionHasTypeDictionary == true</test>
			<error>
				<message>Entry Collection in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CollectionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-DPartRoot" testNumber="8"/>
			<description>Entry DPartRoot in Catalog shall have type Dictionary</description>
			<test>containsDPartRoot == false || DPartRootHasTypeDictionary == true</test>
			<error>
				<message>Entry DPartRoot in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DPartRootType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-DPartRoot" testNumber="23"/>
			<description>Entry DPartRoot in Catalog can only be present, if satisfy predicate fn:Eval(fn:Extension(PDF_VT2, 1.6) || 2.0)</description>
			<test>containsDPartRoot == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry DPartRoot in Catalog is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Dests" testNumber="8"/>
			<description>Entry Dests in Catalog shall have type Dictionary</description>
			<test>containsDests == false || DestsHasTypeDictionary == true</test>
			<error>
				<message>Entry Dests in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DestsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Dests-Dictionary" testNumber="10"/>
			<description>Entry Dests with type Dictionary in Catalog shall be indirect</description>
			<test>DestsHasTypeDictionary != true || isDestsIndirect == true</test>
			<error>
				<message>Entry Dests with type Dictionary in Catalog is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Extensions" testNumber="8"/>
			<description>Entry Extensions in Catalog shall have type Dictionary</description>
			<test>containsExtensions == false || ExtensionsHasTypeDictionary == true</test>
			<error>
				<message>Entry Extensions in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExtensionsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Extensions-Dictionary" testNumber="10"/>
			<description>Entry Extensions with type Dictionary in Catalog shall be direct</description>
			<test>ExtensionsHasTypeDictionary != true || isExtensionsIndirect == false</test>
			<error>
				<message>Entry Extensions with type Dictionary in Catalog is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Lang" testNumber="8"/>
			<description>Entry Lang in Catalog shall have type StringText</description>
			<test>containsLang == false || LangHasTypeStringText == true</test>
			<error>
				<message>Entry Lang in Catalog has type %1 instead of type StringText</message>
				<arguments>
					<argument>LangType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Legal" testNumber="8"/>
			<description>Entry Legal in Catalog shall have type Dictionary</description>
			<test>containsLegal == false || LegalHasTypeDictionary == true</test>
			<error>
				<message>Entry Legal in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>LegalType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-MarkInfo" testNumber="8"/>
			<description>Entry MarkInfo in Catalog shall have type Dictionary</description>
			<test>containsMarkInfo == false || MarkInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry MarkInfo in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MarkInfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Metadata" testNumber="8"/>
			<description>Entry Metadata in Catalog shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in Catalog has type %1 instead of type Stream</message>
				<arguments>
					<argument>MetadataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Metadata-Stream" testNumber="10"/>
			<description>Entry Metadata with type Stream in Catalog shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in Catalog is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Names" testNumber="8"/>
			<description>Entry Names in Catalog shall have type Dictionary</description>
			<test>containsNames == false || NamesHasTypeDictionary == true</test>
			<error>
				<message>Entry Names in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>NamesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-NeedsRendering" testNumber="8"/>
			<description>Entry NeedsRendering in Catalog shall have type Boolean</description>
			<test>containsNeedsRendering == false || NeedsRenderingHasTypeBoolean == true</test>
			<error>
				<message>Entry NeedsRendering in Catalog has type %1 instead of type Boolean</message>
				<arguments>
					<argument>NeedsRenderingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-OCProperties" testNumber="8"/>
			<description>Entry OCProperties in Catalog shall have type Dictionary</description>
			<test>containsOCProperties == false || OCPropertiesHasTypeDictionary == true</test>
			<error>
				<message>Entry OCProperties in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCPropertiesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-OpenAction-Array" testNumber="17"/>
			<description>Entry OpenAction with type Array in Catalog shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>OpenActionHasTypeArray != true || OpenAction_size == 1</test>
			<error>
				<message>Entry OpenAction with type Array in Catalog is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-OpenAction-Dictionary" testNumber="17"/>
			<description>Entry OpenAction with type Dictionary in Catalog shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>OpenActionHasTypeDictionary != true || OpenAction_size == 1</test>
			<error>
				<message>Entry OpenAction with type Dictionary in Catalog is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-OpenAction" testNumber="8"/>
			<description>Entry OpenAction in Catalog shall have one of types: Array, Dictionary</description>
			<test>containsOpenAction == false || OpenActionHasTypeArray == true || OpenActionHasTypeDictionary == true</test>
			<error>
				<message>Entry OpenAction in Catalog has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>OpenActionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Outlines" testNumber="8"/>
			<description>Entry Outlines in Catalog shall have type Dictionary</description>
			<test>containsOutlines == false || OutlinesHasTypeDictionary == true</test>
			<error>
				<message>Entry Outlines in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OutlinesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Outlines-Dictionary" testNumber="10"/>
			<description>Entry Outlines with type Dictionary in Catalog shall be indirect</description>
			<test>OutlinesHasTypeDictionary != true || isOutlinesIndirect == true</test>
			<error>
				<message>Entry Outlines with type Dictionary in Catalog is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-OutputIntents" testNumber="8"/>
			<description>Entry OutputIntents in Catalog shall have type Array</description>
			<test>containsOutputIntents == false || OutputIntentsHasTypeArray == true</test>
			<error>
				<message>Entry OutputIntents in Catalog has type %1 instead of type Array</message>
				<arguments>
					<argument>OutputIntentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-PageLabels" testNumber="8"/>
			<description>Entry PageLabels in Catalog shall have type NumberTree</description>
			<test>containsPageLabels == false || PageLabelsHasTypeNumberTree == true</test>
			<error>
				<message>Entry PageLabels in Catalog has type %1 instead of type NumberTree</message>
				<arguments>
					<argument>PageLabelsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-PageLabelsTreeNode" testNumber="8"/>
			<description>Entry PageLabelsTreeNode in Catalog shall have type NumberTree</description>
			<test>containsPageLabelsTreeNode == false || PageLabelsTreeNodeHasTypeNumberTree == true</test>
			<error>
				<message>Entry PageLabelsTreeNode in Catalog has type %1 instead of type NumberTree</message>
				<arguments>
					<argument>PageLabelsTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-PageLayout" testNumber="8"/>
			<description>Entry PageLayout in Catalog shall have type Name</description>
			<test>containsPageLayout == false || PageLayoutHasTypeName == true</test>
			<error>
				<message>Entry PageLayout in Catalog has type %1 instead of type Name</message>
				<arguments>
					<argument>PageLayoutType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-PageLayout-Name" testNumber="6"/>
			<description>Entry PageLayout with type Name in Catalog shall have one of values: SinglePage, TwoColumnLeft, OneColumn, TwoPageRight, TwoPageLeft, TwoColumnRight</description>
			<test>PageLayoutHasTypeName != true || PageLayoutNameValue == "SinglePage" || PageLayoutNameValue == "OneColumn" || PageLayoutNameValue == "TwoColumnLeft" || PageLayoutNameValue == "TwoColumnRight" || PageLayoutNameValue == "TwoPageLeft" || PageLayoutNameValue == "TwoPageRight"</test>
			<error>
				<message>Entry PageLayout with type Name in Catalog has incorrect value %1 instead of SinglePage, TwoColumnLeft, OneColumn, TwoPageRight, TwoPageLeft, TwoColumnRight</message>
				<arguments>
					<argument>PageLayoutNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-PageMode" testNumber="8"/>
			<description>Entry PageMode in Catalog shall have type Name</description>
			<test>containsPageMode == false || PageModeHasTypeName == true</test>
			<error>
				<message>Entry PageMode in Catalog has type %1 instead of type Name</message>
				<arguments>
					<argument>PageModeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-PageMode-Name" testNumber="6"/>
			<description>Entry PageMode with type Name in Catalog shall have one of values: UseOutlines, UseThumbs, UseOC, UseAttachments, UseNone, FullScreen</description>
			<test>PageModeHasTypeName != true || PageModeNameValue == "UseNone" || PageModeNameValue == "UseOutlines" || PageModeNameValue == "UseThumbs" || PageModeNameValue == "FullScreen" || PageModeNameValue == "UseOC" || PageModeNameValue == "UseAttachments"</test>
			<error>
				<message>Entry PageMode with type Name in Catalog has incorrect value %1 instead of UseOutlines, UseThumbs, UseOC, UseAttachments, UseNone, FullScreen</message>
				<arguments>
					<argument>PageModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Pages" testNumber="8"/>
			<description>Entry Pages in Catalog shall have type Dictionary</description>
			<test>containsPages == false || PagesHasTypeDictionary == true</test>
			<error>
				<message>Entry Pages in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PagesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Pages" testNumber="7"/>
			<description>Entry Pages in Catalog is required</description>
			<test>containsPages == true</test>
			<error>
				<message>Entry Pages in Catalog is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Pages-Dictionary" testNumber="10"/>
			<description>Entry Pages with type Dictionary in Catalog shall be indirect</description>
			<test>PagesHasTypeDictionary != true || isPagesIndirect == true</test>
			<error>
				<message>Entry Pages with type Dictionary in Catalog is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Perms" testNumber="8"/>
			<description>Entry Perms in Catalog shall have type Dictionary</description>
			<test>containsPerms == false || PermsHasTypeDictionary == true</test>
			<error>
				<message>Entry Perms in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PermsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-PieceInfo" testNumber="8"/>
			<description>Entry PieceInfo in Catalog shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PieceInfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Requirements" testNumber="8"/>
			<description>Entry Requirements in Catalog shall have type Array</description>
			<test>containsRequirements == false || RequirementsHasTypeArray == true</test>
			<error>
				<message>Entry Requirements in Catalog has type %1 instead of type Array</message>
				<arguments>
					<argument>RequirementsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-SpiderInfo" testNumber="8"/>
			<description>Entry SpiderInfo in Catalog shall have type Dictionary</description>
			<test>containsSpiderInfo == false || SpiderInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry SpiderInfo in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SpiderInfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-StructTreeRoot" testNumber="8"/>
			<description>Entry StructTreeRoot in Catalog shall have type Dictionary</description>
			<test>containsStructTreeRoot == false || StructTreeRootHasTypeDictionary == true</test>
			<error>
				<message>Entry StructTreeRoot in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>StructTreeRootType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-StructTreeRoot-Dictionary" testNumber="10"/>
			<description>Entry StructTreeRoot with type Dictionary in Catalog shall be indirect</description>
			<test>StructTreeRootHasTypeDictionary != true || isStructTreeRootIndirect == true</test>
			<error>
				<message>Entry StructTreeRoot with type Dictionary in Catalog is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Threads" testNumber="8"/>
			<description>Entry Threads in Catalog shall have type Array</description>
			<test>containsThreads == false || ThreadsHasTypeArray == true</test>
			<error>
				<message>Entry Threads in Catalog has type %1 instead of type Array</message>
				<arguments>
					<argument>ThreadsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Threads-Array" testNumber="10"/>
			<description>Entry Threads with type Array in Catalog shall be indirect</description>
			<test>ThreadsHasTypeArray != true || isThreadsIndirect == true</test>
			<error>
				<message>Entry Threads with type Array in Catalog is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Type" testNumber="8"/>
			<description>Entry Type in Catalog shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Catalog has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Type" testNumber="7"/>
			<description>Entry Type in Catalog is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in Catalog is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Catalog shall have value Catalog</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Catalog"</test>
			<error>
				<message>Entry Type with type Name in Catalog has incorrect value %1 instead of Catalog</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-URI" testNumber="8"/>
			<description>Entry URI in Catalog shall have type Dictionary</description>
			<test>containsURI == false || URIHasTypeDictionary == true</test>
			<error>
				<message>Entry URI in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>URIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Version" testNumber="8"/>
			<description>Entry Version in Catalog shall have type Name</description>
			<test>containsVersion == false || VersionHasTypeName == true</test>
			<error>
				<message>Entry Version in Catalog has type %1 instead of type Name</message>
				<arguments>
					<argument>VersionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-Version-Name" testNumber="6"/>
			<description>Entry Version with type Name in Catalog shall have one of values: 1.0, 1.1, 2.0, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7</description>
			<test>VersionHasTypeName != true || VersionNameValue == "1.0" || VersionNameValue == "1.1" || VersionNameValue == "1.2" || VersionNameValue == "1.3" || VersionNameValue == "1.4" || VersionNameValue == "1.5" || VersionNameValue == "1.6" || VersionNameValue == "1.7" || VersionNameValue == "2.0"</test>
			<error>
				<message>Entry Version with type Name in Catalog has incorrect value %1 instead of 1.0, 1.1, 2.0, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7</message>
				<arguments>
					<argument>VersionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="Catalog-ViewerPreferences" testNumber="8"/>
			<description>Entry ViewerPreferences in Catalog shall have type Dictionary</description>
			<test>containsViewerPreferences == false || ViewerPreferencesHasTypeDictionary == true</test>
			<error>
				<message>Entry ViewerPreferences in Catalog has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ViewerPreferencesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalogNumberTreePageLabelsEntry">
			<id specification="ISO_32000_1_7" clause="CatalogNumberTreePageLabelsEntry" testNumber="8"/>
			<description>Entry in CatalogNumberTreePageLabels shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in CatalogNumberTreePageLabels has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="CertSeedValue" testNumber="1"/>
			<description>CertSeedValue shall not contain entries except Ff, Issuer, KeyUsage, OID, Subject, SubjectDN, Type, URL, URLType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ff' &amp;&amp; elem != 'Issuer' &amp;&amp; elem != 'KeyUsage' &amp;&amp; elem != 'OID' &amp;&amp; elem != 'SignaturePolicyCommitmentType' &amp;&amp; elem != 'SignaturePolicyHashAlgorithm' &amp;&amp; elem != 'SignaturePolicyHashValue' &amp;&amp; elem != 'SignaturePolicyOID' &amp;&amp; elem != 'Subject' &amp;&amp; elem != 'SubjectDN' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URL' &amp;&amp; elem != 'URLType' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>CertSeedValue contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ff' &amp;&amp; elem != 'Issuer' &amp;&amp; elem != 'KeyUsage' &amp;&amp; elem != 'OID' &amp;&amp; elem != 'SignaturePolicyCommitmentType' &amp;&amp; elem != 'SignaturePolicyHashAlgorithm' &amp;&amp; elem != 'SignaturePolicyHashValue' &amp;&amp; elem != 'SignaturePolicyOID' &amp;&amp; elem != 'Subject' &amp;&amp; elem != 'SubjectDN' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URL' &amp;&amp; elem != 'URLType' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="CertSeedValue" testNumber="22"/>
			<description>CertSeedValue shall not contain entries SignaturePolicyCommitmentType, SignaturePolicyHashAlgorithm, SignaturePolicyHashValue, SignaturePolicyOID in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'SignaturePolicyCommitmentType' || elem == 'SignaturePolicyHashAlgorithm' || elem == 'SignaturePolicyHashValue' || elem == 'SignaturePolicyOID').length == 0</test>
			<error>
				<message>CertSeedValue contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'SignaturePolicyCommitmentType' || elem == 'SignaturePolicyHashAlgorithm' || elem == 'SignaturePolicyHashValue' || elem == 'SignaturePolicyOID').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="CertSeedValue-Ff" testNumber="8"/>
			<description>Entry Ff in CertSeedValue shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in CertSeedValue has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="CertSeedValue-Ff-Bitmask" testNumber="9"/>
			<description>Entry Ff with type Bitmask in CertSeedValue shall satisfy special case: fn:Eval(fn:BitsClear(8, 32))</description>
			<test>FfHasTypeBitmask != true || ((FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry Ff with type Bitmask in CertSeedValue does not satisfy special case: fn:Eval(fn:BitsClear(8, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="CertSeedValue-Issuer" testNumber="8"/>
			<description>Entry Issuer in CertSeedValue shall have type Array</description>
			<test>containsIssuer == false || IssuerHasTypeArray == true</test>
			<error>
				<message>Entry Issuer in CertSeedValue has type %1 instead of type Array</message>
				<arguments>
					<argument>IssuerType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="CertSeedValue-KeyUsage" testNumber="8"/>
			<description>Entry KeyUsage in CertSeedValue shall have type Array</description>
			<test>containsKeyUsage == false || KeyUsageHasTypeArray == true</test>
			<error>
				<message>Entry KeyUsage in CertSeedValue has type %1 instead of type Array</message>
				<arguments>
					<argument>KeyUsageType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="CertSeedValue-OID" testNumber="8"/>
			<description>Entry OID in CertSeedValue shall have type Array</description>
			<test>containsOID == false || OIDHasTypeArray == true</test>
			<error>
				<message>Entry OID in CertSeedValue has type %1 instead of type Array</message>
				<arguments>
					<argument>OIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="CertSeedValue-Subject" testNumber="8"/>
			<description>Entry Subject in CertSeedValue shall have type Array</description>
			<test>containsSubject == false || SubjectHasTypeArray == true</test>
			<error>
				<message>Entry Subject in CertSeedValue has type %1 instead of type Array</message>
				<arguments>
					<argument>SubjectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="CertSeedValue-SubjectDN" testNumber="8"/>
			<description>Entry SubjectDN in CertSeedValue shall have type Array</description>
			<test>containsSubjectDN == false || SubjectDNHasTypeArray == true</test>
			<error>
				<message>Entry SubjectDN in CertSeedValue has type %1 instead of type Array</message>
				<arguments>
					<argument>SubjectDNType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="CertSeedValue-Type" testNumber="8"/>
			<description>Entry Type in CertSeedValue shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CertSeedValue has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="CertSeedValue-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in CertSeedValue shall have value SVCert</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SVCert"</test>
			<error>
				<message>Entry Type with type Name in CertSeedValue has incorrect value %1 instead of SVCert</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="CertSeedValue-URL" testNumber="8"/>
			<description>Entry URL in CertSeedValue shall have type StringAscii</description>
			<test>containsURL == false || URLHasTypeStringAscii == true</test>
			<error>
				<message>Entry URL in CertSeedValue has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>URLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="CertSeedValue-URLType" testNumber="8"/>
			<description>Entry URLType in CertSeedValue shall have type Name</description>
			<test>containsURLType == false || URLTypeHasTypeName == true</test>
			<error>
				<message>Entry URLType in CertSeedValue has type %1 instead of type Name</message>
				<arguments>
					<argument>URLTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACharProcMapEntry">
			<id specification="ISO_32000_1_7" clause="CharProcMapEntry" testNumber="8"/>
			<description>Entry in CharProcMap shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in CharProcMap has type %1 instead of type Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACharProcMapEntry">
			<id specification="ISO_32000_1_7" clause="CharProcMapEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in CharProcMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in CharProcMap is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AClassMapEntry">
			<id specification="ISO_32000_1_7" clause="ClassMapEntry" testNumber="8"/>
			<description>Entry in ClassMap shall have one of types: Array, Dictionary</description>
			<test>HasTypeArray == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in ClassMap has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection" testNumber="1"/>
			<description>Collection shall not contain entries except Colors, D, Folders, Navigator, Resources, Schema, Sort, Split, Type, View</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Colors' &amp;&amp; elem != 'D' &amp;&amp; elem != 'Folders' &amp;&amp; elem != 'Navigator' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Schema' &amp;&amp; elem != 'Sort' &amp;&amp; elem != 'Split' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'View' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Collection contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Colors' &amp;&amp; elem != 'D' &amp;&amp; elem != 'Folders' &amp;&amp; elem != 'Navigator' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Schema' &amp;&amp; elem != 'Sort' &amp;&amp; elem != 'Split' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'View' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Colors" testNumber="8"/>
			<description>Entry Colors in Collection shall have type Dictionary</description>
			<test>containsColors == false || ColorsHasTypeDictionary == true</test>
			<error>
				<message>Entry Colors in Collection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ColorsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Colors" testNumber="23"/>
			<description>Entry Colors in Collection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsColors == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Colors in Collection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-D" testNumber="8"/>
			<description>Entry D in Collection shall have type StringByte</description>
			<test>containsD == false || DHasTypeStringByte == true</test>
			<error>
				<message>Entry D in Collection has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Folders" testNumber="8"/>
			<description>Entry Folders in Collection shall have type Dictionary</description>
			<test>containsFolders == false || FoldersHasTypeDictionary == true</test>
			<error>
				<message>Entry Folders in Collection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FoldersType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Folders" testNumber="23"/>
			<description>Entry Folders in Collection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsFolders == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Folders in Collection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Folders-Dictionary" testNumber="10"/>
			<description>Entry Folders with type Dictionary in Collection shall be indirect</description>
			<test>FoldersHasTypeDictionary != true || isFoldersIndirect == true</test>
			<error>
				<message>Entry Folders with type Dictionary in Collection is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Navigator" testNumber="8"/>
			<description>Entry Navigator in Collection shall have type Dictionary</description>
			<test>containsNavigator == false || NavigatorHasTypeDictionary == true</test>
			<error>
				<message>Entry Navigator in Collection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>NavigatorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Navigator" testNumber="11"/>
			<description>Entry Navigator in Collection is required, when @View == C</description>
			<test>containsNavigator == true || (ViewNameValue != "C")</test>
			<error>
				<message>Entry Navigator in Collection is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Navigator" testNumber="23"/>
			<description>Entry Navigator in Collection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsNavigator == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Navigator in Collection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Navigator-Dictionary" testNumber="10"/>
			<description>Entry Navigator with type Dictionary in Collection shall be indirect</description>
			<test>NavigatorHasTypeDictionary != true || isNavigatorIndirect == true</test>
			<error>
				<message>Entry Navigator with type Dictionary in Collection is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Resources" testNumber="8"/>
			<description>Entry Resources in Collection shall have type NameTree</description>
			<test>containsResources == false || ResourcesHasTypeNameTree == true</test>
			<error>
				<message>Entry Resources in Collection has type %1 instead of type NameTree</message>
				<arguments>
					<argument>ResourcesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Resources" testNumber="23"/>
			<description>Entry Resources in Collection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsResources == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Resources in Collection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Resources-NameTree" testNumber="10"/>
			<description>Entry Resources with type NameTree in Collection shall be indirect</description>
			<test>ResourcesHasTypeNameTree != true || isResourcesIndirect == true</test>
			<error>
				<message>Entry Resources with type NameTree in Collection is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-ResourcesTreeNode" testNumber="8"/>
			<description>Entry ResourcesTreeNode in Collection shall have type NameTree</description>
			<test>containsResourcesTreeNode == false || ResourcesTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry ResourcesTreeNode in Collection has type %1 instead of type NameTree</message>
				<arguments>
					<argument>ResourcesTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-ResourcesTreeNode" testNumber="23"/>
			<description>Entry ResourcesTreeNode in Collection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsResourcesTreeNode == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry ResourcesTreeNode in Collection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-ResourcesTreeNode-NameTree" testNumber="10"/>
			<description>Entry ResourcesTreeNode with type NameTree in Collection shall be indirect</description>
			<test>ResourcesTreeNodeHasTypeNameTree != true || isResourcesTreeNodeIndirect == true</test>
			<error>
				<message>Entry ResourcesTreeNode with type NameTree in Collection is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Schema" testNumber="8"/>
			<description>Entry Schema in Collection shall have type Dictionary</description>
			<test>containsSchema == false || SchemaHasTypeDictionary == true</test>
			<error>
				<message>Entry Schema in Collection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SchemaType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Sort" testNumber="8"/>
			<description>Entry Sort in Collection shall have type Dictionary</description>
			<test>containsSort == false || SortHasTypeDictionary == true</test>
			<error>
				<message>Entry Sort in Collection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SortType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Split" testNumber="8"/>
			<description>Entry Split in Collection shall have type Dictionary</description>
			<test>containsSplit == false || SplitHasTypeDictionary == true</test>
			<error>
				<message>Entry Split in Collection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SplitType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Split" testNumber="23"/>
			<description>Entry Split in Collection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSplit == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Split in Collection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Type" testNumber="8"/>
			<description>Entry Type in Collection shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Collection has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Collection shall have value Collection</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Collection"</test>
			<error>
				<message>Entry Type with type Name in Collection has incorrect value %1 instead of Collection</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-View" testNumber="8"/>
			<description>Entry View in Collection shall have type Name</description>
			<test>containsView == false || ViewHasTypeName == true</test>
			<error>
				<message>Entry View in Collection has type %1 instead of type Name</message>
				<arguments>
					<argument>ViewType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="Collection-View-Name" testNumber="6"/>
			<description>Entry View with type Name in Collection shall have one of values: C, D, T, H</description>
			<test>ViewHasTypeName != true || ViewNameValue == "D" || ViewNameValue == "T" || ViewNameValue == "H" || ViewNameValue == "C"</test>
			<error>
				<message>Entry View with type Name in Collection has incorrect value %1 instead of C, D, T, H</message>
				<arguments>
					<argument>ViewNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="CollectionColors" testNumber="1"/>
			<description>CollectionColors shall not contain entries except Background, CardBackground, CardBorder, PrimaryText, SecondaryText</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Background' &amp;&amp; elem != 'CardBackground' &amp;&amp; elem != 'CardBorder' &amp;&amp; elem != 'PrimaryText' &amp;&amp; elem != 'SecondaryText' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>CollectionColors contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Background' &amp;&amp; elem != 'CardBackground' &amp;&amp; elem != 'CardBorder' &amp;&amp; elem != 'PrimaryText' &amp;&amp; elem != 'SecondaryText' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="CollectionColors" testNumber="22"/>
			<description>CollectionColors shall not contain entry Type in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsType == false</test>
			<error>
				<message>CollectionColors contains entry Type</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="CollectionColors-Background" testNumber="8"/>
			<description>Entry Background in CollectionColors shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in CollectionColors has type %1 instead of type Array</message>
				<arguments>
					<argument>BackgroundType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="CollectionColors-Background" testNumber="23"/>
			<description>Entry Background in CollectionColors can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsBackground == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Background in CollectionColors is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="CollectionColors-CardBackground" testNumber="8"/>
			<description>Entry CardBackground in CollectionColors shall have type Array</description>
			<test>containsCardBackground == false || CardBackgroundHasTypeArray == true</test>
			<error>
				<message>Entry CardBackground in CollectionColors has type %1 instead of type Array</message>
				<arguments>
					<argument>CardBackgroundType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="CollectionColors-CardBackground" testNumber="23"/>
			<description>Entry CardBackground in CollectionColors can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsCardBackground == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry CardBackground in CollectionColors is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="CollectionColors-CardBorder" testNumber="8"/>
			<description>Entry CardBorder in CollectionColors shall have type Array</description>
			<test>containsCardBorder == false || CardBorderHasTypeArray == true</test>
			<error>
				<message>Entry CardBorder in CollectionColors has type %1 instead of type Array</message>
				<arguments>
					<argument>CardBorderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="CollectionColors-CardBorder" testNumber="23"/>
			<description>Entry CardBorder in CollectionColors can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsCardBorder == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry CardBorder in CollectionColors is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="CollectionColors-PrimaryText" testNumber="8"/>
			<description>Entry PrimaryText in CollectionColors shall have type Array</description>
			<test>containsPrimaryText == false || PrimaryTextHasTypeArray == true</test>
			<error>
				<message>Entry PrimaryText in CollectionColors has type %1 instead of type Array</message>
				<arguments>
					<argument>PrimaryTextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="CollectionColors-PrimaryText" testNumber="23"/>
			<description>Entry PrimaryText in CollectionColors can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsPrimaryText == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PrimaryText in CollectionColors is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="CollectionColors-SecondaryText" testNumber="8"/>
			<description>Entry SecondaryText in CollectionColors shall have type Array</description>
			<test>containsSecondaryText == false || SecondaryTextHasTypeArray == true</test>
			<error>
				<message>Entry SecondaryText in CollectionColors has type %1 instead of type Array</message>
				<arguments>
					<argument>SecondaryTextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="CollectionColors-SecondaryText" testNumber="23"/>
			<description>Entry SecondaryText in CollectionColors can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSecondaryText == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry SecondaryText in CollectionColors is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="CollectionField" testNumber="1"/>
			<description>CollectionField shall not contain entries except E, N, O, Subtype, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'E' &amp;&amp; elem != 'N' &amp;&amp; elem != 'O' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>CollectionField contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'E' &amp;&amp; elem != 'N' &amp;&amp; elem != 'O' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="CollectionField-E" testNumber="8"/>
			<description>Entry E in CollectionField shall have type Boolean</description>
			<test>containsE == false || EHasTypeBoolean == true</test>
			<error>
				<message>Entry E in CollectionField has type %1 instead of type Boolean</message>
				<arguments>
					<argument>EType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="CollectionField-N" testNumber="8"/>
			<description>Entry N in CollectionField shall have type StringText</description>
			<test>containsN == false || NHasTypeStringText == true</test>
			<error>
				<message>Entry N in CollectionField has type %1 instead of type StringText</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="CollectionField-N" testNumber="7"/>
			<description>Entry N in CollectionField is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in CollectionField is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="CollectionField-O" testNumber="8"/>
			<description>Entry O in CollectionField shall have type Integer</description>
			<test>containsO == false || OHasTypeInteger == true</test>
			<error>
				<message>Entry O in CollectionField has type %1 instead of type Integer</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="CollectionField-Subtype" testNumber="8"/>
			<description>Entry Subtype in CollectionField shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in CollectionField has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="CollectionField-Subtype" testNumber="7"/>
			<description>Entry Subtype in CollectionField is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in CollectionField is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="CollectionField-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in CollectionField shall have one of values: Desc, CreationDate, S, D, CompressedSize, F, Size, ModDate, N</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "S" || SubtypeNameValue == "D" || SubtypeNameValue == "N" || SubtypeNameValue == "F" || SubtypeNameValue == "Desc" || SubtypeNameValue == "ModDate" || SubtypeNameValue == "CreationDate" || SubtypeNameValue == "Size" || SubtypeNameValue == "CompressedSize"</test>
			<error>
				<message>Entry Subtype with type Name in CollectionField has incorrect value %1 instead of Desc, CreationDate, S, D, CompressedSize, F, Size, ModDate, N</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="CollectionField-Type" testNumber="8"/>
			<description>Entry Type in CollectionField shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CollectionField has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="CollectionField-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in CollectionField shall have value CollectionField</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CollectionField"</test>
			<error>
				<message>Entry Type with type Name in CollectionField has incorrect value %1 instead of CollectionField</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="CollectionField-V" testNumber="8"/>
			<description>Entry V in CollectionField shall have type Boolean</description>
			<test>containsV == false || VHasTypeBoolean == true</test>
			<error>
				<message>Entry V in CollectionField has type %1 instead of type Boolean</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder" testNumber="1"/>
			<description>CollectionFolder shall not contain entries except CI, Child, CreationDate, Desc, Free, ID, ModDate, Name, Next, Parent, Thumb, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CI' &amp;&amp; elem != 'Child' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Desc' &amp;&amp; elem != 'Free' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ModDate' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>CollectionFolder contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CI' &amp;&amp; elem != 'Child' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Desc' &amp;&amp; elem != 'Free' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ModDate' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-CI" testNumber="8"/>
			<description>Entry CI in CollectionFolder shall have type Dictionary</description>
			<test>containsCI == false || CIHasTypeDictionary == true</test>
			<error>
				<message>Entry CI in CollectionFolder has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-CI" testNumber="23"/>
			<description>Entry CI in CollectionFolder can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsCI == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry CI in CollectionFolder is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Child" testNumber="8"/>
			<description>Entry Child in CollectionFolder shall have type Dictionary</description>
			<test>containsChild == false || ChildHasTypeDictionary == true</test>
			<error>
				<message>Entry Child in CollectionFolder has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ChildType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Child" testNumber="23"/>
			<description>Entry Child in CollectionFolder can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsChild == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Child in CollectionFolder is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Child-Dictionary" testNumber="10"/>
			<description>Entry Child with type Dictionary in CollectionFolder shall be indirect</description>
			<test>ChildHasTypeDictionary != true || isChildIndirect == true</test>
			<error>
				<message>Entry Child with type Dictionary in CollectionFolder is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in CollectionFolder shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in CollectionFolder has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-CreationDate" testNumber="23"/>
			<description>Entry CreationDate in CollectionFolder can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsCreationDate == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry CreationDate in CollectionFolder is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Desc" testNumber="8"/>
			<description>Entry Desc in CollectionFolder shall have type StringText</description>
			<test>containsDesc == false || DescHasTypeStringText == true</test>
			<error>
				<message>Entry Desc in CollectionFolder has type %1 instead of type StringText</message>
				<arguments>
					<argument>DescType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Desc" testNumber="23"/>
			<description>Entry Desc in CollectionFolder can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsDesc == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Desc in CollectionFolder is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Free" testNumber="8"/>
			<description>Entry Free in CollectionFolder shall have type Array</description>
			<test>containsFree == false || FreeHasTypeArray == true</test>
			<error>
				<message>Entry Free in CollectionFolder has type %1 instead of type Array</message>
				<arguments>
					<argument>FreeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Free" testNumber="23"/>
			<description>Entry Free in CollectionFolder can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsFree == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Free in CollectionFolder is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-ID" testNumber="8"/>
			<description>Entry ID in CollectionFolder shall have type Integer</description>
			<test>containsID == false || entryIDHasTypeInteger == true</test>
			<error>
				<message>Entry ID in CollectionFolder has type %1 instead of type Integer</message>
				<arguments>
					<argument>entryIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-ID" testNumber="7"/>
			<description>Entry ID in CollectionFolder is required</description>
			<test>containsID == true</test>
			<error>
				<message>Entry ID in CollectionFolder is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-ID" testNumber="23"/>
			<description>Entry ID in CollectionFolder can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsID == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry ID in CollectionFolder is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-ModDate" testNumber="8"/>
			<description>Entry ModDate in CollectionFolder shall have type Date</description>
			<test>containsModDate == false || ModDateHasTypeDate == true</test>
			<error>
				<message>Entry ModDate in CollectionFolder has type %1 instead of type Date</message>
				<arguments>
					<argument>ModDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-ModDate" testNumber="23"/>
			<description>Entry ModDate in CollectionFolder can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsModDate == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry ModDate in CollectionFolder is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Name" testNumber="8"/>
			<description>Entry Name in CollectionFolder shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in CollectionFolder has type %1 instead of type StringText</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Name" testNumber="7"/>
			<description>Entry Name in CollectionFolder is required</description>
			<test>containsName == true</test>
			<error>
				<message>Entry Name in CollectionFolder is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Name" testNumber="23"/>
			<description>Entry Name in CollectionFolder can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsName == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Name in CollectionFolder is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Next" testNumber="8"/>
			<description>Entry Next in CollectionFolder shall have type Dictionary</description>
			<test>containsNext == false || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in CollectionFolder has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Next" testNumber="23"/>
			<description>Entry Next in CollectionFolder can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsNext == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Next in CollectionFolder is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Next-Dictionary" testNumber="10"/>
			<description>Entry Next with type Dictionary in CollectionFolder shall be indirect</description>
			<test>NextHasTypeDictionary != true || isNextIndirect == true</test>
			<error>
				<message>Entry Next with type Dictionary in CollectionFolder is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Parent" testNumber="8"/>
			<description>Entry Parent in CollectionFolder shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in CollectionFolder has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Parent" testNumber="23"/>
			<description>Entry Parent in CollectionFolder can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsParent == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Parent in CollectionFolder is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Parent-Dictionary" testNumber="10"/>
			<description>Entry Parent with type Dictionary in CollectionFolder shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in CollectionFolder is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Thumb" testNumber="8"/>
			<description>Entry Thumb in CollectionFolder shall have type Stream</description>
			<test>containsThumb == false || ThumbHasTypeStream == true</test>
			<error>
				<message>Entry Thumb in CollectionFolder has type %1 instead of type Stream</message>
				<arguments>
					<argument>ThumbType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Thumb" testNumber="23"/>
			<description>Entry Thumb in CollectionFolder can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsThumb == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Thumb in CollectionFolder is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Thumb-Stream" testNumber="10"/>
			<description>Entry Thumb with type Stream in CollectionFolder shall be indirect</description>
			<test>ThumbHasTypeStream != true || isThumbIndirect == true</test>
			<error>
				<message>Entry Thumb with type Stream in CollectionFolder is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Type" testNumber="8"/>
			<description>Entry Type in CollectionFolder shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CollectionFolder has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Type" testNumber="23"/>
			<description>Entry Type in CollectionFolder can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in CollectionFolder is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="CollectionFolder-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in CollectionFolder shall have value Folder</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Folder"</test>
			<error>
				<message>Entry Type with type Name in CollectionFolder has incorrect value %1 instead of Folder</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionItem">
			<id specification="ISO_32000_1_7" clause="CollectionItem-Type" testNumber="8"/>
			<description>Entry Type in CollectionItem shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CollectionItem has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionItem">
			<id specification="ISO_32000_1_7" clause="CollectionItem-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in CollectionItem shall have value CollectionItem</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CollectionItem"</test>
			<error>
				<message>Entry Type with type Name in CollectionItem has incorrect value %1 instead of CollectionItem</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionItemEntry">
			<id specification="ISO_32000_1_7" clause="CollectionItemEntry" testNumber="8"/>
			<description>Entry in CollectionItem shall have one of types: Date, Dictionary, Number, StringText</description>
			<test>HasTypeDate == true || HasTypeDictionary == true || HasTypeNumber == true || HasTypeStringText == true</test>
			<error>
				<message>Entry %keyName% in CollectionItem has type %1 instead of one of types: Date, Dictionary, Number, StringText</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionNameTreeResourcesEntry">
			<id specification="ISO_32000_1_7" clause="CollectionNameTreeResourcesEntry" testNumber="8"/>
			<description>Entry in CollectionNameTreeResources shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in CollectionNameTreeResources has type %1 instead of type Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionNameTreeResourcesEntry">
			<id specification="ISO_32000_1_7" clause="CollectionNameTreeResourcesEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in CollectionNameTreeResources shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in CollectionNameTreeResources is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSchema">
			<id specification="ISO_32000_1_7" clause="CollectionSchema-Type" testNumber="8"/>
			<description>Entry Type in CollectionSchema shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CollectionSchema has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSchema">
			<id specification="ISO_32000_1_7" clause="CollectionSchema-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in CollectionSchema shall have value CollectionSchema</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CollectionSchema"</test>
			<error>
				<message>Entry Type with type Name in CollectionSchema has incorrect value %1 instead of CollectionSchema</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSchemaEntry">
			<id specification="ISO_32000_1_7" clause="CollectionSchemaEntry" testNumber="8"/>
			<description>Entry in CollectionSchema shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in CollectionSchema has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSort">
			<id specification="ISO_32000_1_7" clause="CollectionSort" testNumber="1"/>
			<description>CollectionSort shall not contain entries except A, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>CollectionSort contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSort">
			<id specification="ISO_32000_1_7" clause="CollectionSort-A" testNumber="8"/>
			<description>Entry A in CollectionSort shall have one of types: Array, Boolean</description>
			<test>containsA == false || AHasTypeArray == true || AHasTypeBoolean == true</test>
			<error>
				<message>Entry A in CollectionSort has type %1 instead of one of types: Array, Boolean</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSort">
			<id specification="ISO_32000_1_7" clause="CollectionSort-S" testNumber="8"/>
			<description>Entry S in CollectionSort shall have one of types: Array, Name</description>
			<test>containsS == false || SHasTypeArray == true || SHasTypeName == true</test>
			<error>
				<message>Entry S in CollectionSort has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSort">
			<id specification="ISO_32000_1_7" clause="CollectionSort-S" testNumber="7"/>
			<description>Entry S in CollectionSort is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in CollectionSort is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSort">
			<id specification="ISO_32000_1_7" clause="CollectionSort-Type" testNumber="8"/>
			<description>Entry Type in CollectionSort shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CollectionSort has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSort">
			<id specification="ISO_32000_1_7" clause="CollectionSort-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in CollectionSort shall have value CollectionSort</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CollectionSort"</test>
			<error>
				<message>Entry Type with type Name in CollectionSort has incorrect value %1 instead of CollectionSort</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSplit">
			<id specification="ISO_32000_1_7" clause="CollectionSplit" testNumber="1"/>
			<description>CollectionSplit shall not contain entries except Direction, Position</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Direction' &amp;&amp; elem != 'Position' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>CollectionSplit contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Direction' &amp;&amp; elem != 'Position' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSplit">
			<id specification="ISO_32000_1_7" clause="CollectionSplit" testNumber="22"/>
			<description>CollectionSplit shall not contain entry Type in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsType == false</test>
			<error>
				<message>CollectionSplit contains entry Type</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSplit">
			<id specification="ISO_32000_1_7" clause="CollectionSplit-Direction" testNumber="8"/>
			<description>Entry Direction in CollectionSplit shall have type Name</description>
			<test>containsDirection == false || DirectionHasTypeName == true</test>
			<error>
				<message>Entry Direction in CollectionSplit has type %1 instead of type Name</message>
				<arguments>
					<argument>DirectionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSplit">
			<id specification="ISO_32000_1_7" clause="CollectionSplit-Direction" testNumber="23"/>
			<description>Entry Direction in CollectionSplit can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsDirection == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Direction in CollectionSplit is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSplit">
			<id specification="ISO_32000_1_7" clause="CollectionSplit-Direction-Name" testNumber="6"/>
			<description>Entry Direction with type Name in CollectionSplit shall have one of values: V, H, N</description>
			<test>DirectionHasTypeName != true || DirectionNameValue == "H" || DirectionNameValue == "V" || DirectionNameValue == "N"</test>
			<error>
				<message>Entry Direction with type Name in CollectionSplit has incorrect value %1 instead of V, H, N</message>
				<arguments>
					<argument>DirectionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSplit">
			<id specification="ISO_32000_1_7" clause="CollectionSplit-Position" testNumber="8"/>
			<description>Entry Position in CollectionSplit shall have type Number</description>
			<test>containsPosition == false || PositionHasTypeNumber == true</test>
			<error>
				<message>Entry Position in CollectionSplit has type %1 instead of type Number</message>
				<arguments>
					<argument>PositionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSplit">
			<id specification="ISO_32000_1_7" clause="CollectionSplit-Position" testNumber="23"/>
			<description>Entry Position in CollectionSplit can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsPosition == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Position in CollectionSplit is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSplit">
			<id specification="ISO_32000_1_7" clause="CollectionSplit-Position-Number" testNumber="14"/>
			<description>Entry Position with type Number in CollectionSplit shall satisfy possible value predicate: fn:Eval((@Position &gt;= 0) &amp;&amp; (@Position &lt;= 100))</description>
			<test>PositionHasTypeNumber != true || (PositionNumberValue &gt;= 0) &amp;&amp; (PositionNumberValue &lt;= 100)</test>
			<error>
				<message>Entry Position with type Number in CollectionSplit does not satisfy possible value predicate: fn:Eval((@Position &gt;= 0) &amp;&amp; (@Position &lt;= 100))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSubitem">
			<id specification="ISO_32000_1_7" clause="CollectionSubitem" testNumber="1"/>
			<description>CollectionSubitem shall not contain entries except D, P, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>CollectionSubitem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSubitem">
			<id specification="ISO_32000_1_7" clause="CollectionSubitem-D" testNumber="8"/>
			<description>Entry D in CollectionSubitem shall have one of types: Date, Number, StringText</description>
			<test>containsD == false || DHasTypeDate == true || DHasTypeNumber == true || DHasTypeStringText == true</test>
			<error>
				<message>Entry D in CollectionSubitem has type %1 instead of one of types: Date, Number, StringText</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSubitem">
			<id specification="ISO_32000_1_7" clause="CollectionSubitem-P" testNumber="8"/>
			<description>Entry P in CollectionSubitem shall have type StringText</description>
			<test>containsP == false || PHasTypeStringText == true</test>
			<error>
				<message>Entry P in CollectionSubitem has type %1 instead of type StringText</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSubitem">
			<id specification="ISO_32000_1_7" clause="CollectionSubitem-Type" testNumber="8"/>
			<description>Entry Type in CollectionSubitem shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CollectionSubitem has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSubitem">
			<id specification="ISO_32000_1_7" clause="CollectionSubitem-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in CollectionSubitem shall have value CollectionSubitem</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CollectionSubitem"</test>
			<error>
				<message>Entry Type with type Name in CollectionSubitem has incorrect value %1 instead of CollectionSubitem</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_7" clause="ColorSpaceMap-DefaultCMYK-Array" testNumber="17"/>
			<description>Entry DefaultCMYK with type Array in ColorSpaceMap shall be one of objects ICCBasedColorSpace, DeviceNColorSpace</description>
			<test>DefaultCMYKHasTypeArray != true || DefaultCMYK_size == 1</test>
			<error>
				<message>Entry DefaultCMYK with type Array in ColorSpaceMap is not one of objects ICCBasedColorSpace, DeviceNColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_7" clause="ColorSpaceMap-DefaultCMYK" testNumber="8"/>
			<description>Entry DefaultCMYK in ColorSpaceMap shall have type Array</description>
			<test>containsDefaultCMYK == false || DefaultCMYKHasTypeArray == true</test>
			<error>
				<message>Entry DefaultCMYK in ColorSpaceMap has type %1 instead of type Array</message>
				<arguments>
					<argument>DefaultCMYKType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_7" clause="ColorSpaceMap-DefaultGray-Array" testNumber="17"/>
			<description>Entry DefaultGray with type Array in ColorSpaceMap shall be one of objects CalGrayColorSpace, ICCBasedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>DefaultGrayHasTypeArray != true || DefaultGray_size == 1</test>
			<error>
				<message>Entry DefaultGray with type Array in ColorSpaceMap is not one of objects CalGrayColorSpace, ICCBasedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_7" clause="ColorSpaceMap-DefaultGray" testNumber="8"/>
			<description>Entry DefaultGray in ColorSpaceMap shall have type Array</description>
			<test>containsDefaultGray == false || DefaultGrayHasTypeArray == true</test>
			<error>
				<message>Entry DefaultGray in ColorSpaceMap has type %1 instead of type Array</message>
				<arguments>
					<argument>DefaultGrayType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_7" clause="ColorSpaceMap-DefaultRGB-Array" testNumber="17"/>
			<description>Entry DefaultRGB with type Array in ColorSpaceMap shall be one of objects CalRGBColorSpace, ICCBasedColorSpace, DeviceNColorSpace</description>
			<test>DefaultRGBHasTypeArray != true || DefaultRGB_size == 1</test>
			<error>
				<message>Entry DefaultRGB with type Array in ColorSpaceMap is not one of objects CalRGBColorSpace, ICCBasedColorSpace, DeviceNColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_7" clause="ColorSpaceMap-DefaultRGB" testNumber="8"/>
			<description>Entry DefaultRGB in ColorSpaceMap shall have type Array</description>
			<test>containsDefaultRGB == false || DefaultRGBHasTypeArray == true</test>
			<error>
				<message>Entry DefaultRGB in ColorSpaceMap has type %1 instead of type Array</message>
				<arguments>
					<argument>DefaultRGBType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="ISO_32000_1_7" clause="ColorSpaceMapEntry-Array" testNumber="17"/>
			<description>Entry with type Array in ColorSpaceMap shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Array in ColorSpaceMap is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="ISO_32000_1_7" clause="ColorSpaceMapEntry" testNumber="8"/>
			<description>Entry in ColorSpaceMap shall have one of types: Array, Name</description>
			<test>HasTypeArray == true || HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in ColorSpaceMap has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="ISO_32000_1_7" clause="ColorSpaceMapEntry-Name" testNumber="6"/>
			<description>Entry with type Name in ColorSpaceMap shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>HasTypeName != true || NameValue == "DeviceCMYK" || NameValue == "DeviceRGB" || NameValue == "DeviceGray"</test>
			<error>
				<message>Entry %keyName% with type Name in ColorSpaceMap has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorantsDictEntry">
			<id specification="ISO_32000_1_7" clause="ColorantsDictEntry" testNumber="8"/>
			<description>Entry in ColorantsDict shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %keyName% in ColorantsDict has type %1 instead of type Array</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="CryptFilter" testNumber="1"/>
			<description>CryptFilter shall not contain entries except AuthEvent, CFM, Length, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AuthEvent' &amp;&amp; elem != 'CFM' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>CryptFilter contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AuthEvent' &amp;&amp; elem != 'CFM' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="CryptFilter-AuthEvent" testNumber="8"/>
			<description>Entry AuthEvent in CryptFilter shall have type Name</description>
			<test>containsAuthEvent == false || AuthEventHasTypeName == true</test>
			<error>
				<message>Entry AuthEvent in CryptFilter has type %1 instead of type Name</message>
				<arguments>
					<argument>AuthEventType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="CryptFilter-AuthEvent-Name" testNumber="6"/>
			<description>Entry AuthEvent with type Name in CryptFilter shall have one of values: EFOpen, DocOpen</description>
			<test>AuthEventHasTypeName != true || AuthEventNameValue == "DocOpen" || AuthEventNameValue == "EFOpen"</test>
			<error>
				<message>Entry AuthEvent with type Name in CryptFilter has incorrect value %1 instead of EFOpen, DocOpen</message>
				<arguments>
					<argument>AuthEventNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="CryptFilter-CFM" testNumber="8"/>
			<description>Entry CFM in CryptFilter shall have type Name</description>
			<test>containsCFM == false || CFMHasTypeName == true</test>
			<error>
				<message>Entry CFM in CryptFilter has type %1 instead of type Name</message>
				<arguments>
					<argument>CFMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="CryptFilter-CFM-Name" testNumber="6"/>
			<description>Entry CFM with type Name in CryptFilter shall have one of values: AESV3, V2, None, AESV2</description>
			<test>CFMHasTypeName != true || CFMNameValue == "None" || CFMNameValue == "V2" || CFMNameValue == "AESV2" || CFMNameValue == "AESV3"</test>
			<error>
				<message>Entry CFM with type Name in CryptFilter has incorrect value %1 instead of AESV3, V2, None, AESV2</message>
				<arguments>
					<argument>CFMNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="CryptFilter-Length" testNumber="8"/>
			<description>Entry Length in CryptFilter shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in CryptFilter has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="CryptFilter-Length" testNumber="7"/>
			<description>Entry Length in CryptFilter is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in CryptFilter is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="CryptFilter-Length-Integer" testNumber="14"/>
			<description>Entry Length with type Integer in CryptFilter shall satisfy possible value predicate: fn:Eval((@Length &gt;= 5) &amp;&amp; (@Length &lt;= 16))</description>
			<test>LengthHasTypeInteger != true || (LengthIntegerValue &gt;= 5) &amp;&amp; (LengthIntegerValue &lt;= 16)</test>
			<error>
				<message>Entry Length with type Integer in CryptFilter does not satisfy possible value predicate: fn:Eval((@Length &gt;= 5) &amp;&amp; (@Length &lt;= 16))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="CryptFilter-Length-Integer-16" testNumber="15"/>
			<description>Entry Length in CryptFilter shall have Integer value 16, if this object satisfies condition @CFM == AESV2</description>
			<test>(CFMNameValue != "AESV2") || LengthIntegerValue == 16</test>
			<error>
				<message>Entry Length in CryptFilter does not have value 16</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="CryptFilter-Length-Integer-32" testNumber="15"/>
			<description>Entry Length in CryptFilter shall have Integer value 32, if this object satisfies condition @CFM == AESV3</description>
			<test>(CFMNameValue != "AESV3") || LengthIntegerValue == 32</test>
			<error>
				<message>Entry Length in CryptFilter does not have value 32</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="CryptFilter-Length-Integer" testNumber="6"/>
			<description>Entry Length with type Integer in CryptFilter shall have one of values: 16, 32</description>
			<test>LengthHasTypeInteger != true || LengthIntegerValue == 16 || LengthIntegerValue == 32</test>
			<error>
				<message>Entry Length with type Integer in CryptFilter has incorrect value %1 instead of 16, 32</message>
				<arguments>
					<argument>LengthIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="CryptFilter-Type" testNumber="8"/>
			<description>Entry Type in CryptFilter shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CryptFilter has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="CryptFilter-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in CryptFilter shall have value CryptFilter</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CryptFilter"</test>
			<error>
				<message>Entry Type with type Name in CryptFilter has incorrect value %1 instead of CryptFilter</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMap">
			<id specification="ISO_32000_1_7" clause="CryptFilterMap-Identity" testNumber="8"/>
			<description>Entry Identity in CryptFilterMap shall have type Dictionary</description>
			<test>containsIdentity == false || IdentityHasTypeDictionary == true</test>
			<error>
				<message>Entry Identity in CryptFilterMap has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IdentityType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMap">
			<id specification="ISO_32000_1_7" clause="CryptFilterMap-StdCF" testNumber="8"/>
			<description>Entry StdCF in CryptFilterMap shall have type Dictionary</description>
			<test>containsStdCF == false || StdCFHasTypeDictionary == true</test>
			<error>
				<message>Entry StdCF in CryptFilterMap has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>StdCFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMap">
			<id specification="ISO_32000_1_7" clause="CryptFilterMap-StdCF-Dictionary" testNumber="9"/>
			<description>Entry StdCF with type Dictionary in CryptFilterMap shall satisfy special case: fn:Eval(StdCF::@AuthEvent == DocOpen)</description>
			<test>StdCFHasTypeDictionary != true || (StdCFAuthEventNameValue == "DocOpen")</test>
			<error>
				<message>Entry StdCF with type Dictionary in CryptFilterMap does not satisfy special case: fn:Eval(StdCF::@AuthEvent == DocOpen)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMapEntry">
			<id specification="ISO_32000_1_7" clause="CryptFilterMapEntry" testNumber="8"/>
			<description>Entry in CryptFilterMap shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in CryptFilterMap has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKey" testNumber="1"/>
			<description>CryptFilterPublicKey shall not contain entries except AuthEvent, CFM, EncryptMetadata, Length, Recipients, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AuthEvent' &amp;&amp; elem != 'CFM' &amp;&amp; elem != 'EncryptMetadata' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Recipients' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>CryptFilterPublicKey contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AuthEvent' &amp;&amp; elem != 'CFM' &amp;&amp; elem != 'EncryptMetadata' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Recipients' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKey-AuthEvent" testNumber="8"/>
			<description>Entry AuthEvent in CryptFilterPublicKey shall have type Name</description>
			<test>containsAuthEvent == false || AuthEventHasTypeName == true</test>
			<error>
				<message>Entry AuthEvent in CryptFilterPublicKey has type %1 instead of type Name</message>
				<arguments>
					<argument>AuthEventType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKey-AuthEvent-Name" testNumber="6"/>
			<description>Entry AuthEvent with type Name in CryptFilterPublicKey shall have one of values: EFOpen, DocOpen</description>
			<test>AuthEventHasTypeName != true || AuthEventNameValue == "DocOpen" || AuthEventNameValue == "EFOpen"</test>
			<error>
				<message>Entry AuthEvent with type Name in CryptFilterPublicKey has incorrect value %1 instead of EFOpen, DocOpen</message>
				<arguments>
					<argument>AuthEventNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKey-CFM" testNumber="8"/>
			<description>Entry CFM in CryptFilterPublicKey shall have type Name</description>
			<test>containsCFM == false || CFMHasTypeName == true</test>
			<error>
				<message>Entry CFM in CryptFilterPublicKey has type %1 instead of type Name</message>
				<arguments>
					<argument>CFMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKey-CFM-Name" testNumber="6"/>
			<description>Entry CFM with type Name in CryptFilterPublicKey shall have one of values: AESV3, V2, None, AESV2</description>
			<test>CFMHasTypeName != true || CFMNameValue == "None" || CFMNameValue == "V2" || CFMNameValue == "AESV2" || CFMNameValue == "AESV3"</test>
			<error>
				<message>Entry CFM with type Name in CryptFilterPublicKey has incorrect value %1 instead of AESV3, V2, None, AESV2</message>
				<arguments>
					<argument>CFMNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKey-EncryptMetadata" testNumber="8"/>
			<description>Entry EncryptMetadata in CryptFilterPublicKey shall have type Boolean</description>
			<test>containsEncryptMetadata == false || EncryptMetadataHasTypeBoolean == true</test>
			<error>
				<message>Entry EncryptMetadata in CryptFilterPublicKey has type %1 instead of type Boolean</message>
				<arguments>
					<argument>EncryptMetadataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKey-Length" testNumber="8"/>
			<description>Entry Length in CryptFilterPublicKey shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in CryptFilterPublicKey has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKey-Length" testNumber="7"/>
			<description>Entry Length in CryptFilterPublicKey is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in CryptFilterPublicKey is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKey-Length-Integer" testNumber="14"/>
			<description>Entry Length with type Integer in CryptFilterPublicKey shall satisfy possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; (@Length &lt;= 128) &amp;&amp; ((@Length mod 8) == 0))</description>
			<test>LengthHasTypeInteger != true || (LengthIntegerValue &gt;= 40) &amp;&amp; (LengthIntegerValue &lt;= 128) &amp;&amp; ((LengthIntegerValue % 8) == 0)</test>
			<error>
				<message>Entry Length with type Integer in CryptFilterPublicKey does not satisfy possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; (@Length &lt;= 128) &amp;&amp; ((@Length mod 8) == 0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKey-Length-Integer-128" testNumber="15"/>
			<description>Entry Length in CryptFilterPublicKey shall have Integer value 128, if this object satisfies condition @CFM == AESV2</description>
			<test>(CFMNameValue != "AESV2") || LengthIntegerValue == 128</test>
			<error>
				<message>Entry Length in CryptFilterPublicKey does not have value 128</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKey-Length-Integer-256" testNumber="15"/>
			<description>Entry Length in CryptFilterPublicKey shall have Integer value 256, if this object satisfies condition @CFM == AESV3</description>
			<test>(CFMNameValue != "AESV3") || LengthIntegerValue == 256</test>
			<error>
				<message>Entry Length in CryptFilterPublicKey does not have value 256</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKey-Length-Integer" testNumber="6"/>
			<description>Entry Length with type Integer in CryptFilterPublicKey shall have one of values: 256, 128</description>
			<test>LengthHasTypeInteger != true || LengthIntegerValue == 128 || LengthIntegerValue == 256</test>
			<error>
				<message>Entry Length with type Integer in CryptFilterPublicKey has incorrect value %1 instead of 256, 128</message>
				<arguments>
					<argument>LengthIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKey-Recipients" testNumber="8"/>
			<description>Entry Recipients in CryptFilterPublicKey shall have one of types: Array, StringByte</description>
			<test>containsRecipients == false || RecipientsHasTypeArray == true || RecipientsHasTypeStringByte == true</test>
			<error>
				<message>Entry Recipients in CryptFilterPublicKey has type %1 instead of one of types: Array, StringByte</message>
				<arguments>
					<argument>RecipientsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKey-Recipients" testNumber="7"/>
			<description>Entry Recipients in CryptFilterPublicKey is required</description>
			<test>containsRecipients == true</test>
			<error>
				<message>Entry Recipients in CryptFilterPublicKey is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKey-Type" testNumber="8"/>
			<description>Entry Type in CryptFilterPublicKey shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CryptFilterPublicKey has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKey-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in CryptFilterPublicKey shall have value CryptFilter</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CryptFilter"</test>
			<error>
				<message>Entry Type with type Name in CryptFilterPublicKey has incorrect value %1 instead of CryptFilter</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMap">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKeyMap-DefEmbeddedFile" testNumber="8"/>
			<description>Entry DefEmbeddedFile in CryptFilterPublicKeyMap shall have type Dictionary</description>
			<test>containsDefEmbeddedFile == false || DefEmbeddedFileHasTypeDictionary == true</test>
			<error>
				<message>Entry DefEmbeddedFile in CryptFilterPublicKeyMap has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DefEmbeddedFileType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMap">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKeyMap-DefaultCryptFilter" testNumber="8"/>
			<description>Entry DefaultCryptFilter in CryptFilterPublicKeyMap shall have type Dictionary</description>
			<test>containsDefaultCryptFilter == false || DefaultCryptFilterHasTypeDictionary == true</test>
			<error>
				<message>Entry DefaultCryptFilter in CryptFilterPublicKeyMap has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DefaultCryptFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMapEntry">
			<id specification="ISO_32000_1_7" clause="CryptFilterPublicKeyMapEntry" testNumber="8"/>
			<description>Entry in CryptFilterPublicKeyMap shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in CryptFilterPublicKeyMap has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPM">
			<id specification="ISO_32000_1_7" clause="DPM-GTS_Managed" testNumber="8"/>
			<description>Entry GTS_Managed in DPM shall have type Dictionary</description>
			<test>containsGTS_Managed == false || GTS_ManagedHasTypeDictionary == true</test>
			<error>
				<message>Entry GTS_Managed in DPM has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>GTS_ManagedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPM">
			<id specification="ISO_32000_1_7" clause="DPM-GTS_Managed" testNumber="23"/>
			<description>Entry GTS_Managed in DPM can only be present, if satisfy predicate fn:Extension(PDF_VT2, 1.6)</description>
			<test>containsGTS_Managed == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry GTS_Managed in DPM is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPM">
			<id specification="ISO_32000_1_7" clause="DPM-GTS_Suspect" testNumber="8"/>
			<description>Entry GTS_Suspect in DPM shall have type Dictionary</description>
			<test>containsGTS_Suspect == false || GTS_SuspectHasTypeDictionary == true</test>
			<error>
				<message>Entry GTS_Suspect in DPM has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>GTS_SuspectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPM">
			<id specification="ISO_32000_1_7" clause="DPM-GTS_Suspect" testNumber="23"/>
			<description>Entry GTS_Suspect in DPM can only be present, if satisfy predicate fn:Extension(PDF_VT2, 1.6)</description>
			<test>containsGTS_Suspect == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry GTS_Suspect in DPM is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPMEntry">
			<id specification="ISO_32000_1_7" clause="DPMEntry" testNumber="8"/>
			<description>Entry in DPM shall have one of types: Array, Boolean, Date, Dictionary, Integer, Name, Number, StringText</description>
			<test>HasTypeArray == true || HasTypeBoolean == true || HasTypeDate == true || HasTypeDictionary == true || HasTypeInteger == true || HasTypeName == true || HasTypeNumber == true || HasTypeStringText == true</test>
			<error>
				<message>Entry %keyName% in DPM has type %1 instead of one of types: Array, Boolean, Date, Dictionary, Integer, Name, Number, StringText</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPMEntry">
			<id specification="ISO_32000_1_7" clause="DPMEntry" testNumber="23"/>
			<description>Entry in DPM can only be present, if satisfy predicate fn:Eval(fn:Extension(PDF_VT2, 1.6) || 2.0)</description>
			<test>hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry %keyName% in DPM is present</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart" testNumber="1"/>
			<description>DPart shall not contain entries except DPM, DParts, End, Parent, Start, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'DPM' &amp;&amp; elem != 'DParts' &amp;&amp; elem != 'End' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Start' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>DPart contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'DPM' &amp;&amp; elem != 'DParts' &amp;&amp; elem != 'End' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Start' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart" testNumber="22"/>
			<description>DPart shall not contain entry AF in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsAF == false</test>
			<error>
				<message>DPart contains entry AF</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-DPM" testNumber="8"/>
			<description>Entry DPM in DPart shall have type Dictionary</description>
			<test>containsDPM == false || DPMHasTypeDictionary == true</test>
			<error>
				<message>Entry DPM in DPart has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DPMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-DPM" testNumber="23"/>
			<description>Entry DPM in DPart can only be present, if satisfy predicate fn:Eval(fn:Extension(PDF_VT2, 1.6) || 2.0)</description>
			<test>containsDPM == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry DPM in DPart is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-DParts" testNumber="8"/>
			<description>Entry DParts in DPart shall have type Array</description>
			<test>containsDParts == false || DPartsHasTypeArray == true</test>
			<error>
				<message>Entry DParts in DPart has type %1 instead of type Array</message>
				<arguments>
					<argument>DPartsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-DParts" testNumber="11"/>
			<description>Entry DParts in DPart is required, when fn:Not(fn:IsPresent(Start))</description>
			<test>containsDParts == true || (containsStart == true)</test>
			<error>
				<message>Entry DParts in DPart is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-DParts" testNumber="23"/>
			<description>Entry DParts in DPart can only be present, if satisfy predicate fn:Eval(fn:Extension(PDF_VT2, 1.6) || 2.0)</description>
			<test>containsDParts == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry DParts in DPart is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-DParts-Array" testNumber="9"/>
			<description>Entry DParts with type Array in DPart shall satisfy special case: fn:Eval(fn:ArrayLength(DParts) &gt; 0)</description>
			<test>DPartsHasTypeArray != true || (DPartsArraySize &gt; 0)</test>
			<error>
				<message>Entry DParts with type Array in DPart does not satisfy special case: fn:Eval(fn:ArrayLength(DParts) &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-End" testNumber="8"/>
			<description>Entry End in DPart shall have type Dictionary</description>
			<test>containsEnd == false || EndHasTypeDictionary == true</test>
			<error>
				<message>Entry End in DPart has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>EndType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-End" testNumber="23"/>
			<description>Entry End in DPart can only be present, if satisfy predicate fn:Eval(fn:Extension(PDF_VT2, 1.6) || 2.0)</description>
			<test>containsEnd == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry End in DPart is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-End-Dictionary" testNumber="10"/>
			<description>Entry End with type Dictionary in DPart shall be indirect</description>
			<test>EndHasTypeDictionary != true || isEndIndirect == true</test>
			<error>
				<message>Entry End with type Dictionary in DPart is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in DPart shall be one of objects DPart, DPartRoot</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in DPart is not one of objects DPart, DPartRoot</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-Parent" testNumber="8"/>
			<description>Entry Parent in DPart shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in DPart has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-Parent" testNumber="7"/>
			<description>Entry Parent in DPart is required</description>
			<test>containsParent == true</test>
			<error>
				<message>Entry Parent in DPart is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-Parent" testNumber="23"/>
			<description>Entry Parent in DPart can only be present, if satisfy predicate fn:Eval(fn:Extension(PDF_VT2, 1.6) || 2.0)</description>
			<test>containsParent == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry Parent in DPart is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-Parent-Dictionary" testNumber="10"/>
			<description>Entry Parent with type Dictionary in DPart shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in DPart is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-Start" testNumber="8"/>
			<description>Entry Start in DPart shall have type Dictionary</description>
			<test>containsStart == false || StartHasTypeDictionary == true</test>
			<error>
				<message>Entry Start in DPart has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>StartType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-Start" testNumber="11"/>
			<description>Entry Start in DPart is required, when fn:Not(fn:IsPresent(DParts))</description>
			<test>containsStart == true || (containsDParts == true)</test>
			<error>
				<message>Entry Start in DPart is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-Start" testNumber="23"/>
			<description>Entry Start in DPart can only be present, if satisfy predicate fn:Eval(fn:Extension(PDF_VT2, 1.6) || 2.0)</description>
			<test>containsStart == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry Start in DPart is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-Start-Dictionary" testNumber="10"/>
			<description>Entry Start with type Dictionary in DPart shall be indirect</description>
			<test>StartHasTypeDictionary != true || isStartIndirect == true</test>
			<error>
				<message>Entry Start with type Dictionary in DPart is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-Type" testNumber="8"/>
			<description>Entry Type in DPart shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in DPart has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-Type" testNumber="23"/>
			<description>Entry Type in DPart can only be present, if satisfy predicate fn:Eval(fn:Extension(PDF_VT2, 1.6) || 2.0)</description>
			<test>containsType == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry Type in DPart is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="DPart-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in DPart shall have value DPart</description>
			<test>TypeHasTypeName != true || TypeNameValue == "DPart"</test>
			<error>
				<message>Entry Type with type Name in DPart has incorrect value %1 instead of DPart</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="DPartRoot" testNumber="1"/>
			<description>DPartRoot shall not contain entries except DPartRootNode, NodeNameList, RecordLevel, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DPartRootNode' &amp;&amp; elem != 'NodeNameList' &amp;&amp; elem != 'RecordLevel' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>DPartRoot contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DPartRootNode' &amp;&amp; elem != 'NodeNameList' &amp;&amp; elem != 'RecordLevel' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="DPartRoot-DPartRootNode" testNumber="8"/>
			<description>Entry DPartRootNode in DPartRoot shall have type Dictionary</description>
			<test>containsDPartRootNode == false || DPartRootNodeHasTypeDictionary == true</test>
			<error>
				<message>Entry DPartRootNode in DPartRoot has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DPartRootNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="DPartRoot-DPartRootNode" testNumber="7"/>
			<description>Entry DPartRootNode in DPartRoot is required</description>
			<test>containsDPartRootNode == true</test>
			<error>
				<message>Entry DPartRootNode in DPartRoot is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="DPartRoot-DPartRootNode" testNumber="23"/>
			<description>Entry DPartRootNode in DPartRoot can only be present, if satisfy predicate fn:Eval(fn:Extension(PDF_VT2, 1.6) || 2.0)</description>
			<test>containsDPartRootNode == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry DPartRootNode in DPartRoot is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="DPartRoot-DPartRootNode-Dictionary" testNumber="10"/>
			<description>Entry DPartRootNode with type Dictionary in DPartRoot shall be indirect</description>
			<test>DPartRootNodeHasTypeDictionary != true || isDPartRootNodeIndirect == true</test>
			<error>
				<message>Entry DPartRootNode with type Dictionary in DPartRoot is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="DPartRoot-NodeNameList" testNumber="8"/>
			<description>Entry NodeNameList in DPartRoot shall have type Array</description>
			<test>containsNodeNameList == false || NodeNameListHasTypeArray == true</test>
			<error>
				<message>Entry NodeNameList in DPartRoot has type %1 instead of type Array</message>
				<arguments>
					<argument>NodeNameListType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="DPartRoot-NodeNameList" testNumber="11"/>
			<description>Entry NodeNameList in DPartRoot is required, when fn:Extension(PDF_VT2)</description>
			<test>containsNodeNameList == true || (hasExtensionPDF_VT2 != true)</test>
			<error>
				<message>Entry NodeNameList in DPartRoot is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="DPartRoot-NodeNameList" testNumber="23"/>
			<description>Entry NodeNameList in DPartRoot can only be present, if satisfy predicate fn:Eval(fn:Extension(PDF_VT2, 1.6) || 2.0)</description>
			<test>containsNodeNameList == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry NodeNameList in DPartRoot is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="DPartRoot-RecordLevel" testNumber="8"/>
			<description>Entry RecordLevel in DPartRoot shall have type Integer</description>
			<test>containsRecordLevel == false || RecordLevelHasTypeInteger == true</test>
			<error>
				<message>Entry RecordLevel in DPartRoot has type %1 instead of type Integer</message>
				<arguments>
					<argument>RecordLevelType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="DPartRoot-RecordLevel" testNumber="23"/>
			<description>Entry RecordLevel in DPartRoot can only be present, if satisfy predicate fn:Eval(fn:Extension(PDF_VT2, 1.6) || 2.0)</description>
			<test>containsRecordLevel == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry RecordLevel in DPartRoot is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="DPartRoot-RecordLevel-Integer" testNumber="9"/>
			<description>Entry RecordLevel with type Integer in DPartRoot shall satisfy special case: fn:Eval(@RecordLevel &gt;= 0)</description>
			<test>RecordLevelHasTypeInteger != true || (RecordLevelIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry RecordLevel with type Integer in DPartRoot does not satisfy special case: fn:Eval(@RecordLevel &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="DPartRoot-Type" testNumber="8"/>
			<description>Entry Type in DPartRoot shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in DPartRoot has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="DPartRoot-Type" testNumber="23"/>
			<description>Entry Type in DPartRoot can only be present, if satisfy predicate fn:Eval(fn:Extension(PDF_VT2, 1.6) || 2.0)</description>
			<test>containsType == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry Type in DPartRoot is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="DPartRoot-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in DPartRoot shall have value DPartRoot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "DPartRoot"</test>
			<error>
				<message>Entry Type with type Name in DPartRoot has incorrect value %1 instead of DPartRoot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_7" clause="Data-LastModified" testNumber="8"/>
			<description>Entry LastModified in Data shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in Data has type %1 instead of type Date</message>
				<arguments>
					<argument>LastModifiedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_7" clause="Data-LastModified" testNumber="7"/>
			<description>Entry LastModified in Data is required</description>
			<test>containsLastModified == true</test>
			<error>
				<message>Entry LastModified in Data is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_7" clause="Data-Private" testNumber="8"/>
			<description>Entry Private in Data shall have one of types: Array, Boolean, Dictionary, Integer, Name, Number, Stream, String</description>
			<test>containsPrivate == false || PrivateHasTypeArray == true || PrivateHasTypeBoolean == true || PrivateHasTypeDictionary == true || PrivateHasTypeInteger == true || PrivateHasTypeName == true || PrivateHasTypeNumber == true || PrivateHasTypeStream == true || PrivateHasTypeString == true</test>
			<error>
				<message>Entry Private in Data has type %1 instead of one of types: Array, Boolean, Dictionary, Integer, Name, Number, Stream, String</message>
				<arguments>
					<argument>PrivateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_7" clause="Data-Private-Stream" testNumber="10"/>
			<description>Entry Private with type Stream in Data shall be indirect</description>
			<test>PrivateHasTypeStream != true || isPrivateIndirect == true</test>
			<error>
				<message>Entry Private with type Stream in Data is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_7" clause="DataEntry" testNumber="8"/>
			<description>Entry in Data shall have one of types: Array, Boolean, Dictionary, Integer, Name, Number, Stream, String</description>
			<test>HasTypeArray == true || HasTypeBoolean == true || HasTypeDictionary == true || HasTypeInteger == true || HasTypeName == true || HasTypeNumber == true || HasTypeStream == true || HasTypeString == true</test>
			<error>
				<message>Entry %keyName% in Data has type %1 instead of one of types: Array, Boolean, Dictionary, Integer, Name, Number, Stream, String</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_7" clause="DataEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in Data shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in Data is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_7" clause="Dest0Array" testNumber="2"/>
			<description>Dest0Array shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>Dest0Array contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_7" clause="Dest0Array-0" testNumber="8"/>
			<description>Entry 0 in Dest0Array shall have one of types: Dictionary, Number</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in Dest0Array has type %1 instead of one of types: Dictionary, Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_7" clause="Dest0Array-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in Dest0Array shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest0Array does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_7" clause="Dest0Array-1" testNumber="8"/>
			<description>Entry 1 in Dest0Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest0Array has type %1 instead of type Name</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_7" clause="Dest0Array-1-Name" testNumber="6"/>
			<description>Entry 1 with type Name in Dest0Array shall have one of values: Fit, FitB</description>
			<test>entry1HasTypeName != true || entry1NameValue == "Fit" || entry1NameValue == "FitB"</test>
			<error>
				<message>Entry 1 with type Name in Dest0Array has incorrect value %1 instead of Fit, FitB</message>
				<arguments>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_7" clause="Dest1Array" testNumber="2"/>
			<description>Dest1Array shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>Dest1Array contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_7" clause="Dest1Array-0" testNumber="8"/>
			<description>Entry 0 in Dest1Array shall have one of types: Dictionary, Number</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in Dest1Array has type %1 instead of one of types: Dictionary, Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_7" clause="Dest1Array-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in Dest1Array shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest1Array does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_7" clause="Dest1Array-1" testNumber="8"/>
			<description>Entry 1 in Dest1Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest1Array has type %1 instead of type Name</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_7" clause="Dest1Array-1-Name" testNumber="6"/>
			<description>Entry 1 with type Name in Dest1Array shall have one of values: FitV, FitH, FitBH, FitBV</description>
			<test>entry1HasTypeName != true || entry1NameValue == "FitH" || entry1NameValue == "FitV" || entry1NameValue == "FitBH" || entry1NameValue == "FitBV"</test>
			<error>
				<message>Entry 1 with type Name in Dest1Array has incorrect value %1 instead of FitV, FitH, FitBH, FitBV</message>
				<arguments>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_7" clause="Dest1Array-2" testNumber="8"/>
			<description>Entry 2 in Dest1Array shall have one of types: Null, Number</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in Dest1Array has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="Dest4Array" testNumber="2"/>
			<description>Dest4Array shall contain exactly 6 elements</description>
			<test>size == 6</test>
			<error>
				<message>Dest4Array contains %1 element(s) instead of 6</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="Dest4Array-0" testNumber="8"/>
			<description>Entry 0 in Dest4Array shall have one of types: Dictionary, Number</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in Dest4Array has type %1 instead of one of types: Dictionary, Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="Dest4Array-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in Dest4Array shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest4Array does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="Dest4Array-1" testNumber="8"/>
			<description>Entry 1 in Dest4Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest4Array has type %1 instead of type Name</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="Dest4Array-1-Name" testNumber="6"/>
			<description>Entry 1 with type Name in Dest4Array shall have value FitR</description>
			<test>entry1HasTypeName != true || entry1NameValue == "FitR"</test>
			<error>
				<message>Entry 1 with type Name in Dest4Array has incorrect value %1 instead of FitR</message>
				<arguments>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="Dest4Array-2" testNumber="8"/>
			<description>Entry 2 in Dest4Array shall have one of types: Null, Number</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in Dest4Array has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="Dest4Array-3" testNumber="8"/>
			<description>Entry 3 in Dest4Array shall have one of types: Null, Number</description>
			<test>size &lt;= 3 || entry3HasTypeNull == true || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in Dest4Array has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="Dest4Array-4" testNumber="8"/>
			<description>Entry 4 in Dest4Array shall have one of types: Null, Number</description>
			<test>size &lt;= 4 || entry4HasTypeNull == true || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in Dest4Array has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry4Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="Dest4Array-5" testNumber="8"/>
			<description>Entry 5 in Dest4Array shall have one of types: Null, Number</description>
			<test>size &lt;= 5 || entry5HasTypeNull == true || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in Dest4Array has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry5Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_7" clause="DestDict" testNumber="1"/>
			<description>DestDict shall not contain entries except D</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'SD' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>DestDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'SD' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_7" clause="DestDict" testNumber="22"/>
			<description>DestDict shall not contain entry SD in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsSD == false</test>
			<error>
				<message>DestDict contains entry SD</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_7" clause="DestDict-D-Array" testNumber="17"/>
			<description>Entry D with type Array in DestDict shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in DestDict is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_7" clause="DestDict-D" testNumber="8"/>
			<description>Entry D in DestDict shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in DestDict has type %1 instead of type Array</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_7" clause="DestDict-D" testNumber="7"/>
			<description>Entry D in DestDict is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in DestDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="DestXYZArray" testNumber="2"/>
			<description>DestXYZArray shall contain exactly 5 elements</description>
			<test>size == 5</test>
			<error>
				<message>DestXYZArray contains %1 element(s) instead of 5</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="DestXYZArray-0" testNumber="8"/>
			<description>Entry 0 in DestXYZArray shall have one of types: Dictionary, Number</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in DestXYZArray has type %1 instead of one of types: Dictionary, Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="DestXYZArray-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in DestXYZArray shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in DestXYZArray does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="DestXYZArray-1" testNumber="8"/>
			<description>Entry 1 in DestXYZArray shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in DestXYZArray has type %1 instead of type Name</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="DestXYZArray-1-Name" testNumber="6"/>
			<description>Entry 1 with type Name in DestXYZArray shall have value XYZ</description>
			<test>entry1HasTypeName != true || entry1NameValue == "XYZ"</test>
			<error>
				<message>Entry 1 with type Name in DestXYZArray has incorrect value %1 instead of XYZ</message>
				<arguments>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="DestXYZArray-2" testNumber="8"/>
			<description>Entry 2 in DestXYZArray shall have one of types: Null, Number</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in DestXYZArray has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="DestXYZArray-3" testNumber="8"/>
			<description>Entry 3 in DestXYZArray shall have one of types: Null, Number</description>
			<test>size &lt;= 3 || entry3HasTypeNull == true || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in DestXYZArray has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="DestXYZArray-4" testNumber="8"/>
			<description>Entry 4 in DestXYZArray shall have one of types: Null, Number</description>
			<test>size &lt;= 4 || entry4HasTypeNull == true || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in DestXYZArray has type %1 instead of one of types: Null, Number</message>
				<arguments>
					<argument>entry4Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestsMapEntry">
			<id specification="ISO_32000_1_7" clause="DestsMapEntry-Array" testNumber="17"/>
			<description>Entry with type Array in DestsMap shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Array in DestsMap is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestsMapEntry">
			<id specification="ISO_32000_1_7" clause="DestsMapEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in DestsMap shall be one of objects ActionGoTo, ActionGoToE, ActionGoToR, DestDict</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in DestsMap is not one of objects ActionGoTo, ActionGoToE, ActionGoToR, DestDict</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestsMapEntry">
			<id specification="ISO_32000_1_7" clause="DestsMapEntry" testNumber="8"/>
			<description>Entry in DestsMap shall have one of types: Array, Dictionary</description>
			<test>HasTypeArray == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in DestsMap has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="DevExtensions" testNumber="1"/>
			<description>DevExtensions shall not contain entries except BaseVersion, ExtensionLevel, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseVersion' &amp;&amp; elem != 'ExtensionLevel' &amp;&amp; elem != 'ExtensionRevision' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URL' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>DevExtensions contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseVersion' &amp;&amp; elem != 'ExtensionLevel' &amp;&amp; elem != 'ExtensionRevision' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URL' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="DevExtensions" testNumber="22"/>
			<description>DevExtensions shall not contain entries ExtensionRevision, URL in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'ExtensionRevision' || elem == 'URL').length == 0</test>
			<error>
				<message>DevExtensions contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'ExtensionRevision' || elem == 'URL').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="DevExtensions-BaseVersion" testNumber="8"/>
			<description>Entry BaseVersion in DevExtensions shall have type Name</description>
			<test>containsBaseVersion == false || BaseVersionHasTypeName == true</test>
			<error>
				<message>Entry BaseVersion in DevExtensions has type %1 instead of type Name</message>
				<arguments>
					<argument>BaseVersionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="DevExtensions-BaseVersion" testNumber="7"/>
			<description>Entry BaseVersion in DevExtensions is required</description>
			<test>containsBaseVersion == true</test>
			<error>
				<message>Entry BaseVersion in DevExtensions is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="DevExtensions-BaseVersion-Name" testNumber="10"/>
			<description>Entry BaseVersion with type Name in DevExtensions shall be direct</description>
			<test>BaseVersionHasTypeName != true || isBaseVersionIndirect == false</test>
			<error>
				<message>Entry BaseVersion with type Name in DevExtensions is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="DevExtensions-BaseVersion-Name" testNumber="6"/>
			<description>Entry BaseVersion with type Name in DevExtensions shall have one of values: 2.0, 1.7</description>
			<test>BaseVersionHasTypeName != true || BaseVersionNameValue == "1.7" || BaseVersionNameValue == "2.0"</test>
			<error>
				<message>Entry BaseVersion with type Name in DevExtensions has incorrect value %1 instead of 2.0, 1.7</message>
				<arguments>
					<argument>BaseVersionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="DevExtensions-ExtensionLevel" testNumber="8"/>
			<description>Entry ExtensionLevel in DevExtensions shall have type Integer</description>
			<test>containsExtensionLevel == false || ExtensionLevelHasTypeInteger == true</test>
			<error>
				<message>Entry ExtensionLevel in DevExtensions has type %1 instead of type Integer</message>
				<arguments>
					<argument>ExtensionLevelType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="DevExtensions-ExtensionLevel" testNumber="7"/>
			<description>Entry ExtensionLevel in DevExtensions is required</description>
			<test>containsExtensionLevel == true</test>
			<error>
				<message>Entry ExtensionLevel in DevExtensions is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="DevExtensions-ExtensionLevel-Integer" testNumber="10"/>
			<description>Entry ExtensionLevel with type Integer in DevExtensions shall be direct</description>
			<test>ExtensionLevelHasTypeInteger != true || isExtensionLevelIndirect == false</test>
			<error>
				<message>Entry ExtensionLevel with type Integer in DevExtensions is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="DevExtensions-Type" testNumber="8"/>
			<description>Entry Type in DevExtensions shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in DevExtensions has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="DevExtensions-Type-Name" testNumber="10"/>
			<description>Entry Type with type Name in DevExtensions shall be direct</description>
			<test>TypeHasTypeName != true || isTypeIndirect == false</test>
			<error>
				<message>Entry Type with type Name in DevExtensions is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="DevExtensions-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in DevExtensions shall have value DeveloperExtensions</description>
			<test>TypeHasTypeName != true || TypeNameValue == "DeveloperExtensions"</test>
			<error>
				<message>Entry Type with type Name in DevExtensions has incorrect value %1 instead of DeveloperExtensions</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="DeviceNColorSpace" testNumber="24"/>
			<description>DeviceNColorSpace shall contain 4 to 5 elements</description>
			<test>size &gt;= 4 &amp;&amp; size &lt;= 5</test>
			<error>
				<message>DeviceNColorSpace contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="DeviceNColorSpace-0" testNumber="8"/>
			<description>Entry 0 in DeviceNColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in DeviceNColorSpace has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="DeviceNColorSpace-0-Name" testNumber="6"/>
			<description>Entry 0 with type Name in DeviceNColorSpace shall have value DeviceN</description>
			<test>entry0HasTypeName != true || entry0NameValue == "DeviceN"</test>
			<error>
				<message>Entry 0 with type Name in DeviceNColorSpace has incorrect value %1 instead of DeviceN</message>
				<arguments>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="DeviceNColorSpace-1" testNumber="8"/>
			<description>Entry 1 in DeviceNColorSpace shall have type Array</description>
			<test>size &lt;= 1 || entry1HasTypeArray == true</test>
			<error>
				<message>Entry 1 in DeviceNColorSpace has type %1 instead of type Array</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="DeviceNColorSpace-2-Array" testNumber="17"/>
			<description>Entry 2 with type Array in DeviceNColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace</description>
			<test>entry2HasTypeArray != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Array in DeviceNColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="DeviceNColorSpace-2" testNumber="8"/>
			<description>Entry 2 in DeviceNColorSpace shall have one of types: Array, Name</description>
			<test>size &lt;= 2 || entry2HasTypeArray == true || entry2HasTypeName == true</test>
			<error>
				<message>Entry 2 in DeviceNColorSpace has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="DeviceNColorSpace-2-Name" testNumber="6"/>
			<description>Entry 2 with type Name in DeviceNColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry2HasTypeName != true || entry2NameValue == "DeviceCMYK" || entry2NameValue == "DeviceRGB" || entry2NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 2 with type Name in DeviceNColorSpace has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>entry2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="DeviceNColorSpace-3-Dictionary" testNumber="17"/>
			<description>Entry 3 with type Dictionary in DeviceNColorSpace shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry3HasTypeDictionary != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Dictionary in DeviceNColorSpace is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="DeviceNColorSpace-3-Stream" testNumber="17"/>
			<description>Entry 3 with type Stream in DeviceNColorSpace shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry3HasTypeStream != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Stream in DeviceNColorSpace is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="DeviceNColorSpace-3" testNumber="8"/>
			<description>Entry 3 in DeviceNColorSpace shall have one of types: Dictionary, Stream</description>
			<test>size &lt;= 3 || entry3HasTypeDictionary == true || entry3HasTypeStream == true</test>
			<error>
				<message>Entry 3 in DeviceNColorSpace has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="DeviceNColorSpace-3-Stream" testNumber="10"/>
			<description>Entry 3 with type Stream in DeviceNColorSpace shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in DeviceNColorSpace is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="DeviceNColorSpace-4" testNumber="8"/>
			<description>Entry 4 in DeviceNColorSpace shall have type Dictionary</description>
			<test>size &lt;= 4 || entry4HasTypeDictionary == true</test>
			<error>
				<message>Entry 4 in DeviceNColorSpace has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>entry4Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="DeviceNDict" testNumber="1"/>
			<description>DeviceNDict shall not contain entries except Colorants, MixingHints, Process, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Colorants' &amp;&amp; elem != 'MixingHints' &amp;&amp; elem != 'Process' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>DeviceNDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Colorants' &amp;&amp; elem != 'MixingHints' &amp;&amp; elem != 'Process' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="DeviceNDict-Colorants" testNumber="8"/>
			<description>Entry Colorants in DeviceNDict shall have type Dictionary</description>
			<test>containsColorants == false || ColorantsHasTypeDictionary == true</test>
			<error>
				<message>Entry Colorants in DeviceNDict has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ColorantsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="DeviceNDict-Colorants" testNumber="11"/>
			<description>Entry Colorants in DeviceNDict is required, when (@Subtype == NChannel) &amp;&amp; fn:HasSpotColorants(parent::1)</description>
			<test>containsColorants == true || ((SubtypeNameValue == "NChannel") &amp;&amp; (parent1EntriesString != null &amp;&amp; parent1EntriesString.split('&amp;').filter(elem =&gt; elem != "Cyan" &amp;&amp; elem != "Magenta" &amp;&amp; elem != "Yellow" &amp;&amp; elem != "Black").length &gt; 0)) == false</test>
			<error>
				<message>Entry Colorants in DeviceNDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="DeviceNDict-MixingHints" testNumber="8"/>
			<description>Entry MixingHints in DeviceNDict shall have type Dictionary</description>
			<test>containsMixingHints == false || MixingHintsHasTypeDictionary == true</test>
			<error>
				<message>Entry MixingHints in DeviceNDict has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MixingHintsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="DeviceNDict-Process" testNumber="8"/>
			<description>Entry Process in DeviceNDict shall have type Dictionary</description>
			<test>containsProcess == false || ProcessHasTypeDictionary == true</test>
			<error>
				<message>Entry Process in DeviceNDict has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ProcessType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="DeviceNDict-Process" testNumber="11"/>
			<description>Entry Process in DeviceNDict is required, when (@Subtype == NChannel) &amp;&amp; fn:HasProcessColorants(parent::1)</description>
			<test>containsProcess == true || ((SubtypeNameValue == "NChannel") &amp;&amp; (parent1EntriesString != null &amp;&amp; parent1EntriesString.split('&amp;').filter(elem =&gt; elem == "Cyan" || elem == "Magenta" || elem == "Yellow" || elem == "Black").length &gt; 0)) == false</test>
			<error>
				<message>Entry Process in DeviceNDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="DeviceNDict-Subtype" testNumber="8"/>
			<description>Entry Subtype in DeviceNDict shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in DeviceNDict has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="DeviceNDict-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in DeviceNDict shall have one of values: DeviceN, NChannel</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "DeviceN" || SubtypeNameValue == "NChannel"</test>
			<error>
				<message>Entry Subtype with type Name in DeviceNDict has incorrect value %1 instead of DeviceN, NChannel</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNMixingHints">
			<id specification="ISO_32000_1_7" clause="DeviceNMixingHints" testNumber="1"/>
			<description>DeviceNMixingHints shall not contain entries except DotGain, PrintingOrder, Solidities</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DotGain' &amp;&amp; elem != 'PrintingOrder' &amp;&amp; elem != 'Solidities' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>DeviceNMixingHints contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DotGain' &amp;&amp; elem != 'PrintingOrder' &amp;&amp; elem != 'Solidities' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNMixingHints">
			<id specification="ISO_32000_1_7" clause="DeviceNMixingHints-DotGain" testNumber="8"/>
			<description>Entry DotGain in DeviceNMixingHints shall have type Dictionary</description>
			<test>containsDotGain == false || DotGainHasTypeDictionary == true</test>
			<error>
				<message>Entry DotGain in DeviceNMixingHints has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DotGainType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNMixingHints">
			<id specification="ISO_32000_1_7" clause="DeviceNMixingHints-PrintingOrder" testNumber="8"/>
			<description>Entry PrintingOrder in DeviceNMixingHints shall have type Array</description>
			<test>containsPrintingOrder == false || PrintingOrderHasTypeArray == true</test>
			<error>
				<message>Entry PrintingOrder in DeviceNMixingHints has type %1 instead of type Array</message>
				<arguments>
					<argument>PrintingOrderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNMixingHints">
			<id specification="ISO_32000_1_7" clause="DeviceNMixingHints-PrintingOrder" testNumber="11"/>
			<description>Entry PrintingOrder in DeviceNMixingHints is required, when fn:IsPresent(Solidities)</description>
			<test>containsPrintingOrder == true || (containsSolidities != true)</test>
			<error>
				<message>Entry PrintingOrder in DeviceNMixingHints is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNMixingHints">
			<id specification="ISO_32000_1_7" clause="DeviceNMixingHints-Solidities" testNumber="8"/>
			<description>Entry Solidities in DeviceNMixingHints shall have type Dictionary</description>
			<test>containsSolidities == false || SoliditiesHasTypeDictionary == true</test>
			<error>
				<message>Entry Solidities in DeviceNMixingHints has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SoliditiesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNProcess">
			<id specification="ISO_32000_1_7" clause="DeviceNProcess" testNumber="1"/>
			<description>DeviceNProcess shall not contain entries except ColorSpace, Components</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'Components' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>DeviceNProcess contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'Components' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNProcess">
			<id specification="ISO_32000_1_7" clause="DeviceNProcess-ColorSpace-Array" testNumber="17"/>
			<description>Entry ColorSpace with type Array in DeviceNProcess shall be one of objects CalGrayColorSpace, CalRGBColorSpace, ICCBasedColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in DeviceNProcess is not one of objects CalGrayColorSpace, CalRGBColorSpace, ICCBasedColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNProcess">
			<id specification="ISO_32000_1_7" clause="DeviceNProcess-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in DeviceNProcess shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in DeviceNProcess has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNProcess">
			<id specification="ISO_32000_1_7" clause="DeviceNProcess-ColorSpace" testNumber="7"/>
			<description>Entry ColorSpace in DeviceNProcess is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in DeviceNProcess is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNProcess">
			<id specification="ISO_32000_1_7" clause="DeviceNProcess-ColorSpace-Name" testNumber="6"/>
			<description>Entry ColorSpace with type Name in DeviceNProcess shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in DeviceNProcess has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNProcess">
			<id specification="ISO_32000_1_7" clause="DeviceNProcess-Components" testNumber="8"/>
			<description>Entry Components in DeviceNProcess shall have type Array</description>
			<test>containsComponents == false || ComponentsHasTypeArray == true</test>
			<error>
				<message>Entry Components in DeviceNProcess has type %1 instead of type Array</message>
				<arguments>
					<argument>ComponentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNProcess">
			<id specification="ISO_32000_1_7" clause="DeviceNProcess-Components" testNumber="7"/>
			<description>Entry Components in DeviceNProcess is required</description>
			<test>containsComponents == true</test>
			<error>
				<message>Entry Components in DeviceNProcess is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfDictionariesEntry">
			<id specification="ISO_32000_1_7" clause="DictionaryOfDictionariesEntry" testNumber="8"/>
			<description>Entry in DictionaryOfDictionaries shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in DictionaryOfDictionaries has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfFunctions">
			<id specification="ISO_32000_1_7" clause="DictionaryOfFunctions-Default-Dictionary" testNumber="17"/>
			<description>Entry Default with type Dictionary in DictionaryOfFunctions shall be one of objects FunctionType2, FunctionType3</description>
			<test>DefaultHasTypeDictionary != true || Default_size == 1</test>
			<error>
				<message>Entry Default with type Dictionary in DictionaryOfFunctions is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfFunctions">
			<id specification="ISO_32000_1_7" clause="DictionaryOfFunctions-Default-Stream" testNumber="17"/>
			<description>Entry Default with type Stream in DictionaryOfFunctions shall be one of objects FunctionType0, FunctionType4</description>
			<test>DefaultHasTypeStream != true || Default_size == 1</test>
			<error>
				<message>Entry Default with type Stream in DictionaryOfFunctions is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfFunctions">
			<id specification="ISO_32000_1_7" clause="DictionaryOfFunctions-Default" testNumber="8"/>
			<description>Entry Default in DictionaryOfFunctions shall have one of types: Dictionary, Stream</description>
			<test>containsDefault == false || DefaultHasTypeDictionary == true || DefaultHasTypeStream == true</test>
			<error>
				<message>Entry Default in DictionaryOfFunctions has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>DefaultType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfFunctions">
			<id specification="ISO_32000_1_7" clause="DictionaryOfFunctions-Default-Stream" testNumber="10"/>
			<description>Entry Default with type Stream in DictionaryOfFunctions shall be indirect</description>
			<test>DefaultHasTypeStream != true || isDefaultIndirect == true</test>
			<error>
				<message>Entry Default with type Stream in DictionaryOfFunctions is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfFunctionsEntry">
			<id specification="ISO_32000_1_7" clause="DictionaryOfFunctionsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in DictionaryOfFunctions shall be one of objects FunctionType2, FunctionType3</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in DictionaryOfFunctions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfFunctionsEntry">
			<id specification="ISO_32000_1_7" clause="DictionaryOfFunctionsEntry-Stream" testNumber="17"/>
			<description>Entry with type Stream in DictionaryOfFunctions shall be one of objects FunctionType0, FunctionType4</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Stream in DictionaryOfFunctions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfFunctionsEntry">
			<id specification="ISO_32000_1_7" clause="DictionaryOfFunctionsEntry" testNumber="8"/>
			<description>Entry in DictionaryOfFunctions shall have one of types: Dictionary, Stream</description>
			<test>HasTypeDictionary == true || HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in DictionaryOfFunctions has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfFunctionsEntry">
			<id specification="ISO_32000_1_7" clause="DictionaryOfFunctionsEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in DictionaryOfFunctions shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in DictionaryOfFunctions is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="DocInfo-Author" testNumber="8"/>
			<description>Entry Author in DocInfo shall have type StringText</description>
			<test>containsAuthor == false || AuthorHasTypeStringText == true</test>
			<error>
				<message>Entry Author in DocInfo has type %1 instead of type StringText</message>
				<arguments>
					<argument>AuthorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="DocInfo-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in DocInfo shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in DocInfo has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="DocInfo-Creator" testNumber="8"/>
			<description>Entry Creator in DocInfo shall have type StringText</description>
			<test>containsCreator == false || CreatorHasTypeStringText == true</test>
			<error>
				<message>Entry Creator in DocInfo has type %1 instead of type StringText</message>
				<arguments>
					<argument>CreatorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="DocInfo-Keywords" testNumber="8"/>
			<description>Entry Keywords in DocInfo shall have type StringText</description>
			<test>containsKeywords == false || KeywordsHasTypeStringText == true</test>
			<error>
				<message>Entry Keywords in DocInfo has type %1 instead of type StringText</message>
				<arguments>
					<argument>KeywordsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="DocInfo-ModDate" testNumber="8"/>
			<description>Entry ModDate in DocInfo shall have type Date</description>
			<test>containsModDate == false || ModDateHasTypeDate == true</test>
			<error>
				<message>Entry ModDate in DocInfo has type %1 instead of type Date</message>
				<arguments>
					<argument>ModDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="DocInfo-Producer" testNumber="8"/>
			<description>Entry Producer in DocInfo shall have type StringText</description>
			<test>containsProducer == false || ProducerHasTypeStringText == true</test>
			<error>
				<message>Entry Producer in DocInfo has type %1 instead of type StringText</message>
				<arguments>
					<argument>ProducerType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="DocInfo-Subject" testNumber="8"/>
			<description>Entry Subject in DocInfo shall have type StringText</description>
			<test>containsSubject == false || SubjectHasTypeStringText == true</test>
			<error>
				<message>Entry Subject in DocInfo has type %1 instead of type StringText</message>
				<arguments>
					<argument>SubjectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="DocInfo-Title" testNumber="8"/>
			<description>Entry Title in DocInfo shall have type StringText</description>
			<test>containsTitle == false || TitleHasTypeStringText == true</test>
			<error>
				<message>Entry Title in DocInfo has type %1 instead of type StringText</message>
				<arguments>
					<argument>TitleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="DocInfo-Trapped" testNumber="8"/>
			<description>Entry Trapped in DocInfo shall have type Name</description>
			<test>containsTrapped == false || TrappedHasTypeName == true</test>
			<error>
				<message>Entry Trapped in DocInfo has type %1 instead of type Name</message>
				<arguments>
					<argument>TrappedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="DocInfo-Trapped-Name" testNumber="6"/>
			<description>Entry Trapped with type Name in DocInfo shall have one of values: Unknown, True, False</description>
			<test>TrappedHasTypeName != true || TrappedNameValue == "True" || TrappedNameValue == "False" || TrappedNameValue == "Unknown"</test>
			<error>
				<message>Entry Trapped with type Name in DocInfo has incorrect value %1 instead of Unknown, True, False</message>
				<arguments>
					<argument>TrappedNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfoEntry">
			<id specification="ISO_32000_1_7" clause="DocInfoEntry" testNumber="8"/>
			<description>Entry in DocInfo shall have type StringText</description>
			<test>HasTypeStringText == true</test>
			<error>
				<message>Entry %keyName% in DocInfo has type %1 instead of type StringText</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="DocMDPTransformParameters" testNumber="1"/>
			<description>DocMDPTransformParameters shall not contain entries except P, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'P' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>DocMDPTransformParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'P' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="DocMDPTransformParameters-P" testNumber="8"/>
			<description>Entry P in DocMDPTransformParameters shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in DocMDPTransformParameters has type %1 instead of type Integer</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="DocMDPTransformParameters-P-Integer" testNumber="6"/>
			<description>Entry P with type Integer in DocMDPTransformParameters shall have one of values: 1, 2, 3</description>
			<test>PHasTypeInteger != true || PIntegerValue == 1 || PIntegerValue == 2 || PIntegerValue == 3</test>
			<error>
				<message>Entry P with type Integer in DocMDPTransformParameters has incorrect value %1 instead of 1, 2, 3</message>
				<arguments>
					<argument>PIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="DocMDPTransformParameters-Type" testNumber="8"/>
			<description>Entry Type in DocMDPTransformParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in DocMDPTransformParameters has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="DocMDPTransformParameters-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in DocMDPTransformParameters shall have value TransformParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "TransformParams"</test>
			<error>
				<message>Entry Type with type Name in DocMDPTransformParameters has incorrect value %1 instead of TransformParams</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="DocMDPTransformParameters-V" testNumber="8"/>
			<description>Entry V in DocMDPTransformParameters shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in DocMDPTransformParameters has type %1 instead of type Name</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="DocMDPTransformParameters-V-Name" testNumber="6"/>
			<description>Entry V with type Name in DocMDPTransformParameters shall have value 1.2</description>
			<test>VHasTypeName != true || VNameValue == "1.2"</test>
			<error>
				<message>Entry V with type Name in DocMDPTransformParameters has incorrect value %1 instead of 1.2</message>
				<arguments>
					<argument>VNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp" testNumber="1"/>
			<description>DocTimeStamp shall not contain entries except ADBE_Build, ByteRange, Cert, Changes, ContactInfo, Contents, Filter, Location, M, Name, Prop_AuthTime, Prop_AuthType, Prop_Build, R, Reason, Reference, SubFilter, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ADBE_Build' &amp;&amp; elem != 'ByteRange' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'Changes' &amp;&amp; elem != 'ContactInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Location' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Prop_AuthTime' &amp;&amp; elem != 'Prop_AuthType' &amp;&amp; elem != 'Prop_Build' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Reason' &amp;&amp; elem != 'Reference' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>DocTimeStamp contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ADBE_Build' &amp;&amp; elem != 'ByteRange' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'Changes' &amp;&amp; elem != 'ContactInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Location' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Prop_AuthTime' &amp;&amp; elem != 'Prop_AuthType' &amp;&amp; elem != 'Prop_Build' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Reason' &amp;&amp; elem != 'Reference' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-ADBE_Build" testNumber="8"/>
			<description>Entry ADBE_Build in DocTimeStamp shall have type String</description>
			<test>containsADBE_Build == false || ADBE_BuildHasTypeString == true</test>
			<error>
				<message>Entry ADBE_Build in DocTimeStamp has type %1 instead of type String</message>
				<arguments>
					<argument>ADBE_BuildType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-ADBE_Build" testNumber="5"/>
			<description>Entry ADBE_Build in DocTimeStamp is deprecated since PDF 1.5</description>
			<test>containsADBE_Build == false</test>
			<error>
				<message>Entry ADBE_Build in DocTimeStamp is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-ByteRange" testNumber="8"/>
			<description>Entry ByteRange in DocTimeStamp shall have type Array</description>
			<test>containsByteRange == false || ByteRangeHasTypeArray == true</test>
			<error>
				<message>Entry ByteRange in DocTimeStamp has type %1 instead of type Array</message>
				<arguments>
					<argument>ByteRangeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-Cert" testNumber="8"/>
			<description>Entry Cert in DocTimeStamp shall have one of types: Array, StringByte</description>
			<test>containsCert == false || CertHasTypeArray == true || CertHasTypeStringByte == true</test>
			<error>
				<message>Entry Cert in DocTimeStamp has type %1 instead of one of types: Array, StringByte</message>
				<arguments>
					<argument>CertType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-Changes" testNumber="8"/>
			<description>Entry Changes in DocTimeStamp shall have type Array</description>
			<test>containsChanges == false || ChangesHasTypeArray == true</test>
			<error>
				<message>Entry Changes in DocTimeStamp has type %1 instead of type Array</message>
				<arguments>
					<argument>ChangesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-ContactInfo" testNumber="8"/>
			<description>Entry ContactInfo in DocTimeStamp shall have type String</description>
			<test>containsContactInfo == false || ContactInfoHasTypeString == true</test>
			<error>
				<message>Entry ContactInfo in DocTimeStamp has type %1 instead of type String</message>
				<arguments>
					<argument>ContactInfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-Contents" testNumber="8"/>
			<description>Entry Contents in DocTimeStamp shall have type StringByte</description>
			<test>containsContents == false || ContentsHasTypeStringByte == true</test>
			<error>
				<message>Entry Contents in DocTimeStamp has type %1 instead of type StringByte</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-Contents" testNumber="7"/>
			<description>Entry Contents in DocTimeStamp is required</description>
			<test>containsContents == true</test>
			<error>
				<message>Entry Contents in DocTimeStamp is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-Filter" testNumber="8"/>
			<description>Entry Filter in DocTimeStamp shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in DocTimeStamp has type %1 instead of type Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-Filter" testNumber="7"/>
			<description>Entry Filter in DocTimeStamp is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in DocTimeStamp is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-Location" testNumber="8"/>
			<description>Entry Location in DocTimeStamp shall have type String</description>
			<test>containsLocation == false || LocationHasTypeString == true</test>
			<error>
				<message>Entry Location in DocTimeStamp has type %1 instead of type String</message>
				<arguments>
					<argument>LocationType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-M" testNumber="8"/>
			<description>Entry M in DocTimeStamp shall have type Date</description>
			<test>containsM == false || MHasTypeDate == true</test>
			<error>
				<message>Entry M in DocTimeStamp has type %1 instead of type Date</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-Name" testNumber="8"/>
			<description>Entry Name in DocTimeStamp shall have type String</description>
			<test>containsName == false || NameHasTypeString == true</test>
			<error>
				<message>Entry Name in DocTimeStamp has type %1 instead of type String</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-Prop_AuthTime" testNumber="8"/>
			<description>Entry Prop_AuthTime in DocTimeStamp shall have type Integer</description>
			<test>containsProp_AuthTime == false || Prop_AuthTimeHasTypeInteger == true</test>
			<error>
				<message>Entry Prop_AuthTime in DocTimeStamp has type %1 instead of type Integer</message>
				<arguments>
					<argument>Prop_AuthTimeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-Prop_AuthType" testNumber="8"/>
			<description>Entry Prop_AuthType in DocTimeStamp shall have type Name</description>
			<test>containsProp_AuthType == false || Prop_AuthTypeHasTypeName == true</test>
			<error>
				<message>Entry Prop_AuthType in DocTimeStamp has type %1 instead of type Name</message>
				<arguments>
					<argument>Prop_AuthTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-Prop_Build" testNumber="8"/>
			<description>Entry Prop_Build in DocTimeStamp shall have type Dictionary</description>
			<test>containsProp_Build == false || Prop_BuildHasTypeDictionary == true</test>
			<error>
				<message>Entry Prop_Build in DocTimeStamp has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Prop_BuildType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-R" testNumber="8"/>
			<description>Entry R in DocTimeStamp shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in DocTimeStamp has type %1 instead of type Integer</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-Reason" testNumber="8"/>
			<description>Entry Reason in DocTimeStamp shall have type String</description>
			<test>containsReason == false || ReasonHasTypeString == true</test>
			<error>
				<message>Entry Reason in DocTimeStamp has type %1 instead of type String</message>
				<arguments>
					<argument>ReasonType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-Reference" testNumber="8"/>
			<description>Entry Reference in DocTimeStamp shall have type Array</description>
			<test>containsReference == false || ReferenceHasTypeArray == true</test>
			<error>
				<message>Entry Reference in DocTimeStamp has type %1 instead of type Array</message>
				<arguments>
					<argument>ReferenceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-SubFilter" testNumber="8"/>
			<description>Entry SubFilter in DocTimeStamp shall have type Name</description>
			<test>containsSubFilter == false || SubFilterHasTypeName == true</test>
			<error>
				<message>Entry SubFilter in DocTimeStamp has type %1 instead of type Name</message>
				<arguments>
					<argument>SubFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-SubFilter-Name" testNumber="6"/>
			<description>Entry SubFilter with type Name in DocTimeStamp shall have value ETSI.RFC3161</description>
			<test>SubFilterHasTypeName != true || SubFilterNameValue == "ETSI.RFC3161"</test>
			<error>
				<message>Entry SubFilter with type Name in DocTimeStamp has incorrect value %1 instead of ETSI.RFC3161</message>
				<arguments>
					<argument>SubFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-Type" testNumber="8"/>
			<description>Entry Type in DocTimeStamp shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in DocTimeStamp has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-Type" testNumber="7"/>
			<description>Entry Type in DocTimeStamp is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in DocTimeStamp is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in DocTimeStamp shall have value DocTimeStamp</description>
			<test>TypeHasTypeName != true || TypeNameValue == "DocTimeStamp"</test>
			<error>
				<message>Entry Type with type Name in DocTimeStamp has incorrect value %1 instead of DocTimeStamp</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="DocTimeStamp-V" testNumber="8"/>
			<description>Entry V in DocTimeStamp shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in DocTimeStamp has type %1 instead of type Integer</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocument">
			<id specification="ISO_32000_1_7" clause="Document-FileTrailer" testNumber="8"/>
			<description>FileTrailer shall have type Dictionary</description>
			<test>containsFileTrailer == false || FileTrailerHasTypeDictionary == true</test>
			<error>
				<message>FileTrailer has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FileTrailerType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocument">
			<id specification="ISO_32000_1_7" clause="Document-XRefStream" testNumber="8"/>
			<description>XRefStream shall have type Stream</description>
			<test>containsXRefStream == false || XRefStreamHasTypeStream == true</test>
			<error>
				<message>XRefStream has type %1 instead of type Stream</message>
				<arguments>
					<argument>XRefStreamType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileParameter" testNumber="1"/>
			<description>EmbeddedFileParameter shall not contain entries except CheckSum, CreationDate, Mac, ModDate, Size</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CheckSum' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'ModDate' &amp;&amp; elem != 'Size' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>EmbeddedFileParameter contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CheckSum' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'ModDate' &amp;&amp; elem != 'Size' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileParameter-CheckSum" testNumber="8"/>
			<description>Entry CheckSum in EmbeddedFileParameter shall have type String</description>
			<test>containsCheckSum == false || CheckSumHasTypeString == true</test>
			<error>
				<message>Entry CheckSum in EmbeddedFileParameter has type %1 instead of type String</message>
				<arguments>
					<argument>CheckSumType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileParameter-CheckSum-String" testNumber="9"/>
			<description>Entry CheckSum with type String in EmbeddedFileParameter shall satisfy special case: fn:Eval(fn:StringLength(CheckSum) == 16)</description>
			<test>CheckSumHasTypeString != true || (CheckSumStringSize == 16)</test>
			<error>
				<message>Entry CheckSum with type String in EmbeddedFileParameter does not satisfy special case: fn:Eval(fn:StringLength(CheckSum) == 16)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileParameter-CreationDate" testNumber="8"/>
			<description>Entry CreationDate in EmbeddedFileParameter shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in EmbeddedFileParameter has type %1 instead of type Date</message>
				<arguments>
					<argument>CreationDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileParameter-Mac" testNumber="8"/>
			<description>Entry Mac in EmbeddedFileParameter shall have type Dictionary</description>
			<test>containsMac == false || MacHasTypeDictionary == true</test>
			<error>
				<message>Entry Mac in EmbeddedFileParameter has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MacType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileParameter-ModDate" testNumber="8"/>
			<description>Entry ModDate in EmbeddedFileParameter shall have type Date</description>
			<test>containsModDate == false || ModDateHasTypeDate == true</test>
			<error>
				<message>Entry ModDate in EmbeddedFileParameter has type %1 instead of type Date</message>
				<arguments>
					<argument>ModDateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileParameter-Size" testNumber="8"/>
			<description>Entry Size in EmbeddedFileParameter shall have type Integer</description>
			<test>containsSize == false || SizeHasTypeInteger == true</test>
			<error>
				<message>Entry Size in EmbeddedFileParameter has type %1 instead of type Integer</message>
				<arguments>
					<argument>SizeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileParameter-Size-Integer" testNumber="14"/>
			<description>Entry Size with type Integer in EmbeddedFileParameter shall satisfy possible value predicate: fn:Eval(@Size &gt;= 0)</description>
			<test>SizeHasTypeInteger != true || SizeIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Size with type Integer in EmbeddedFileParameter does not satisfy possible value predicate: fn:Eval(@Size &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream" testNumber="1"/>
			<description>EmbeddedFileStream shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Params, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Params' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>EmbeddedFileStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Params' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-DL" testNumber="8"/>
			<description>Entry DL in EmbeddedFileStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in EmbeddedFileStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in EmbeddedFileStream shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in EmbeddedFileStream does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in EmbeddedFileStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in EmbeddedFileStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in EmbeddedFileStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in EmbeddedFileStream has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in EmbeddedFileStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in EmbeddedFileStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-F" testNumber="8"/>
			<description>Entry F in EmbeddedFileStream shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in EmbeddedFileStream has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in EmbeddedFileStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in EmbeddedFileStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in EmbeddedFileStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in EmbeddedFileStream has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in EmbeddedFileStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in EmbeddedFileStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-FFilter" testNumber="8"/>
			<description>Entry FFilter in EmbeddedFileStream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in EmbeddedFileStream has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in EmbeddedFileStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in EmbeddedFileStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in EmbeddedFileStream shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in EmbeddedFileStream has incorrect value %1 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-Filter" testNumber="8"/>
			<description>Entry Filter in EmbeddedFileStream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in EmbeddedFileStream has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in EmbeddedFileStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in EmbeddedFileStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in EmbeddedFileStream shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in EmbeddedFileStream has incorrect value %1 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-Length" testNumber="8"/>
			<description>Entry Length in EmbeddedFileStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in EmbeddedFileStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-Length" testNumber="7"/>
			<description>Entry Length in EmbeddedFileStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in EmbeddedFileStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-Params" testNumber="8"/>
			<description>Entry Params in EmbeddedFileStream shall have type Dictionary</description>
			<test>containsParams == false || ParamsHasTypeDictionary == true</test>
			<error>
				<message>Entry Params in EmbeddedFileStream has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParamsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-Subtype" testNumber="8"/>
			<description>Entry Subtype in EmbeddedFileStream shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in EmbeddedFileStream has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-Type" testNumber="8"/>
			<description>Entry Type in EmbeddedFileStream shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in EmbeddedFileStream has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="EmbeddedFileStream-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in EmbeddedFileStream shall have value EmbeddedFile</description>
			<test>TypeHasTypeName != true || TypeNameValue == "EmbeddedFile"</test>
			<error>
				<message>Entry Type with type Name in EmbeddedFileStream has incorrect value %1 instead of EmbeddedFile</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_7" clause="Encoding" testNumber="1"/>
			<description>Encoding shall not contain entries except BaseEncoding, Differences, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseEncoding' &amp;&amp; elem != 'Differences' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Encoding contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseEncoding' &amp;&amp; elem != 'Differences' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_7" clause="Encoding-BaseEncoding" testNumber="8"/>
			<description>Entry BaseEncoding in Encoding shall have type Name</description>
			<test>containsBaseEncoding == false || BaseEncodingHasTypeName == true</test>
			<error>
				<message>Entry BaseEncoding in Encoding has type %1 instead of type Name</message>
				<arguments>
					<argument>BaseEncodingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_7" clause="Encoding-BaseEncoding-Name" testNumber="6"/>
			<description>Entry BaseEncoding with type Name in Encoding shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>BaseEncodingHasTypeName != true || BaseEncodingNameValue == "MacRomanEncoding" || BaseEncodingNameValue == "MacExpertEncoding" || BaseEncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry BaseEncoding with type Name in Encoding has incorrect value %1 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>BaseEncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_7" clause="Encoding-Differences" testNumber="8"/>
			<description>Entry Differences in Encoding shall have type Array</description>
			<test>containsDifferences == false || DifferencesHasTypeArray == true</test>
			<error>
				<message>Entry Differences in Encoding has type %1 instead of type Array</message>
				<arguments>
					<argument>DifferencesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_7" clause="Encoding-Type" testNumber="8"/>
			<description>Entry Type in Encoding shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Encoding has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_7" clause="Encoding-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Encoding shall have value Encoding</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Encoding"</test>
			<error>
				<message>Entry Type with type Name in Encoding has incorrect value %1 instead of Encoding</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey" testNumber="1"/>
			<description>EncryptionPublicKey shall not contain entries except CF, EFF, EncryptMetadata, Filter, Length, P, Recipients, StmF, StrF, SubFilter, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CF' &amp;&amp; elem != 'EFF' &amp;&amp; elem != 'EncryptMetadata' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'KDFSalt' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Recipients' &amp;&amp; elem != 'StmF' &amp;&amp; elem != 'StrF' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>EncryptionPublicKey contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CF' &amp;&amp; elem != 'EFF' &amp;&amp; elem != 'EncryptMetadata' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'KDFSalt' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Recipients' &amp;&amp; elem != 'StmF' &amp;&amp; elem != 'StrF' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey" testNumber="22"/>
			<description>EncryptionPublicKey shall not contain entry KDFSalt in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsKDFSalt == false</test>
			<error>
				<message>EncryptionPublicKey contains entry KDFSalt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-CF-Dictionary" testNumber="17"/>
			<description>Entry CF with type Dictionary in EncryptionPublicKey shall be one of objects CryptFilterMap, CryptFilterPublicKeyMap</description>
			<test>CFHasTypeDictionary != true || CF_size == 1</test>
			<error>
				<message>Entry CF with type Dictionary in EncryptionPublicKey is not one of objects CryptFilterMap, CryptFilterPublicKeyMap</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-CF" testNumber="8"/>
			<description>Entry CF in EncryptionPublicKey shall have type Dictionary</description>
			<test>containsCF == false || CFHasTypeDictionary == true</test>
			<error>
				<message>Entry CF in EncryptionPublicKey has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-EFF" testNumber="8"/>
			<description>Entry EFF in EncryptionPublicKey shall have type Name</description>
			<test>containsEFF == false || EFFHasTypeName == true</test>
			<error>
				<message>Entry EFF in EncryptionPublicKey has type %1 instead of type Name</message>
				<arguments>
					<argument>EFFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-EFF-Name" testNumber="6"/>
			<description>Entry EFF with type Name in EncryptionPublicKey shall have one of values: DefaultCryptFilter, DefEmbeddedFile, Identity</description>
			<test>EFFHasTypeName != true || EFFNameValue == "Identity" || EFFNameValue == "DefaultCryptFilter" || EFFNameValue == "DefEmbeddedFile"</test>
			<error>
				<message>Entry EFF with type Name in EncryptionPublicKey has incorrect value %1 instead of DefaultCryptFilter, DefEmbeddedFile, Identity</message>
				<arguments>
					<argument>EFFNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-EncryptMetadata" testNumber="8"/>
			<description>Entry EncryptMetadata in EncryptionPublicKey shall have type Boolean</description>
			<test>containsEncryptMetadata == false || EncryptMetadataHasTypeBoolean == true</test>
			<error>
				<message>Entry EncryptMetadata in EncryptionPublicKey has type %1 instead of type Boolean</message>
				<arguments>
					<argument>EncryptMetadataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-Filter" testNumber="8"/>
			<description>Entry Filter in EncryptionPublicKey shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in EncryptionPublicKey has type %1 instead of type Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-Filter" testNumber="7"/>
			<description>Entry Filter in EncryptionPublicKey is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in EncryptionPublicKey is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in EncryptionPublicKey shall have one of values: Adobe.PubSec, AdobePPKLite</description>
			<test>FilterHasTypeName != true || FilterNameValue == "Adobe.PubSec" || FilterNameValue == "AdobePPKLite"</test>
			<error>
				<message>Entry Filter with type Name in EncryptionPublicKey has incorrect value %1 instead of Adobe.PubSec, AdobePPKLite</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-Length" testNumber="8"/>
			<description>Entry Length in EncryptionPublicKey shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in EncryptionPublicKey has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-Length-Integer" testNumber="14"/>
			<description>Entry Length with type Integer in EncryptionPublicKey shall satisfy possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; (@Length &lt;= 128) &amp;&amp; ((@Length mod 8) == 0))</description>
			<test>LengthHasTypeInteger != true || (LengthIntegerValue &gt;= 40) &amp;&amp; (LengthIntegerValue &lt;= 128) &amp;&amp; ((LengthIntegerValue % 8) == 0)</test>
			<error>
				<message>Entry Length with type Integer in EncryptionPublicKey does not satisfy possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; (@Length &lt;= 128) &amp;&amp; ((@Length mod 8) == 0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-P" testNumber="8"/>
			<description>Entry P in EncryptionPublicKey shall have type Bitmask</description>
			<test>containsP == false || PHasTypeBitmask == true</test>
			<error>
				<message>Entry P in EncryptionPublicKey has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-P-Bitmask" testNumber="9"/>
			<description>Entry P with type Bitmask in EncryptionPublicKey shall satisfy special case: fn:Eval(fn:BitsClear(13, 32))</description>
			<test>PHasTypeBitmask != true || ((PBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry P with type Bitmask in EncryptionPublicKey does not satisfy special case: fn:Eval(fn:BitsClear(13, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-Recipients" testNumber="8"/>
			<description>Entry Recipients in EncryptionPublicKey shall have type Array</description>
			<test>containsRecipients == false || RecipientsHasTypeArray == true</test>
			<error>
				<message>Entry Recipients in EncryptionPublicKey has type %1 instead of type Array</message>
				<arguments>
					<argument>RecipientsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-Recipients" testNumber="11"/>
			<description>Entry Recipients in EncryptionPublicKey is required, when (@SubFilter == adbe.pkcs7.s3) || (@SubFilter == adbe.pkcs7.s4)</description>
			<test>containsRecipients == true || ((SubFilterNameValue != "adbe.pkcs7.s3") &amp;&amp; (SubFilterNameValue != "adbe.pkcs7.s4"))</test>
			<error>
				<message>Entry Recipients in EncryptionPublicKey is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-StmF" testNumber="8"/>
			<description>Entry StmF in EncryptionPublicKey shall have type Name</description>
			<test>containsStmF == false || StmFHasTypeName == true</test>
			<error>
				<message>Entry StmF in EncryptionPublicKey has type %1 instead of type Name</message>
				<arguments>
					<argument>StmFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-StmF-Name" testNumber="6"/>
			<description>Entry StmF with type Name in EncryptionPublicKey shall have one of values: DefaultCryptFilter, DefEmbeddedFile, Identity</description>
			<test>StmFHasTypeName != true || StmFNameValue == "Identity" || StmFNameValue == "DefaultCryptFilter" || StmFNameValue == "DefEmbeddedFile"</test>
			<error>
				<message>Entry StmF with type Name in EncryptionPublicKey has incorrect value %1 instead of DefaultCryptFilter, DefEmbeddedFile, Identity</message>
				<arguments>
					<argument>StmFNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-StrF" testNumber="8"/>
			<description>Entry StrF in EncryptionPublicKey shall have type Name</description>
			<test>containsStrF == false || StrFHasTypeName == true</test>
			<error>
				<message>Entry StrF in EncryptionPublicKey has type %1 instead of type Name</message>
				<arguments>
					<argument>StrFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-StrF-Name" testNumber="6"/>
			<description>Entry StrF with type Name in EncryptionPublicKey shall have one of values: DefaultCryptFilter, Identity</description>
			<test>StrFHasTypeName != true || StrFNameValue == "Identity" || StrFNameValue == "DefaultCryptFilter"</test>
			<error>
				<message>Entry StrF with type Name in EncryptionPublicKey has incorrect value %1 instead of DefaultCryptFilter, Identity</message>
				<arguments>
					<argument>StrFNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-SubFilter" testNumber="8"/>
			<description>Entry SubFilter in EncryptionPublicKey shall have type Name</description>
			<test>containsSubFilter == false || SubFilterHasTypeName == true</test>
			<error>
				<message>Entry SubFilter in EncryptionPublicKey has type %1 instead of type Name</message>
				<arguments>
					<argument>SubFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-SubFilter-Name" testNumber="6"/>
			<description>Entry SubFilter with type Name in EncryptionPublicKey shall have one of values: adbe.pkcs7.s3, adbe.pkcs7.s4, adbe.pkcs7.s5</description>
			<test>SubFilterHasTypeName != true || SubFilterNameValue == "adbe.pkcs7.s3" || SubFilterNameValue == "adbe.pkcs7.s4" || SubFilterNameValue == "adbe.pkcs7.s5"</test>
			<error>
				<message>Entry SubFilter with type Name in EncryptionPublicKey has incorrect value %1 instead of adbe.pkcs7.s3, adbe.pkcs7.s4, adbe.pkcs7.s5</message>
				<arguments>
					<argument>SubFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-V" testNumber="8"/>
			<description>Entry V in EncryptionPublicKey shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in EncryptionPublicKey has type %1 instead of type Integer</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-V" testNumber="7"/>
			<description>Entry V in EncryptionPublicKey is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in EncryptionPublicKey is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-V-Integer" testNumber="19"/>
			<description>Entry V with type Integer in EncryptionPublicKey should not have deprecated value 0</description>
			<test>VIntegerValue != 0</test>
			<error>
				<message>Entry V with type Integer in EncryptionPublicKey has deprecated value 0</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="EncryptionPublicKey-V-Integer" testNumber="6"/>
			<description>Entry V with type Integer in EncryptionPublicKey shall have one of values: 0, 1, 2, 3, 4, 5</description>
			<test>VHasTypeInteger != true || VIntegerValue == 0 || VIntegerValue == 1 || VIntegerValue == 2 || VIntegerValue == 3 || VIntegerValue == 4 || VIntegerValue == 5</test>
			<error>
				<message>Entry V with type Integer in EncryptionPublicKey has incorrect value %1 instead of 0, 1, 2, 3, 4, 5</message>
				<arguments>
					<argument>VIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard" testNumber="1"/>
			<description>EncryptionStandard shall not contain entries except CF, EFF, EncryptMetadata, Filter, Length, O, OE, P, Perms, R, StmF, StrF, SubFilter, U, UE, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CF' &amp;&amp; elem != 'EFF' &amp;&amp; elem != 'EncryptMetadata' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'KDFSalt' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'O' &amp;&amp; elem != 'OE' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Perms' &amp;&amp; elem != 'R' &amp;&amp; elem != 'StmF' &amp;&amp; elem != 'StrF' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'U' &amp;&amp; elem != 'UE' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>EncryptionStandard contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CF' &amp;&amp; elem != 'EFF' &amp;&amp; elem != 'EncryptMetadata' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'KDFSalt' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'O' &amp;&amp; elem != 'OE' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Perms' &amp;&amp; elem != 'R' &amp;&amp; elem != 'StmF' &amp;&amp; elem != 'StrF' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'U' &amp;&amp; elem != 'UE' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard" testNumber="22"/>
			<description>EncryptionStandard shall not contain entry KDFSalt in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsKDFSalt == false</test>
			<error>
				<message>EncryptionStandard contains entry KDFSalt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-CF" testNumber="8"/>
			<description>Entry CF in EncryptionStandard shall have type Dictionary</description>
			<test>containsCF == false || CFHasTypeDictionary == true</test>
			<error>
				<message>Entry CF in EncryptionStandard has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-EFF" testNumber="8"/>
			<description>Entry EFF in EncryptionStandard shall have type Name</description>
			<test>containsEFF == false || EFFHasTypeName == true</test>
			<error>
				<message>Entry EFF in EncryptionStandard has type %1 instead of type Name</message>
				<arguments>
					<argument>EFFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-EncryptMetadata" testNumber="8"/>
			<description>Entry EncryptMetadata in EncryptionStandard shall have type Boolean</description>
			<test>containsEncryptMetadata == false || EncryptMetadataHasTypeBoolean == true</test>
			<error>
				<message>Entry EncryptMetadata in EncryptionStandard has type %1 instead of type Boolean</message>
				<arguments>
					<argument>EncryptMetadataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-Filter" testNumber="8"/>
			<description>Entry Filter in EncryptionStandard shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in EncryptionStandard has type %1 instead of type Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-Filter" testNumber="7"/>
			<description>Entry Filter in EncryptionStandard is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in EncryptionStandard is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in EncryptionStandard shall have value Standard</description>
			<test>FilterHasTypeName != true || FilterNameValue == "Standard"</test>
			<error>
				<message>Entry Filter with type Name in EncryptionStandard has incorrect value %1 instead of Standard</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-Length" testNumber="8"/>
			<description>Entry Length in EncryptionStandard shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in EncryptionStandard has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-Length-Integer" testNumber="14"/>
			<description>Entry Length with type Integer in EncryptionStandard shall satisfy possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; ((@Length &lt;= 128) || fn:Extension(ADBE_Extn3, (@Length &lt;= 256))) &amp;&amp; ((@Length mod 8) == 0))</description>
			<test>LengthHasTypeInteger != true || (LengthIntegerValue &gt;= 40) &amp;&amp; ((LengthIntegerValue &lt;= 128) || ((hasExtensionADBE_Extn3 == true) &amp;&amp; (LengthIntegerValue &lt;= 256))) &amp;&amp; ((LengthIntegerValue % 8) == 0)</test>
			<error>
				<message>Entry Length with type Integer in EncryptionStandard does not satisfy possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; ((@Length &lt;= 128) || fn:Extension(ADBE_Extn3, (@Length &lt;= 256))) &amp;&amp; ((@Length mod 8) == 0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-O" testNumber="8"/>
			<description>Entry O in EncryptionStandard shall have type StringByte</description>
			<test>containsO == false || OHasTypeStringByte == true</test>
			<error>
				<message>Entry O in EncryptionStandard has type %1 instead of type StringByte</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-O" testNumber="7"/>
			<description>Entry O in EncryptionStandard is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in EncryptionStandard is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-O-StringByte" testNumber="9"/>
			<description>Entry O with type StringByte in EncryptionStandard shall satisfy special case: fn:Eval(fn:AlwaysUnencrypted() &amp;&amp; (((@R &lt;= 4) &amp;&amp; (fn:StringLength(O) == 32)) || (((@R == 5) || (@R == 6)) &amp;&amp; (fn:StringLength(O) == 48))))</description>
			<test>OHasTypeStringByte != true || (((RHasTypeInteger == false || (RIntegerValue &lt;= 4)) &amp;&amp; (OStringSize == 32)) || ((RHasTypeInteger == false || ((RIntegerValue == 5) || (RIntegerValue == 6))) &amp;&amp; (OStringSize == 48)))</test>
			<error>
				<message>Entry O with type StringByte in EncryptionStandard does not satisfy special case: fn:Eval(fn:AlwaysUnencrypted() &amp;&amp; (((@R &lt;= 4) &amp;&amp; (fn:StringLength(O) == 32)) || (((@R == 5) || (@R == 6)) &amp;&amp; (fn:StringLength(O) == 48))))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-OE" testNumber="8"/>
			<description>Entry OE in EncryptionStandard shall have type StringByte</description>
			<test>containsOE == false || OEHasTypeStringByte == true</test>
			<error>
				<message>Entry OE in EncryptionStandard has type %1 instead of type StringByte</message>
				<arguments>
					<argument>OEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-OE" testNumber="11"/>
			<description>Entry OE in EncryptionStandard is required, when (@R == 5) || (@R == 6)</description>
			<test>RHasTypeInteger == false || (containsOE == true || ((RIntegerValue != 5) &amp;&amp; (RIntegerValue != 6)))</test>
			<error>
				<message>Entry OE in EncryptionStandard is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-OE-StringByte" testNumber="9"/>
			<description>Entry OE with type StringByte in EncryptionStandard shall satisfy special case: fn:Eval(fn:AlwaysUnencrypted() &amp;&amp; (fn:StringLength(OE) == 32))</description>
			<test>OEHasTypeStringByte != true || (OEStringSize == 32)</test>
			<error>
				<message>Entry OE with type StringByte in EncryptionStandard does not satisfy special case: fn:Eval(fn:AlwaysUnencrypted() &amp;&amp; (fn:StringLength(OE) == 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-P" testNumber="8"/>
			<description>Entry P in EncryptionStandard shall have type Bitmask</description>
			<test>containsP == false || PHasTypeBitmask == true</test>
			<error>
				<message>Entry P in EncryptionStandard has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-P" testNumber="7"/>
			<description>Entry P in EncryptionStandard is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in EncryptionStandard is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-P-Bitmask" testNumber="9"/>
			<description>Entry P with type Bitmask in EncryptionStandard shall satisfy special case: fn:Eval(fn:BitsClear(1, 2) &amp;&amp; fn:BitsSet(7, 8) &amp;&amp; fn:BitsSet(13, 32))</description>
			<test>PHasTypeBitmask != true || (((PBitmaskValue &gt;&gt; 0 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 1 &amp; 1) == 0) &amp;&amp; ((PBitmaskValue &gt;&gt; 6 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 7 &amp; 1) == 1) &amp;&amp; ((PBitmaskValue &gt;&gt; 12 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 13 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 14 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 15 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 16 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 17 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 18 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 19 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 20 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 21 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 22 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 23 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 24 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 25 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 26 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 27 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 28 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 29 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 30 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 31 &amp; 1) == 1))</test>
			<error>
				<message>Entry P with type Bitmask in EncryptionStandard does not satisfy special case: fn:Eval(fn:BitsClear(1, 2) &amp;&amp; fn:BitsSet(7, 8) &amp;&amp; fn:BitsSet(13, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-Perms" testNumber="8"/>
			<description>Entry Perms in EncryptionStandard shall have type StringByte</description>
			<test>containsPerms == false || PermsHasTypeStringByte == true</test>
			<error>
				<message>Entry Perms in EncryptionStandard has type %1 instead of type StringByte</message>
				<arguments>
					<argument>PermsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-Perms" testNumber="11"/>
			<description>Entry Perms in EncryptionStandard is required, when (@R == 5) || (@R == 6)</description>
			<test>RHasTypeInteger == false || (containsPerms == true || ((RIntegerValue != 5) &amp;&amp; (RIntegerValue != 6)))</test>
			<error>
				<message>Entry Perms in EncryptionStandard is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-R" testNumber="8"/>
			<description>Entry R in EncryptionStandard shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in EncryptionStandard has type %1 instead of type Integer</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-R" testNumber="7"/>
			<description>Entry R in EncryptionStandard is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in EncryptionStandard is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-R-Integer-2" testNumber="15"/>
			<description>Entry R in EncryptionStandard shall have Integer value 2, if this object satisfies condition @V &lt; 2</description>
			<test>VHasTypeInteger == false || ((VIntegerValue &gt;= 2) || RIntegerValue == 2)</test>
			<error>
				<message>Entry R in EncryptionStandard does not have value 2</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-R-Integer-3" testNumber="15"/>
			<description>Entry R in EncryptionStandard shall have Integer value 3, if this object satisfies condition (@V == 2) || (@V == 3)</description>
			<test>VHasTypeInteger == false || (((VIntegerValue != 2) &amp;&amp; (VIntegerValue != 3)) || RIntegerValue == 3)</test>
			<error>
				<message>Entry R in EncryptionStandard does not have value 3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-R-Integer-4" testNumber="15"/>
			<description>Entry R in EncryptionStandard shall have Integer value 4, if this object satisfies condition @V == 4</description>
			<test>VHasTypeInteger == false || ((VIntegerValue != 4) || RIntegerValue == 4)</test>
			<error>
				<message>Entry R in EncryptionStandard does not have value 4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-R-Integer" testNumber="6"/>
			<description>Entry R with type Integer in EncryptionStandard shall have one of values: 2, 3, 4, 5</description>
			<test>RHasTypeInteger != true || RIntegerValue == 2 || RIntegerValue == 3 || RIntegerValue == 4 || RIntegerValue == 5</test>
			<error>
				<message>Entry R with type Integer in EncryptionStandard has incorrect value %1 instead of 2, 3, 4, 5</message>
				<arguments>
					<argument>RIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-StmF" testNumber="8"/>
			<description>Entry StmF in EncryptionStandard shall have type Name</description>
			<test>containsStmF == false || StmFHasTypeName == true</test>
			<error>
				<message>Entry StmF in EncryptionStandard has type %1 instead of type Name</message>
				<arguments>
					<argument>StmFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-StrF" testNumber="8"/>
			<description>Entry StrF in EncryptionStandard shall have type Name</description>
			<test>containsStrF == false || StrFHasTypeName == true</test>
			<error>
				<message>Entry StrF in EncryptionStandard has type %1 instead of type Name</message>
				<arguments>
					<argument>StrFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-SubFilter" testNumber="8"/>
			<description>Entry SubFilter in EncryptionStandard shall have type Name</description>
			<test>containsSubFilter == false || SubFilterHasTypeName == true</test>
			<error>
				<message>Entry SubFilter in EncryptionStandard has type %1 instead of type Name</message>
				<arguments>
					<argument>SubFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-U" testNumber="8"/>
			<description>Entry U in EncryptionStandard shall have type StringByte</description>
			<test>containsU == false || UHasTypeStringByte == true</test>
			<error>
				<message>Entry U in EncryptionStandard has type %1 instead of type StringByte</message>
				<arguments>
					<argument>UType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-U" testNumber="7"/>
			<description>Entry U in EncryptionStandard is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in EncryptionStandard is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-U-StringByte" testNumber="9"/>
			<description>Entry U with type StringByte in EncryptionStandard shall satisfy special case: fn:Eval(fn:AlwaysUnencrypted() &amp;&amp; (((@R &lt;= 4) &amp;&amp; (fn:StringLength(U) == 32)) || (((@R == 5) || (@R == 6)) &amp;&amp; (fn:StringLength(U) == 48))))</description>
			<test>UHasTypeStringByte != true || (((RHasTypeInteger == false || (RIntegerValue &lt;= 4)) &amp;&amp; (UStringSize == 32)) || ((RHasTypeInteger == false || ((RIntegerValue == 5) || (RIntegerValue == 6))) &amp;&amp; (UStringSize == 48)))</test>
			<error>
				<message>Entry U with type StringByte in EncryptionStandard does not satisfy special case: fn:Eval(fn:AlwaysUnencrypted() &amp;&amp; (((@R &lt;= 4) &amp;&amp; (fn:StringLength(U) == 32)) || (((@R == 5) || (@R == 6)) &amp;&amp; (fn:StringLength(U) == 48))))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-UE" testNumber="8"/>
			<description>Entry UE in EncryptionStandard shall have type StringByte</description>
			<test>containsUE == false || UEHasTypeStringByte == true</test>
			<error>
				<message>Entry UE in EncryptionStandard has type %1 instead of type StringByte</message>
				<arguments>
					<argument>UEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-UE" testNumber="11"/>
			<description>Entry UE in EncryptionStandard is required, when (@R == 5) || (@R == 6)</description>
			<test>RHasTypeInteger == false || (containsUE == true || ((RIntegerValue != 5) &amp;&amp; (RIntegerValue != 6)))</test>
			<error>
				<message>Entry UE in EncryptionStandard is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-V" testNumber="8"/>
			<description>Entry V in EncryptionStandard shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in EncryptionStandard has type %1 instead of type Integer</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-V" testNumber="7"/>
			<description>Entry V in EncryptionStandard is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in EncryptionStandard is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-V-Integer" testNumber="19"/>
			<description>Entry V with type Integer in EncryptionStandard should not have deprecated value 0</description>
			<test>VIntegerValue != 0</test>
			<error>
				<message>Entry V with type Integer in EncryptionStandard has deprecated value 0</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="EncryptionStandard-V-Integer" testNumber="6"/>
			<description>Entry V with type Integer in EncryptionStandard shall have one of values: 0, 1, 2, 3, 4, 5</description>
			<test>VHasTypeInteger != true || VIntegerValue == 0 || VIntegerValue == 1 || VIntegerValue == 2 || VIntegerValue == 3 || VIntegerValue == 4 || VIntegerValue == 5</test>
			<error>
				<message>Entry V with type Integer in EncryptionStandard has incorrect value %1 instead of 0, 1, 2, 3, 4, 5</message>
				<arguments>
					<argument>VIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="ExData3DMarkup" testNumber="1"/>
			<description>ExData3DMarkup shall not contain entries except 3DA, 3DV, MD5, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != '3DA' &amp;&amp; elem != '3DV' &amp;&amp; elem != 'MD5' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ExData3DMarkup contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != '3DA' &amp;&amp; elem != '3DV' &amp;&amp; elem != 'MD5' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="ExData3DMarkup-3DA" testNumber="8"/>
			<description>Entry 3DA in ExData3DMarkup shall have one of types: Dictionary, StringText</description>
			<test>contains3DA == false || entry3DAHasTypeDictionary == true || entry3DAHasTypeStringText == true</test>
			<error>
				<message>Entry 3DA in ExData3DMarkup has type %1 instead of one of types: Dictionary, StringText</message>
				<arguments>
					<argument>entry3DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="ExData3DMarkup-3DA" testNumber="7"/>
			<description>Entry 3DA in ExData3DMarkup is required</description>
			<test>contains3DA == true</test>
			<error>
				<message>Entry 3DA in ExData3DMarkup is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="ExData3DMarkup-3DV" testNumber="8"/>
			<description>Entry 3DV in ExData3DMarkup shall have type Dictionary</description>
			<test>contains3DV == false || entry3DVHasTypeDictionary == true</test>
			<error>
				<message>Entry 3DV in ExData3DMarkup has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>entry3DVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="ExData3DMarkup-3DV" testNumber="7"/>
			<description>Entry 3DV in ExData3DMarkup is required</description>
			<test>contains3DV == true</test>
			<error>
				<message>Entry 3DV in ExData3DMarkup is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="ExData3DMarkup-MD5" testNumber="8"/>
			<description>Entry MD5 in ExData3DMarkup shall have type StringByte</description>
			<test>containsMD5 == false || MD5HasTypeStringByte == true</test>
			<error>
				<message>Entry MD5 in ExData3DMarkup has type %1 instead of type StringByte</message>
				<arguments>
					<argument>MD5Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="ExData3DMarkup-Subtype" testNumber="8"/>
			<description>Entry Subtype in ExData3DMarkup shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in ExData3DMarkup has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="ExData3DMarkup-Subtype" testNumber="7"/>
			<description>Entry Subtype in ExData3DMarkup is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in ExData3DMarkup is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="ExData3DMarkup-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in ExData3DMarkup shall have value Markup3D</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Markup3D"</test>
			<error>
				<message>Entry Subtype with type Name in ExData3DMarkup has incorrect value %1 instead of Markup3D</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="ExData3DMarkup-Type" testNumber="8"/>
			<description>Entry Type in ExData3DMarkup shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ExData3DMarkup has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="ExData3DMarkup-Type" testNumber="7"/>
			<description>Entry Type in ExData3DMarkup is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in ExData3DMarkup is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="ExData3DMarkup-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ExData3DMarkup shall have value ExData</description>
			<test>TypeHasTypeName != true || TypeNameValue == "ExData"</test>
			<error>
				<message>Entry Type with type Name in ExData3DMarkup has incorrect value %1 instead of ExData</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataMarkupGeo">
			<id specification="ISO_32000_1_7" clause="ExDataMarkupGeo" testNumber="1"/>
			<description>ExDataMarkupGeo shall not contain entries except Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ExDataMarkupGeo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataMarkupGeo">
			<id specification="ISO_32000_1_7" clause="ExDataMarkupGeo-Subtype" testNumber="8"/>
			<description>Entry Subtype in ExDataMarkupGeo shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in ExDataMarkupGeo has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataMarkupGeo">
			<id specification="ISO_32000_1_7" clause="ExDataMarkupGeo-Subtype" testNumber="7"/>
			<description>Entry Subtype in ExDataMarkupGeo is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in ExDataMarkupGeo is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExDataMarkupGeo">
			<id specification="ISO_32000_1_7" clause="ExDataMarkupGeo-Subtype" testNumber="23"/>
			<description>Entry Subtype in ExDataMarkupGeo can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSubtype == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Subtype in ExDataMarkupGeo is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExDataMarkupGeo">
			<id specification="ISO_32000_1_7" clause="ExDataMarkupGeo-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in ExDataMarkupGeo shall have value MarkupGeo</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "MarkupGeo"</test>
			<error>
				<message>Entry Subtype with type Name in ExDataMarkupGeo has incorrect value %1 instead of MarkupGeo</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataMarkupGeo">
			<id specification="ISO_32000_1_7" clause="ExDataMarkupGeo-Type" testNumber="8"/>
			<description>Entry Type in ExDataMarkupGeo shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ExDataMarkupGeo has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataMarkupGeo">
			<id specification="ISO_32000_1_7" clause="ExDataMarkupGeo-Type" testNumber="7"/>
			<description>Entry Type in ExDataMarkupGeo is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in ExDataMarkupGeo is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExDataMarkupGeo">
			<id specification="ISO_32000_1_7" clause="ExDataMarkupGeo-Type" testNumber="23"/>
			<description>Entry Type in ExDataMarkupGeo can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in ExDataMarkupGeo is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExDataMarkupGeo">
			<id specification="ISO_32000_1_7" clause="ExDataMarkupGeo-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ExDataMarkupGeo shall have value ExData</description>
			<test>TypeHasTypeName != true || TypeNameValue == "ExData"</test>
			<error>
				<message>Entry Type with type Name in ExDataMarkupGeo has incorrect value %1 instead of ExData</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="ExDataProjection" testNumber="1"/>
			<description>ExDataProjection shall not contain entries except M3DREF, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'M3DREF' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ExDataProjection contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'M3DREF' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="ExDataProjection-M3DREF-Dictionary" testNumber="17"/>
			<description>Entry M3DREF with type Dictionary in ExDataProjection shall be one of objects 3DMeasure3DC, 3DMeasureAD3, 3DMeasureLD3, 3DMeasurePD3, 3DMeasureRD3</description>
			<test>M3DREFHasTypeDictionary != true || M3DREF_size == 1</test>
			<error>
				<message>Entry M3DREF with type Dictionary in ExDataProjection is not one of objects 3DMeasure3DC, 3DMeasureAD3, 3DMeasureLD3, 3DMeasurePD3, 3DMeasureRD3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="ExDataProjection-M3DREF" testNumber="8"/>
			<description>Entry M3DREF in ExDataProjection shall have type Dictionary</description>
			<test>containsM3DREF == false || M3DREFHasTypeDictionary == true</test>
			<error>
				<message>Entry M3DREF in ExDataProjection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>M3DREFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="ExDataProjection-M3DREF" testNumber="7"/>
			<description>Entry M3DREF in ExDataProjection is required</description>
			<test>containsM3DREF == true</test>
			<error>
				<message>Entry M3DREF in ExDataProjection is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="ExDataProjection-M3DREF" testNumber="23"/>
			<description>Entry M3DREF in ExDataProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsM3DREF == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry M3DREF in ExDataProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="ExDataProjection-M3DREF-Dictionary" testNumber="10"/>
			<description>Entry M3DREF with type Dictionary in ExDataProjection shall be indirect</description>
			<test>M3DREFHasTypeDictionary != true || isM3DREFIndirect == true</test>
			<error>
				<message>Entry M3DREF with type Dictionary in ExDataProjection is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="ExDataProjection-Subtype" testNumber="8"/>
			<description>Entry Subtype in ExDataProjection shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in ExDataProjection has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="ExDataProjection-Subtype" testNumber="7"/>
			<description>Entry Subtype in ExDataProjection is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in ExDataProjection is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="ExDataProjection-Subtype" testNumber="23"/>
			<description>Entry Subtype in ExDataProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSubtype == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Subtype in ExDataProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="ExDataProjection-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in ExDataProjection shall have value 3DM</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "3DM"</test>
			<error>
				<message>Entry Subtype with type Name in ExDataProjection has incorrect value %1 instead of 3DM</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="ExDataProjection-Type" testNumber="8"/>
			<description>Entry Type in ExDataProjection shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ExDataProjection has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="ExDataProjection-Type" testNumber="7"/>
			<description>Entry Type in ExDataProjection is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in ExDataProjection is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="ExDataProjection-Type" testNumber="23"/>
			<description>Entry Type in ExDataProjection can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in ExDataProjection is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="ExDataProjection-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ExDataProjection shall have value ExData</description>
			<test>TypeHasTypeName != true || TypeNameValue == "ExData"</test>
			<error>
				<message>Entry Type with type Name in ExDataProjection has incorrect value %1 instead of ExData</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExtensions">
			<id specification="ISO_32000_1_7" clause="Extensions-ISO_" testNumber="8"/>
			<description>Entry ISO_ in Extensions shall have type Dictionary</description>
			<test>containsISO_ == false || ISO_HasTypeDictionary == true</test>
			<error>
				<message>Entry ISO_ in Extensions has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ISO_Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExtensions">
			<id specification="ISO_32000_1_7" clause="Extensions-ISO_-Dictionary" testNumber="10"/>
			<description>Entry ISO_ with type Dictionary in Extensions shall be direct</description>
			<test>ISO_HasTypeDictionary != true || isISO_Indirect == false</test>
			<error>
				<message>Entry ISO_ with type Dictionary in Extensions is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExtensions">
			<id specification="ISO_32000_1_7" clause="Extensions-Type" testNumber="8"/>
			<description>Entry Type in Extensions shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Extensions has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExtensions">
			<id specification="ISO_32000_1_7" clause="Extensions-Type-Name" testNumber="10"/>
			<description>Entry Type with type Name in Extensions shall be direct</description>
			<test>TypeHasTypeName != true || isTypeIndirect == false</test>
			<error>
				<message>Entry Type with type Name in Extensions is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AExtensions">
			<id specification="ISO_32000_1_7" clause="Extensions-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Extensions shall have value Extensions</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Extensions"</test>
			<error>
				<message>Entry Type with type Name in Extensions has incorrect value %1 instead of Extensions</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExtensionsEntry">
			<id specification="ISO_32000_1_7" clause="ExtensionsEntry" testNumber="8"/>
			<description>Entry in Extensions shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in Extensions has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExtensionsEntry">
			<id specification="ISO_32000_1_7" clause="ExtensionsEntry-Dictionary" testNumber="10"/>
			<description>Entry with type Dictionary in Extensions shall be direct</description>
			<test>HasTypeDictionary != true || isIndirect == false</test>
			<error>
				<message>Entry %keyName% with type Dictionary in Extensions is indirect</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFDDictEntry">
			<id specification="ISO_32000_1_7" clause="FDDictEntry" testNumber="8"/>
			<description>Entry in FDDict shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in FDDict has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="Field" testNumber="1"/>
			<description>Field shall not contain entries except AA, Ff, Kids, Parent, T, TM, TU</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Field contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="Field-AA" testNumber="8"/>
			<description>Entry AA in Field shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in Field has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="Field-Ff" testNumber="8"/>
			<description>Entry Ff in Field shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in Field has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="Field-Ff-Bitmask" testNumber="9"/>
			<description>Entry Ff with type Bitmask in Field shall satisfy special case: fn:Eval(fn:BitsClear(4, 32))</description>
			<test>FfHasTypeBitmask != true || ((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry Ff with type Bitmask in Field does not satisfy special case: fn:Eval(fn:BitsClear(4, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="Field-Kids" testNumber="8"/>
			<description>Entry Kids in Field shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in Field has type %1 instead of type Array</message>
				<arguments>
					<argument>KidsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="Field-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in Field shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in Field is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="Field-Parent" testNumber="8"/>
			<description>Entry Parent in Field shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in Field has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="Field-T" testNumber="8"/>
			<description>Entry T in Field shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in Field has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="Field-TM" testNumber="8"/>
			<description>Entry TM in Field shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in Field has type %1 instead of type StringText</message>
				<arguments>
					<argument>TMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="Field-TU" testNumber="8"/>
			<description>Entry TU in Field shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in Field has type %1 instead of type StringText</message>
				<arguments>
					<argument>TUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox" testNumber="1"/>
			<description>FieldBtnCheckbox shall not contain entries except AA, DA, DS, DV, FT, Ff, Kids, Opt, Parent, Q, RV, T, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FieldBtnCheckbox contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-AA" testNumber="8"/>
			<description>Entry AA in FieldBtnCheckbox shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldBtnCheckbox has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-DA" testNumber="8"/>
			<description>Entry DA in FieldBtnCheckbox shall have type StringByte</description>
			<test>containsDA == false || DAHasTypeStringByte == true</test>
			<error>
				<message>Entry DA in FieldBtnCheckbox has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-DA" testNumber="7"/>
			<description>Entry DA in FieldBtnCheckbox is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldBtnCheckbox is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-DS" testNumber="8"/>
			<description>Entry DS in FieldBtnCheckbox shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldBtnCheckbox has type %1 instead of type StringText</message>
				<arguments>
					<argument>DSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-DV" testNumber="8"/>
			<description>Entry DV in FieldBtnCheckbox shall have type Name</description>
			<test>containsDV == false || DVHasTypeName == true</test>
			<error>
				<message>Entry DV in FieldBtnCheckbox has type %1 instead of type Name</message>
				<arguments>
					<argument>DVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-FT" testNumber="8"/>
			<description>Entry FT in FieldBtnCheckbox shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldBtnCheckbox has type %1 instead of type Name</message>
				<arguments>
					<argument>FTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-FT" testNumber="7"/>
			<description>Entry FT in FieldBtnCheckbox is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldBtnCheckbox is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-FT-Name" testNumber="6"/>
			<description>Entry FT with type Name in FieldBtnCheckbox shall have value Btn</description>
			<test>FTHasTypeName != true || FTNameValue == "Btn"</test>
			<error>
				<message>Entry FT with type Name in FieldBtnCheckbox has incorrect value %1 instead of Btn</message>
				<arguments>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-Ff" testNumber="8"/>
			<description>Entry Ff in FieldBtnCheckbox shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldBtnCheckbox has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-Ff-Bitmask" testNumber="9"/>
			<description>Entry Ff with type Bitmask in FieldBtnCheckbox shall satisfy special case: fn:Eval(fn:BitsClear(4, 14) &amp;&amp; fn:BitsClear(16, 25) &amp;&amp; fn:BitsClear(27, 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldBtnCheckbox does not satisfy special case: fn:Eval(fn:BitsClear(4, 14) &amp;&amp; fn:BitsClear(16, 25) &amp;&amp; fn:BitsClear(27, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-Kids" testNumber="8"/>
			<description>Entry Kids in FieldBtnCheckbox shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldBtnCheckbox has type %1 instead of type Array</message>
				<arguments>
					<argument>KidsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-Opt" testNumber="8"/>
			<description>Entry Opt in FieldBtnCheckbox shall have type Array</description>
			<test>containsOpt == false || OptHasTypeArray == true</test>
			<error>
				<message>Entry Opt in FieldBtnCheckbox has type %1 instead of type Array</message>
				<arguments>
					<argument>OptType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in FieldBtnCheckbox shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldBtnCheckbox is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-Parent" testNumber="8"/>
			<description>Entry Parent in FieldBtnCheckbox shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldBtnCheckbox has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-Q" testNumber="8"/>
			<description>Entry Q in FieldBtnCheckbox shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldBtnCheckbox has type %1 instead of type Integer</message>
				<arguments>
					<argument>QType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-Q-Integer" testNumber="6"/>
			<description>Entry Q with type Integer in FieldBtnCheckbox shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldBtnCheckbox has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-RV" testNumber="8"/>
			<description>Entry RV in FieldBtnCheckbox shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in FieldBtnCheckbox has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-RV-Stream" testNumber="10"/>
			<description>Entry RV with type Stream in FieldBtnCheckbox shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldBtnCheckbox is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-T" testNumber="8"/>
			<description>Entry T in FieldBtnCheckbox shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldBtnCheckbox has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-TM" testNumber="8"/>
			<description>Entry TM in FieldBtnCheckbox shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldBtnCheckbox has type %1 instead of type StringText</message>
				<arguments>
					<argument>TMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-TU" testNumber="8"/>
			<description>Entry TU in FieldBtnCheckbox shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldBtnCheckbox has type %1 instead of type StringText</message>
				<arguments>
					<argument>TUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="FieldBtnCheckbox-V" testNumber="8"/>
			<description>Entry V in FieldBtnCheckbox shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in FieldBtnCheckbox has type %1 instead of type Name</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush" testNumber="1"/>
			<description>FieldBtnPush shall not contain entries except AA, DA, DS, DV, FT, Ff, Kids, Parent, Q, RV, T, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FieldBtnPush contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-AA" testNumber="8"/>
			<description>Entry AA in FieldBtnPush shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldBtnPush has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-DA" testNumber="8"/>
			<description>Entry DA in FieldBtnPush shall have type StringByte</description>
			<test>containsDA == false || DAHasTypeStringByte == true</test>
			<error>
				<message>Entry DA in FieldBtnPush has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-DA" testNumber="7"/>
			<description>Entry DA in FieldBtnPush is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldBtnPush is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-DS" testNumber="8"/>
			<description>Entry DS in FieldBtnPush shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldBtnPush has type %1 instead of type StringText</message>
				<arguments>
					<argument>DSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-DV" testNumber="8"/>
			<description>Entry DV in FieldBtnPush shall have type Name</description>
			<test>containsDV == false || DVHasTypeName == true</test>
			<error>
				<message>Entry DV in FieldBtnPush has type %1 instead of type Name</message>
				<arguments>
					<argument>DVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-FT" testNumber="8"/>
			<description>Entry FT in FieldBtnPush shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldBtnPush has type %1 instead of type Name</message>
				<arguments>
					<argument>FTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-FT" testNumber="7"/>
			<description>Entry FT in FieldBtnPush is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldBtnPush is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-FT-Name" testNumber="6"/>
			<description>Entry FT with type Name in FieldBtnPush shall have value Btn</description>
			<test>FTHasTypeName != true || FTNameValue == "Btn"</test>
			<error>
				<message>Entry FT with type Name in FieldBtnPush has incorrect value %1 instead of Btn</message>
				<arguments>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-Ff" testNumber="8"/>
			<description>Entry Ff in FieldBtnPush shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldBtnPush has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-Ff-Bitmask" testNumber="9"/>
			<description>Entry Ff with type Bitmask in FieldBtnPush shall satisfy special case: fn:Eval(fn:BitsClear(4, 14) &amp;&amp; fn:BitClear(16) &amp;&amp; fn:BitSet(17) &amp;&amp; fn:BitsClear(18, 25) &amp;&amp; fn:BitsClear(27, 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 1 &amp;&amp; ((FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldBtnPush does not satisfy special case: fn:Eval(fn:BitsClear(4, 14) &amp;&amp; fn:BitClear(16) &amp;&amp; fn:BitSet(17) &amp;&amp; fn:BitsClear(18, 25) &amp;&amp; fn:BitsClear(27, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-Kids" testNumber="8"/>
			<description>Entry Kids in FieldBtnPush shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldBtnPush has type %1 instead of type Array</message>
				<arguments>
					<argument>KidsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in FieldBtnPush shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldBtnPush is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-Parent" testNumber="8"/>
			<description>Entry Parent in FieldBtnPush shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldBtnPush has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-Q" testNumber="8"/>
			<description>Entry Q in FieldBtnPush shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldBtnPush has type %1 instead of type Integer</message>
				<arguments>
					<argument>QType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-Q-Integer" testNumber="6"/>
			<description>Entry Q with type Integer in FieldBtnPush shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldBtnPush has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-RV" testNumber="8"/>
			<description>Entry RV in FieldBtnPush shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in FieldBtnPush has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-RV-Stream" testNumber="10"/>
			<description>Entry RV with type Stream in FieldBtnPush shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldBtnPush is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-T" testNumber="8"/>
			<description>Entry T in FieldBtnPush shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldBtnPush has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-TM" testNumber="8"/>
			<description>Entry TM in FieldBtnPush shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldBtnPush has type %1 instead of type StringText</message>
				<arguments>
					<argument>TMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-TU" testNumber="8"/>
			<description>Entry TU in FieldBtnPush shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldBtnPush has type %1 instead of type StringText</message>
				<arguments>
					<argument>TUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="FieldBtnPush-V" testNumber="8"/>
			<description>Entry V in FieldBtnPush shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in FieldBtnPush has type %1 instead of type Name</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio" testNumber="1"/>
			<description>FieldBtnRadio shall not contain entries except AA, DA, DS, DV, FT, Ff, Kids, Opt, Parent, Q, RV, T, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FieldBtnRadio contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-AA" testNumber="8"/>
			<description>Entry AA in FieldBtnRadio shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldBtnRadio has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-DA" testNumber="8"/>
			<description>Entry DA in FieldBtnRadio shall have type StringByte</description>
			<test>containsDA == false || DAHasTypeStringByte == true</test>
			<error>
				<message>Entry DA in FieldBtnRadio has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-DA" testNumber="7"/>
			<description>Entry DA in FieldBtnRadio is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldBtnRadio is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-DS" testNumber="8"/>
			<description>Entry DS in FieldBtnRadio shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldBtnRadio has type %1 instead of type StringText</message>
				<arguments>
					<argument>DSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-DV" testNumber="8"/>
			<description>Entry DV in FieldBtnRadio shall have type Name</description>
			<test>containsDV == false || DVHasTypeName == true</test>
			<error>
				<message>Entry DV in FieldBtnRadio has type %1 instead of type Name</message>
				<arguments>
					<argument>DVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-FT" testNumber="8"/>
			<description>Entry FT in FieldBtnRadio shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldBtnRadio has type %1 instead of type Name</message>
				<arguments>
					<argument>FTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-FT" testNumber="7"/>
			<description>Entry FT in FieldBtnRadio is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldBtnRadio is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-FT-Name" testNumber="6"/>
			<description>Entry FT with type Name in FieldBtnRadio shall have value Btn</description>
			<test>FTHasTypeName != true || FTNameValue == "Btn"</test>
			<error>
				<message>Entry FT with type Name in FieldBtnRadio has incorrect value %1 instead of Btn</message>
				<arguments>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-Ff" testNumber="8"/>
			<description>Entry Ff in FieldBtnRadio shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldBtnRadio has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-Ff-Bitmask" testNumber="9"/>
			<description>Entry Ff with type Bitmask in FieldBtnRadio shall satisfy special case: fn:Eval(fn:BitsClear(4, 14) &amp;&amp; fn:BitSet(16) &amp;&amp; fn:BitsClear(17, 25) &amp;&amp; fn:BitsClear(27, 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 1 &amp;&amp; ((FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldBtnRadio does not satisfy special case: fn:Eval(fn:BitsClear(4, 14) &amp;&amp; fn:BitSet(16) &amp;&amp; fn:BitsClear(17, 25) &amp;&amp; fn:BitsClear(27, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-Kids" testNumber="8"/>
			<description>Entry Kids in FieldBtnRadio shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldBtnRadio has type %1 instead of type Array</message>
				<arguments>
					<argument>KidsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-Opt" testNumber="8"/>
			<description>Entry Opt in FieldBtnRadio shall have type Array</description>
			<test>containsOpt == false || OptHasTypeArray == true</test>
			<error>
				<message>Entry Opt in FieldBtnRadio has type %1 instead of type Array</message>
				<arguments>
					<argument>OptType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in FieldBtnRadio shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldBtnRadio is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-Parent" testNumber="8"/>
			<description>Entry Parent in FieldBtnRadio shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldBtnRadio has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-Q" testNumber="8"/>
			<description>Entry Q in FieldBtnRadio shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldBtnRadio has type %1 instead of type Integer</message>
				<arguments>
					<argument>QType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-Q-Integer" testNumber="6"/>
			<description>Entry Q with type Integer in FieldBtnRadio shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldBtnRadio has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-RV" testNumber="8"/>
			<description>Entry RV in FieldBtnRadio shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in FieldBtnRadio has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-RV-Stream" testNumber="10"/>
			<description>Entry RV with type Stream in FieldBtnRadio shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldBtnRadio is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-T" testNumber="8"/>
			<description>Entry T in FieldBtnRadio shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldBtnRadio has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-TM" testNumber="8"/>
			<description>Entry TM in FieldBtnRadio shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldBtnRadio has type %1 instead of type StringText</message>
				<arguments>
					<argument>TMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-TU" testNumber="8"/>
			<description>Entry TU in FieldBtnRadio shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldBtnRadio has type %1 instead of type StringText</message>
				<arguments>
					<argument>TUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="FieldBtnRadio-V" testNumber="8"/>
			<description>Entry V in FieldBtnRadio shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in FieldBtnRadio has type %1 instead of type Name</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice" testNumber="1"/>
			<description>FieldChoice shall not contain entries except AA, DA, DS, DV, FT, Ff, I, Kids, Opt, Parent, Q, RV, T, TI, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'I' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TI' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FieldChoice contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'I' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TI' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-AA" testNumber="8"/>
			<description>Entry AA in FieldChoice shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldChoice has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-DA" testNumber="8"/>
			<description>Entry DA in FieldChoice shall have type StringByte</description>
			<test>containsDA == false || DAHasTypeStringByte == true</test>
			<error>
				<message>Entry DA in FieldChoice has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-DA" testNumber="7"/>
			<description>Entry DA in FieldChoice is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldChoice is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-DS" testNumber="8"/>
			<description>Entry DS in FieldChoice shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldChoice has type %1 instead of type StringText</message>
				<arguments>
					<argument>DSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-DV" testNumber="8"/>
			<description>Entry DV in FieldChoice shall have one of types: Array, StringText</description>
			<test>containsDV == false || DVHasTypeArray == true || DVHasTypeStringText == true</test>
			<error>
				<message>Entry DV in FieldChoice has type %1 instead of one of types: Array, StringText</message>
				<arguments>
					<argument>DVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-FT" testNumber="8"/>
			<description>Entry FT in FieldChoice shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldChoice has type %1 instead of type Name</message>
				<arguments>
					<argument>FTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-FT" testNumber="7"/>
			<description>Entry FT in FieldChoice is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldChoice is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-FT-Name" testNumber="6"/>
			<description>Entry FT with type Name in FieldChoice shall have value Ch</description>
			<test>FTHasTypeName != true || FTNameValue == "Ch"</test>
			<error>
				<message>Entry FT with type Name in FieldChoice has incorrect value %1 instead of Ch</message>
				<arguments>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-Ff" testNumber="8"/>
			<description>Entry Ff in FieldChoice shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldChoice has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-Ff-Bitmask" testNumber="9"/>
			<description>Entry Ff with type Bitmask in FieldChoice shall satisfy special case: fn:Eval(fn:BitsClear(4, 14) &amp;&amp; fn:BitClear(21) &amp;&amp; fn:BitsClear(24, 26) &amp;&amp; fn:BitsClear(28, 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; ((FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldChoice does not satisfy special case: fn:Eval(fn:BitsClear(4, 14) &amp;&amp; fn:BitClear(21) &amp;&amp; fn:BitsClear(24, 26) &amp;&amp; fn:BitsClear(28, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-I" testNumber="8"/>
			<description>Entry I in FieldChoice shall have type Array</description>
			<test>containsI == false || IHasTypeArray == true</test>
			<error>
				<message>Entry I in FieldChoice has type %1 instead of type Array</message>
				<arguments>
					<argument>IType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-I-Array" testNumber="9"/>
			<description>Entry I with type Array in FieldChoice shall satisfy special case: fn:Eval(fn:ArraySortAscending(I, 1))</description>
			<test>IHasTypeArray != true || (isIArraySortAscending1 == true)</test>
			<error>
				<message>Entry I with type Array in FieldChoice does not satisfy special case: fn:Eval(fn:ArraySortAscending(I, 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-Kids" testNumber="8"/>
			<description>Entry Kids in FieldChoice shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldChoice has type %1 instead of type Array</message>
				<arguments>
					<argument>KidsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-Opt" testNumber="8"/>
			<description>Entry Opt in FieldChoice shall have type Array</description>
			<test>containsOpt == false || OptHasTypeArray == true</test>
			<error>
				<message>Entry Opt in FieldChoice has type %1 instead of type Array</message>
				<arguments>
					<argument>OptType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in FieldChoice shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldChoice is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-Parent" testNumber="8"/>
			<description>Entry Parent in FieldChoice shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldChoice has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-Q" testNumber="8"/>
			<description>Entry Q in FieldChoice shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldChoice has type %1 instead of type Integer</message>
				<arguments>
					<argument>QType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-Q-Integer" testNumber="6"/>
			<description>Entry Q with type Integer in FieldChoice shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldChoice has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-RV" testNumber="8"/>
			<description>Entry RV in FieldChoice shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in FieldChoice has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-RV-Stream" testNumber="10"/>
			<description>Entry RV with type Stream in FieldChoice shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldChoice is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-T" testNumber="8"/>
			<description>Entry T in FieldChoice shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldChoice has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-TI" testNumber="8"/>
			<description>Entry TI in FieldChoice shall have type Integer</description>
			<test>containsTI == false || TIHasTypeInteger == true</test>
			<error>
				<message>Entry TI in FieldChoice has type %1 instead of type Integer</message>
				<arguments>
					<argument>TIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-TI-Integer" testNumber="14"/>
			<description>Entry TI with type Integer in FieldChoice shall satisfy possible value predicate: fn:Eval((@TI &gt;= 0) &amp;&amp; (@TI &lt; fn:ArrayLength(Opt)))</description>
			<test>TIHasTypeInteger != true || (TIIntegerValue &gt;= 0) &amp;&amp; (OptHasTypeArray == false || (TIIntegerValue &lt; OptArraySize))</test>
			<error>
				<message>Entry TI with type Integer in FieldChoice does not satisfy possible value predicate: fn:Eval((@TI &gt;= 0) &amp;&amp; (@TI &lt; fn:ArrayLength(Opt)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-TM" testNumber="8"/>
			<description>Entry TM in FieldChoice shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldChoice has type %1 instead of type StringText</message>
				<arguments>
					<argument>TMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-TU" testNumber="8"/>
			<description>Entry TU in FieldChoice shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldChoice has type %1 instead of type StringText</message>
				<arguments>
					<argument>TUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="FieldChoice-V" testNumber="8"/>
			<description>Entry V in FieldChoice shall have one of types: Array, StringText</description>
			<test>containsV == false || VHasTypeArray == true || VHasTypeStringText == true</test>
			<error>
				<message>Entry V in FieldChoice has type %1 instead of one of types: Array, StringText</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="FieldMDPTransformParameters" testNumber="1"/>
			<description>FieldMDPTransformParameters shall not contain entries except Action, Fields, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Action' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FieldMDPTransformParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Action' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="FieldMDPTransformParameters-Action" testNumber="8"/>
			<description>Entry Action in FieldMDPTransformParameters shall have type Name</description>
			<test>containsAction == false || ActionHasTypeName == true</test>
			<error>
				<message>Entry Action in FieldMDPTransformParameters has type %1 instead of type Name</message>
				<arguments>
					<argument>ActionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="FieldMDPTransformParameters-Action-Name" testNumber="6"/>
			<description>Entry Action with type Name in FieldMDPTransformParameters shall have one of values: All, Exclude, Include</description>
			<test>ActionHasTypeName != true || ActionNameValue == "All" || ActionNameValue == "Include" || ActionNameValue == "Exclude"</test>
			<error>
				<message>Entry Action with type Name in FieldMDPTransformParameters has incorrect value %1 instead of All, Exclude, Include</message>
				<arguments>
					<argument>ActionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="FieldMDPTransformParameters-Fields" testNumber="8"/>
			<description>Entry Fields in FieldMDPTransformParameters shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in FieldMDPTransformParameters has type %1 instead of type Array</message>
				<arguments>
					<argument>FieldsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="FieldMDPTransformParameters-Fields" testNumber="11"/>
			<description>Entry Fields in FieldMDPTransformParameters is required, when (@Action == Include) || (@Action == Exclude)</description>
			<test>containsFields == true || ((ActionNameValue != "Include") &amp;&amp; (ActionNameValue != "Exclude"))</test>
			<error>
				<message>Entry Fields in FieldMDPTransformParameters is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="FieldMDPTransformParameters-Type" testNumber="8"/>
			<description>Entry Type in FieldMDPTransformParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FieldMDPTransformParameters has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="FieldMDPTransformParameters-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FieldMDPTransformParameters shall have value TransformParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "TransformParams"</test>
			<error>
				<message>Entry Type with type Name in FieldMDPTransformParameters has incorrect value %1 instead of TransformParams</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="FieldMDPTransformParameters-V" testNumber="8"/>
			<description>Entry V in FieldMDPTransformParameters shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in FieldMDPTransformParameters has type %1 instead of type Name</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="FieldMDPTransformParameters-V" testNumber="7"/>
			<description>Entry V in FieldMDPTransformParameters is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in FieldMDPTransformParameters is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="FieldMDPTransformParameters-V-Name" testNumber="6"/>
			<description>Entry V with type Name in FieldMDPTransformParameters shall have value 1.2</description>
			<test>VHasTypeName != true || VNameValue == "1.2"</test>
			<error>
				<message>Entry V with type Name in FieldMDPTransformParameters has incorrect value %1 instead of 1.2</message>
				<arguments>
					<argument>VNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig" testNumber="1"/>
			<description>FieldSig shall not contain entries except AA, DA, DS, DV, FT, Ff, Kids, Lock, Parent, Q, RV, SV, T, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Lock' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'SV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FieldSig contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Lock' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'SV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-AA" testNumber="8"/>
			<description>Entry AA in FieldSig shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-DA" testNumber="8"/>
			<description>Entry DA in FieldSig shall have type StringByte</description>
			<test>containsDA == false || DAHasTypeStringByte == true</test>
			<error>
				<message>Entry DA in FieldSig has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-DS" testNumber="8"/>
			<description>Entry DS in FieldSig shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldSig has type %1 instead of type StringText</message>
				<arguments>
					<argument>DSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-DV-Dictionary" testNumber="17"/>
			<description>Entry DV with type Dictionary in FieldSig shall be one of objects Signature, DocTimeStamp</description>
			<test>DVHasTypeDictionary != true || DV_size == 1</test>
			<error>
				<message>Entry DV with type Dictionary in FieldSig is not one of objects Signature, DocTimeStamp</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-DV" testNumber="8"/>
			<description>Entry DV in FieldSig shall have type Dictionary</description>
			<test>containsDV == false || DVHasTypeDictionary == true</test>
			<error>
				<message>Entry DV in FieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-FT" testNumber="8"/>
			<description>Entry FT in FieldSig shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldSig has type %1 instead of type Name</message>
				<arguments>
					<argument>FTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-FT" testNumber="7"/>
			<description>Entry FT in FieldSig is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldSig is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-FT-Name" testNumber="6"/>
			<description>Entry FT with type Name in FieldSig shall have value Sig</description>
			<test>FTHasTypeName != true || FTNameValue == "Sig"</test>
			<error>
				<message>Entry FT with type Name in FieldSig has incorrect value %1 instead of Sig</message>
				<arguments>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-Ff" testNumber="8"/>
			<description>Entry Ff in FieldSig shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldSig has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-Ff-Bitmask" testNumber="9"/>
			<description>Entry Ff with type Bitmask in FieldSig shall satisfy special case: fn:Eval(fn:BitsClear(4, 32))</description>
			<test>FfHasTypeBitmask != true || ((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldSig does not satisfy special case: fn:Eval(fn:BitsClear(4, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-Kids" testNumber="8"/>
			<description>Entry Kids in FieldSig shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldSig has type %1 instead of type Array</message>
				<arguments>
					<argument>KidsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-Lock" testNumber="8"/>
			<description>Entry Lock in FieldSig shall have type Dictionary</description>
			<test>containsLock == false || LockHasTypeDictionary == true</test>
			<error>
				<message>Entry Lock in FieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>LockType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-Lock-Dictionary" testNumber="10"/>
			<description>Entry Lock with type Dictionary in FieldSig shall be indirect</description>
			<test>LockHasTypeDictionary != true || isLockIndirect == true</test>
			<error>
				<message>Entry Lock with type Dictionary in FieldSig is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in FieldSig shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldSig is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-Parent" testNumber="8"/>
			<description>Entry Parent in FieldSig shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-Q" testNumber="8"/>
			<description>Entry Q in FieldSig shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldSig has type %1 instead of type Integer</message>
				<arguments>
					<argument>QType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-Q-Integer" testNumber="6"/>
			<description>Entry Q with type Integer in FieldSig shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldSig has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-RV" testNumber="8"/>
			<description>Entry RV in FieldSig shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in FieldSig has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-RV-Stream" testNumber="10"/>
			<description>Entry RV with type Stream in FieldSig shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldSig is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-SV" testNumber="8"/>
			<description>Entry SV in FieldSig shall have type Dictionary</description>
			<test>containsSV == false || SVHasTypeDictionary == true</test>
			<error>
				<message>Entry SV in FieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-SV-Dictionary" testNumber="10"/>
			<description>Entry SV with type Dictionary in FieldSig shall be indirect</description>
			<test>SVHasTypeDictionary != true || isSVIndirect == true</test>
			<error>
				<message>Entry SV with type Dictionary in FieldSig is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-T" testNumber="8"/>
			<description>Entry T in FieldSig shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldSig has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-TM" testNumber="8"/>
			<description>Entry TM in FieldSig shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldSig has type %1 instead of type StringText</message>
				<arguments>
					<argument>TMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-TU" testNumber="8"/>
			<description>Entry TU in FieldSig shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldSig has type %1 instead of type StringText</message>
				<arguments>
					<argument>TUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-V-Dictionary" testNumber="17"/>
			<description>Entry V with type Dictionary in FieldSig shall be one of objects Signature, DocTimeStamp</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in FieldSig is not one of objects Signature, DocTimeStamp</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="FieldSig-V" testNumber="8"/>
			<description>Entry V in FieldSig shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in FieldSig has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx" testNumber="1"/>
			<description>FieldTx shall not contain entries except AA, DA, DS, DV, FT, Ff, Kids, MaxLen, Parent, Q, RV, T, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MaxLen' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FieldTx contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MaxLen' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-AA" testNumber="8"/>
			<description>Entry AA in FieldTx shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldTx has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-DA" testNumber="8"/>
			<description>Entry DA in FieldTx shall have type StringByte</description>
			<test>containsDA == false || DAHasTypeStringByte == true</test>
			<error>
				<message>Entry DA in FieldTx has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-DA" testNumber="7"/>
			<description>Entry DA in FieldTx is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldTx is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-DS" testNumber="8"/>
			<description>Entry DS in FieldTx shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldTx has type %1 instead of type StringText</message>
				<arguments>
					<argument>DSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-DV" testNumber="8"/>
			<description>Entry DV in FieldTx shall have one of types: Stream, StringText</description>
			<test>containsDV == false || DVHasTypeStream == true || DVHasTypeStringText == true</test>
			<error>
				<message>Entry DV in FieldTx has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>DVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-DV-Stream" testNumber="10"/>
			<description>Entry DV with type Stream in FieldTx shall be indirect</description>
			<test>DVHasTypeStream != true || isDVIndirect == true</test>
			<error>
				<message>Entry DV with type Stream in FieldTx is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-FT" testNumber="8"/>
			<description>Entry FT in FieldTx shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldTx has type %1 instead of type Name</message>
				<arguments>
					<argument>FTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-FT" testNumber="7"/>
			<description>Entry FT in FieldTx is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldTx is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-FT-Name" testNumber="6"/>
			<description>Entry FT with type Name in FieldTx shall have value Tx</description>
			<test>FTHasTypeName != true || FTNameValue == "Tx"</test>
			<error>
				<message>Entry FT with type Name in FieldTx has incorrect value %1 instead of Tx</message>
				<arguments>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-Ff" testNumber="8"/>
			<description>Entry Ff in FieldTx shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldTx has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-Ff-Bitmask" testNumber="9"/>
			<description>Entry Ff with type Bitmask in FieldTx shall satisfy special case: fn:Eval(fn:BitsClear(15, 20) &amp;&amp; fn:BitClear(22) &amp;&amp; fn:BitsClear(27, 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldTx does not satisfy special case: fn:Eval(fn:BitsClear(15, 20) &amp;&amp; fn:BitClear(22) &amp;&amp; fn:BitsClear(27, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-Kids" testNumber="8"/>
			<description>Entry Kids in FieldTx shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldTx has type %1 instead of type Array</message>
				<arguments>
					<argument>KidsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-MaxLen" testNumber="8"/>
			<description>Entry MaxLen in FieldTx shall have type Integer</description>
			<test>containsMaxLen == false || MaxLenHasTypeInteger == true</test>
			<error>
				<message>Entry MaxLen in FieldTx has type %1 instead of type Integer</message>
				<arguments>
					<argument>MaxLenType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-MaxLen-Integer" testNumber="9"/>
			<description>Entry MaxLen with type Integer in FieldTx shall satisfy special case: fn:Eval(@MaxLen &gt;= 0)</description>
			<test>MaxLenHasTypeInteger != true || (MaxLenIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry MaxLen with type Integer in FieldTx does not satisfy special case: fn:Eval(@MaxLen &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in FieldTx shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldTx is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidgetFieldTx, AnnotWidgetFieldBtnPush, AnnotWidgetFieldBtnCheckbox, AnnotWidgetFieldBtnRadio, AnnotWidgetFieldChoice, AnnotWidgetFieldSig, AnnotWidgetField</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-Parent" testNumber="8"/>
			<description>Entry Parent in FieldTx shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldTx has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-Q" testNumber="8"/>
			<description>Entry Q in FieldTx shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldTx has type %1 instead of type Integer</message>
				<arguments>
					<argument>QType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-Q-Integer" testNumber="6"/>
			<description>Entry Q with type Integer in FieldTx shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldTx has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-RV" testNumber="8"/>
			<description>Entry RV in FieldTx shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in FieldTx has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>RVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-RV-Stream" testNumber="10"/>
			<description>Entry RV with type Stream in FieldTx shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldTx is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-T" testNumber="8"/>
			<description>Entry T in FieldTx shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldTx has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-TM" testNumber="8"/>
			<description>Entry TM in FieldTx shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldTx has type %1 instead of type StringText</message>
				<arguments>
					<argument>TMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-TU" testNumber="8"/>
			<description>Entry TU in FieldTx shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldTx has type %1 instead of type StringText</message>
				<arguments>
					<argument>TUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-V" testNumber="8"/>
			<description>Entry V in FieldTx shall have one of types: Stream, StringText</description>
			<test>containsV == false || VHasTypeStream == true || VHasTypeStringText == true</test>
			<error>
				<message>Entry V in FieldTx has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="FieldTx-V-Stream" testNumber="10"/>
			<description>Entry V with type Stream in FieldTx shall be indirect</description>
			<test>VHasTypeStream != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Stream in FieldTx is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_7" clause="FileSpecEF" testNumber="1"/>
			<description>FileSpecEF shall not contain entries except F, UF</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'UF' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FileSpecEF contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'UF' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_7" clause="FileSpecEF-F" testNumber="8"/>
			<description>Entry F in FileSpecEF shall have type Stream</description>
			<test>containsF == false || FHasTypeStream == true</test>
			<error>
				<message>Entry F in FileSpecEF has type %1 instead of type Stream</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_7" clause="FileSpecEF-F-Stream" testNumber="10"/>
			<description>Entry F with type Stream in FileSpecEF shall be indirect</description>
			<test>FHasTypeStream != true || isFIndirect == true</test>
			<error>
				<message>Entry F with type Stream in FileSpecEF is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_7" clause="FileSpecEF-UF" testNumber="8"/>
			<description>Entry UF in FileSpecEF shall have type Stream</description>
			<test>containsUF == false || UFHasTypeStream == true</test>
			<error>
				<message>Entry UF in FileSpecEF has type %1 instead of type Stream</message>
				<arguments>
					<argument>UFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_7" clause="FileSpecEF-UF-Stream" testNumber="10"/>
			<description>Entry UF with type Stream in FileSpecEF shall be indirect</description>
			<test>UFHasTypeStream != true || isUFIndirect == true</test>
			<error>
				<message>Entry UF with type Stream in FileSpecEF is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_7" clause="FileSpecRF" testNumber="1"/>
			<description>FileSpecRF shall not contain entries except F, UF</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'UF' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FileSpecRF contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'UF' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_7" clause="FileSpecRF-F" testNumber="8"/>
			<description>Entry F in FileSpecRF shall have type Array</description>
			<test>containsF == false || FHasTypeArray == true</test>
			<error>
				<message>Entry F in FileSpecRF has type %1 instead of type Array</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_7" clause="FileSpecRF-F-Array" testNumber="10"/>
			<description>Entry F with type Array in FileSpecRF shall be indirect</description>
			<test>FHasTypeArray != true || isFIndirect == true</test>
			<error>
				<message>Entry F with type Array in FileSpecRF is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_7" clause="FileSpecRF-F-Array" testNumber="9"/>
			<description>Entry F with type Array in FileSpecRF shall satisfy special case: fn:Eval((fn:ArrayLength(F) mod 2) == 0)</description>
			<test>FHasTypeArray != true || ((FArraySize % 2) == 0)</test>
			<error>
				<message>Entry F with type Array in FileSpecRF does not satisfy special case: fn:Eval((fn:ArrayLength(F) mod 2) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_7" clause="FileSpecRF-UF" testNumber="8"/>
			<description>Entry UF in FileSpecRF shall have type Array</description>
			<test>containsUF == false || UFHasTypeArray == true</test>
			<error>
				<message>Entry UF in FileSpecRF has type %1 instead of type Array</message>
				<arguments>
					<argument>UFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_7" clause="FileSpecRF-UF-Array" testNumber="10"/>
			<description>Entry UF with type Array in FileSpecRF shall be indirect</description>
			<test>UFHasTypeArray != true || isUFIndirect == true</test>
			<error>
				<message>Entry UF with type Array in FileSpecRF is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_7" clause="FileSpecRF-UF-Array" testNumber="9"/>
			<description>Entry UF with type Array in FileSpecRF shall satisfy special case: fn:Eval((fn:ArrayLength(UF) mod 2) == 0)</description>
			<test>UFHasTypeArray != true || ((UFArraySize % 2) == 0)</test>
			<error>
				<message>Entry UF with type Array in FileSpecRF does not satisfy special case: fn:Eval((fn:ArrayLength(UF) mod 2) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification" testNumber="1"/>
			<description>FileSpecification shall not contain entries except AFRelationship, CI, DOS, Desc, EF, F, FS, ID, Mac, RF, Thumb, Type, UF, Unix, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AFRelationship' &amp;&amp; elem != 'CI' &amp;&amp; elem != 'DOS' &amp;&amp; elem != 'Desc' &amp;&amp; elem != 'EF' &amp;&amp; elem != 'EP' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'RF' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UF' &amp;&amp; elem != 'Unix' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FileSpecification contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AFRelationship' &amp;&amp; elem != 'CI' &amp;&amp; elem != 'DOS' &amp;&amp; elem != 'Desc' &amp;&amp; elem != 'EF' &amp;&amp; elem != 'EP' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'RF' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UF' &amp;&amp; elem != 'Unix' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification" testNumber="22"/>
			<description>FileSpecification shall not contain entry EP in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsEP == false</test>
			<error>
				<message>FileSpecification contains entry EP</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-AFRelationship" testNumber="8"/>
			<description>Entry AFRelationship in FileSpecification shall have type Name</description>
			<test>containsAFRelationship == false || AFRelationshipHasTypeName == true</test>
			<error>
				<message>Entry AFRelationship in FileSpecification has type %1 instead of type Name</message>
				<arguments>
					<argument>AFRelationshipType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-AFRelationship" testNumber="23"/>
			<description>Entry AFRelationship in FileSpecification can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAFRelationship == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AFRelationship in FileSpecification is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-AFRelationship-Name" testNumber="6"/>
			<description>Entry AFRelationship with type Name in FileSpecification shall have one of values: Alternative, Supplement, Data, Unspecified, C2PA_Manifest, Source</description>
			<test>AFRelationshipHasTypeName != true || AFRelationshipNameValue == "Source" || AFRelationshipNameValue == "Data" || AFRelationshipNameValue == "Alternative" || AFRelationshipNameValue == "Supplement" || AFRelationshipNameValue == "Unspecified" || AFRelationshipNameValue == "C2PA_Manifest"</test>
			<error>
				<message>Entry AFRelationship with type Name in FileSpecification has incorrect value %1 instead of Alternative, Supplement, Data, Unspecified, C2PA_Manifest, Source</message>
				<arguments>
					<argument>AFRelationshipNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-CI" testNumber="8"/>
			<description>Entry CI in FileSpecification shall have type Dictionary</description>
			<test>containsCI == false || CIHasTypeDictionary == true</test>
			<error>
				<message>Entry CI in FileSpecification has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-DOS" testNumber="8"/>
			<description>Entry DOS in FileSpecification shall have type StringByte</description>
			<test>containsDOS == false || DOSHasTypeStringByte == true</test>
			<error>
				<message>Entry DOS in FileSpecification has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DOSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-Desc" testNumber="8"/>
			<description>Entry Desc in FileSpecification shall have type String</description>
			<test>containsDesc == false || DescHasTypeString == true</test>
			<error>
				<message>Entry Desc in FileSpecification has type %1 instead of type String</message>
				<arguments>
					<argument>DescType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-EF" testNumber="8"/>
			<description>Entry EF in FileSpecification shall have type Dictionary</description>
			<test>containsEF == false || EFHasTypeDictionary == true</test>
			<error>
				<message>Entry EF in FileSpecification has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>EFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-EF" testNumber="11"/>
			<description>Entry EF in FileSpecification is required, when fn:IsPresent(RF)</description>
			<test>containsEF == true || (containsRF != true)</test>
			<error>
				<message>Entry EF in FileSpecification is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-F" testNumber="8"/>
			<description>Entry F in FileSpecification shall have type String</description>
			<test>containsF == false || FHasTypeString == true</test>
			<error>
				<message>Entry F in FileSpecification has type %1 instead of type String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-F" testNumber="11"/>
			<description>Entry F in FileSpecification is required, when fn:Not(fn:IsPresent(DOS)) &amp;&amp; fn:Not(fn:IsPresent(Mac)) &amp;&amp; fn:Not(fn:IsPresent(Unix))</description>
			<test>containsF == true || ((containsDOS == true) || (containsMac == true) || (containsUnix == true))</test>
			<error>
				<message>Entry F in FileSpecification is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-FS" testNumber="8"/>
			<description>Entry FS in FileSpecification shall have type Name</description>
			<test>containsFS == false || FSHasTypeName == true</test>
			<error>
				<message>Entry FS in FileSpecification has type %1 instead of type Name</message>
				<arguments>
					<argument>FSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-ID" testNumber="8"/>
			<description>Entry ID in FileSpecification shall have type Array</description>
			<test>containsID == false || entryIDHasTypeArray == true</test>
			<error>
				<message>Entry ID in FileSpecification has type %1 instead of type Array</message>
				<arguments>
					<argument>entryIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-Mac" testNumber="8"/>
			<description>Entry Mac in FileSpecification shall have type StringByte</description>
			<test>containsMac == false || MacHasTypeStringByte == true</test>
			<error>
				<message>Entry Mac in FileSpecification has type %1 instead of type StringByte</message>
				<arguments>
					<argument>MacType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-RF" testNumber="8"/>
			<description>Entry RF in FileSpecification shall have type Dictionary</description>
			<test>containsRF == false || RFHasTypeDictionary == true</test>
			<error>
				<message>Entry RF in FileSpecification has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>RFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-Thumb" testNumber="8"/>
			<description>Entry Thumb in FileSpecification shall have type Stream</description>
			<test>containsThumb == false || ThumbHasTypeStream == true</test>
			<error>
				<message>Entry Thumb in FileSpecification has type %1 instead of type Stream</message>
				<arguments>
					<argument>ThumbType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-Thumb" testNumber="23"/>
			<description>Entry Thumb in FileSpecification can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsThumb == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Thumb in FileSpecification is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-Thumb-Stream" testNumber="10"/>
			<description>Entry Thumb with type Stream in FileSpecification shall be indirect</description>
			<test>ThumbHasTypeStream != true || isThumbIndirect == true</test>
			<error>
				<message>Entry Thumb with type Stream in FileSpecification is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-Type" testNumber="8"/>
			<description>Entry Type in FileSpecification shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FileSpecification has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-Type" testNumber="11"/>
			<description>Entry Type in FileSpecification is required, when fn:IsPresent(EF) || fn:IsPresent(RF)</description>
			<test>containsType == true || ((containsEF != true) &amp;&amp; (containsRF != true))</test>
			<error>
				<message>Entry Type in FileSpecification is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FileSpecification shall have value Filespec</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Filespec"</test>
			<error>
				<message>Entry Type with type Name in FileSpecification has incorrect value %1 instead of Filespec</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-UF" testNumber="8"/>
			<description>Entry UF in FileSpecification shall have type StringText</description>
			<test>containsUF == false || UFHasTypeStringText == true</test>
			<error>
				<message>Entry UF in FileSpecification has type %1 instead of type StringText</message>
				<arguments>
					<argument>UFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-Unix" testNumber="8"/>
			<description>Entry Unix in FileSpecification shall have type StringByte</description>
			<test>containsUnix == false || UnixHasTypeStringByte == true</test>
			<error>
				<message>Entry Unix in FileSpecification has type %1 instead of type StringByte</message>
				<arguments>
					<argument>UnixType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="FileSpecification-V" testNumber="8"/>
			<description>Entry V in FileSpecification shall have type Boolean</description>
			<test>containsV == false || VHasTypeBoolean == true</test>
			<error>
				<message>Entry V in FileSpecification has type %1 instead of type Boolean</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer" testNumber="1"/>
			<description>FileTrailer shall not contain entries except AdditionalStreams, DocChecksum, Encrypt, ID, Info, Prev, Root, Size, XRefStm</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AdditionalStreams' &amp;&amp; elem != 'AuthCode' &amp;&amp; elem != 'DocChecksum' &amp;&amp; elem != 'Encrypt' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Root' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'XRefStm' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FileTrailer contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AdditionalStreams' &amp;&amp; elem != 'AuthCode' &amp;&amp; elem != 'DocChecksum' &amp;&amp; elem != 'Encrypt' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Root' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'XRefStm' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer" testNumber="22"/>
			<description>FileTrailer shall not contain entry AuthCode in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsAuthCode == false</test>
			<error>
				<message>FileTrailer contains entry AuthCode</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-AdditionalStreams" testNumber="8"/>
			<description>Entry AdditionalStreams in FileTrailer shall have type Array</description>
			<test>containsAdditionalStreams == false || AdditionalStreamsHasTypeArray == true</test>
			<error>
				<message>Entry AdditionalStreams in FileTrailer has type %1 instead of type Array</message>
				<arguments>
					<argument>AdditionalStreamsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-AdditionalStreams" testNumber="23"/>
			<description>Entry AdditionalStreams in FileTrailer can only be present, if satisfy predicate fn:Extension(OpenOffice)</description>
			<test>containsAdditionalStreams == false || hasExtensionOpenOffice == true</test>
			<error>
				<message>Entry AdditionalStreams in FileTrailer is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-AdditionalStreams-Array" testNumber="10"/>
			<description>Entry AdditionalStreams with type Array in FileTrailer shall be direct</description>
			<test>AdditionalStreamsHasTypeArray != true || isAdditionalStreamsIndirect == false</test>
			<error>
				<message>Entry AdditionalStreams with type Array in FileTrailer is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-AdditionalStreams-Array" testNumber="9"/>
			<description>Entry AdditionalStreams with type Array in FileTrailer shall satisfy special case: fn:Eval((fn:ArrayLength(AdditionalStreams) mod 2) == 0)</description>
			<test>AdditionalStreamsHasTypeArray != true || ((AdditionalStreamsArraySize % 2) == 0)</test>
			<error>
				<message>Entry AdditionalStreams with type Array in FileTrailer does not satisfy special case: fn:Eval((fn:ArrayLength(AdditionalStreams) mod 2) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-DocChecksum" testNumber="8"/>
			<description>Entry DocChecksum in FileTrailer shall have type Name</description>
			<test>containsDocChecksum == false || DocChecksumHasTypeName == true</test>
			<error>
				<message>Entry DocChecksum in FileTrailer has type %1 instead of type Name</message>
				<arguments>
					<argument>DocChecksumType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-DocChecksum" testNumber="23"/>
			<description>Entry DocChecksum in FileTrailer can only be present, if satisfy predicate fn:Extension(OpenOffice)</description>
			<test>containsDocChecksum == false || hasExtensionOpenOffice == true</test>
			<error>
				<message>Entry DocChecksum in FileTrailer is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-DocChecksum-Name" testNumber="10"/>
			<description>Entry DocChecksum with type Name in FileTrailer shall be direct</description>
			<test>DocChecksumHasTypeName != true || isDocChecksumIndirect == false</test>
			<error>
				<message>Entry DocChecksum with type Name in FileTrailer is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-Encrypt-Dictionary" testNumber="17"/>
			<description>Entry Encrypt with type Dictionary in FileTrailer shall be one of objects EncryptionStandard, EncryptionPublicKey</description>
			<test>EncryptHasTypeDictionary != true || Encrypt_size == 1</test>
			<error>
				<message>Entry Encrypt with type Dictionary in FileTrailer is not one of objects EncryptionStandard, EncryptionPublicKey</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-Encrypt" testNumber="8"/>
			<description>Entry Encrypt in FileTrailer shall have type Dictionary</description>
			<test>containsEncrypt == false || EncryptHasTypeDictionary == true</test>
			<error>
				<message>Entry Encrypt in FileTrailer has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>EncryptType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-ID" testNumber="8"/>
			<description>Entry ID in FileTrailer shall have type Array</description>
			<test>containsID == false || entryIDHasTypeArray == true</test>
			<error>
				<message>Entry ID in FileTrailer has type %1 instead of type Array</message>
				<arguments>
					<argument>entryIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-ID" testNumber="11"/>
			<description>Entry ID in FileTrailer is required, when fn:IsPresent(Encrypt)</description>
			<test>containsID == true || (containsEncrypt != true)</test>
			<error>
				<message>Entry ID in FileTrailer is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-ID-Array" testNumber="16"/>
			<description>If entry ID with type Array in FileTrailer satisfies condition fn:IsPresent(Encrypt), it shall be direct</description>
			<test>entryIDHasTypeArray != true || (isentryIDIndirect == false || (containsEncrypt != true))</test>
			<error>
				<message>Entry ID with type Array in FileTrailer is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-Info" testNumber="8"/>
			<description>Entry Info in FileTrailer shall have type Dictionary</description>
			<test>containsInfo == false || InfoHasTypeDictionary == true</test>
			<error>
				<message>Entry Info in FileTrailer has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>InfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-Info" testNumber="11"/>
			<description>Entry Info in FileTrailer is required, when fn:IsPresent(trailer::Catalog::PieceInfo)</description>
			<test>containsInfo == true || (containstrailerCatalogPieceInfo != true)</test>
			<error>
				<message>Entry Info in FileTrailer is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-Info-Dictionary" testNumber="10"/>
			<description>Entry Info with type Dictionary in FileTrailer shall be indirect</description>
			<test>InfoHasTypeDictionary != true || isInfoIndirect == true</test>
			<error>
				<message>Entry Info with type Dictionary in FileTrailer is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-Info-Dictionary" testNumber="9"/>
			<description>Entry Info with type Dictionary in FileTrailer shall satisfy special case: fn:Eval(fn:IsPresent(trailer::Catalog::PieceInfo, fn:IsPresent(trailer::Info::ModDate)))</description>
			<test>InfoHasTypeDictionary != true || ((containstrailerCatalogPieceInfo == false) || (containstrailerInfoModDate == true))</test>
			<error>
				<message>Entry Info with type Dictionary in FileTrailer does not satisfy special case: fn:Eval(fn:IsPresent(trailer::Catalog::PieceInfo, fn:IsPresent(trailer::Info::ModDate)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-Prev" testNumber="8"/>
			<description>Entry Prev in FileTrailer shall have type Integer</description>
			<test>containsPrev == false || PrevHasTypeInteger == true</test>
			<error>
				<message>Entry Prev in FileTrailer has type %1 instead of type Integer</message>
				<arguments>
					<argument>PrevType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-Prev-Integer" testNumber="10"/>
			<description>Entry Prev with type Integer in FileTrailer shall be direct</description>
			<test>PrevHasTypeInteger != true || isPrevIndirect == false</test>
			<error>
				<message>Entry Prev with type Integer in FileTrailer is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-Prev-Integer" testNumber="14"/>
			<description>Entry Prev with type Integer in FileTrailer shall satisfy possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</description>
			<test>PrevHasTypeInteger != true || (PrevIntegerValue &gt;= 0) &amp;&amp; (PrevIntegerValue &lt;= fileSize)</test>
			<error>
				<message>Entry Prev with type Integer in FileTrailer does not satisfy possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-Root" testNumber="8"/>
			<description>Entry Root in FileTrailer shall have type Dictionary</description>
			<test>containsRoot == false || RootHasTypeDictionary == true</test>
			<error>
				<message>Entry Root in FileTrailer has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>RootType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-Root" testNumber="7"/>
			<description>Entry Root in FileTrailer is required</description>
			<test>containsRoot == true</test>
			<error>
				<message>Entry Root in FileTrailer is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-Root-Dictionary" testNumber="10"/>
			<description>Entry Root with type Dictionary in FileTrailer shall be indirect</description>
			<test>RootHasTypeDictionary != true || isRootIndirect == true</test>
			<error>
				<message>Entry Root with type Dictionary in FileTrailer is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-Size" testNumber="8"/>
			<description>Entry Size in FileTrailer shall have type Integer</description>
			<test>containsSize == false || SizeHasTypeInteger == true</test>
			<error>
				<message>Entry Size in FileTrailer has type %1 instead of type Integer</message>
				<arguments>
					<argument>SizeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-Size" testNumber="7"/>
			<description>Entry Size in FileTrailer is required</description>
			<test>containsSize == true</test>
			<error>
				<message>Entry Size in FileTrailer is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-Size-Integer" testNumber="10"/>
			<description>Entry Size with type Integer in FileTrailer shall be direct</description>
			<test>SizeHasTypeInteger != true || isSizeIndirect == false</test>
			<error>
				<message>Entry Size with type Integer in FileTrailer is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-Size-Integer" testNumber="14"/>
			<description>Entry Size with type Integer in FileTrailer shall satisfy possible value predicate: fn:Eval(@Size &gt; 0)</description>
			<test>SizeHasTypeInteger != true || SizeIntegerValue &gt; 0</test>
			<error>
				<message>Entry Size with type Integer in FileTrailer does not satisfy possible value predicate: fn:Eval(@Size &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-XRefStm" testNumber="8"/>
			<description>Entry XRefStm in FileTrailer shall have type Integer</description>
			<test>containsXRefStm == false || XRefStmHasTypeInteger == true</test>
			<error>
				<message>Entry XRefStm in FileTrailer has type %1 instead of type Integer</message>
				<arguments>
					<argument>XRefStmType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-XRefStm-Integer" testNumber="14"/>
			<description>Entry XRefStm with type Integer in FileTrailer shall satisfy possible value predicate: fn:Eval((@XRefStm &gt;= 0) &amp;&amp; (@XRefStm &lt;= fn:FileSize()))</description>
			<test>XRefStmHasTypeInteger != true || (XRefStmIntegerValue &gt;= 0) &amp;&amp; (XRefStmIntegerValue &lt;= fileSize)</test>
			<error>
				<message>Entry XRefStm with type Integer in FileTrailer does not satisfy possible value predicate: fn:Eval((@XRefStm &gt;= 0) &amp;&amp; (@XRefStm &lt;= fn:FileSize()))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="FileTrailer-XRefStream" testNumber="8"/>
			<description>XRefStream shall have type Stream</description>
			<test>containsXRefStream == false || XRefStreamHasTypeStream == true</test>
			<error>
				<message>XRefStream has type %1 instead of type Stream</message>
				<arguments>
					<argument>XRefStreamType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="FilterCCITTFaxDecode" testNumber="1"/>
			<description>FilterCCITTFaxDecode shall not contain entries except BlackIs1, Blackls1, Columns, DamagedRowsBeforeError, EncodedByteAlign, EndOfBlock, EndOfLine, K, Rows</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BlackIs1' &amp;&amp; elem != 'Blackls1' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'DamagedRowsBeforeError' &amp;&amp; elem != 'EncodedByteAlign' &amp;&amp; elem != 'EndOfBlock' &amp;&amp; elem != 'EndOfLine' &amp;&amp; elem != 'K' &amp;&amp; elem != 'Rows' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FilterCCITTFaxDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BlackIs1' &amp;&amp; elem != 'Blackls1' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'DamagedRowsBeforeError' &amp;&amp; elem != 'EncodedByteAlign' &amp;&amp; elem != 'EndOfBlock' &amp;&amp; elem != 'EndOfLine' &amp;&amp; elem != 'K' &amp;&amp; elem != 'Rows' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="FilterCCITTFaxDecode-BlackIs1" testNumber="8"/>
			<description>Entry BlackIs1 in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsBlackIs1 == false || BlackIs1HasTypeBoolean == true</test>
			<error>
				<message>Entry BlackIs1 in FilterCCITTFaxDecode has type %1 instead of type Boolean</message>
				<arguments>
					<argument>BlackIs1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="FilterCCITTFaxDecode-Blackls1" testNumber="8"/>
			<description>Entry Blackls1 in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsBlackls1 == false || Blackls1HasTypeBoolean == true</test>
			<error>
				<message>Entry Blackls1 in FilterCCITTFaxDecode has type %1 instead of type Boolean</message>
				<arguments>
					<argument>Blackls1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="FilterCCITTFaxDecode-Blackls1" testNumber="23"/>
			<description>Entry Blackls1 in FilterCCITTFaxDecode can only be present, if satisfy predicate fn:Extension(Malforms)</description>
			<test>containsBlackls1 == false || hasExtensionMalforms == true</test>
			<error>
				<message>Entry Blackls1 in FilterCCITTFaxDecode is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="FilterCCITTFaxDecode-Columns" testNumber="8"/>
			<description>Entry Columns in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsColumns == false || ColumnsHasTypeInteger == true</test>
			<error>
				<message>Entry Columns in FilterCCITTFaxDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>ColumnsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="FilterCCITTFaxDecode-Columns-Integer" testNumber="14"/>
			<description>Entry Columns with type Integer in FilterCCITTFaxDecode shall satisfy possible value predicate: fn:Eval(@Columns &gt;= 0)</description>
			<test>ColumnsHasTypeInteger != true || ColumnsIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Columns with type Integer in FilterCCITTFaxDecode does not satisfy possible value predicate: fn:Eval(@Columns &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="FilterCCITTFaxDecode-DamagedRowsBeforeError" testNumber="8"/>
			<description>Entry DamagedRowsBeforeError in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsDamagedRowsBeforeError == false || DamagedRowsBeforeErrorHasTypeInteger == true</test>
			<error>
				<message>Entry DamagedRowsBeforeError in FilterCCITTFaxDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>DamagedRowsBeforeErrorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="FilterCCITTFaxDecode-DamagedRowsBeforeError-Integer" testNumber="14"/>
			<description>Entry DamagedRowsBeforeError with type Integer in FilterCCITTFaxDecode shall satisfy possible value predicate: fn:Eval(@DamagedRowsBeforeError &gt;= 0)</description>
			<test>DamagedRowsBeforeErrorHasTypeInteger != true || DamagedRowsBeforeErrorIntegerValue &gt;= 0</test>
			<error>
				<message>Entry DamagedRowsBeforeError with type Integer in FilterCCITTFaxDecode does not satisfy possible value predicate: fn:Eval(@DamagedRowsBeforeError &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="FilterCCITTFaxDecode-EncodedByteAlign" testNumber="8"/>
			<description>Entry EncodedByteAlign in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEncodedByteAlign == false || EncodedByteAlignHasTypeBoolean == true</test>
			<error>
				<message>Entry EncodedByteAlign in FilterCCITTFaxDecode has type %1 instead of type Boolean</message>
				<arguments>
					<argument>EncodedByteAlignType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="FilterCCITTFaxDecode-EndOfBlock" testNumber="8"/>
			<description>Entry EndOfBlock in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEndOfBlock == false || EndOfBlockHasTypeBoolean == true</test>
			<error>
				<message>Entry EndOfBlock in FilterCCITTFaxDecode has type %1 instead of type Boolean</message>
				<arguments>
					<argument>EndOfBlockType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="FilterCCITTFaxDecode-EndOfLine" testNumber="8"/>
			<description>Entry EndOfLine in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEndOfLine == false || EndOfLineHasTypeBoolean == true</test>
			<error>
				<message>Entry EndOfLine in FilterCCITTFaxDecode has type %1 instead of type Boolean</message>
				<arguments>
					<argument>EndOfLineType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="FilterCCITTFaxDecode-K" testNumber="8"/>
			<description>Entry K in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsK == false || KHasTypeInteger == true</test>
			<error>
				<message>Entry K in FilterCCITTFaxDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>KType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="FilterCCITTFaxDecode-Rows" testNumber="8"/>
			<description>Entry Rows in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsRows == false || RowsHasTypeInteger == true</test>
			<error>
				<message>Entry Rows in FilterCCITTFaxDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>RowsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="FilterCCITTFaxDecode-Rows-Integer" testNumber="14"/>
			<description>Entry Rows with type Integer in FilterCCITTFaxDecode shall satisfy possible value predicate: fn:Eval(@Rows &gt;= 0)</description>
			<test>RowsHasTypeInteger != true || RowsIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Rows with type Integer in FilterCCITTFaxDecode does not satisfy possible value predicate: fn:Eval(@Rows &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCrypt">
			<id specification="ISO_32000_1_7" clause="FilterCrypt" testNumber="1"/>
			<description>FilterCrypt shall not contain entries except Name, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FilterCrypt contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCrypt">
			<id specification="ISO_32000_1_7" clause="FilterCrypt-Name" testNumber="8"/>
			<description>Entry Name in FilterCrypt shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FilterCrypt has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCrypt">
			<id specification="ISO_32000_1_7" clause="FilterCrypt-Name-Name" testNumber="9"/>
			<description>Entry Name with type Name in FilterCrypt shall satisfy special case: fn:Eval(fn:InKeyMap(trailer::Encrypt::CF) || (@Name == Identity))</description>
			<test>NameHasTypeName != true || ((keysStringtrailerEncryptCF.split('&amp;').filter(elem =&gt; elem == NameNameValue).length &gt; 0) || (NameNameValue == "Identity"))</test>
			<error>
				<message>Entry Name with type Name in FilterCrypt does not satisfy special case: fn:Eval(fn:InKeyMap(trailer::Encrypt::CF) || (@Name == Identity))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCrypt">
			<id specification="ISO_32000_1_7" clause="FilterCrypt-Type" testNumber="8"/>
			<description>Entry Type in FilterCrypt shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FilterCrypt has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCrypt">
			<id specification="ISO_32000_1_7" clause="FilterCrypt-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FilterCrypt shall have value CryptFilterDecodeParms</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CryptFilterDecodeParms"</test>
			<error>
				<message>Entry Type with type Name in FilterCrypt has incorrect value %1 instead of CryptFilterDecodeParms</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="ISO_32000_1_7" clause="FilterDCTDecode" testNumber="1"/>
			<description>FilterDCTDecode shall not contain entries except ColorTransform</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColorTransform' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FilterDCTDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColorTransform' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="ISO_32000_1_7" clause="FilterDCTDecode-ColorTransform" testNumber="8"/>
			<description>Entry ColorTransform in FilterDCTDecode shall have type Integer</description>
			<test>containsColorTransform == false || ColorTransformHasTypeInteger == true</test>
			<error>
				<message>Entry ColorTransform in FilterDCTDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>ColorTransformType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="ISO_32000_1_7" clause="FilterDCTDecode-ColorTransform-Integer" testNumber="6"/>
			<description>Entry ColorTransform with type Integer in FilterDCTDecode shall have one of values: 0, 1</description>
			<test>ColorTransformHasTypeInteger != true || ColorTransformIntegerValue == 0 || ColorTransformIntegerValue == 1</test>
			<error>
				<message>Entry ColorTransform with type Integer in FilterDCTDecode has incorrect value %1 instead of 0, 1</message>
				<arguments>
					<argument>ColorTransformIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_7" clause="FilterFlateDecode" testNumber="1"/>
			<description>FilterFlateDecode shall not contain entries except BitsPerComponent, Colors, Columns, Predictor</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'Predictor' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FilterFlateDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'Predictor' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_7" clause="FilterFlateDecode-BitsPerComponent" testNumber="8"/>
			<description>Entry BitsPerComponent in FilterFlateDecode shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in FilterFlateDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerComponentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_7" clause="FilterFlateDecode-BitsPerComponent-Integer" testNumber="6"/>
			<description>Entry BitsPerComponent with type Integer in FilterFlateDecode shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in FilterFlateDecode has incorrect value %1 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_7" clause="FilterFlateDecode-Colors" testNumber="8"/>
			<description>Entry Colors in FilterFlateDecode shall have type Integer</description>
			<test>containsColors == false || ColorsHasTypeInteger == true</test>
			<error>
				<message>Entry Colors in FilterFlateDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>ColorsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_7" clause="FilterFlateDecode-Colors-Integer" testNumber="14"/>
			<description>Entry Colors with type Integer in FilterFlateDecode shall satisfy possible value predicate: fn:Eval((@Colors &gt;= 1))</description>
			<test>ColorsHasTypeInteger != true || (ColorsIntegerValue &gt;= 1)</test>
			<error>
				<message>Entry Colors with type Integer in FilterFlateDecode does not satisfy possible value predicate: fn:Eval((@Colors &gt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_7" clause="FilterFlateDecode-Columns" testNumber="8"/>
			<description>Entry Columns in FilterFlateDecode shall have type Integer</description>
			<test>containsColumns == false || ColumnsHasTypeInteger == true</test>
			<error>
				<message>Entry Columns in FilterFlateDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>ColumnsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_7" clause="FilterFlateDecode-Predictor" testNumber="8"/>
			<description>Entry Predictor in FilterFlateDecode shall have type Integer</description>
			<test>containsPredictor == false || PredictorHasTypeInteger == true</test>
			<error>
				<message>Entry Predictor in FilterFlateDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>PredictorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_7" clause="FilterFlateDecode-Predictor-Integer" testNumber="6"/>
			<description>Entry Predictor with type Integer in FilterFlateDecode shall have one of values: 11, 1, 12, 2, 13, 14, 15, 10</description>
			<test>PredictorHasTypeInteger != true || PredictorIntegerValue == 1 || PredictorIntegerValue == 2 || PredictorIntegerValue == 10 || PredictorIntegerValue == 11 || PredictorIntegerValue == 12 || PredictorIntegerValue == 13 || PredictorIntegerValue == 14 || PredictorIntegerValue == 15</test>
			<error>
				<message>Entry Predictor with type Integer in FilterFlateDecode has incorrect value %1 instead of 11, 1, 12, 2, 13, 14, 15, 10</message>
				<arguments>
					<argument>PredictorIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterJBIG2Decode">
			<id specification="ISO_32000_1_7" clause="FilterJBIG2Decode" testNumber="1"/>
			<description>FilterJBIG2Decode shall not contain entries except JBIG2Globals</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'JBIG2Globals' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FilterJBIG2Decode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'JBIG2Globals' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterJBIG2Decode">
			<id specification="ISO_32000_1_7" clause="FilterJBIG2Decode-JBIG2Globals" testNumber="8"/>
			<description>Entry JBIG2Globals in FilterJBIG2Decode shall have type Stream</description>
			<test>containsJBIG2Globals == false || JBIG2GlobalsHasTypeStream == true</test>
			<error>
				<message>Entry JBIG2Globals in FilterJBIG2Decode has type %1 instead of type Stream</message>
				<arguments>
					<argument>JBIG2GlobalsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterJBIG2Decode">
			<id specification="ISO_32000_1_7" clause="FilterJBIG2Decode-JBIG2Globals-Stream" testNumber="10"/>
			<description>Entry JBIG2Globals with type Stream in FilterJBIG2Decode shall be indirect</description>
			<test>JBIG2GlobalsHasTypeStream != true || isJBIG2GlobalsIndirect == true</test>
			<error>
				<message>Entry JBIG2Globals with type Stream in FilterJBIG2Decode is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="FilterLZWDecode" testNumber="1"/>
			<description>FilterLZWDecode shall not contain entries except BitsPerComponent, Colors, Columns, EarlyChange, Predictor</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'EarlyChange' &amp;&amp; elem != 'Predictor' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FilterLZWDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'EarlyChange' &amp;&amp; elem != 'Predictor' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="FilterLZWDecode-BitsPerComponent" testNumber="8"/>
			<description>Entry BitsPerComponent in FilterLZWDecode shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in FilterLZWDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerComponentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="FilterLZWDecode-BitsPerComponent-Integer" testNumber="6"/>
			<description>Entry BitsPerComponent with type Integer in FilterLZWDecode shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in FilterLZWDecode has incorrect value %1 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="FilterLZWDecode-Colors" testNumber="8"/>
			<description>Entry Colors in FilterLZWDecode shall have type Integer</description>
			<test>containsColors == false || ColorsHasTypeInteger == true</test>
			<error>
				<message>Entry Colors in FilterLZWDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>ColorsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="FilterLZWDecode-Colors-Integer" testNumber="14"/>
			<description>Entry Colors with type Integer in FilterLZWDecode shall satisfy possible value predicate: fn:Eval((@Colors &gt;= 1))</description>
			<test>ColorsHasTypeInteger != true || (ColorsIntegerValue &gt;= 1)</test>
			<error>
				<message>Entry Colors with type Integer in FilterLZWDecode does not satisfy possible value predicate: fn:Eval((@Colors &gt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="FilterLZWDecode-Columns" testNumber="8"/>
			<description>Entry Columns in FilterLZWDecode shall have type Integer</description>
			<test>containsColumns == false || ColumnsHasTypeInteger == true</test>
			<error>
				<message>Entry Columns in FilterLZWDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>ColumnsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="FilterLZWDecode-EarlyChange" testNumber="8"/>
			<description>Entry EarlyChange in FilterLZWDecode shall have type Integer</description>
			<test>containsEarlyChange == false || EarlyChangeHasTypeInteger == true</test>
			<error>
				<message>Entry EarlyChange in FilterLZWDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>EarlyChangeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="FilterLZWDecode-EarlyChange-Integer" testNumber="6"/>
			<description>Entry EarlyChange with type Integer in FilterLZWDecode shall have one of values: 0, 1</description>
			<test>EarlyChangeHasTypeInteger != true || EarlyChangeIntegerValue == 0 || EarlyChangeIntegerValue == 1</test>
			<error>
				<message>Entry EarlyChange with type Integer in FilterLZWDecode has incorrect value %1 instead of 0, 1</message>
				<arguments>
					<argument>EarlyChangeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="FilterLZWDecode-Predictor" testNumber="8"/>
			<description>Entry Predictor in FilterLZWDecode shall have type Integer</description>
			<test>containsPredictor == false || PredictorHasTypeInteger == true</test>
			<error>
				<message>Entry Predictor in FilterLZWDecode has type %1 instead of type Integer</message>
				<arguments>
					<argument>PredictorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="FilterLZWDecode-Predictor-Integer" testNumber="6"/>
			<description>Entry Predictor with type Integer in FilterLZWDecode shall have one of values: 11, 1, 12, 2, 13, 14, 15, 10</description>
			<test>PredictorHasTypeInteger != true || PredictorIntegerValue == 1 || PredictorIntegerValue == 2 || PredictorIntegerValue == 10 || PredictorIntegerValue == 11 || PredictorIntegerValue == 12 || PredictorIntegerValue == 13 || PredictorIntegerValue == 14 || PredictorIntegerValue == 15</test>
			<error>
				<message>Entry Predictor with type Integer in FilterLZWDecode has incorrect value %1 instead of 11, 1, 12, 2, 13, 14, 15, 10</message>
				<arguments>
					<argument>PredictorIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFixedPrint">
			<id specification="ISO_32000_1_7" clause="FixedPrint" testNumber="1"/>
			<description>FixedPrint shall not contain entries except H, Matrix, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FixedPrint contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFixedPrint">
			<id specification="ISO_32000_1_7" clause="FixedPrint-H" testNumber="8"/>
			<description>Entry H in FixedPrint shall have type Number</description>
			<test>containsH == false || HHasTypeNumber == true</test>
			<error>
				<message>Entry H in FixedPrint has type %1 instead of type Number</message>
				<arguments>
					<argument>HType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFixedPrint">
			<id specification="ISO_32000_1_7" clause="FixedPrint-Matrix" testNumber="8"/>
			<description>Entry Matrix in FixedPrint shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in FixedPrint has type %1 instead of type Matrix</message>
				<arguments>
					<argument>MatrixType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFixedPrint">
			<id specification="ISO_32000_1_7" clause="FixedPrint-Type" testNumber="8"/>
			<description>Entry Type in FixedPrint shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FixedPrint has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFixedPrint">
			<id specification="ISO_32000_1_7" clause="FixedPrint-Type" testNumber="7"/>
			<description>Entry Type in FixedPrint is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FixedPrint is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFixedPrint">
			<id specification="ISO_32000_1_7" clause="FixedPrint-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FixedPrint shall have value FixedPrint</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FixedPrint"</test>
			<error>
				<message>Entry Type with type Name in FixedPrint has incorrect value %1 instead of FixedPrint</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFixedPrint">
			<id specification="ISO_32000_1_7" clause="FixedPrint-V" testNumber="8"/>
			<description>Entry V in FixedPrint shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in FixedPrint has type %1 instead of type Number</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters" testNumber="1"/>
			<description>FloatingWindowParameters shall not contain entries except D, O, P, R, RT, T, TT, Type, UC</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TT' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UC' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FloatingWindowParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TT' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UC' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters-D" testNumber="8"/>
			<description>Entry D in FloatingWindowParameters shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in FloatingWindowParameters has type %1 instead of type Array</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters-D" testNumber="7"/>
			<description>Entry D in FloatingWindowParameters is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in FloatingWindowParameters is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters-D-Array" testNumber="9"/>
			<description>Entry D with type Array in FloatingWindowParameters shall satisfy special case: fn:Eval((D::@0 &gt;= 0) &amp;&amp; (D::@1 &gt;= 0))</description>
			<test>DHasTypeArray != true || ((D0HasTypeInteger == false || (D0IntegerValue &gt;= 0)) &amp;&amp; (D1HasTypeInteger == false || (D1IntegerValue &gt;= 0)))</test>
			<error>
				<message>Entry D with type Array in FloatingWindowParameters does not satisfy special case: fn:Eval((D::@0 &gt;= 0) &amp;&amp; (D::@1 &gt;= 0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters-O" testNumber="8"/>
			<description>Entry O in FloatingWindowParameters shall have type Integer</description>
			<test>containsO == false || OHasTypeInteger == true</test>
			<error>
				<message>Entry O in FloatingWindowParameters has type %1 instead of type Integer</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters-O-Integer" testNumber="6"/>
			<description>Entry O with type Integer in FloatingWindowParameters shall have one of values: 0, 1, 2</description>
			<test>OHasTypeInteger != true || OIntegerValue == 0 || OIntegerValue == 1 || OIntegerValue == 2</test>
			<error>
				<message>Entry O with type Integer in FloatingWindowParameters has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>OIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters-P" testNumber="8"/>
			<description>Entry P in FloatingWindowParameters shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in FloatingWindowParameters has type %1 instead of type Integer</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters-P-Integer" testNumber="6"/>
			<description>Entry P with type Integer in FloatingWindowParameters shall have one of values: 0, 1, 2, 3, 4, 5, 6, 7, 8</description>
			<test>PHasTypeInteger != true || PIntegerValue == 0 || PIntegerValue == 1 || PIntegerValue == 2 || PIntegerValue == 3 || PIntegerValue == 4 || PIntegerValue == 5 || PIntegerValue == 6 || PIntegerValue == 7 || PIntegerValue == 8</test>
			<error>
				<message>Entry P with type Integer in FloatingWindowParameters has incorrect value %1 instead of 0, 1, 2, 3, 4, 5, 6, 7, 8</message>
				<arguments>
					<argument>PIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters-R" testNumber="8"/>
			<description>Entry R in FloatingWindowParameters shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in FloatingWindowParameters has type %1 instead of type Integer</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters-R-Integer" testNumber="6"/>
			<description>Entry R with type Integer in FloatingWindowParameters shall have one of values: 0, 1, 2</description>
			<test>RHasTypeInteger != true || RIntegerValue == 0 || RIntegerValue == 1 || RIntegerValue == 2</test>
			<error>
				<message>Entry R with type Integer in FloatingWindowParameters has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>RIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters-RT" testNumber="8"/>
			<description>Entry RT in FloatingWindowParameters shall have type Integer</description>
			<test>containsRT == false || RTHasTypeInteger == true</test>
			<error>
				<message>Entry RT in FloatingWindowParameters has type %1 instead of type Integer</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters-RT-Integer" testNumber="6"/>
			<description>Entry RT with type Integer in FloatingWindowParameters shall have one of values: 0, 1, 2, 3</description>
			<test>RTHasTypeInteger != true || RTIntegerValue == 0 || RTIntegerValue == 1 || RTIntegerValue == 2 || RTIntegerValue == 3</test>
			<error>
				<message>Entry RT with type Integer in FloatingWindowParameters has incorrect value %1 instead of 0, 1, 2, 3</message>
				<arguments>
					<argument>RTIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters-T" testNumber="8"/>
			<description>Entry T in FloatingWindowParameters shall have type Boolean</description>
			<test>containsT == false || THasTypeBoolean == true</test>
			<error>
				<message>Entry T in FloatingWindowParameters has type %1 instead of type Boolean</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters-TT" testNumber="8"/>
			<description>Entry TT in FloatingWindowParameters shall have type Array</description>
			<test>containsTT == false || TTHasTypeArray == true</test>
			<error>
				<message>Entry TT in FloatingWindowParameters has type %1 instead of type Array</message>
				<arguments>
					<argument>TTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters-Type" testNumber="8"/>
			<description>Entry Type in FloatingWindowParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FloatingWindowParameters has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FloatingWindowParameters shall have value FWParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FWParams"</test>
			<error>
				<message>Entry Type with type Name in FloatingWindowParameters has incorrect value %1 instead of FWParams</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="FloatingWindowParameters-UC" testNumber="8"/>
			<description>Entry UC in FloatingWindowParameters shall have type Boolean</description>
			<test>containsUC == false || UCHasTypeBoolean == true</test>
			<error>
				<message>Entry UC in FloatingWindowParameters has type %1 instead of type Boolean</message>
				<arguments>
					<argument>UCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0" testNumber="1"/>
			<description>FontCIDType0 shall not contain entries except BaseFont, CIDSystemInfo, CIDToGIDMap, DW, DW2, FontDescriptor, Subtype, ToUnicode, Type, W, W2</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CIDToGIDMap' &amp;&amp; elem != 'DW' &amp;&amp; elem != 'DW2' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W' &amp;&amp; elem != 'W2' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontCIDType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CIDToGIDMap' &amp;&amp; elem != 'DW' &amp;&amp; elem != 'DW2' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W' &amp;&amp; elem != 'W2' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-BaseFont" testNumber="8"/>
			<description>Entry BaseFont in FontCIDType0 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontCIDType0 has type %1 instead of type Name</message>
				<arguments>
					<argument>BaseFontType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-BaseFont" testNumber="7"/>
			<description>Entry BaseFont in FontCIDType0 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontCIDType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-CIDSystemInfo" testNumber="8"/>
			<description>Entry CIDSystemInfo in FontCIDType0 shall have type Dictionary</description>
			<test>containsCIDSystemInfo == false || CIDSystemInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry CIDSystemInfo in FontCIDType0 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CIDSystemInfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-CIDSystemInfo" testNumber="7"/>
			<description>Entry CIDSystemInfo in FontCIDType0 is required</description>
			<test>containsCIDSystemInfo == true</test>
			<error>
				<message>Entry CIDSystemInfo in FontCIDType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-CIDToGIDMap" testNumber="8"/>
			<description>Entry CIDToGIDMap in FontCIDType0 shall have one of types: Name, Stream</description>
			<test>containsCIDToGIDMap == false || CIDToGIDMapHasTypeName == true || CIDToGIDMapHasTypeStream == true</test>
			<error>
				<message>Entry CIDToGIDMap in FontCIDType0 has type %1 instead of one of types: Name, Stream</message>
				<arguments>
					<argument>CIDToGIDMapType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-CIDToGIDMap-Name" testNumber="6"/>
			<description>Entry CIDToGIDMap with type Name in FontCIDType0 shall have value Identity</description>
			<test>CIDToGIDMapHasTypeName != true || CIDToGIDMapNameValue == "Identity"</test>
			<error>
				<message>Entry CIDToGIDMap with type Name in FontCIDType0 has incorrect value %1 instead of Identity</message>
				<arguments>
					<argument>CIDToGIDMapNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-CIDToGIDMap-Stream" testNumber="10"/>
			<description>Entry CIDToGIDMap with type Stream in FontCIDType0 shall be indirect</description>
			<test>CIDToGIDMapHasTypeStream != true || isCIDToGIDMapIndirect == true</test>
			<error>
				<message>Entry CIDToGIDMap with type Stream in FontCIDType0 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-DW" testNumber="8"/>
			<description>Entry DW in FontCIDType0 shall have type Number</description>
			<test>containsDW == false || DWHasTypeNumber == true</test>
			<error>
				<message>Entry DW in FontCIDType0 has type %1 instead of type Number</message>
				<arguments>
					<argument>DWType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-DW2" testNumber="8"/>
			<description>Entry DW2 in FontCIDType0 shall have type Array</description>
			<test>containsDW2 == false || DW2HasTypeArray == true</test>
			<error>
				<message>Entry DW2 in FontCIDType0 has type %1 instead of type Array</message>
				<arguments>
					<argument>DW2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-FontDescriptor" testNumber="8"/>
			<description>Entry FontDescriptor in FontCIDType0 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontCIDType0 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FontDescriptorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-FontDescriptor" testNumber="7"/>
			<description>Entry FontDescriptor in FontCIDType0 is required</description>
			<test>containsFontDescriptor == true</test>
			<error>
				<message>Entry FontDescriptor in FontCIDType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-FontDescriptor-Dictionary" testNumber="10"/>
			<description>Entry FontDescriptor with type Dictionary in FontCIDType0 shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontCIDType0 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-Subtype" testNumber="8"/>
			<description>Entry Subtype in FontCIDType0 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontCIDType0 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-Subtype" testNumber="7"/>
			<description>Entry Subtype in FontCIDType0 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontCIDType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in FontCIDType0 shall have value CIDFontType0</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "CIDFontType0"</test>
			<error>
				<message>Entry Subtype with type Name in FontCIDType0 has incorrect value %1 instead of CIDFontType0</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-ToUnicode" testNumber="8"/>
			<description>Entry ToUnicode in FontCIDType0 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontCIDType0 has type %1 instead of type Stream</message>
				<arguments>
					<argument>ToUnicodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-ToUnicode-Stream" testNumber="10"/>
			<description>Entry ToUnicode with type Stream in FontCIDType0 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontCIDType0 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-Type" testNumber="8"/>
			<description>Entry Type in FontCIDType0 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontCIDType0 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-Type" testNumber="7"/>
			<description>Entry Type in FontCIDType0 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontCIDType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontCIDType0 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontCIDType0 has incorrect value %1 instead of Font</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-W" testNumber="8"/>
			<description>Entry W in FontCIDType0 shall have type Array</description>
			<test>containsW == false || WHasTypeArray == true</test>
			<error>
				<message>Entry W in FontCIDType0 has type %1 instead of type Array</message>
				<arguments>
					<argument>WType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="FontCIDType0-W2" testNumber="8"/>
			<description>Entry W2 in FontCIDType0 shall have type Array</description>
			<test>containsW2 == false || W2HasTypeArray == true</test>
			<error>
				<message>Entry W2 in FontCIDType0 has type %1 instead of type Array</message>
				<arguments>
					<argument>W2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2" testNumber="1"/>
			<description>FontCIDType2 shall not contain entries except BaseFont, CIDSystemInfo, CIDToGIDMap, DW, DW2, FontDescriptor, Subtype, ToUnicode, Type, W, W2</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CIDToGIDMap' &amp;&amp; elem != 'DW' &amp;&amp; elem != 'DW2' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W' &amp;&amp; elem != 'W2' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontCIDType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CIDToGIDMap' &amp;&amp; elem != 'DW' &amp;&amp; elem != 'DW2' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W' &amp;&amp; elem != 'W2' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-BaseFont" testNumber="8"/>
			<description>Entry BaseFont in FontCIDType2 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontCIDType2 has type %1 instead of type Name</message>
				<arguments>
					<argument>BaseFontType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-BaseFont" testNumber="7"/>
			<description>Entry BaseFont in FontCIDType2 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontCIDType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-CIDSystemInfo" testNumber="8"/>
			<description>Entry CIDSystemInfo in FontCIDType2 shall have type Dictionary</description>
			<test>containsCIDSystemInfo == false || CIDSystemInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry CIDSystemInfo in FontCIDType2 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CIDSystemInfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-CIDSystemInfo" testNumber="7"/>
			<description>Entry CIDSystemInfo in FontCIDType2 is required</description>
			<test>containsCIDSystemInfo == true</test>
			<error>
				<message>Entry CIDSystemInfo in FontCIDType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-CIDToGIDMap" testNumber="8"/>
			<description>Entry CIDToGIDMap in FontCIDType2 shall have one of types: Name, Stream</description>
			<test>containsCIDToGIDMap == false || CIDToGIDMapHasTypeName == true || CIDToGIDMapHasTypeStream == true</test>
			<error>
				<message>Entry CIDToGIDMap in FontCIDType2 has type %1 instead of one of types: Name, Stream</message>
				<arguments>
					<argument>CIDToGIDMapType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-CIDToGIDMap-Name" testNumber="6"/>
			<description>Entry CIDToGIDMap with type Name in FontCIDType2 shall have value Identity</description>
			<test>CIDToGIDMapHasTypeName != true || CIDToGIDMapNameValue == "Identity"</test>
			<error>
				<message>Entry CIDToGIDMap with type Name in FontCIDType2 has incorrect value %1 instead of Identity</message>
				<arguments>
					<argument>CIDToGIDMapNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-CIDToGIDMap-Stream" testNumber="10"/>
			<description>Entry CIDToGIDMap with type Stream in FontCIDType2 shall be indirect</description>
			<test>CIDToGIDMapHasTypeStream != true || isCIDToGIDMapIndirect == true</test>
			<error>
				<message>Entry CIDToGIDMap with type Stream in FontCIDType2 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-DW" testNumber="8"/>
			<description>Entry DW in FontCIDType2 shall have type Number</description>
			<test>containsDW == false || DWHasTypeNumber == true</test>
			<error>
				<message>Entry DW in FontCIDType2 has type %1 instead of type Number</message>
				<arguments>
					<argument>DWType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-DW2" testNumber="8"/>
			<description>Entry DW2 in FontCIDType2 shall have type Array</description>
			<test>containsDW2 == false || DW2HasTypeArray == true</test>
			<error>
				<message>Entry DW2 in FontCIDType2 has type %1 instead of type Array</message>
				<arguments>
					<argument>DW2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-FontDescriptor" testNumber="8"/>
			<description>Entry FontDescriptor in FontCIDType2 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontCIDType2 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FontDescriptorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-FontDescriptor" testNumber="7"/>
			<description>Entry FontDescriptor in FontCIDType2 is required</description>
			<test>containsFontDescriptor == true</test>
			<error>
				<message>Entry FontDescriptor in FontCIDType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-FontDescriptor-Dictionary" testNumber="10"/>
			<description>Entry FontDescriptor with type Dictionary in FontCIDType2 shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontCIDType2 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-Subtype" testNumber="8"/>
			<description>Entry Subtype in FontCIDType2 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontCIDType2 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-Subtype" testNumber="7"/>
			<description>Entry Subtype in FontCIDType2 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontCIDType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in FontCIDType2 shall have value CIDFontType2</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "CIDFontType2"</test>
			<error>
				<message>Entry Subtype with type Name in FontCIDType2 has incorrect value %1 instead of CIDFontType2</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-ToUnicode" testNumber="8"/>
			<description>Entry ToUnicode in FontCIDType2 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontCIDType2 has type %1 instead of type Stream</message>
				<arguments>
					<argument>ToUnicodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-ToUnicode-Stream" testNumber="10"/>
			<description>Entry ToUnicode with type Stream in FontCIDType2 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontCIDType2 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-Type" testNumber="8"/>
			<description>Entry Type in FontCIDType2 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontCIDType2 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-Type" testNumber="7"/>
			<description>Entry Type in FontCIDType2 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontCIDType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontCIDType2 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontCIDType2 has incorrect value %1 instead of Font</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-W" testNumber="8"/>
			<description>Entry W in FontCIDType2 shall have type Array</description>
			<test>containsW == false || WHasTypeArray == true</test>
			<error>
				<message>Entry W in FontCIDType2 has type %1 instead of type Array</message>
				<arguments>
					<argument>WType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="FontCIDType2-W2" testNumber="8"/>
			<description>Entry W2 in FontCIDType2 shall have type Array</description>
			<test>containsW2 == false || W2HasTypeArray == true</test>
			<error>
				<message>Entry W2 in FontCIDType2 has type %1 instead of type Array</message>
				<arguments>
					<argument>W2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0" testNumber="1"/>
			<description>FontDescriptorCIDType0 shall not contain entries except Ascent, AvgWidth, CIDSet, CapHeight, Descent, FD, Flags, FontBBox, FontFamily, FontFile, FontFile3, FontName, FontStretch, FontWeight, ItalicAngle, Lang, Leading, MaxWidth, MissingWidth, StemH, StemV, Style, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CIDSet' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontDescriptorCIDType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CIDSet' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-Ascent" testNumber="8"/>
			<description>Entry Ascent in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorCIDType0 has type %1 instead of type Number</message>
				<arguments>
					<argument>AscentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-Ascent" testNumber="7"/>
			<description>Entry Ascent in FontDescriptorCIDType0 is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorCIDType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-AvgWidth" testNumber="8"/>
			<description>Entry AvgWidth in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorCIDType0 has type %1 instead of type Number</message>
				<arguments>
					<argument>AvgWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-CIDSet" testNumber="8"/>
			<description>Entry CIDSet in FontDescriptorCIDType0 shall have type Stream</description>
			<test>containsCIDSet == false || CIDSetHasTypeStream == true</test>
			<error>
				<message>Entry CIDSet in FontDescriptorCIDType0 has type %1 instead of type Stream</message>
				<arguments>
					<argument>CIDSetType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-CIDSet-Stream" testNumber="10"/>
			<description>Entry CIDSet with type Stream in FontDescriptorCIDType0 shall be indirect</description>
			<test>CIDSetHasTypeStream != true || isCIDSetIndirect == true</test>
			<error>
				<message>Entry CIDSet with type Stream in FontDescriptorCIDType0 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-CapHeight" testNumber="8"/>
			<description>Entry CapHeight in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorCIDType0 has type %1 instead of type Number</message>
				<arguments>
					<argument>CapHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-Descent" testNumber="8"/>
			<description>Entry Descent in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorCIDType0 has type %1 instead of type Number</message>
				<arguments>
					<argument>DescentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-Descent" testNumber="7"/>
			<description>Entry Descent in FontDescriptorCIDType0 is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorCIDType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-Descent-Number" testNumber="14"/>
			<description>Entry Descent with type Number in FontDescriptorCIDType0 shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorCIDType0 does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FD" testNumber="8"/>
			<description>Entry FD in FontDescriptorCIDType0 shall have type Dictionary</description>
			<test>containsFD == false || FDHasTypeDictionary == true</test>
			<error>
				<message>Entry FD in FontDescriptorCIDType0 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-Flags" testNumber="8"/>
			<description>Entry Flags in FontDescriptorCIDType0 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorCIDType0 has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FlagsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-Flags" testNumber="7"/>
			<description>Entry Flags in FontDescriptorCIDType0 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorCIDType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-Flags-Bitmask" testNumber="9"/>
			<description>Entry Flags with type Bitmask in FontDescriptorCIDType0 shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorCIDType0 does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FontBBox" testNumber="8"/>
			<description>Entry FontBBox in FontDescriptorCIDType0 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorCIDType0 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>FontBBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FontBBox" testNumber="7"/>
			<description>Entry FontBBox in FontDescriptorCIDType0 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorCIDType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FontFamily" testNumber="8"/>
			<description>Entry FontFamily in FontDescriptorCIDType0 shall have type String</description>
			<test>containsFontFamily == false || FontFamilyHasTypeString == true</test>
			<error>
				<message>Entry FontFamily in FontDescriptorCIDType0 has type %1 instead of type String</message>
				<arguments>
					<argument>FontFamilyType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FontFile" testNumber="8"/>
			<description>Entry FontFile in FontDescriptorCIDType0 shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorCIDType0 has type %1 instead of type Stream</message>
				<arguments>
					<argument>FontFileType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FontFile-Stream" testNumber="10"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType0 shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType0 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FontFile-Stream" testNumber="9"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType0 shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile3)))</description>
			<test>FontFileHasTypeStream != true || (containsFontFile3 != true)</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType0 does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile3)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FontFile3" testNumber="8"/>
			<description>Entry FontFile3 in FontDescriptorCIDType0 shall have type Stream</description>
			<test>containsFontFile3 == false || FontFile3HasTypeStream == true</test>
			<error>
				<message>Entry FontFile3 in FontDescriptorCIDType0 has type %1 instead of type Stream</message>
				<arguments>
					<argument>FontFile3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FontFile3-Stream" testNumber="10"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorCIDType0 shall be indirect</description>
			<test>FontFile3HasTypeStream != true || isFontFile3Indirect == true</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorCIDType0 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FontFile3-Stream" testNumber="9"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorCIDType0 shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</description>
			<test>FontFile3HasTypeStream != true || (containsFontFile != true)</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorCIDType0 does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FontName" testNumber="8"/>
			<description>Entry FontName in FontDescriptorCIDType0 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorCIDType0 has type %1 instead of type Name</message>
				<arguments>
					<argument>FontNameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FontName" testNumber="7"/>
			<description>Entry FontName in FontDescriptorCIDType0 is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorCIDType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FontName-Name" testNumber="9"/>
			<description>Entry FontName with type Name in FontDescriptorCIDType0 shall satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorCIDType0 does not satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FontStretch" testNumber="8"/>
			<description>Entry FontStretch in FontDescriptorCIDType0 shall have type Name</description>
			<test>containsFontStretch == false || FontStretchHasTypeName == true</test>
			<error>
				<message>Entry FontStretch in FontDescriptorCIDType0 has type %1 instead of type Name</message>
				<arguments>
					<argument>FontStretchType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FontStretch-Name" testNumber="6"/>
			<description>Entry FontStretch with type Name in FontDescriptorCIDType0 shall have one of values: ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</description>
			<test>FontStretchHasTypeName != true || FontStretchNameValue == "UltraCondensed" || FontStretchNameValue == "ExtraCondensed" || FontStretchNameValue == "Condensed" || FontStretchNameValue == "SemiCondensed" || FontStretchNameValue == "Normal" || FontStretchNameValue == "SemiExpanded" || FontStretchNameValue == "Expanded" || FontStretchNameValue == "ExtraExpanded" || FontStretchNameValue == "UltraExpanded"</test>
			<error>
				<message>Entry FontStretch with type Name in FontDescriptorCIDType0 has incorrect value %1 instead of ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</message>
				<arguments>
					<argument>FontStretchNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FontWeight" testNumber="8"/>
			<description>Entry FontWeight in FontDescriptorCIDType0 shall have type Integer</description>
			<test>containsFontWeight == false || FontWeightHasTypeInteger == true</test>
			<error>
				<message>Entry FontWeight in FontDescriptorCIDType0 has type %1 instead of type Integer</message>
				<arguments>
					<argument>FontWeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-FontWeight-Integer" testNumber="6"/>
			<description>Entry FontWeight with type Integer in FontDescriptorCIDType0 shall have one of values: 100, 200, 300, 400, 500, 600, 700, 800, 900</description>
			<test>FontWeightHasTypeInteger != true || FontWeightIntegerValue == 100 || FontWeightIntegerValue == 200 || FontWeightIntegerValue == 300 || FontWeightIntegerValue == 400 || FontWeightIntegerValue == 500 || FontWeightIntegerValue == 600 || FontWeightIntegerValue == 700 || FontWeightIntegerValue == 800 || FontWeightIntegerValue == 900</test>
			<error>
				<message>Entry FontWeight with type Integer in FontDescriptorCIDType0 has incorrect value %1 instead of 100, 200, 300, 400, 500, 600, 700, 800, 900</message>
				<arguments>
					<argument>FontWeightIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-ItalicAngle" testNumber="8"/>
			<description>Entry ItalicAngle in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorCIDType0 has type %1 instead of type Number</message>
				<arguments>
					<argument>ItalicAngleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-ItalicAngle" testNumber="7"/>
			<description>Entry ItalicAngle in FontDescriptorCIDType0 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorCIDType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-Lang" testNumber="8"/>
			<description>Entry Lang in FontDescriptorCIDType0 shall have type Name</description>
			<test>containsLang == false || LangHasTypeName == true</test>
			<error>
				<message>Entry Lang in FontDescriptorCIDType0 has type %1 instead of type Name</message>
				<arguments>
					<argument>LangType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-Leading" testNumber="8"/>
			<description>Entry Leading in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorCIDType0 has type %1 instead of type Number</message>
				<arguments>
					<argument>LeadingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-MaxWidth" testNumber="8"/>
			<description>Entry MaxWidth in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorCIDType0 has type %1 instead of type Number</message>
				<arguments>
					<argument>MaxWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-MissingWidth" testNumber="8"/>
			<description>Entry MissingWidth in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorCIDType0 has type %1 instead of type Number</message>
				<arguments>
					<argument>MissingWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-StemH" testNumber="8"/>
			<description>Entry StemH in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorCIDType0 has type %1 instead of type Number</message>
				<arguments>
					<argument>StemHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-StemV" testNumber="8"/>
			<description>Entry StemV in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorCIDType0 has type %1 instead of type Number</message>
				<arguments>
					<argument>StemVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-StemV" testNumber="7"/>
			<description>Entry StemV in FontDescriptorCIDType0 is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorCIDType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-Style" testNumber="8"/>
			<description>Entry Style in FontDescriptorCIDType0 shall have type Dictionary</description>
			<test>containsStyle == false || StyleHasTypeDictionary == true</test>
			<error>
				<message>Entry Style in FontDescriptorCIDType0 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>StyleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-Type" testNumber="8"/>
			<description>Entry Type in FontDescriptorCIDType0 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorCIDType0 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-Type" testNumber="7"/>
			<description>Entry Type in FontDescriptorCIDType0 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorCIDType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontDescriptorCIDType0 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorCIDType0 has incorrect value %1 instead of FontDescriptor</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType0-XHeight" testNumber="8"/>
			<description>Entry XHeight in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorCIDType0 has type %1 instead of type Number</message>
				<arguments>
					<argument>XHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2" testNumber="1"/>
			<description>FontDescriptorCIDType2 shall not contain entries except Ascent, AvgWidth, CIDSet, CapHeight, Descent, FD, Flags, FontBBox, FontFamily, FontFile, FontFile2, FontName, FontStretch, FontWeight, ItalicAngle, Lang, Leading, MaxWidth, MissingWidth, StemH, StemV, Style, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CIDSet' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontDescriptorCIDType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CIDSet' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-Ascent" testNumber="8"/>
			<description>Entry Ascent in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorCIDType2 has type %1 instead of type Number</message>
				<arguments>
					<argument>AscentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-Ascent" testNumber="7"/>
			<description>Entry Ascent in FontDescriptorCIDType2 is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorCIDType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-AvgWidth" testNumber="8"/>
			<description>Entry AvgWidth in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorCIDType2 has type %1 instead of type Number</message>
				<arguments>
					<argument>AvgWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-CIDSet" testNumber="8"/>
			<description>Entry CIDSet in FontDescriptorCIDType2 shall have type Stream</description>
			<test>containsCIDSet == false || CIDSetHasTypeStream == true</test>
			<error>
				<message>Entry CIDSet in FontDescriptorCIDType2 has type %1 instead of type Stream</message>
				<arguments>
					<argument>CIDSetType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-CIDSet-Stream" testNumber="10"/>
			<description>Entry CIDSet with type Stream in FontDescriptorCIDType2 shall be indirect</description>
			<test>CIDSetHasTypeStream != true || isCIDSetIndirect == true</test>
			<error>
				<message>Entry CIDSet with type Stream in FontDescriptorCIDType2 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-CapHeight" testNumber="8"/>
			<description>Entry CapHeight in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorCIDType2 has type %1 instead of type Number</message>
				<arguments>
					<argument>CapHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-Descent" testNumber="8"/>
			<description>Entry Descent in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorCIDType2 has type %1 instead of type Number</message>
				<arguments>
					<argument>DescentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-Descent" testNumber="7"/>
			<description>Entry Descent in FontDescriptorCIDType2 is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorCIDType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-Descent-Number" testNumber="14"/>
			<description>Entry Descent with type Number in FontDescriptorCIDType2 shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorCIDType2 does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FD" testNumber="8"/>
			<description>Entry FD in FontDescriptorCIDType2 shall have type Dictionary</description>
			<test>containsFD == false || FDHasTypeDictionary == true</test>
			<error>
				<message>Entry FD in FontDescriptorCIDType2 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-Flags" testNumber="8"/>
			<description>Entry Flags in FontDescriptorCIDType2 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorCIDType2 has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FlagsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-Flags" testNumber="7"/>
			<description>Entry Flags in FontDescriptorCIDType2 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorCIDType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-Flags-Bitmask" testNumber="9"/>
			<description>Entry Flags with type Bitmask in FontDescriptorCIDType2 shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorCIDType2 does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FontBBox" testNumber="8"/>
			<description>Entry FontBBox in FontDescriptorCIDType2 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorCIDType2 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>FontBBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FontBBox" testNumber="7"/>
			<description>Entry FontBBox in FontDescriptorCIDType2 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorCIDType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FontFamily" testNumber="8"/>
			<description>Entry FontFamily in FontDescriptorCIDType2 shall have type String</description>
			<test>containsFontFamily == false || FontFamilyHasTypeString == true</test>
			<error>
				<message>Entry FontFamily in FontDescriptorCIDType2 has type %1 instead of type String</message>
				<arguments>
					<argument>FontFamilyType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FontFile" testNumber="8"/>
			<description>Entry FontFile in FontDescriptorCIDType2 shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorCIDType2 has type %1 instead of type Stream</message>
				<arguments>
					<argument>FontFileType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FontFile-Stream" testNumber="10"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType2 shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType2 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FontFile-Stream" testNumber="9"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType2 shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)))</description>
			<test>FontFileHasTypeStream != true || (containsFontFile2 != true)</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType2 does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FontFile2" testNumber="8"/>
			<description>Entry FontFile2 in FontDescriptorCIDType2 shall have type Stream</description>
			<test>containsFontFile2 == false || FontFile2HasTypeStream == true</test>
			<error>
				<message>Entry FontFile2 in FontDescriptorCIDType2 has type %1 instead of type Stream</message>
				<arguments>
					<argument>FontFile2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FontFile2-Stream" testNumber="10"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorCIDType2 shall be indirect</description>
			<test>FontFile2HasTypeStream != true || isFontFile2Indirect == true</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorCIDType2 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FontFile2-Stream" testNumber="9"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorCIDType2 shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</description>
			<test>FontFile2HasTypeStream != true || (containsFontFile != true)</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorCIDType2 does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FontName" testNumber="8"/>
			<description>Entry FontName in FontDescriptorCIDType2 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorCIDType2 has type %1 instead of type Name</message>
				<arguments>
					<argument>FontNameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FontName" testNumber="7"/>
			<description>Entry FontName in FontDescriptorCIDType2 is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorCIDType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FontName-Name" testNumber="9"/>
			<description>Entry FontName with type Name in FontDescriptorCIDType2 shall satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorCIDType2 does not satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FontStretch" testNumber="8"/>
			<description>Entry FontStretch in FontDescriptorCIDType2 shall have type Name</description>
			<test>containsFontStretch == false || FontStretchHasTypeName == true</test>
			<error>
				<message>Entry FontStretch in FontDescriptorCIDType2 has type %1 instead of type Name</message>
				<arguments>
					<argument>FontStretchType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FontStretch-Name" testNumber="6"/>
			<description>Entry FontStretch with type Name in FontDescriptorCIDType2 shall have one of values: ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</description>
			<test>FontStretchHasTypeName != true || FontStretchNameValue == "UltraCondensed" || FontStretchNameValue == "ExtraCondensed" || FontStretchNameValue == "Condensed" || FontStretchNameValue == "SemiCondensed" || FontStretchNameValue == "Normal" || FontStretchNameValue == "SemiExpanded" || FontStretchNameValue == "Expanded" || FontStretchNameValue == "ExtraExpanded" || FontStretchNameValue == "UltraExpanded"</test>
			<error>
				<message>Entry FontStretch with type Name in FontDescriptorCIDType2 has incorrect value %1 instead of ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</message>
				<arguments>
					<argument>FontStretchNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FontWeight" testNumber="8"/>
			<description>Entry FontWeight in FontDescriptorCIDType2 shall have type Integer</description>
			<test>containsFontWeight == false || FontWeightHasTypeInteger == true</test>
			<error>
				<message>Entry FontWeight in FontDescriptorCIDType2 has type %1 instead of type Integer</message>
				<arguments>
					<argument>FontWeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-FontWeight-Integer" testNumber="6"/>
			<description>Entry FontWeight with type Integer in FontDescriptorCIDType2 shall have one of values: 100, 200, 300, 400, 500, 600, 700, 800, 900</description>
			<test>FontWeightHasTypeInteger != true || FontWeightIntegerValue == 100 || FontWeightIntegerValue == 200 || FontWeightIntegerValue == 300 || FontWeightIntegerValue == 400 || FontWeightIntegerValue == 500 || FontWeightIntegerValue == 600 || FontWeightIntegerValue == 700 || FontWeightIntegerValue == 800 || FontWeightIntegerValue == 900</test>
			<error>
				<message>Entry FontWeight with type Integer in FontDescriptorCIDType2 has incorrect value %1 instead of 100, 200, 300, 400, 500, 600, 700, 800, 900</message>
				<arguments>
					<argument>FontWeightIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-ItalicAngle" testNumber="8"/>
			<description>Entry ItalicAngle in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorCIDType2 has type %1 instead of type Number</message>
				<arguments>
					<argument>ItalicAngleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-ItalicAngle" testNumber="7"/>
			<description>Entry ItalicAngle in FontDescriptorCIDType2 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorCIDType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-Lang" testNumber="8"/>
			<description>Entry Lang in FontDescriptorCIDType2 shall have type Name</description>
			<test>containsLang == false || LangHasTypeName == true</test>
			<error>
				<message>Entry Lang in FontDescriptorCIDType2 has type %1 instead of type Name</message>
				<arguments>
					<argument>LangType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-Leading" testNumber="8"/>
			<description>Entry Leading in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorCIDType2 has type %1 instead of type Number</message>
				<arguments>
					<argument>LeadingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-MaxWidth" testNumber="8"/>
			<description>Entry MaxWidth in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorCIDType2 has type %1 instead of type Number</message>
				<arguments>
					<argument>MaxWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-MissingWidth" testNumber="8"/>
			<description>Entry MissingWidth in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorCIDType2 has type %1 instead of type Number</message>
				<arguments>
					<argument>MissingWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-StemH" testNumber="8"/>
			<description>Entry StemH in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorCIDType2 has type %1 instead of type Number</message>
				<arguments>
					<argument>StemHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-StemV" testNumber="8"/>
			<description>Entry StemV in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorCIDType2 has type %1 instead of type Number</message>
				<arguments>
					<argument>StemVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-StemV" testNumber="7"/>
			<description>Entry StemV in FontDescriptorCIDType2 is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorCIDType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-Style" testNumber="8"/>
			<description>Entry Style in FontDescriptorCIDType2 shall have type Dictionary</description>
			<test>containsStyle == false || StyleHasTypeDictionary == true</test>
			<error>
				<message>Entry Style in FontDescriptorCIDType2 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>StyleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-Type" testNumber="8"/>
			<description>Entry Type in FontDescriptorCIDType2 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorCIDType2 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-Type" testNumber="7"/>
			<description>Entry Type in FontDescriptorCIDType2 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorCIDType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontDescriptorCIDType2 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorCIDType2 has incorrect value %1 instead of FontDescriptor</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="FontDescriptorCIDType2-XHeight" testNumber="8"/>
			<description>Entry XHeight in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorCIDType2 has type %1 instead of type Number</message>
				<arguments>
					<argument>XHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType" testNumber="1"/>
			<description>FontDescriptorTrueType shall not contain entries except Ascent, AvgWidth, CapHeight, Descent, Flags, FontBBox, FontFamily, FontFile, FontFile2, FontName, FontStretch, FontWeight, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontDescriptorTrueType contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-Ascent" testNumber="8"/>
			<description>Entry Ascent in FontDescriptorTrueType shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>AscentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-Ascent" testNumber="7"/>
			<description>Entry Ascent in FontDescriptorTrueType is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-AvgWidth" testNumber="8"/>
			<description>Entry AvgWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>AvgWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-CapHeight" testNumber="8"/>
			<description>Entry CapHeight in FontDescriptorTrueType shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>CapHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-Descent" testNumber="8"/>
			<description>Entry Descent in FontDescriptorTrueType shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>DescentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-Descent" testNumber="7"/>
			<description>Entry Descent in FontDescriptorTrueType is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-Descent-Number" testNumber="14"/>
			<description>Entry Descent with type Number in FontDescriptorTrueType shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorTrueType does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-Flags" testNumber="8"/>
			<description>Entry Flags in FontDescriptorTrueType shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorTrueType has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FlagsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-Flags" testNumber="7"/>
			<description>Entry Flags in FontDescriptorTrueType is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-Flags-Bitmask" testNumber="9"/>
			<description>Entry Flags with type Bitmask in FontDescriptorTrueType shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorTrueType does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-FontBBox" testNumber="8"/>
			<description>Entry FontBBox in FontDescriptorTrueType shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorTrueType has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>FontBBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-FontBBox" testNumber="7"/>
			<description>Entry FontBBox in FontDescriptorTrueType is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-FontFamily" testNumber="8"/>
			<description>Entry FontFamily in FontDescriptorTrueType shall have type StringByte</description>
			<test>containsFontFamily == false || FontFamilyHasTypeStringByte == true</test>
			<error>
				<message>Entry FontFamily in FontDescriptorTrueType has type %1 instead of type StringByte</message>
				<arguments>
					<argument>FontFamilyType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-FontFile" testNumber="8"/>
			<description>Entry FontFile in FontDescriptorTrueType shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorTrueType has type %1 instead of type Stream</message>
				<arguments>
					<argument>FontFileType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-FontFile-Stream" testNumber="10"/>
			<description>Entry FontFile with type Stream in FontDescriptorTrueType shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorTrueType is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-FontFile-Stream" testNumber="9"/>
			<description>Entry FontFile with type Stream in FontDescriptorTrueType shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)))</description>
			<test>FontFileHasTypeStream != true || (containsFontFile2 != true)</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorTrueType does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-FontFile2" testNumber="8"/>
			<description>Entry FontFile2 in FontDescriptorTrueType shall have type Stream</description>
			<test>containsFontFile2 == false || FontFile2HasTypeStream == true</test>
			<error>
				<message>Entry FontFile2 in FontDescriptorTrueType has type %1 instead of type Stream</message>
				<arguments>
					<argument>FontFile2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-FontFile2-Stream" testNumber="10"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorTrueType shall be indirect</description>
			<test>FontFile2HasTypeStream != true || isFontFile2Indirect == true</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorTrueType is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-FontFile2-Stream" testNumber="9"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorTrueType shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</description>
			<test>FontFile2HasTypeStream != true || (containsFontFile != true)</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorTrueType does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-FontName" testNumber="8"/>
			<description>Entry FontName in FontDescriptorTrueType shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorTrueType has type %1 instead of type Name</message>
				<arguments>
					<argument>FontNameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-FontName" testNumber="7"/>
			<description>Entry FontName in FontDescriptorTrueType is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-FontName-Name" testNumber="9"/>
			<description>Entry FontName with type Name in FontDescriptorTrueType shall satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorTrueType does not satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-FontStretch" testNumber="8"/>
			<description>Entry FontStretch in FontDescriptorTrueType shall have type Name</description>
			<test>containsFontStretch == false || FontStretchHasTypeName == true</test>
			<error>
				<message>Entry FontStretch in FontDescriptorTrueType has type %1 instead of type Name</message>
				<arguments>
					<argument>FontStretchType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-FontStretch-Name" testNumber="6"/>
			<description>Entry FontStretch with type Name in FontDescriptorTrueType shall have one of values: ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</description>
			<test>FontStretchHasTypeName != true || FontStretchNameValue == "UltraCondensed" || FontStretchNameValue == "ExtraCondensed" || FontStretchNameValue == "Condensed" || FontStretchNameValue == "SemiCondensed" || FontStretchNameValue == "Normal" || FontStretchNameValue == "SemiExpanded" || FontStretchNameValue == "Expanded" || FontStretchNameValue == "ExtraExpanded" || FontStretchNameValue == "UltraExpanded"</test>
			<error>
				<message>Entry FontStretch with type Name in FontDescriptorTrueType has incorrect value %1 instead of ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</message>
				<arguments>
					<argument>FontStretchNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-FontWeight" testNumber="8"/>
			<description>Entry FontWeight in FontDescriptorTrueType shall have type Integer</description>
			<test>containsFontWeight == false || FontWeightHasTypeInteger == true</test>
			<error>
				<message>Entry FontWeight in FontDescriptorTrueType has type %1 instead of type Integer</message>
				<arguments>
					<argument>FontWeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-FontWeight-Integer" testNumber="6"/>
			<description>Entry FontWeight with type Integer in FontDescriptorTrueType shall have one of values: 100, 200, 300, 400, 500, 600, 700, 800, 900</description>
			<test>FontWeightHasTypeInteger != true || FontWeightIntegerValue == 100 || FontWeightIntegerValue == 200 || FontWeightIntegerValue == 300 || FontWeightIntegerValue == 400 || FontWeightIntegerValue == 500 || FontWeightIntegerValue == 600 || FontWeightIntegerValue == 700 || FontWeightIntegerValue == 800 || FontWeightIntegerValue == 900</test>
			<error>
				<message>Entry FontWeight with type Integer in FontDescriptorTrueType has incorrect value %1 instead of 100, 200, 300, 400, 500, 600, 700, 800, 900</message>
				<arguments>
					<argument>FontWeightIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-ItalicAngle" testNumber="8"/>
			<description>Entry ItalicAngle in FontDescriptorTrueType shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>ItalicAngleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-ItalicAngle" testNumber="7"/>
			<description>Entry ItalicAngle in FontDescriptorTrueType is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-Leading" testNumber="8"/>
			<description>Entry Leading in FontDescriptorTrueType shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>LeadingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-MaxWidth" testNumber="8"/>
			<description>Entry MaxWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>MaxWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-MissingWidth" testNumber="8"/>
			<description>Entry MissingWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>MissingWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-StemH" testNumber="8"/>
			<description>Entry StemH in FontDescriptorTrueType shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>StemHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-StemV" testNumber="8"/>
			<description>Entry StemV in FontDescriptorTrueType shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>StemVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-StemV" testNumber="7"/>
			<description>Entry StemV in FontDescriptorTrueType is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-Type" testNumber="8"/>
			<description>Entry Type in FontDescriptorTrueType shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorTrueType has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-Type" testNumber="7"/>
			<description>Entry Type in FontDescriptorTrueType is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontDescriptorTrueType shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorTrueType has incorrect value %1 instead of FontDescriptor</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="FontDescriptorTrueType-XHeight" testNumber="8"/>
			<description>Entry XHeight in FontDescriptorTrueType shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorTrueType has type %1 instead of type Number</message>
				<arguments>
					<argument>XHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1" testNumber="1"/>
			<description>FontDescriptorType1 shall not contain entries except Ascent, AvgWidth, CapHeight, CharSet, Descent, Flags, FontBBox, FontFamily, FontFile, FontFile3, FontName, FontStretch, FontWeight, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontDescriptorType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-Ascent" testNumber="8"/>
			<description>Entry Ascent in FontDescriptorType1 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>AscentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-Ascent" testNumber="7"/>
			<description>Entry Ascent in FontDescriptorType1 is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-AvgWidth" testNumber="8"/>
			<description>Entry AvgWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>AvgWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-CapHeight" testNumber="8"/>
			<description>Entry CapHeight in FontDescriptorType1 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>CapHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-CharSet" testNumber="8"/>
			<description>Entry CharSet in FontDescriptorType1 shall have one of types: StringAscii, StringByte</description>
			<test>containsCharSet == false || CharSetHasTypeStringAscii == true || CharSetHasTypeStringByte == true</test>
			<error>
				<message>Entry CharSet in FontDescriptorType1 has type %1 instead of one of types: StringAscii, StringByte</message>
				<arguments>
					<argument>CharSetType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-Descent" testNumber="8"/>
			<description>Entry Descent in FontDescriptorType1 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>DescentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-Descent" testNumber="7"/>
			<description>Entry Descent in FontDescriptorType1 is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-Descent-Number" testNumber="14"/>
			<description>Entry Descent with type Number in FontDescriptorType1 shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorType1 does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-Flags" testNumber="8"/>
			<description>Entry Flags in FontDescriptorType1 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType1 has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FlagsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-Flags" testNumber="7"/>
			<description>Entry Flags in FontDescriptorType1 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-Flags-Bitmask" testNumber="9"/>
			<description>Entry Flags with type Bitmask in FontDescriptorType1 shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorType1 does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-FontBBox" testNumber="8"/>
			<description>Entry FontBBox in FontDescriptorType1 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType1 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>FontBBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-FontBBox" testNumber="7"/>
			<description>Entry FontBBox in FontDescriptorType1 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-FontFamily" testNumber="8"/>
			<description>Entry FontFamily in FontDescriptorType1 shall have type StringByte</description>
			<test>containsFontFamily == false || FontFamilyHasTypeStringByte == true</test>
			<error>
				<message>Entry FontFamily in FontDescriptorType1 has type %1 instead of type StringByte</message>
				<arguments>
					<argument>FontFamilyType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-FontFile" testNumber="8"/>
			<description>Entry FontFile in FontDescriptorType1 shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorType1 has type %1 instead of type Stream</message>
				<arguments>
					<argument>FontFileType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-FontFile-Stream" testNumber="10"/>
			<description>Entry FontFile with type Stream in FontDescriptorType1 shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorType1 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-FontFile3" testNumber="8"/>
			<description>Entry FontFile3 in FontDescriptorType1 shall have type Stream</description>
			<test>containsFontFile3 == false || FontFile3HasTypeStream == true</test>
			<error>
				<message>Entry FontFile3 in FontDescriptorType1 has type %1 instead of type Stream</message>
				<arguments>
					<argument>FontFile3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-FontFile3-Stream" testNumber="10"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorType1 shall be indirect</description>
			<test>FontFile3HasTypeStream != true || isFontFile3Indirect == true</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorType1 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-FontName" testNumber="8"/>
			<description>Entry FontName in FontDescriptorType1 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>FontNameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-FontName" testNumber="7"/>
			<description>Entry FontName in FontDescriptorType1 is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-FontName-Name" testNumber="9"/>
			<description>Entry FontName with type Name in FontDescriptorType1 shall satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorType1 does not satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-FontStretch" testNumber="8"/>
			<description>Entry FontStretch in FontDescriptorType1 shall have type Name</description>
			<test>containsFontStretch == false || FontStretchHasTypeName == true</test>
			<error>
				<message>Entry FontStretch in FontDescriptorType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>FontStretchType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-FontStretch-Name" testNumber="6"/>
			<description>Entry FontStretch with type Name in FontDescriptorType1 shall have one of values: ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</description>
			<test>FontStretchHasTypeName != true || FontStretchNameValue == "UltraCondensed" || FontStretchNameValue == "ExtraCondensed" || FontStretchNameValue == "Condensed" || FontStretchNameValue == "SemiCondensed" || FontStretchNameValue == "Normal" || FontStretchNameValue == "SemiExpanded" || FontStretchNameValue == "Expanded" || FontStretchNameValue == "ExtraExpanded" || FontStretchNameValue == "UltraExpanded"</test>
			<error>
				<message>Entry FontStretch with type Name in FontDescriptorType1 has incorrect value %1 instead of ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</message>
				<arguments>
					<argument>FontStretchNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-FontWeight" testNumber="8"/>
			<description>Entry FontWeight in FontDescriptorType1 shall have type Integer</description>
			<test>containsFontWeight == false || FontWeightHasTypeInteger == true</test>
			<error>
				<message>Entry FontWeight in FontDescriptorType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>FontWeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-FontWeight-Integer" testNumber="6"/>
			<description>Entry FontWeight with type Integer in FontDescriptorType1 shall have one of values: 100, 200, 300, 400, 500, 600, 700, 800, 900</description>
			<test>FontWeightHasTypeInteger != true || FontWeightIntegerValue == 100 || FontWeightIntegerValue == 200 || FontWeightIntegerValue == 300 || FontWeightIntegerValue == 400 || FontWeightIntegerValue == 500 || FontWeightIntegerValue == 600 || FontWeightIntegerValue == 700 || FontWeightIntegerValue == 800 || FontWeightIntegerValue == 900</test>
			<error>
				<message>Entry FontWeight with type Integer in FontDescriptorType1 has incorrect value %1 instead of 100, 200, 300, 400, 500, 600, 700, 800, 900</message>
				<arguments>
					<argument>FontWeightIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-ItalicAngle" testNumber="8"/>
			<description>Entry ItalicAngle in FontDescriptorType1 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>ItalicAngleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-ItalicAngle" testNumber="7"/>
			<description>Entry ItalicAngle in FontDescriptorType1 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-Leading" testNumber="8"/>
			<description>Entry Leading in FontDescriptorType1 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>LeadingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-MaxWidth" testNumber="8"/>
			<description>Entry MaxWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>MaxWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-MissingWidth" testNumber="8"/>
			<description>Entry MissingWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>MissingWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-StemH" testNumber="8"/>
			<description>Entry StemH in FontDescriptorType1 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>StemHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-StemV" testNumber="8"/>
			<description>Entry StemV in FontDescriptorType1 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>StemVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-StemV" testNumber="7"/>
			<description>Entry StemV in FontDescriptorType1 is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-Type" testNumber="8"/>
			<description>Entry Type in FontDescriptorType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-Type" testNumber="7"/>
			<description>Entry Type in FontDescriptorType1 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontDescriptorType1 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorType1 has incorrect value %1 instead of FontDescriptor</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType1-XHeight" testNumber="8"/>
			<description>Entry XHeight in FontDescriptorType1 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>XHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3" testNumber="1"/>
			<description>FontDescriptorType3 shall not contain entries except Ascent, AvgWidth, CapHeight, Descent, Flags, FontBBox, FontFamily, FontName, FontStretch, FontWeight, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontDescriptorType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-Ascent" testNumber="8"/>
			<description>Entry Ascent in FontDescriptorType3 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>AscentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-AvgWidth" testNumber="8"/>
			<description>Entry AvgWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>AvgWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-CapHeight" testNumber="8"/>
			<description>Entry CapHeight in FontDescriptorType3 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>CapHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-Descent" testNumber="8"/>
			<description>Entry Descent in FontDescriptorType3 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>DescentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-Descent-Number" testNumber="14"/>
			<description>Entry Descent with type Number in FontDescriptorType3 shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorType3 does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-Flags" testNumber="8"/>
			<description>Entry Flags in FontDescriptorType3 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType3 has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FlagsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-Flags" testNumber="7"/>
			<description>Entry Flags in FontDescriptorType3 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-Flags-Bitmask" testNumber="9"/>
			<description>Entry Flags with type Bitmask in FontDescriptorType3 shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorType3 does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8, 16) &amp;&amp; fn:BitsClear(20, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-FontBBox" testNumber="8"/>
			<description>Entry FontBBox in FontDescriptorType3 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType3 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>FontBBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-FontFamily" testNumber="8"/>
			<description>Entry FontFamily in FontDescriptorType3 shall have type StringByte</description>
			<test>containsFontFamily == false || FontFamilyHasTypeStringByte == true</test>
			<error>
				<message>Entry FontFamily in FontDescriptorType3 has type %1 instead of type StringByte</message>
				<arguments>
					<argument>FontFamilyType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-FontName" testNumber="8"/>
			<description>Entry FontName in FontDescriptorType3 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType3 has type %1 instead of type Name</message>
				<arguments>
					<argument>FontNameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-FontName-Name" testNumber="9"/>
			<description>Entry FontName with type Name in FontDescriptorType3 shall satisfy special case: fn:Eval(@FontName == parent::@Name)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentNameNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorType3 does not satisfy special case: fn:Eval(@FontName == parent::@Name)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-FontStretch" testNumber="8"/>
			<description>Entry FontStretch in FontDescriptorType3 shall have type Name</description>
			<test>containsFontStretch == false || FontStretchHasTypeName == true</test>
			<error>
				<message>Entry FontStretch in FontDescriptorType3 has type %1 instead of type Name</message>
				<arguments>
					<argument>FontStretchType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-FontStretch-Name" testNumber="6"/>
			<description>Entry FontStretch with type Name in FontDescriptorType3 shall have one of values: ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</description>
			<test>FontStretchHasTypeName != true || FontStretchNameValue == "UltraCondensed" || FontStretchNameValue == "ExtraCondensed" || FontStretchNameValue == "Condensed" || FontStretchNameValue == "SemiCondensed" || FontStretchNameValue == "Normal" || FontStretchNameValue == "SemiExpanded" || FontStretchNameValue == "Expanded" || FontStretchNameValue == "ExtraExpanded" || FontStretchNameValue == "UltraExpanded"</test>
			<error>
				<message>Entry FontStretch with type Name in FontDescriptorType3 has incorrect value %1 instead of ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</message>
				<arguments>
					<argument>FontStretchNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-FontWeight" testNumber="8"/>
			<description>Entry FontWeight in FontDescriptorType3 shall have type Integer</description>
			<test>containsFontWeight == false || FontWeightHasTypeInteger == true</test>
			<error>
				<message>Entry FontWeight in FontDescriptorType3 has type %1 instead of type Integer</message>
				<arguments>
					<argument>FontWeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-FontWeight-Integer" testNumber="6"/>
			<description>Entry FontWeight with type Integer in FontDescriptorType3 shall have one of values: 100, 200, 300, 400, 500, 600, 700, 800, 900</description>
			<test>FontWeightHasTypeInteger != true || FontWeightIntegerValue == 100 || FontWeightIntegerValue == 200 || FontWeightIntegerValue == 300 || FontWeightIntegerValue == 400 || FontWeightIntegerValue == 500 || FontWeightIntegerValue == 600 || FontWeightIntegerValue == 700 || FontWeightIntegerValue == 800 || FontWeightIntegerValue == 900</test>
			<error>
				<message>Entry FontWeight with type Integer in FontDescriptorType3 has incorrect value %1 instead of 100, 200, 300, 400, 500, 600, 700, 800, 900</message>
				<arguments>
					<argument>FontWeightIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-ItalicAngle" testNumber="8"/>
			<description>Entry ItalicAngle in FontDescriptorType3 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>ItalicAngleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-ItalicAngle" testNumber="7"/>
			<description>Entry ItalicAngle in FontDescriptorType3 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-Leading" testNumber="8"/>
			<description>Entry Leading in FontDescriptorType3 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>LeadingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-MaxWidth" testNumber="8"/>
			<description>Entry MaxWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>MaxWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-MissingWidth" testNumber="8"/>
			<description>Entry MissingWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>MissingWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-StemH" testNumber="8"/>
			<description>Entry StemH in FontDescriptorType3 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>StemHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-StemV" testNumber="8"/>
			<description>Entry StemV in FontDescriptorType3 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>StemVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-Type" testNumber="8"/>
			<description>Entry Type in FontDescriptorType3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorType3 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-Type" testNumber="7"/>
			<description>Entry Type in FontDescriptorType3 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontDescriptorType3 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorType3 has incorrect value %1 instead of FontDescriptor</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="FontDescriptorType3-XHeight" testNumber="8"/>
			<description>Entry XHeight in FontDescriptorType3 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorType3 has type %1 instead of type Number</message>
				<arguments>
					<argument>XHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile" testNumber="1"/>
			<description>FontFile shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Length1, Length2, Length3, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontFile contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-DL" testNumber="8"/>
			<description>Entry DL in FontFile shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FontFile has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in FontFile shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FontFile does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in FontFile shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFile is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in FontFile shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFile has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in FontFile shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-F" testNumber="8"/>
			<description>Entry F in FontFile shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in FontFile has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in FontFile shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFile is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in FontFile shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFile has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in FontFile shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-FFilter" testNumber="8"/>
			<description>Entry FFilter in FontFile shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FontFile has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in FontFile shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFile does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in FontFile shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FontFile has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-Filter" testNumber="8"/>
			<description>Entry Filter in FontFile shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FontFile has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in FontFile shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFile does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in FontFile shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FontFile has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-Length" testNumber="8"/>
			<description>Entry Length in FontFile shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFile has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-Length" testNumber="7"/>
			<description>Entry Length in FontFile is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFile is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-Length1" testNumber="8"/>
			<description>Entry Length1 in FontFile shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFile has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-Length1-Integer" testNumber="9"/>
			<description>Entry Length1 with type Integer in FontFile shall satisfy special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFile does not satisfy special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-Length2" testNumber="8"/>
			<description>Entry Length2 in FontFile shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFile has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-Length2-Integer" testNumber="9"/>
			<description>Entry Length2 with type Integer in FontFile shall satisfy special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFile does not satisfy special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-Length3" testNumber="8"/>
			<description>Entry Length3 in FontFile shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFile has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-Length3-Integer" testNumber="9"/>
			<description>Entry Length3 with type Integer in FontFile shall satisfy special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFile does not satisfy special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-Subtype" testNumber="8"/>
			<description>Entry Subtype in FontFile shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFile has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="FontFile-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in FontFile shall have one of values: OpenType, CIDFontType0C, Type1C</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type1C" || SubtypeNameValue == "CIDFontType0C" || SubtypeNameValue == "OpenType"</test>
			<error>
				<message>Entry Subtype with type Name in FontFile has incorrect value %1 instead of OpenType, CIDFontType0C, Type1C</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2" testNumber="1"/>
			<description>FontFile2 shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Length1, Length2, Length3, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontFile2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-DL" testNumber="8"/>
			<description>Entry DL in FontFile2 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FontFile2 has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in FontFile2 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FontFile2 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in FontFile2 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFile2 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in FontFile2 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFile2 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in FontFile2 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile2 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-F" testNumber="8"/>
			<description>Entry F in FontFile2 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in FontFile2 has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in FontFile2 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFile2 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in FontFile2 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFile2 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in FontFile2 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile2 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-FFilter" testNumber="8"/>
			<description>Entry FFilter in FontFile2 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FontFile2 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in FontFile2 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFile2 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in FontFile2 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FontFile2 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-Filter" testNumber="8"/>
			<description>Entry Filter in FontFile2 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FontFile2 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in FontFile2 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFile2 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in FontFile2 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FontFile2 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-Length" testNumber="8"/>
			<description>Entry Length in FontFile2 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFile2 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-Length" testNumber="7"/>
			<description>Entry Length in FontFile2 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFile2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-Length1" testNumber="8"/>
			<description>Entry Length1 in FontFile2 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFile2 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-Length1" testNumber="11"/>
			<description>Entry Length1 in FontFile2 is required, when parent::parent::@Subtype == TrueType</description>
			<test>containsLength1 == true || (parentparentSubtypeNameValue != "TrueType")</test>
			<error>
				<message>Entry Length1 in FontFile2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-Length1-Integer" testNumber="9"/>
			<description>Entry Length1 with type Integer in FontFile2 shall satisfy special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFile2 does not satisfy special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-Length2" testNumber="8"/>
			<description>Entry Length2 in FontFile2 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFile2 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-Length2-Integer" testNumber="9"/>
			<description>Entry Length2 with type Integer in FontFile2 shall satisfy special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFile2 does not satisfy special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-Length3" testNumber="8"/>
			<description>Entry Length3 in FontFile2 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFile2 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-Length3-Integer" testNumber="9"/>
			<description>Entry Length3 with type Integer in FontFile2 shall satisfy special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFile2 does not satisfy special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="FontFile2-Subtype" testNumber="8"/>
			<description>Entry Subtype in FontFile2 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFile2 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0" testNumber="1"/>
			<description>FontFile3CIDType0 shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Length1, Length2, Length3, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontFile3CIDType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-DL" testNumber="8"/>
			<description>Entry DL in FontFile3CIDType0 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FontFile3CIDType0 has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in FontFile3CIDType0 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FontFile3CIDType0 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in FontFile3CIDType0 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFile3CIDType0 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in FontFile3CIDType0 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFile3CIDType0 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in FontFile3CIDType0 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile3CIDType0 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-F" testNumber="8"/>
			<description>Entry F in FontFile3CIDType0 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in FontFile3CIDType0 has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in FontFile3CIDType0 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFile3CIDType0 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in FontFile3CIDType0 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFile3CIDType0 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in FontFile3CIDType0 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile3CIDType0 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-FFilter" testNumber="8"/>
			<description>Entry FFilter in FontFile3CIDType0 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FontFile3CIDType0 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in FontFile3CIDType0 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFile3CIDType0 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in FontFile3CIDType0 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FontFile3CIDType0 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-Filter" testNumber="8"/>
			<description>Entry Filter in FontFile3CIDType0 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FontFile3CIDType0 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in FontFile3CIDType0 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFile3CIDType0 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in FontFile3CIDType0 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FontFile3CIDType0 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-Length" testNumber="8"/>
			<description>Entry Length in FontFile3CIDType0 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFile3CIDType0 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-Length" testNumber="7"/>
			<description>Entry Length in FontFile3CIDType0 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFile3CIDType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-Length1" testNumber="8"/>
			<description>Entry Length1 in FontFile3CIDType0 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFile3CIDType0 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-Length1-Integer" testNumber="9"/>
			<description>Entry Length1 with type Integer in FontFile3CIDType0 shall satisfy special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFile3CIDType0 does not satisfy special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-Length2" testNumber="8"/>
			<description>Entry Length2 in FontFile3CIDType0 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFile3CIDType0 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-Length2-Integer" testNumber="9"/>
			<description>Entry Length2 with type Integer in FontFile3CIDType0 shall satisfy special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFile3CIDType0 does not satisfy special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-Length3" testNumber="8"/>
			<description>Entry Length3 in FontFile3CIDType0 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFile3CIDType0 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-Length3-Integer" testNumber="9"/>
			<description>Entry Length3 with type Integer in FontFile3CIDType0 shall satisfy special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFile3CIDType0 does not satisfy special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-Subtype" testNumber="8"/>
			<description>Entry Subtype in FontFile3CIDType0 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFile3CIDType0 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="FontFile3CIDType0-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in FontFile3CIDType0 shall have value CIDFontType0C</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "CIDFontType0C"</test>
			<error>
				<message>Entry Subtype with type Name in FontFile3CIDType0 has incorrect value %1 instead of CIDFontType0C</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1" testNumber="1"/>
			<description>FontFile3Type1 shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Length1, Length2, Length3, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontFile3Type1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-DL" testNumber="8"/>
			<description>Entry DL in FontFile3Type1 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FontFile3Type1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in FontFile3Type1 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FontFile3Type1 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in FontFile3Type1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFile3Type1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in FontFile3Type1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFile3Type1 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in FontFile3Type1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile3Type1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-F" testNumber="8"/>
			<description>Entry F in FontFile3Type1 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in FontFile3Type1 has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in FontFile3Type1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFile3Type1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in FontFile3Type1 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFile3Type1 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in FontFile3Type1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile3Type1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-FFilter" testNumber="8"/>
			<description>Entry FFilter in FontFile3Type1 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FontFile3Type1 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in FontFile3Type1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFile3Type1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in FontFile3Type1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FontFile3Type1 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-Filter" testNumber="8"/>
			<description>Entry Filter in FontFile3Type1 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FontFile3Type1 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in FontFile3Type1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFile3Type1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in FontFile3Type1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FontFile3Type1 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-Length" testNumber="8"/>
			<description>Entry Length in FontFile3Type1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFile3Type1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-Length" testNumber="7"/>
			<description>Entry Length in FontFile3Type1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFile3Type1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-Length1" testNumber="8"/>
			<description>Entry Length1 in FontFile3Type1 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFile3Type1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-Length1-Integer" testNumber="9"/>
			<description>Entry Length1 with type Integer in FontFile3Type1 shall satisfy special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFile3Type1 does not satisfy special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-Length2" testNumber="8"/>
			<description>Entry Length2 in FontFile3Type1 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFile3Type1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-Length2-Integer" testNumber="9"/>
			<description>Entry Length2 with type Integer in FontFile3Type1 shall satisfy special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFile3Type1 does not satisfy special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-Length3" testNumber="8"/>
			<description>Entry Length3 in FontFile3Type1 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFile3Type1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-Length3-Integer" testNumber="9"/>
			<description>Entry Length3 with type Integer in FontFile3Type1 shall satisfy special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFile3Type1 does not satisfy special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-Subtype" testNumber="8"/>
			<description>Entry Subtype in FontFile3Type1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFile3Type1 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-Subtype" testNumber="7"/>
			<description>Entry Subtype in FontFile3Type1 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontFile3Type1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="FontFile3Type1-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in FontFile3Type1 shall have one of values: OpenType, CIDFontType0C, Type1C</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type1C" || SubtypeNameValue == "CIDFontType0C" || SubtypeNameValue == "OpenType"</test>
			<error>
				<message>Entry Subtype with type Name in FontFile3Type1 has incorrect value %1 instead of OpenType, CIDFontType0C, Type1C</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1" testNumber="1"/>
			<description>FontFileType1 shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Length1, Length2, Length3, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontFileType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-DL" testNumber="8"/>
			<description>Entry DL in FontFileType1 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FontFileType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in FontFileType1 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FontFileType1 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in FontFileType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFileType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in FontFileType1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFileType1 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in FontFileType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFileType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-F" testNumber="8"/>
			<description>Entry F in FontFileType1 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in FontFileType1 has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in FontFileType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFileType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in FontFileType1 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFileType1 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in FontFileType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFileType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-FFilter" testNumber="8"/>
			<description>Entry FFilter in FontFileType1 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FontFileType1 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in FontFileType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFileType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in FontFileType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FontFileType1 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-Filter" testNumber="8"/>
			<description>Entry Filter in FontFileType1 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FontFileType1 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in FontFileType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFileType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in FontFileType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FontFileType1 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-Length" testNumber="8"/>
			<description>Entry Length in FontFileType1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFileType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-Length" testNumber="7"/>
			<description>Entry Length in FontFileType1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFileType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-Length1" testNumber="8"/>
			<description>Entry Length1 in FontFileType1 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFileType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-Length1" testNumber="7"/>
			<description>Entry Length1 in FontFileType1 is required</description>
			<test>containsLength1 == true</test>
			<error>
				<message>Entry Length1 in FontFileType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-Length1-Integer" testNumber="9"/>
			<description>Entry Length1 with type Integer in FontFileType1 shall satisfy special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFileType1 does not satisfy special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-Length2" testNumber="8"/>
			<description>Entry Length2 in FontFileType1 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFileType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-Length2" testNumber="7"/>
			<description>Entry Length2 in FontFileType1 is required</description>
			<test>containsLength2 == true</test>
			<error>
				<message>Entry Length2 in FontFileType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-Length2-Integer" testNumber="9"/>
			<description>Entry Length2 with type Integer in FontFileType1 shall satisfy special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFileType1 does not satisfy special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-Length3" testNumber="8"/>
			<description>Entry Length3 in FontFileType1 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFileType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Length3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-Length3" testNumber="7"/>
			<description>Entry Length3 in FontFileType1 is required</description>
			<test>containsLength3 == true</test>
			<error>
				<message>Entry Length3 in FontFileType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-Length3-Integer" testNumber="9"/>
			<description>Entry Length3 with type Integer in FontFileType1 shall satisfy special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFileType1 does not satisfy special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="FontFileType1-Subtype" testNumber="8"/>
			<description>Entry Subtype in FontFileType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFileType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMapEntry">
			<id specification="ISO_32000_1_7" clause="FontMapEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in FontMap shall be one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in FontMap is not one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMapEntry">
			<id specification="ISO_32000_1_7" clause="FontMapEntry" testNumber="8"/>
			<description>Entry in FontMap shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in FontMap has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster" testNumber="1"/>
			<description>FontMultipleMaster shall not contain entries except BaseFont, Encoding, FirstChar, FontDescriptor, LastChar, Name, Subtype, ToUnicode, Type, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontMultipleMaster contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-BaseFont" testNumber="8"/>
			<description>Entry BaseFont in FontMultipleMaster shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontMultipleMaster has type %1 instead of type Name</message>
				<arguments>
					<argument>BaseFontType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-BaseFont" testNumber="7"/>
			<description>Entry BaseFont in FontMultipleMaster is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontMultipleMaster is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-Encoding" testNumber="8"/>
			<description>Entry Encoding in FontMultipleMaster shall have one of types: Dictionary, Name</description>
			<test>containsEncoding == false || EncodingHasTypeDictionary == true || EncodingHasTypeName == true</test>
			<error>
				<message>Entry Encoding in FontMultipleMaster has type %1 instead of one of types: Dictionary, Name</message>
				<arguments>
					<argument>EncodingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-Encoding-Name" testNumber="6"/>
			<description>Entry Encoding with type Name in FontMultipleMaster shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontMultipleMaster has incorrect value %1 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-FirstChar" testNumber="8"/>
			<description>Entry FirstChar in FontMultipleMaster shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontMultipleMaster has type %1 instead of type Integer</message>
				<arguments>
					<argument>FirstCharType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-FirstChar" testNumber="11"/>
			<description>Entry FirstChar in FontMultipleMaster is required, when fn:NotStandard14Font()</description>
			<test>containsFirstChar == true || notStandard14Font == false</test>
			<error>
				<message>Entry FirstChar in FontMultipleMaster is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-FontDescriptor" testNumber="8"/>
			<description>Entry FontDescriptor in FontMultipleMaster shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontMultipleMaster has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FontDescriptorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-FontDescriptor" testNumber="11"/>
			<description>Entry FontDescriptor in FontMultipleMaster is required, when fn:NotStandard14Font()</description>
			<test>containsFontDescriptor == true || notStandard14Font == false</test>
			<error>
				<message>Entry FontDescriptor in FontMultipleMaster is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-FontDescriptor-Dictionary" testNumber="10"/>
			<description>Entry FontDescriptor with type Dictionary in FontMultipleMaster shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontMultipleMaster is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-LastChar" testNumber="8"/>
			<description>Entry LastChar in FontMultipleMaster shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontMultipleMaster has type %1 instead of type Integer</message>
				<arguments>
					<argument>LastCharType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-LastChar" testNumber="11"/>
			<description>Entry LastChar in FontMultipleMaster is required, when fn:NotStandard14Font()</description>
			<test>containsLastChar == true || notStandard14Font == false</test>
			<error>
				<message>Entry LastChar in FontMultipleMaster is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-Name" testNumber="8"/>
			<description>Entry Name in FontMultipleMaster shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontMultipleMaster has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-Subtype" testNumber="8"/>
			<description>Entry Subtype in FontMultipleMaster shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontMultipleMaster has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-Subtype" testNumber="7"/>
			<description>Entry Subtype in FontMultipleMaster is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontMultipleMaster is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in FontMultipleMaster shall have value MMType1</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "MMType1"</test>
			<error>
				<message>Entry Subtype with type Name in FontMultipleMaster has incorrect value %1 instead of MMType1</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-ToUnicode" testNumber="8"/>
			<description>Entry ToUnicode in FontMultipleMaster shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontMultipleMaster has type %1 instead of type Stream</message>
				<arguments>
					<argument>ToUnicodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-ToUnicode-Stream" testNumber="10"/>
			<description>Entry ToUnicode with type Stream in FontMultipleMaster shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontMultipleMaster is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-Type" testNumber="8"/>
			<description>Entry Type in FontMultipleMaster shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontMultipleMaster has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-Type" testNumber="7"/>
			<description>Entry Type in FontMultipleMaster is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontMultipleMaster is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontMultipleMaster shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontMultipleMaster has incorrect value %1 instead of Font</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-Widths" testNumber="8"/>
			<description>Entry Widths in FontMultipleMaster shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontMultipleMaster has type %1 instead of type Array</message>
				<arguments>
					<argument>WidthsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="FontMultipleMaster-Widths" testNumber="11"/>
			<description>Entry Widths in FontMultipleMaster is required, when fn:NotStandard14Font()</description>
			<test>containsWidths == true || notStandard14Font == false</test>
			<error>
				<message>Entry Widths in FontMultipleMaster is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType" testNumber="1"/>
			<description>FontTrueType shall not contain entries except BaseFont, Encoding, FirstChar, FontDescriptor, LastChar, Name, Subtype, ToUnicode, Type, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontTrueType contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-BaseFont" testNumber="8"/>
			<description>Entry BaseFont in FontTrueType shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontTrueType has type %1 instead of type Name</message>
				<arguments>
					<argument>BaseFontType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-BaseFont" testNumber="7"/>
			<description>Entry BaseFont in FontTrueType is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-Encoding" testNumber="8"/>
			<description>Entry Encoding in FontTrueType shall have one of types: Dictionary, Name</description>
			<test>containsEncoding == false || EncodingHasTypeDictionary == true || EncodingHasTypeName == true</test>
			<error>
				<message>Entry Encoding in FontTrueType has type %1 instead of one of types: Dictionary, Name</message>
				<arguments>
					<argument>EncodingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-Encoding-Name" testNumber="6"/>
			<description>Entry Encoding with type Name in FontTrueType shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontTrueType has incorrect value %1 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-FirstChar" testNumber="8"/>
			<description>Entry FirstChar in FontTrueType shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontTrueType has type %1 instead of type Integer</message>
				<arguments>
					<argument>FirstCharType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-FirstChar" testNumber="11"/>
			<description>Entry FirstChar in FontTrueType is required, when fn:NotStandard14Font()</description>
			<test>containsFirstChar == true || notStandard14Font == false</test>
			<error>
				<message>Entry FirstChar in FontTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-FontDescriptor" testNumber="8"/>
			<description>Entry FontDescriptor in FontTrueType shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontTrueType has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FontDescriptorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-FontDescriptor" testNumber="11"/>
			<description>Entry FontDescriptor in FontTrueType is required, when fn:NotStandard14Font()</description>
			<test>containsFontDescriptor == true || notStandard14Font == false</test>
			<error>
				<message>Entry FontDescriptor in FontTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-FontDescriptor-Dictionary" testNumber="10"/>
			<description>Entry FontDescriptor with type Dictionary in FontTrueType shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontTrueType is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-LastChar" testNumber="8"/>
			<description>Entry LastChar in FontTrueType shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontTrueType has type %1 instead of type Integer</message>
				<arguments>
					<argument>LastCharType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-LastChar" testNumber="11"/>
			<description>Entry LastChar in FontTrueType is required, when fn:NotStandard14Font()</description>
			<test>containsLastChar == true || notStandard14Font == false</test>
			<error>
				<message>Entry LastChar in FontTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-Name" testNumber="8"/>
			<description>Entry Name in FontTrueType shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontTrueType has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-Subtype" testNumber="8"/>
			<description>Entry Subtype in FontTrueType shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontTrueType has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-Subtype" testNumber="7"/>
			<description>Entry Subtype in FontTrueType is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in FontTrueType shall have value TrueType</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "TrueType"</test>
			<error>
				<message>Entry Subtype with type Name in FontTrueType has incorrect value %1 instead of TrueType</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-ToUnicode" testNumber="8"/>
			<description>Entry ToUnicode in FontTrueType shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontTrueType has type %1 instead of type Stream</message>
				<arguments>
					<argument>ToUnicodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-ToUnicode-Stream" testNumber="10"/>
			<description>Entry ToUnicode with type Stream in FontTrueType shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontTrueType is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-Type" testNumber="8"/>
			<description>Entry Type in FontTrueType shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontTrueType has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-Type" testNumber="7"/>
			<description>Entry Type in FontTrueType is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontTrueType shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontTrueType has incorrect value %1 instead of Font</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-Widths" testNumber="8"/>
			<description>Entry Widths in FontTrueType shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontTrueType has type %1 instead of type Array</message>
				<arguments>
					<argument>WidthsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="FontTrueType-Widths" testNumber="11"/>
			<description>Entry Widths in FontTrueType is required, when fn:NotStandard14Font()</description>
			<test>containsWidths == true || notStandard14Font == false</test>
			<error>
				<message>Entry Widths in FontTrueType is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0" testNumber="1"/>
			<description>FontType0 shall not contain entries except BaseFont, DescendantFonts, Encoding, Subtype, ToUnicode, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'DescendantFonts' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'DescendantFonts' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0-BaseFont" testNumber="8"/>
			<description>Entry BaseFont in FontType0 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontType0 has type %1 instead of type Name</message>
				<arguments>
					<argument>BaseFontType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0-BaseFont" testNumber="7"/>
			<description>Entry BaseFont in FontType0 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0-DescendantFonts" testNumber="8"/>
			<description>Entry DescendantFonts in FontType0 shall have type Array</description>
			<test>containsDescendantFonts == false || DescendantFontsHasTypeArray == true</test>
			<error>
				<message>Entry DescendantFonts in FontType0 has type %1 instead of type Array</message>
				<arguments>
					<argument>DescendantFontsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0-DescendantFonts" testNumber="7"/>
			<description>Entry DescendantFonts in FontType0 is required</description>
			<test>containsDescendantFonts == true</test>
			<error>
				<message>Entry DescendantFonts in FontType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0-Encoding" testNumber="8"/>
			<description>Entry Encoding in FontType0 shall have one of types: Name, Stream</description>
			<test>containsEncoding == false || EncodingHasTypeName == true || EncodingHasTypeStream == true</test>
			<error>
				<message>Entry Encoding in FontType0 has type %1 instead of one of types: Name, Stream</message>
				<arguments>
					<argument>EncodingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0-Encoding" testNumber="7"/>
			<description>Entry Encoding in FontType0 is required</description>
			<test>containsEncoding == true</test>
			<error>
				<message>Entry Encoding in FontType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0-Encoding-Name" testNumber="6"/>
			<description>Entry Encoding with type Name in FontType0 shall have one of values: GBK2K-V, ETenms-B5-H, 83pv-RKSJ-H, UniKS-UTF16-V, KSCpc-EUC-H, KSCms-UHC-HW-V, GB-EUC-H, B5pc-V, KSC-EUC-H, HKscs-B5-V, GBK2K-H, B5pc-H, KSCms-UHC-H, HKscs-B5-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H, GB-EUC-V, 90msp-RKSJ-H, UniJIS-UTF16-H, KSC-EUC-V, ETen-B5-V, CNS-EUC-H, UniCNS-UCS2-H, UniJIS-UCS2-H, UniJIS-UCS2-HW-V, ETenms-B5-V, CNS-EUC-V, 90msp-RKSJ-V, UniKS-UCS2-H, UniKS-UTF16-H, ETen-B5-H, 90ms-RKSJ-V, GBpc-EUC-H, Ext-RKSJ-H, UniKS-UCS2-V, Identity-V, H, GBpc-EUC-V, GBKp-EUC-H, KSCms-UHC-V, Add-RKSJ-H, UniCNS-UTF16-H, UniJIS-UTF16-V, V, UniCNS-UCS2-V, GBKp-EUC-V, Add-RKSJ-V, 90pv-RKSJ-H, GBK-EUC-V, UniGB-UTF16-V, UniCNS-UTF16-V, GBK-EUC-H, UniGB-UCS2-H, EUC-V, UniGB-UTF16-H, Ext-RKSJ-V, 90ms-RKSJ-H, Identity-H, UniGB-UCS2-V, EUC-H, KSCms-UHC-HW-H</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "GB-EUC-H" || EncodingNameValue == "GB-EUC-V" || EncodingNameValue == "GBpc-EUC-H" || EncodingNameValue == "GBpc-EUC-V" || EncodingNameValue == "GBK-EUC-H" || EncodingNameValue == "GBK-EUC-V" || EncodingNameValue == "GBKp-EUC-H" || EncodingNameValue == "GBKp-EUC-V" || EncodingNameValue == "GBK2K-H" || EncodingNameValue == "GBK2K-V" || EncodingNameValue == "UniGB-UCS2-H" || EncodingNameValue == "UniGB-UCS2-V" || EncodingNameValue == "UniGB-UTF16-H" || EncodingNameValue == "UniGB-UTF16-V" || EncodingNameValue == "B5pc-H" || EncodingNameValue == "B5pc-V" || EncodingNameValue == "HKscs-B5-H" || EncodingNameValue == "HKscs-B5-V" || EncodingNameValue == "ETen-B5-H" || EncodingNameValue == "ETen-B5-V" || EncodingNameValue == "ETenms-B5-H" || EncodingNameValue == "ETenms-B5-V" || EncodingNameValue == "CNS-EUC-H" || EncodingNameValue == "CNS-EUC-V" || EncodingNameValue == "UniCNS-UCS2-H" || EncodingNameValue == "UniCNS-UCS2-V" || EncodingNameValue == "UniCNS-UTF16-H" || EncodingNameValue == "UniCNS-UTF16-V" || EncodingNameValue == "83pv-RKSJ-H" || EncodingNameValue == "90ms-RKSJ-H" || EncodingNameValue == "90ms-RKSJ-V" || EncodingNameValue == "90msp-RKSJ-H" || EncodingNameValue == "90msp-RKSJ-V" || EncodingNameValue == "90pv-RKSJ-H" || EncodingNameValue == "Add-RKSJ-H" || EncodingNameValue == "Add-RKSJ-V" || EncodingNameValue == "EUC-H" || EncodingNameValue == "EUC-V" || EncodingNameValue == "Ext-RKSJ-H" || EncodingNameValue == "Ext-RKSJ-V" || EncodingNameValue == "H" || EncodingNameValue == "V" || EncodingNameValue == "UniJIS-UCS2-H" || EncodingNameValue == "UniJIS-UCS2-V" || EncodingNameValue == "UniJIS-UCS2-HW-H" || EncodingNameValue == "UniJIS-UCS2-HW-V" || EncodingNameValue == "UniJIS-UTF16-H" || EncodingNameValue == "UniJIS-UTF16-V" || EncodingNameValue == "KSC-EUC-H" || EncodingNameValue == "KSC-EUC-V" || EncodingNameValue == "KSCms-UHC-H" || EncodingNameValue == "KSCms-UHC-V" || EncodingNameValue == "KSCms-UHC-HW-H" || EncodingNameValue == "KSCms-UHC-HW-V" || EncodingNameValue == "KSCpc-EUC-H" || EncodingNameValue == "UniKS-UCS2-H" || EncodingNameValue == "UniKS-UCS2-V" || EncodingNameValue == "UniKS-UTF16-H" || EncodingNameValue == "UniKS-UTF16-V" || EncodingNameValue == "Identity-H" || EncodingNameValue == "Identity-V"</test>
			<error>
				<message>Entry Encoding with type Name in FontType0 has incorrect value %1 instead of GBK2K-V, ETenms-B5-H, 83pv-RKSJ-H, UniKS-UTF16-V, KSCpc-EUC-H, KSCms-UHC-HW-V, GB-EUC-H, B5pc-V, KSC-EUC-H, HKscs-B5-V, GBK2K-H, B5pc-H, KSCms-UHC-H, HKscs-B5-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H, GB-EUC-V, 90msp-RKSJ-H, UniJIS-UTF16-H, KSC-EUC-V, ETen-B5-V, CNS-EUC-H, UniCNS-UCS2-H, UniJIS-UCS2-H, UniJIS-UCS2-HW-V, ETenms-B5-V, CNS-EUC-V, 90msp-RKSJ-V, UniKS-UCS2-H, UniKS-UTF16-H, ETen-B5-H, 90ms-RKSJ-V, GBpc-EUC-H, Ext-RKSJ-H, UniKS-UCS2-V, Identity-V, H, GBpc-EUC-V, GBKp-EUC-H, KSCms-UHC-V, Add-RKSJ-H, UniCNS-UTF16-H, UniJIS-UTF16-V, V, UniCNS-UCS2-V, GBKp-EUC-V, Add-RKSJ-V, 90pv-RKSJ-H, GBK-EUC-V, UniGB-UTF16-V, UniCNS-UTF16-V, GBK-EUC-H, UniGB-UCS2-H, EUC-V, UniGB-UTF16-H, Ext-RKSJ-V, 90ms-RKSJ-H, Identity-H, UniGB-UCS2-V, EUC-H, KSCms-UHC-HW-H</message>
				<arguments>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0-Encoding-Stream" testNumber="10"/>
			<description>Entry Encoding with type Stream in FontType0 shall be indirect</description>
			<test>EncodingHasTypeStream != true || isEncodingIndirect == true</test>
			<error>
				<message>Entry Encoding with type Stream in FontType0 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0-Subtype" testNumber="8"/>
			<description>Entry Subtype in FontType0 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontType0 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0-Subtype" testNumber="7"/>
			<description>Entry Subtype in FontType0 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in FontType0 shall have value Type0</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type0"</test>
			<error>
				<message>Entry Subtype with type Name in FontType0 has incorrect value %1 instead of Type0</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0-ToUnicode" testNumber="8"/>
			<description>Entry ToUnicode in FontType0 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontType0 has type %1 instead of type Stream</message>
				<arguments>
					<argument>ToUnicodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0-ToUnicode-Stream" testNumber="10"/>
			<description>Entry ToUnicode with type Stream in FontType0 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType0 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0-Type" testNumber="8"/>
			<description>Entry Type in FontType0 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontType0 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0-Type" testNumber="7"/>
			<description>Entry Type in FontType0 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="FontType0-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontType0 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontType0 has incorrect value %1 instead of Font</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1" testNumber="1"/>
			<description>FontType1 shall not contain entries except BaseFont, Encoding, FirstChar, FontDescriptor, LastChar, Name, Subtype, ToUnicode, Type, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-BaseFont" testNumber="8"/>
			<description>Entry BaseFont in FontType1 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>BaseFontType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-BaseFont" testNumber="7"/>
			<description>Entry BaseFont in FontType1 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-Encoding" testNumber="8"/>
			<description>Entry Encoding in FontType1 shall have one of types: Dictionary, Name</description>
			<test>containsEncoding == false || EncodingHasTypeDictionary == true || EncodingHasTypeName == true</test>
			<error>
				<message>Entry Encoding in FontType1 has type %1 instead of one of types: Dictionary, Name</message>
				<arguments>
					<argument>EncodingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-Encoding-Name" testNumber="6"/>
			<description>Entry Encoding with type Name in FontType1 shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontType1 has incorrect value %1 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-FirstChar" testNumber="8"/>
			<description>Entry FirstChar in FontType1 shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>FirstCharType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-FirstChar" testNumber="11"/>
			<description>Entry FirstChar in FontType1 is required, when fn:NotStandard14Font()</description>
			<test>containsFirstChar == true || notStandard14Font == false</test>
			<error>
				<message>Entry FirstChar in FontType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-FontDescriptor" testNumber="8"/>
			<description>Entry FontDescriptor in FontType1 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontType1 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FontDescriptorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-FontDescriptor" testNumber="11"/>
			<description>Entry FontDescriptor in FontType1 is required, when fn:NotStandard14Font()</description>
			<test>containsFontDescriptor == true || notStandard14Font == false</test>
			<error>
				<message>Entry FontDescriptor in FontType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-FontDescriptor-Dictionary" testNumber="10"/>
			<description>Entry FontDescriptor with type Dictionary in FontType1 shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType1 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-LastChar" testNumber="8"/>
			<description>Entry LastChar in FontType1 shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LastCharType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-LastChar" testNumber="11"/>
			<description>Entry LastChar in FontType1 is required, when fn:NotStandard14Font()</description>
			<test>containsLastChar == true || notStandard14Font == false</test>
			<error>
				<message>Entry LastChar in FontType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-Name" testNumber="8"/>
			<description>Entry Name in FontType1 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-Subtype" testNumber="8"/>
			<description>Entry Subtype in FontType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-Subtype" testNumber="7"/>
			<description>Entry Subtype in FontType1 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in FontType1 shall have value Type1</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type1"</test>
			<error>
				<message>Entry Subtype with type Name in FontType1 has incorrect value %1 instead of Type1</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-ToUnicode" testNumber="8"/>
			<description>Entry ToUnicode in FontType1 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontType1 has type %1 instead of type Stream</message>
				<arguments>
					<argument>ToUnicodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-ToUnicode-Stream" testNumber="10"/>
			<description>Entry ToUnicode with type Stream in FontType1 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType1 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-Type" testNumber="8"/>
			<description>Entry Type in FontType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-Type" testNumber="7"/>
			<description>Entry Type in FontType1 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontType1 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontType1 has incorrect value %1 instead of Font</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-Widths" testNumber="8"/>
			<description>Entry Widths in FontType1 shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontType1 has type %1 instead of type Array</message>
				<arguments>
					<argument>WidthsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-Widths" testNumber="11"/>
			<description>Entry Widths in FontType1 is required, when fn:NotStandard14Font()</description>
			<test>containsWidths == true || notStandard14Font == false</test>
			<error>
				<message>Entry Widths in FontType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="FontType1-Widths-Array" testNumber="9"/>
			<description>Entry Widths with type Array in FontType1 shall satisfy special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</description>
			<test>WidthsHasTypeArray != true || (LastCharHasTypeInteger == false || FirstCharHasTypeInteger == false || WidthsArraySize == (1 + (LastCharIntegerValue - FirstCharIntegerValue)))</test>
			<error>
				<message>Entry Widths with type Array in FontType1 does not satisfy special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3" testNumber="1"/>
			<description>FontType3 shall not contain entries except CharProcs, Encoding, FirstChar, FontBBox, FontDescriptor, FontMatrix, LastChar, Name, Resources, Subtype, ToUnicode, Type, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CharProcs' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'FontMatrix' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FontType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CharProcs' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'FontMatrix' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-CharProcs" testNumber="8"/>
			<description>Entry CharProcs in FontType3 shall have type Dictionary</description>
			<test>containsCharProcs == false || CharProcsHasTypeDictionary == true</test>
			<error>
				<message>Entry CharProcs in FontType3 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CharProcsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-CharProcs" testNumber="7"/>
			<description>Entry CharProcs in FontType3 is required</description>
			<test>containsCharProcs == true</test>
			<error>
				<message>Entry CharProcs in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-Encoding" testNumber="8"/>
			<description>Entry Encoding in FontType3 shall have type Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontType3 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>EncodingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-Encoding" testNumber="7"/>
			<description>Entry Encoding in FontType3 is required</description>
			<test>containsEncoding == true</test>
			<error>
				<message>Entry Encoding in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-FirstChar" testNumber="8"/>
			<description>Entry FirstChar in FontType3 shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontType3 has type %1 instead of type Integer</message>
				<arguments>
					<argument>FirstCharType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-FirstChar" testNumber="7"/>
			<description>Entry FirstChar in FontType3 is required</description>
			<test>containsFirstChar == true</test>
			<error>
				<message>Entry FirstChar in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-FontBBox" testNumber="8"/>
			<description>Entry FontBBox in FontType3 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontType3 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>FontBBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-FontBBox" testNumber="7"/>
			<description>Entry FontBBox in FontType3 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-FontDescriptor" testNumber="8"/>
			<description>Entry FontDescriptor in FontType3 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontType3 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FontDescriptorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-FontDescriptor" testNumber="11"/>
			<description>Entry FontDescriptor in FontType3 is required, when fn:IsPDFTagged()</description>
			<test>containsFontDescriptor == true || isPDFTagged == false</test>
			<error>
				<message>Entry FontDescriptor in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-FontDescriptor-Dictionary" testNumber="10"/>
			<description>Entry FontDescriptor with type Dictionary in FontType3 shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType3 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-FontMatrix" testNumber="8"/>
			<description>Entry FontMatrix in FontType3 shall have type Matrix</description>
			<test>containsFontMatrix == false || FontMatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry FontMatrix in FontType3 has type %1 instead of type Matrix</message>
				<arguments>
					<argument>FontMatrixType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-FontMatrix" testNumber="7"/>
			<description>Entry FontMatrix in FontType3 is required</description>
			<test>containsFontMatrix == true</test>
			<error>
				<message>Entry FontMatrix in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-LastChar" testNumber="8"/>
			<description>Entry LastChar in FontType3 shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontType3 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LastCharType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-LastChar" testNumber="7"/>
			<description>Entry LastChar in FontType3 is required</description>
			<test>containsLastChar == true</test>
			<error>
				<message>Entry LastChar in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-Name" testNumber="8"/>
			<description>Entry Name in FontType3 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontType3 has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-Resources" testNumber="8"/>
			<description>Entry Resources in FontType3 shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in FontType3 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ResourcesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-Subtype" testNumber="8"/>
			<description>Entry Subtype in FontType3 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontType3 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-Subtype" testNumber="7"/>
			<description>Entry Subtype in FontType3 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in FontType3 shall have value Type3</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type3"</test>
			<error>
				<message>Entry Subtype with type Name in FontType3 has incorrect value %1 instead of Type3</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-ToUnicode" testNumber="8"/>
			<description>Entry ToUnicode in FontType3 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontType3 has type %1 instead of type Stream</message>
				<arguments>
					<argument>ToUnicodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-ToUnicode-Stream" testNumber="10"/>
			<description>Entry ToUnicode with type Stream in FontType3 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType3 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-Type" testNumber="8"/>
			<description>Entry Type in FontType3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontType3 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-Type" testNumber="7"/>
			<description>Entry Type in FontType3 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in FontType3 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontType3 has incorrect value %1 instead of Font</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-Widths" testNumber="8"/>
			<description>Entry Widths in FontType3 shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontType3 has type %1 instead of type Array</message>
				<arguments>
					<argument>WidthsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-Widths" testNumber="7"/>
			<description>Entry Widths in FontType3 is required</description>
			<test>containsWidths == true</test>
			<error>
				<message>Entry Widths in FontType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="FontType3-Widths-Array" testNumber="9"/>
			<description>Entry Widths with type Array in FontType3 shall satisfy special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</description>
			<test>WidthsHasTypeArray != true || (LastCharHasTypeInteger == false || FirstCharHasTypeInteger == false || WidthsArraySize == (1 + (LastCharIntegerValue - FirstCharIntegerValue)))</test>
			<error>
				<message>Entry Widths with type Array in FontType3 does not satisfy special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0" testNumber="1"/>
			<description>FunctionType0 shall not contain entries except BitsPerSample, DL, Decode, DecodeParms, Domain, Encode, F, FDecodeParms, FFilter, Filter, FunctionType, Length, Order, Range, Size</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerSample' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Encode' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Order' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'Size' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FunctionType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerSample' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Encode' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Order' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'Size' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-BitsPerSample" testNumber="8"/>
			<description>Entry BitsPerSample in FunctionType0 shall have type Integer</description>
			<test>containsBitsPerSample == false || BitsPerSampleHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerSample in FunctionType0 has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerSampleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-BitsPerSample" testNumber="7"/>
			<description>Entry BitsPerSample in FunctionType0 is required</description>
			<test>containsBitsPerSample == true</test>
			<error>
				<message>Entry BitsPerSample in FunctionType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-BitsPerSample-Integer" testNumber="6"/>
			<description>Entry BitsPerSample with type Integer in FunctionType0 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerSampleHasTypeInteger != true || BitsPerSampleIntegerValue == 1 || BitsPerSampleIntegerValue == 2 || BitsPerSampleIntegerValue == 4 || BitsPerSampleIntegerValue == 8 || BitsPerSampleIntegerValue == 12 || BitsPerSampleIntegerValue == 16 || BitsPerSampleIntegerValue == 24 || BitsPerSampleIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerSample with type Integer in FunctionType0 has incorrect value %1 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>BitsPerSampleIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-DL" testNumber="8"/>
			<description>Entry DL in FunctionType0 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FunctionType0 has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in FunctionType0 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FunctionType0 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Decode" testNumber="8"/>
			<description>Entry Decode in FunctionType0 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in FunctionType0 has type %1 instead of type Array</message>
				<arguments>
					<argument>DecodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Decode-Array" testNumber="9"/>
			<description>Entry Decode with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(Decode) == fn:ArrayLength(Range))</description>
			<test>DecodeHasTypeArray != true || (RangeHasTypeArray == false || DecodeArraySize == RangeArraySize)</test>
			<error>
				<message>Entry Decode with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(Decode) == fn:ArrayLength(Range))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in FunctionType0 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FunctionType0 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in FunctionType0 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FunctionType0 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Domain" testNumber="8"/>
			<description>Entry Domain in FunctionType0 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in FunctionType0 has type %1 instead of type Array</message>
				<arguments>
					<argument>DomainType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Domain" testNumber="7"/>
			<description>Entry Domain in FunctionType0 is required</description>
			<test>containsDomain == true</test>
			<error>
				<message>Entry Domain in FunctionType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Domain-Array" testNumber="9"/>
			<description>Entry Domain with type Array in FunctionType0 shall satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</description>
			<test>DomainHasTypeArray != true || ((DomainArraySize % 2) == 0)</test>
			<error>
				<message>Entry Domain with type Array in FunctionType0 does not satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Encode" testNumber="8"/>
			<description>Entry Encode in FunctionType0 shall have type Array</description>
			<test>containsEncode == false || EncodeHasTypeArray == true</test>
			<error>
				<message>Entry Encode in FunctionType0 has type %1 instead of type Array</message>
				<arguments>
					<argument>EncodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Encode-Array" testNumber="9"/>
			<description>Entry Encode with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(Encode) == (2 * fn:ArrayLength(Size)))</description>
			<test>EncodeHasTypeArray != true || (SizeHasTypeArray == false || EncodeArraySize == (2 * SizeArraySize))</test>
			<error>
				<message>Entry Encode with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(Encode) == (2 * fn:ArrayLength(Size)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-F" testNumber="8"/>
			<description>Entry F in FunctionType0 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in FunctionType0 has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in FunctionType0 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FunctionType0 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in FunctionType0 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FunctionType0 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-FFilter" testNumber="8"/>
			<description>Entry FFilter in FunctionType0 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FunctionType0 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in FunctionType0 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FunctionType0 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Filter" testNumber="8"/>
			<description>Entry Filter in FunctionType0 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FunctionType0 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in FunctionType0 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FunctionType0 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-FunctionType" testNumber="8"/>
			<description>Entry FunctionType in FunctionType0 shall have type Integer</description>
			<test>containsFunctionType == false || FunctionTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FunctionType in FunctionType0 has type %1 instead of type Integer</message>
				<arguments>
					<argument>FunctionTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-FunctionType" testNumber="7"/>
			<description>Entry FunctionType in FunctionType0 is required</description>
			<test>containsFunctionType == true</test>
			<error>
				<message>Entry FunctionType in FunctionType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-FunctionType-Integer" testNumber="6"/>
			<description>Entry FunctionType with type Integer in FunctionType0 shall have value 0</description>
			<test>FunctionTypeHasTypeInteger != true || FunctionTypeIntegerValue == 0</test>
			<error>
				<message>Entry FunctionType with type Integer in FunctionType0 has incorrect value %1 instead of 0</message>
				<arguments>
					<argument>FunctionTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Length" testNumber="8"/>
			<description>Entry Length in FunctionType0 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FunctionType0 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Length" testNumber="7"/>
			<description>Entry Length in FunctionType0 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FunctionType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Order" testNumber="8"/>
			<description>Entry Order in FunctionType0 shall have type Integer</description>
			<test>containsOrder == false || OrderHasTypeInteger == true</test>
			<error>
				<message>Entry Order in FunctionType0 has type %1 instead of type Integer</message>
				<arguments>
					<argument>OrderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Order-Integer" testNumber="6"/>
			<description>Entry Order with type Integer in FunctionType0 shall have one of values: 1, 3</description>
			<test>OrderHasTypeInteger != true || OrderIntegerValue == 1 || OrderIntegerValue == 3</test>
			<error>
				<message>Entry Order with type Integer in FunctionType0 has incorrect value %1 instead of 1, 3</message>
				<arguments>
					<argument>OrderIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Range" testNumber="8"/>
			<description>Entry Range in FunctionType0 shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in FunctionType0 has type %1 instead of type Array</message>
				<arguments>
					<argument>RangeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Range" testNumber="7"/>
			<description>Entry Range in FunctionType0 is required</description>
			<test>containsRange == true</test>
			<error>
				<message>Entry Range in FunctionType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Range-Array" testNumber="9"/>
			<description>Entry Range with type Array in FunctionType0 shall satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</description>
			<test>RangeHasTypeArray != true || ((RangeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Range with type Array in FunctionType0 does not satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Size" testNumber="8"/>
			<description>Entry Size in FunctionType0 shall have type Array</description>
			<test>containsSize == false || SizeHasTypeArray == true</test>
			<error>
				<message>Entry Size in FunctionType0 has type %1 instead of type Array</message>
				<arguments>
					<argument>SizeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Size" testNumber="7"/>
			<description>Entry Size in FunctionType0 is required</description>
			<test>containsSize == true</test>
			<error>
				<message>Entry Size in FunctionType0 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="FunctionType0-Size-Array" testNumber="9"/>
			<description>Entry Size with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(Domain) == (2 * fn:ArrayLength(Size)))</description>
			<test>SizeHasTypeArray != true || (DomainHasTypeArray == false || DomainArraySize == (2 * SizeArraySize))</test>
			<error>
				<message>Entry Size with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(Domain) == (2 * fn:ArrayLength(Size)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="FunctionType2" testNumber="1"/>
			<description>FunctionType2 shall not contain entries except C0, C1, Domain, FunctionType, N, Range</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C0' &amp;&amp; elem != 'C1' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Range' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FunctionType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C0' &amp;&amp; elem != 'C1' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Range' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="FunctionType2-C0" testNumber="8"/>
			<description>Entry C0 in FunctionType2 shall have type Array</description>
			<test>containsC0 == false || C0HasTypeArray == true</test>
			<error>
				<message>Entry C0 in FunctionType2 has type %1 instead of type Array</message>
				<arguments>
					<argument>C0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="FunctionType2-C0-Array" testNumber="9"/>
			<description>Entry C0 with type Array in FunctionType2 shall satisfy special case: fn:Eval(fn:ArrayLength(C0) == fn:ArrayLength(C1))</description>
			<test>C0HasTypeArray != true || (C1HasTypeArray == false || C0ArraySize == C1ArraySize)</test>
			<error>
				<message>Entry C0 with type Array in FunctionType2 does not satisfy special case: fn:Eval(fn:ArrayLength(C0) == fn:ArrayLength(C1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="FunctionType2-C1" testNumber="8"/>
			<description>Entry C1 in FunctionType2 shall have type Array</description>
			<test>containsC1 == false || C1HasTypeArray == true</test>
			<error>
				<message>Entry C1 in FunctionType2 has type %1 instead of type Array</message>
				<arguments>
					<argument>C1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="FunctionType2-C1-Array" testNumber="9"/>
			<description>Entry C1 with type Array in FunctionType2 shall satisfy special case: fn:Eval(fn:ArrayLength(C1) == fn:ArrayLength(C0))</description>
			<test>C1HasTypeArray != true || (C0HasTypeArray == false || C1ArraySize == C0ArraySize)</test>
			<error>
				<message>Entry C1 with type Array in FunctionType2 does not satisfy special case: fn:Eval(fn:ArrayLength(C1) == fn:ArrayLength(C0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="FunctionType2-Domain" testNumber="8"/>
			<description>Entry Domain in FunctionType2 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in FunctionType2 has type %1 instead of type Array</message>
				<arguments>
					<argument>DomainType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="FunctionType2-Domain" testNumber="7"/>
			<description>Entry Domain in FunctionType2 is required</description>
			<test>containsDomain == true</test>
			<error>
				<message>Entry Domain in FunctionType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="FunctionType2-Domain-Array" testNumber="9"/>
			<description>Entry Domain with type Array in FunctionType2 shall satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</description>
			<test>DomainHasTypeArray != true || ((DomainArraySize % 2) == 0)</test>
			<error>
				<message>Entry Domain with type Array in FunctionType2 does not satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="FunctionType2-FunctionType" testNumber="8"/>
			<description>Entry FunctionType in FunctionType2 shall have type Integer</description>
			<test>containsFunctionType == false || FunctionTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FunctionType in FunctionType2 has type %1 instead of type Integer</message>
				<arguments>
					<argument>FunctionTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="FunctionType2-FunctionType" testNumber="7"/>
			<description>Entry FunctionType in FunctionType2 is required</description>
			<test>containsFunctionType == true</test>
			<error>
				<message>Entry FunctionType in FunctionType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="FunctionType2-FunctionType-Integer" testNumber="6"/>
			<description>Entry FunctionType with type Integer in FunctionType2 shall have value 2</description>
			<test>FunctionTypeHasTypeInteger != true || FunctionTypeIntegerValue == 2</test>
			<error>
				<message>Entry FunctionType with type Integer in FunctionType2 has incorrect value %1 instead of 2</message>
				<arguments>
					<argument>FunctionTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="FunctionType2-N" testNumber="8"/>
			<description>Entry N in FunctionType2 shall have type Number</description>
			<test>containsN == false || NHasTypeNumber == true</test>
			<error>
				<message>Entry N in FunctionType2 has type %1 instead of type Number</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="FunctionType2-N" testNumber="7"/>
			<description>Entry N in FunctionType2 is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in FunctionType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="FunctionType2-Range" testNumber="8"/>
			<description>Entry Range in FunctionType2 shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in FunctionType2 has type %1 instead of type Array</message>
				<arguments>
					<argument>RangeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="FunctionType2-Range-Array" testNumber="9"/>
			<description>Entry Range with type Array in FunctionType2 shall satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</description>
			<test>RangeHasTypeArray != true || ((RangeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Range with type Array in FunctionType2 does not satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3" testNumber="1"/>
			<description>FunctionType3 shall not contain entries except Bounds, Domain, Encode, FunctionType, Functions, Range</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Bounds' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Encode' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Functions' &amp;&amp; elem != 'Range' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FunctionType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Bounds' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Encode' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Functions' &amp;&amp; elem != 'Range' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-Bounds" testNumber="8"/>
			<description>Entry Bounds in FunctionType3 shall have type Array</description>
			<test>containsBounds == false || BoundsHasTypeArray == true</test>
			<error>
				<message>Entry Bounds in FunctionType3 has type %1 instead of type Array</message>
				<arguments>
					<argument>BoundsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-Bounds" testNumber="7"/>
			<description>Entry Bounds in FunctionType3 is required</description>
			<test>containsBounds == true</test>
			<error>
				<message>Entry Bounds in FunctionType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-Bounds-Array" testNumber="9"/>
			<description>Entry Bounds with type Array in FunctionType3 shall satisfy special case: fn:Eval(fn:ArrayLength(Bounds) == (fn:ArrayLength(Functions) - 1))</description>
			<test>BoundsHasTypeArray != true || (FunctionsHasTypeArray == false || BoundsArraySize == (FunctionsArraySize - 1))</test>
			<error>
				<message>Entry Bounds with type Array in FunctionType3 does not satisfy special case: fn:Eval(fn:ArrayLength(Bounds) == (fn:ArrayLength(Functions) - 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-Domain" testNumber="8"/>
			<description>Entry Domain in FunctionType3 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in FunctionType3 has type %1 instead of type Array</message>
				<arguments>
					<argument>DomainType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-Domain" testNumber="7"/>
			<description>Entry Domain in FunctionType3 is required</description>
			<test>containsDomain == true</test>
			<error>
				<message>Entry Domain in FunctionType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-Domain-Array" testNumber="9"/>
			<description>Entry Domain with type Array in FunctionType3 shall satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</description>
			<test>DomainHasTypeArray != true || ((DomainArraySize % 2) == 0)</test>
			<error>
				<message>Entry Domain with type Array in FunctionType3 does not satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-Encode" testNumber="8"/>
			<description>Entry Encode in FunctionType3 shall have type Array</description>
			<test>containsEncode == false || EncodeHasTypeArray == true</test>
			<error>
				<message>Entry Encode in FunctionType3 has type %1 instead of type Array</message>
				<arguments>
					<argument>EncodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-Encode" testNumber="7"/>
			<description>Entry Encode in FunctionType3 is required</description>
			<test>containsEncode == true</test>
			<error>
				<message>Entry Encode in FunctionType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-Encode-Array" testNumber="9"/>
			<description>Entry Encode with type Array in FunctionType3 shall satisfy special case: fn:Eval((fn:ArrayLength(Encode) mod 2) == 0)</description>
			<test>EncodeHasTypeArray != true || ((EncodeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Encode with type Array in FunctionType3 does not satisfy special case: fn:Eval((fn:ArrayLength(Encode) mod 2) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-FunctionType" testNumber="8"/>
			<description>Entry FunctionType in FunctionType3 shall have type Integer</description>
			<test>containsFunctionType == false || FunctionTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FunctionType in FunctionType3 has type %1 instead of type Integer</message>
				<arguments>
					<argument>FunctionTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-FunctionType" testNumber="7"/>
			<description>Entry FunctionType in FunctionType3 is required</description>
			<test>containsFunctionType == true</test>
			<error>
				<message>Entry FunctionType in FunctionType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-FunctionType-Integer" testNumber="6"/>
			<description>Entry FunctionType with type Integer in FunctionType3 shall have value 3</description>
			<test>FunctionTypeHasTypeInteger != true || FunctionTypeIntegerValue == 3</test>
			<error>
				<message>Entry FunctionType with type Integer in FunctionType3 has incorrect value %1 instead of 3</message>
				<arguments>
					<argument>FunctionTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-Functions" testNumber="8"/>
			<description>Entry Functions in FunctionType3 shall have type Array</description>
			<test>containsFunctions == false || FunctionsHasTypeArray == true</test>
			<error>
				<message>Entry Functions in FunctionType3 has type %1 instead of type Array</message>
				<arguments>
					<argument>FunctionsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-Functions" testNumber="7"/>
			<description>Entry Functions in FunctionType3 is required</description>
			<test>containsFunctions == true</test>
			<error>
				<message>Entry Functions in FunctionType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-Functions-Array" testNumber="9"/>
			<description>Entry Functions with type Array in FunctionType3 shall satisfy special case: fn:Eval(fn:ArrayLength(Functions) == (fn:ArrayLength(Bounds) + 1))</description>
			<test>FunctionsHasTypeArray != true || (BoundsHasTypeArray == false || FunctionsArraySize == (BoundsArraySize + 1))</test>
			<error>
				<message>Entry Functions with type Array in FunctionType3 does not satisfy special case: fn:Eval(fn:ArrayLength(Functions) == (fn:ArrayLength(Bounds) + 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-Range" testNumber="8"/>
			<description>Entry Range in FunctionType3 shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in FunctionType3 has type %1 instead of type Array</message>
				<arguments>
					<argument>RangeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="FunctionType3-Range-Array" testNumber="9"/>
			<description>Entry Range with type Array in FunctionType3 shall satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</description>
			<test>RangeHasTypeArray != true || ((RangeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Range with type Array in FunctionType3 does not satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4" testNumber="1"/>
			<description>FunctionType4 shall not contain entries except DL, DecodeParms, Domain, F, FDecodeParms, FFilter, Filter, FunctionType, Length, Range</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Range' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>FunctionType4 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Range' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-DL" testNumber="8"/>
			<description>Entry DL in FunctionType4 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FunctionType4 has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in FunctionType4 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FunctionType4 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in FunctionType4 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FunctionType4 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in FunctionType4 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FunctionType4 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in FunctionType4 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FunctionType4 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-Domain" testNumber="8"/>
			<description>Entry Domain in FunctionType4 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in FunctionType4 has type %1 instead of type Array</message>
				<arguments>
					<argument>DomainType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-Domain" testNumber="7"/>
			<description>Entry Domain in FunctionType4 is required</description>
			<test>containsDomain == true</test>
			<error>
				<message>Entry Domain in FunctionType4 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-Domain-Array" testNumber="9"/>
			<description>Entry Domain with type Array in FunctionType4 shall satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</description>
			<test>DomainHasTypeArray != true || ((DomainArraySize % 2) == 0)</test>
			<error>
				<message>Entry Domain with type Array in FunctionType4 does not satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-F" testNumber="8"/>
			<description>Entry F in FunctionType4 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in FunctionType4 has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in FunctionType4 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FunctionType4 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in FunctionType4 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FunctionType4 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in FunctionType4 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FunctionType4 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-FFilter" testNumber="8"/>
			<description>Entry FFilter in FunctionType4 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FunctionType4 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in FunctionType4 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FunctionType4 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in FunctionType4 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FunctionType4 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-Filter" testNumber="8"/>
			<description>Entry Filter in FunctionType4 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FunctionType4 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in FunctionType4 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FunctionType4 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in FunctionType4 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FunctionType4 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-FunctionType" testNumber="8"/>
			<description>Entry FunctionType in FunctionType4 shall have type Integer</description>
			<test>containsFunctionType == false || FunctionTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FunctionType in FunctionType4 has type %1 instead of type Integer</message>
				<arguments>
					<argument>FunctionTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-FunctionType" testNumber="7"/>
			<description>Entry FunctionType in FunctionType4 is required</description>
			<test>containsFunctionType == true</test>
			<error>
				<message>Entry FunctionType in FunctionType4 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-FunctionType-Integer" testNumber="6"/>
			<description>Entry FunctionType with type Integer in FunctionType4 shall have value 4</description>
			<test>FunctionTypeHasTypeInteger != true || FunctionTypeIntegerValue == 4</test>
			<error>
				<message>Entry FunctionType with type Integer in FunctionType4 has incorrect value %1 instead of 4</message>
				<arguments>
					<argument>FunctionTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-Length" testNumber="8"/>
			<description>Entry Length in FunctionType4 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FunctionType4 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-Length" testNumber="7"/>
			<description>Entry Length in FunctionType4 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FunctionType4 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-Range" testNumber="8"/>
			<description>Entry Range in FunctionType4 shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in FunctionType4 has type %1 instead of type Array</message>
				<arguments>
					<argument>RangeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-Range" testNumber="7"/>
			<description>Entry Range in FunctionType4 is required</description>
			<test>containsRange == true</test>
			<error>
				<message>Entry Range in FunctionType4 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="FunctionType4-Range-Array" testNumber="9"/>
			<description>Entry Range with type Array in FunctionType4 shall satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</description>
			<test>RangeHasTypeArray != true || ((RangeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Range with type Array in FunctionType4 does not satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGTS_ProcStepsGroup">
			<id specification="ISO_32000_1_7" clause="GTS_ProcStepsGroup" testNumber="1"/>
			<description>GTS_ProcStepsGroup shall not contain entries except GTS_ProcStepsGroup, GTS_ProcStepsType, GWG__ProcStepsColorants</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'GTS_ProcStepsGroup' &amp;&amp; elem != 'GTS_ProcStepsType' &amp;&amp; elem != 'GWG__ProcStepsColorants' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>GTS_ProcStepsGroup contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'GTS_ProcStepsGroup' &amp;&amp; elem != 'GTS_ProcStepsType' &amp;&amp; elem != 'GWG__ProcStepsColorants' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGTS_ProcStepsGroup">
			<id specification="ISO_32000_1_7" clause="GTS_ProcStepsGroup-GTS_ProcStepsGroup" testNumber="8"/>
			<description>Entry GTS_ProcStepsGroup in GTS_ProcStepsGroup shall have type Name</description>
			<test>containsGTS_ProcStepsGroup == false || GTS_ProcStepsGroupHasTypeName == true</test>
			<error>
				<message>Entry GTS_ProcStepsGroup in GTS_ProcStepsGroup has type %1 instead of type Name</message>
				<arguments>
					<argument>GTS_ProcStepsGroupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGTS_ProcStepsGroup">
			<id specification="ISO_32000_1_7" clause="GTS_ProcStepsGroup-GTS_ProcStepsGroup" testNumber="7"/>
			<description>Entry GTS_ProcStepsGroup in GTS_ProcStepsGroup is required</description>
			<test>containsGTS_ProcStepsGroup == true</test>
			<error>
				<message>Entry GTS_ProcStepsGroup in GTS_ProcStepsGroup is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGTS_ProcStepsGroup">
			<id specification="ISO_32000_1_7" clause="GTS_ProcStepsGroup-GTS_ProcStepsGroup" testNumber="23"/>
			<description>Entry GTS_ProcStepsGroup in GTS_ProcStepsGroup can only be present, if satisfy predicate fn:Extension(ISO_19593)</description>
			<test>containsGTS_ProcStepsGroup == false || hasExtensionISO_19593 == true</test>
			<error>
				<message>Entry GTS_ProcStepsGroup in GTS_ProcStepsGroup is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGTS_ProcStepsGroup">
			<id specification="ISO_32000_1_7" clause="GTS_ProcStepsGroup-GTS_ProcStepsGroup-Name" testNumber="6"/>
			<description>Entry GTS_ProcStepsGroup with type Name in GTS_ProcStepsGroup shall have one of values: Braille, Legend, GWG__Primer, White, Structural, Positions, Dimensions, GWG__PlateMaking, Varnish</description>
			<test>GTS_ProcStepsGroupHasTypeName != true || GTS_ProcStepsGroupNameValue == "Structural" || GTS_ProcStepsGroupNameValue == "Dimensions" || GTS_ProcStepsGroupNameValue == "Braille" || GTS_ProcStepsGroupNameValue == "Legend" || GTS_ProcStepsGroupNameValue == "Positions" || GTS_ProcStepsGroupNameValue == "White" || GTS_ProcStepsGroupNameValue == "Varnish" || GTS_ProcStepsGroupNameValue == "GWG__Primer" || GTS_ProcStepsGroupNameValue == "GWG__PlateMaking"</test>
			<error>
				<message>Entry GTS_ProcStepsGroup with type Name in GTS_ProcStepsGroup has incorrect value %1 instead of Braille, Legend, GWG__Primer, White, Structural, Positions, Dimensions, GWG__PlateMaking, Varnish</message>
				<arguments>
					<argument>GTS_ProcStepsGroupNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGTS_ProcStepsGroup">
			<id specification="ISO_32000_1_7" clause="GTS_ProcStepsGroup-GTS_ProcStepsType" testNumber="8"/>
			<description>Entry GTS_ProcStepsType in GTS_ProcStepsGroup shall have type Name</description>
			<test>containsGTS_ProcStepsType == false || GTS_ProcStepsTypeHasTypeName == true</test>
			<error>
				<message>Entry GTS_ProcStepsType in GTS_ProcStepsGroup has type %1 instead of type Name</message>
				<arguments>
					<argument>GTS_ProcStepsTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGTS_ProcStepsGroup">
			<id specification="ISO_32000_1_7" clause="GTS_ProcStepsGroup-GTS_ProcStepsType" testNumber="23"/>
			<description>Entry GTS_ProcStepsType in GTS_ProcStepsGroup can only be present, if satisfy predicate fn:Extension(ISO_19593)</description>
			<test>containsGTS_ProcStepsType == false || hasExtensionISO_19593 == true</test>
			<error>
				<message>Entry GTS_ProcStepsType in GTS_ProcStepsGroup is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGTS_ProcStepsGroup">
			<id specification="ISO_32000_1_7" clause="GTS_ProcStepsGroup-GTS_ProcStepsType-Name" testNumber="6"/>
			<description>Entry GTS_ProcStepsType with type Name in GTS_ProcStepsGroup shall have one of values: Hologram, Gluing, ReverseCreasing, VarnishFree, GWG__StationInfo, Bleed, CodingMarking, Debossing, Cutting, ReversePartialCuttingCreasing, Stapling, Imprinting, Folding, PartialCuttingCreasing, Drilling, Creasing, FoilStamping, Embossing, Punching, GWG__OverstepArea, InkVarnishFree, ContentArea, GWG__Cutting, CuttingCreasing, Perforating, PartialCutting, ReverseCuttingCreasing, InkFree, ColdFoilStamping, Barcode, GWG__Bleed, ReversePartialCutting, GWG__NoMark, GWG__PlateStamping</description>
			<test>GTS_ProcStepsTypeHasTypeName != true || GTS_ProcStepsTypeNameValue == "Cutting" || GTS_ProcStepsTypeNameValue == "PartialCutting" || GTS_ProcStepsTypeNameValue == "ReversePartialCutting" || GTS_ProcStepsTypeNameValue == "Creasing" || GTS_ProcStepsTypeNameValue == "ReverseCreasing" || GTS_ProcStepsTypeNameValue == "CuttingCreasing" || GTS_ProcStepsTypeNameValue == "ReverseCuttingCreasing" || GTS_ProcStepsTypeNameValue == "PartialCuttingCreasing" || GTS_ProcStepsTypeNameValue == "ReversePartialCuttingCreasing" || GTS_ProcStepsTypeNameValue == "Drilling" || GTS_ProcStepsTypeNameValue == "Gluing" || GTS_ProcStepsTypeNameValue == "FoilStamping" || GTS_ProcStepsTypeNameValue == "ColdFoilStamping" || GTS_ProcStepsTypeNameValue == "Embossing" || GTS_ProcStepsTypeNameValue == "Debossing" || GTS_ProcStepsTypeNameValue == "Perforating" || GTS_ProcStepsTypeNameValue == "Bleed" || GTS_ProcStepsTypeNameValue == "VarnishFree" || GTS_ProcStepsTypeNameValue == "InkFree" || GTS_ProcStepsTypeNameValue == "InkVarnishFree" || GTS_ProcStepsTypeNameValue == "Folding" || GTS_ProcStepsTypeNameValue == "Punching" || GTS_ProcStepsTypeNameValue == "Stapling" || GTS_ProcStepsTypeNameValue == "Hologram" || GTS_ProcStepsTypeNameValue == "Barcode" || GTS_ProcStepsTypeNameValue == "ContentArea" || GTS_ProcStepsTypeNameValue == "CodingMarking" || GTS_ProcStepsTypeNameValue == "Imprinting" || GTS_ProcStepsTypeNameValue == "GWG__StationInfo" || GTS_ProcStepsTypeNameValue == "GWG__PlateStamping" || GTS_ProcStepsTypeNameValue == "GWG__OverstepArea" || GTS_ProcStepsTypeNameValue == "GWG__Cutting" || GTS_ProcStepsTypeNameValue == "GWG__Bleed" || GTS_ProcStepsTypeNameValue == "GWG__NoMark"</test>
			<error>
				<message>Entry GTS_ProcStepsType with type Name in GTS_ProcStepsGroup has incorrect value %1 instead of Hologram, Gluing, ReverseCreasing, VarnishFree, GWG__StationInfo, Bleed, CodingMarking, Debossing, Cutting, ReversePartialCuttingCreasing, Stapling, Imprinting, Folding, PartialCuttingCreasing, Drilling, Creasing, FoilStamping, Embossing, Punching, GWG__OverstepArea, InkVarnishFree, ContentArea, GWG__Cutting, CuttingCreasing, Perforating, PartialCutting, ReverseCuttingCreasing, InkFree, ColdFoilStamping, Barcode, GWG__Bleed, ReversePartialCutting, GWG__NoMark, GWG__PlateStamping</message>
				<arguments>
					<argument>GTS_ProcStepsTypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGTS_ProcStepsGroup">
			<id specification="ISO_32000_1_7" clause="GTS_ProcStepsGroup-GWG__ProcStepsColorants" testNumber="8"/>
			<description>Entry GWG__ProcStepsColorants in GTS_ProcStepsGroup shall have type Name</description>
			<test>containsGWG__ProcStepsColorants == false || GWG__ProcStepsColorantsHasTypeName == true</test>
			<error>
				<message>Entry GWG__ProcStepsColorants in GTS_ProcStepsGroup has type %1 instead of type Name</message>
				<arguments>
					<argument>GWG__ProcStepsColorantsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGTS_ProcStepsGroup">
			<id specification="ISO_32000_1_7" clause="GTS_ProcStepsGroup-GWG__ProcStepsColorants" testNumber="23"/>
			<description>Entry GWG__ProcStepsColorants in GTS_ProcStepsGroup can only be present, if satisfy predicate fn:Extension(ISO_19593)</description>
			<test>containsGWG__ProcStepsColorants == false || hasExtensionISO_19593 == true</test>
			<error>
				<message>Entry GWG__ProcStepsColorants in GTS_ProcStepsGroup is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_7" clause="GammaArray" testNumber="2"/>
			<description>GammaArray shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>GammaArray contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_7" clause="GammaArray-0" testNumber="8"/>
			<description>Entry 0 in GammaArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in GammaArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_7" clause="GammaArray-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in GammaArray shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in GammaArray does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_7" clause="GammaArray-1" testNumber="8"/>
			<description>Entry 1 in GammaArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in GammaArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_7" clause="GammaArray-1-Number" testNumber="14"/>
			<description>Entry 1 with type Number in GammaArray shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in GammaArray does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_7" clause="GammaArray-2" testNumber="8"/>
			<description>Entry 2 in GammaArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in GammaArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_7" clause="GammaArray-2-Number" testNumber="14"/>
			<description>Entry 2 with type Number in GammaArray shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in GammaArray does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="GeographicCoordinateSystem" testNumber="1"/>
			<description>GeographicCoordinateSystem shall not contain entries except EPSG, Type, WKT</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'EPSG' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'WKT' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>GeographicCoordinateSystem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'EPSG' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'WKT' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="GeographicCoordinateSystem-EPSG" testNumber="8"/>
			<description>Entry EPSG in GeographicCoordinateSystem shall have type Integer</description>
			<test>containsEPSG == false || EPSGHasTypeInteger == true</test>
			<error>
				<message>Entry EPSG in GeographicCoordinateSystem has type %1 instead of type Integer</message>
				<arguments>
					<argument>EPSGType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="GeographicCoordinateSystem-EPSG" testNumber="23"/>
			<description>Entry EPSG in GeographicCoordinateSystem can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsEPSG == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry EPSG in GeographicCoordinateSystem is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="GeographicCoordinateSystem-EPSG-Integer" testNumber="9"/>
			<description>Entry EPSG with type Integer in GeographicCoordinateSystem shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(WKT)))</description>
			<test>EPSGHasTypeInteger != true || (containsWKT != true)</test>
			<error>
				<message>Entry EPSG with type Integer in GeographicCoordinateSystem does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(WKT)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="GeographicCoordinateSystem-Type" testNumber="8"/>
			<description>Entry Type in GeographicCoordinateSystem shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in GeographicCoordinateSystem has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="GeographicCoordinateSystem-Type" testNumber="7"/>
			<description>Entry Type in GeographicCoordinateSystem is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in GeographicCoordinateSystem is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="GeographicCoordinateSystem-Type" testNumber="23"/>
			<description>Entry Type in GeographicCoordinateSystem can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in GeographicCoordinateSystem is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="GeographicCoordinateSystem-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in GeographicCoordinateSystem shall have value GEOGCS</description>
			<test>TypeHasTypeName != true || TypeNameValue == "GEOGCS"</test>
			<error>
				<message>Entry Type with type Name in GeographicCoordinateSystem has incorrect value %1 instead of GEOGCS</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="GeographicCoordinateSystem-WKT" testNumber="8"/>
			<description>Entry WKT in GeographicCoordinateSystem shall have type StringAscii</description>
			<test>containsWKT == false || WKTHasTypeStringAscii == true</test>
			<error>
				<message>Entry WKT in GeographicCoordinateSystem has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>WKTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="GeographicCoordinateSystem-WKT" testNumber="23"/>
			<description>Entry WKT in GeographicCoordinateSystem can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsWKT == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry WKT in GeographicCoordinateSystem is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="GeographicCoordinateSystem-WKT-StringAscii" testNumber="9"/>
			<description>Entry WKT with type StringAscii in GeographicCoordinateSystem shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(EPSG)))</description>
			<test>WKTHasTypeStringAscii != true || (containsEPSG != true)</test>
			<error>
				<message>Entry WKT with type StringAscii in GeographicCoordinateSystem does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(EPSG)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter" testNumber="1"/>
			<description>GraphicsStateParameter shall not contain entries except AAPL:AA, AAPL:ST, AIS, BG, BG2, BM, CA, D, FL, Font, HT, HTP, LC, LJ, LW, ML, OP, OPM, RI, SA, SM, SMask, TK, TR, TR2, Type, UCR, UCR2, ca, op</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AAPL:AA' &amp;&amp; elem != 'AAPL:ST' &amp;&amp; elem != 'AIS' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'BG2' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'D' &amp;&amp; elem != 'FL' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'HT' &amp;&amp; elem != 'HTO' &amp;&amp; elem != 'HTP' &amp;&amp; elem != 'LC' &amp;&amp; elem != 'LJ' &amp;&amp; elem != 'LW' &amp;&amp; elem != 'ML' &amp;&amp; elem != 'OP' &amp;&amp; elem != 'OPM' &amp;&amp; elem != 'RI' &amp;&amp; elem != 'SA' &amp;&amp; elem != 'SM' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'TK' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'TR2' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UCR' &amp;&amp; elem != 'UCR2' &amp;&amp; elem != 'UseBlackPtComp' &amp;&amp; elem != 'ca' &amp;&amp; elem != 'op' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>GraphicsStateParameter contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AAPL:AA' &amp;&amp; elem != 'AAPL:ST' &amp;&amp; elem != 'AIS' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'BG2' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'D' &amp;&amp; elem != 'FL' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'HT' &amp;&amp; elem != 'HTO' &amp;&amp; elem != 'HTP' &amp;&amp; elem != 'LC' &amp;&amp; elem != 'LJ' &amp;&amp; elem != 'LW' &amp;&amp; elem != 'ML' &amp;&amp; elem != 'OP' &amp;&amp; elem != 'OPM' &amp;&amp; elem != 'RI' &amp;&amp; elem != 'SA' &amp;&amp; elem != 'SM' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'TK' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'TR2' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UCR' &amp;&amp; elem != 'UCR2' &amp;&amp; elem != 'UseBlackPtComp' &amp;&amp; elem != 'ca' &amp;&amp; elem != 'op' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter" testNumber="22"/>
			<description>GraphicsStateParameter shall not contain entries HTO, UseBlackPtComp in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'HTO' || elem == 'UseBlackPtComp').length == 0</test>
			<error>
				<message>GraphicsStateParameter contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'HTO' || elem == 'UseBlackPtComp').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-AAPL:AA" testNumber="8"/>
			<description>Entry AAPL:AA in GraphicsStateParameter shall have type Boolean</description>
			<test>containsAAPLAA == false || AAPLAAHasTypeBoolean == true</test>
			<error>
				<message>Entry AAPL:AA in GraphicsStateParameter has type %1 instead of type Boolean</message>
				<arguments>
					<argument>AAPLAAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-AAPL:AA" testNumber="23"/>
			<description>Entry AAPL:AA in GraphicsStateParameter can only be present, if satisfy predicate fn:Extension(AAPL, 1.2)</description>
			<test>containsAAPLAA == false || hasExtensionAAPL == true</test>
			<error>
				<message>Entry AAPL:AA in GraphicsStateParameter is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-AAPL:ST" testNumber="8"/>
			<description>Entry AAPL:ST in GraphicsStateParameter shall have one of types: Dictionary, Name</description>
			<test>containsAAPLST == false || AAPLSTHasTypeDictionary == true || AAPLSTHasTypeName == true</test>
			<error>
				<message>Entry AAPL:ST in GraphicsStateParameter has type %1 instead of one of types: Dictionary, Name</message>
				<arguments>
					<argument>AAPLSTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-AAPL:ST" testNumber="23"/>
			<description>Entry AAPL:ST in GraphicsStateParameter can only be present, if satisfy predicate fn:Extension(AAPL, 1.2)</description>
			<test>containsAAPLST == false || hasExtensionAAPL == true</test>
			<error>
				<message>Entry AAPL:ST in GraphicsStateParameter is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-AIS" testNumber="8"/>
			<description>Entry AIS in GraphicsStateParameter shall have type Boolean</description>
			<test>containsAIS == false || AISHasTypeBoolean == true</test>
			<error>
				<message>Entry AIS in GraphicsStateParameter has type %1 instead of type Boolean</message>
				<arguments>
					<argument>AISType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-BG-Dictionary" testNumber="17"/>
			<description>Entry BG with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>BGHasTypeDictionary != true || BG_size == 1</test>
			<error>
				<message>Entry BG with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-BG-Stream" testNumber="17"/>
			<description>Entry BG with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>BGHasTypeStream != true || BG_size == 1</test>
			<error>
				<message>Entry BG with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-BG" testNumber="8"/>
			<description>Entry BG in GraphicsStateParameter shall have one of types: Dictionary, Stream</description>
			<test>containsBG == false || BGHasTypeDictionary == true || BGHasTypeStream == true</test>
			<error>
				<message>Entry BG in GraphicsStateParameter has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>BGType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-BG-Stream" testNumber="10"/>
			<description>Entry BG with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>BGHasTypeStream != true || isBGIndirect == true</test>
			<error>
				<message>Entry BG with type Stream in GraphicsStateParameter is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-BG2-Dictionary" testNumber="17"/>
			<description>Entry BG2 with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>BG2HasTypeDictionary != true || BG2_size == 1</test>
			<error>
				<message>Entry BG2 with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-BG2-Stream" testNumber="17"/>
			<description>Entry BG2 with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>BG2HasTypeStream != true || BG2_size == 1</test>
			<error>
				<message>Entry BG2 with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-BG2" testNumber="8"/>
			<description>Entry BG2 in GraphicsStateParameter shall have one of types: Dictionary, Name, Stream</description>
			<test>containsBG2 == false || BG2HasTypeDictionary == true || BG2HasTypeName == true || BG2HasTypeStream == true</test>
			<error>
				<message>Entry BG2 in GraphicsStateParameter has type %1 instead of one of types: Dictionary, Name, Stream</message>
				<arguments>
					<argument>BG2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-BG2-Stream" testNumber="10"/>
			<description>Entry BG2 with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>BG2HasTypeStream != true || isBG2Indirect == true</test>
			<error>
				<message>Entry BG2 with type Stream in GraphicsStateParameter is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-BM" testNumber="8"/>
			<description>Entry BM in GraphicsStateParameter shall have one of types: Array, Name</description>
			<test>containsBM == false || BMHasTypeArray == true || BMHasTypeName == true</test>
			<error>
				<message>Entry BM in GraphicsStateParameter has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>BMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-BM-Name" testNumber="19"/>
			<description>Entry BM with type Name in GraphicsStateParameter should not have deprecated value Compatible</description>
			<test>BMNameValue != "Compatible"</test>
			<error>
				<message>Entry BM with type Name in GraphicsStateParameter has deprecated value Compatible</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-BM-Name" testNumber="6"/>
			<description>Entry BM with type Name in GraphicsStateParameter shall have one of values: Screen, ColorDodge, Saturation, Color, Luminosity, Darken, Difference, Compatible, Normal, SoftLight, ColorBurn, Multiply, Exclusion, HardLight, Hue, Overlay, Lighten</description>
			<test>BMHasTypeName != true || BMNameValue == "Compatible" || BMNameValue == "Normal" || BMNameValue == "Multiply" || BMNameValue == "Screen" || BMNameValue == "Difference" || BMNameValue == "Darken" || BMNameValue == "Lighten" || BMNameValue == "ColorDodge" || BMNameValue == "ColorBurn" || BMNameValue == "Exclusion" || BMNameValue == "HardLight" || BMNameValue == "Overlay" || BMNameValue == "SoftLight" || BMNameValue == "Luminosity" || BMNameValue == "Hue" || BMNameValue == "Saturation" || BMNameValue == "Color"</test>
			<error>
				<message>Entry BM with type Name in GraphicsStateParameter has incorrect value %1 instead of Screen, ColorDodge, Saturation, Color, Luminosity, Darken, Difference, Compatible, Normal, SoftLight, ColorBurn, Multiply, Exclusion, HardLight, Hue, Overlay, Lighten</message>
				<arguments>
					<argument>BMNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-CA" testNumber="8"/>
			<description>Entry CA in GraphicsStateParameter shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in GraphicsStateParameter has type %1 instead of type Number</message>
				<arguments>
					<argument>CAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-CA-Number" testNumber="14"/>
			<description>Entry CA with type Number in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0) &amp;&amp; (@CA &lt;= 1))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0) &amp;&amp; (CANumberValue &lt;= 1)</test>
			<error>
				<message>Entry CA with type Number in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0) &amp;&amp; (@CA &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-D" testNumber="8"/>
			<description>Entry D in GraphicsStateParameter shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in GraphicsStateParameter has type %1 instead of type Array</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-FL" testNumber="8"/>
			<description>Entry FL in GraphicsStateParameter shall have type Number</description>
			<test>containsFL == false || FLHasTypeNumber == true</test>
			<error>
				<message>Entry FL in GraphicsStateParameter has type %1 instead of type Number</message>
				<arguments>
					<argument>FLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-FL-Number" testNumber="14"/>
			<description>Entry FL with type Number in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval(@FL &gt; 0)</description>
			<test>FLHasTypeNumber != true || FLNumberValue &gt; 0</test>
			<error>
				<message>Entry FL with type Number in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval(@FL &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-Font" testNumber="8"/>
			<description>Entry Font in GraphicsStateParameter shall have type Array</description>
			<test>containsFont == false || FontHasTypeArray == true</test>
			<error>
				<message>Entry Font in GraphicsStateParameter has type %1 instead of type Array</message>
				<arguments>
					<argument>FontType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-HT-Dictionary" testNumber="17"/>
			<description>Entry HT with type Dictionary in GraphicsStateParameter shall be one of objects HalftoneType1, HalftoneType5</description>
			<test>HTHasTypeDictionary != true || HT_size == 1</test>
			<error>
				<message>Entry HT with type Dictionary in GraphicsStateParameter is not one of objects HalftoneType1, HalftoneType5</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-HT-Stream" testNumber="17"/>
			<description>Entry HT with type Stream in GraphicsStateParameter shall be one of objects HalftoneType6, HalftoneType10, HalftoneType16</description>
			<test>HTHasTypeStream != true || HT_size == 1</test>
			<error>
				<message>Entry HT with type Stream in GraphicsStateParameter is not one of objects HalftoneType6, HalftoneType10, HalftoneType16</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-HT" testNumber="8"/>
			<description>Entry HT in GraphicsStateParameter shall have one of types: Dictionary, Name, Stream</description>
			<test>containsHT == false || HTHasTypeDictionary == true || HTHasTypeName == true || HTHasTypeStream == true</test>
			<error>
				<message>Entry HT in GraphicsStateParameter has type %1 instead of one of types: Dictionary, Name, Stream</message>
				<arguments>
					<argument>HTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-HT-Stream" testNumber="10"/>
			<description>Entry HT with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>HTHasTypeStream != true || isHTIndirect == true</test>
			<error>
				<message>Entry HT with type Stream in GraphicsStateParameter is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-HTP" testNumber="8"/>
			<description>Entry HTP in GraphicsStateParameter shall have type Array</description>
			<test>containsHTP == false || HTPHasTypeArray == true</test>
			<error>
				<message>Entry HTP in GraphicsStateParameter has type %1 instead of type Array</message>
				<arguments>
					<argument>HTPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-HTP" testNumber="5"/>
			<description>Entry HTP in GraphicsStateParameter is deprecated since PDF 1.3</description>
			<test>containsHTP == false</test>
			<error>
				<message>Entry HTP in GraphicsStateParameter is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-LC" testNumber="8"/>
			<description>Entry LC in GraphicsStateParameter shall have type Integer</description>
			<test>containsLC == false || LCHasTypeInteger == true</test>
			<error>
				<message>Entry LC in GraphicsStateParameter has type %1 instead of type Integer</message>
				<arguments>
					<argument>LCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-LC-Integer" testNumber="14"/>
			<description>Entry LC with type Integer in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval((@LC &gt;= 0) &amp;&amp; (@LC &lt;= 2))</description>
			<test>LCHasTypeInteger != true || (LCIntegerValue &gt;= 0) &amp;&amp; (LCIntegerValue &lt;= 2)</test>
			<error>
				<message>Entry LC with type Integer in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval((@LC &gt;= 0) &amp;&amp; (@LC &lt;= 2))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-LJ" testNumber="8"/>
			<description>Entry LJ in GraphicsStateParameter shall have type Integer</description>
			<test>containsLJ == false || LJHasTypeInteger == true</test>
			<error>
				<message>Entry LJ in GraphicsStateParameter has type %1 instead of type Integer</message>
				<arguments>
					<argument>LJType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-LJ-Integer" testNumber="14"/>
			<description>Entry LJ with type Integer in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval((@LJ &gt;= 0) &amp;&amp; (@LJ &lt;= 2))</description>
			<test>LJHasTypeInteger != true || (LJIntegerValue &gt;= 0) &amp;&amp; (LJIntegerValue &lt;= 2)</test>
			<error>
				<message>Entry LJ with type Integer in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval((@LJ &gt;= 0) &amp;&amp; (@LJ &lt;= 2))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-LW" testNumber="8"/>
			<description>Entry LW in GraphicsStateParameter shall have type Number</description>
			<test>containsLW == false || LWHasTypeNumber == true</test>
			<error>
				<message>Entry LW in GraphicsStateParameter has type %1 instead of type Number</message>
				<arguments>
					<argument>LWType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-LW-Number" testNumber="14"/>
			<description>Entry LW with type Number in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval(@LW &gt;= 0)</description>
			<test>LWHasTypeNumber != true || LWNumberValue &gt;= 0</test>
			<error>
				<message>Entry LW with type Number in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval(@LW &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-ML" testNumber="8"/>
			<description>Entry ML in GraphicsStateParameter shall have type Number</description>
			<test>containsML == false || MLHasTypeNumber == true</test>
			<error>
				<message>Entry ML in GraphicsStateParameter has type %1 instead of type Number</message>
				<arguments>
					<argument>MLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-ML-Number" testNumber="14"/>
			<description>Entry ML with type Number in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval(@ML &gt;= 1)</description>
			<test>MLHasTypeNumber != true || MLNumberValue &gt;= 1</test>
			<error>
				<message>Entry ML with type Number in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval(@ML &gt;= 1)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-OP" testNumber="8"/>
			<description>Entry OP in GraphicsStateParameter shall have type Boolean</description>
			<test>containsOP == false || OPHasTypeBoolean == true</test>
			<error>
				<message>Entry OP in GraphicsStateParameter has type %1 instead of type Boolean</message>
				<arguments>
					<argument>OPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-OPM" testNumber="8"/>
			<description>Entry OPM in GraphicsStateParameter shall have type Integer</description>
			<test>containsOPM == false || OPMHasTypeInteger == true</test>
			<error>
				<message>Entry OPM in GraphicsStateParameter has type %1 instead of type Integer</message>
				<arguments>
					<argument>OPMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-OPM-Integer" testNumber="14"/>
			<description>Entry OPM with type Integer in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval((@OPM &gt;= 0) &amp;&amp; (@OPM &lt;= 1))</description>
			<test>OPMHasTypeInteger != true || (OPMIntegerValue &gt;= 0) &amp;&amp; (OPMIntegerValue &lt;= 1)</test>
			<error>
				<message>Entry OPM with type Integer in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval((@OPM &gt;= 0) &amp;&amp; (@OPM &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-RI" testNumber="8"/>
			<description>Entry RI in GraphicsStateParameter shall have type Name</description>
			<test>containsRI == false || RIHasTypeName == true</test>
			<error>
				<message>Entry RI in GraphicsStateParameter has type %1 instead of type Name</message>
				<arguments>
					<argument>RIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-RI-Name" testNumber="6"/>
			<description>Entry RI with type Name in GraphicsStateParameter shall have one of values: AbsoluteColorimetric, Perceptual, Saturation, RelativeColorimetric</description>
			<test>RIHasTypeName != true || RINameValue == "AbsoluteColorimetric" || RINameValue == "RelativeColorimetric" || RINameValue == "Saturation" || RINameValue == "Perceptual"</test>
			<error>
				<message>Entry RI with type Name in GraphicsStateParameter has incorrect value %1 instead of AbsoluteColorimetric, Perceptual, Saturation, RelativeColorimetric</message>
				<arguments>
					<argument>RINameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-SA" testNumber="8"/>
			<description>Entry SA in GraphicsStateParameter shall have type Boolean</description>
			<test>containsSA == false || SAHasTypeBoolean == true</test>
			<error>
				<message>Entry SA in GraphicsStateParameter has type %1 instead of type Boolean</message>
				<arguments>
					<argument>SAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-SM" testNumber="8"/>
			<description>Entry SM in GraphicsStateParameter shall have type Number</description>
			<test>containsSM == false || SMHasTypeNumber == true</test>
			<error>
				<message>Entry SM in GraphicsStateParameter has type %1 instead of type Number</message>
				<arguments>
					<argument>SMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-SM-Number" testNumber="14"/>
			<description>Entry SM with type Number in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval((@SM &gt;= 0) &amp;&amp; (@SM &lt;= 1))</description>
			<test>SMHasTypeNumber != true || (SMNumberValue &gt;= 0) &amp;&amp; (SMNumberValue &lt;= 1)</test>
			<error>
				<message>Entry SM with type Number in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval((@SM &gt;= 0) &amp;&amp; (@SM &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-SMask-Dictionary" testNumber="17"/>
			<description>Entry SMask with type Dictionary in GraphicsStateParameter shall be one of objects SoftMaskAlpha, SoftMaskLuminosity</description>
			<test>SMaskHasTypeDictionary != true || SMask_size == 1</test>
			<error>
				<message>Entry SMask with type Dictionary in GraphicsStateParameter is not one of objects SoftMaskAlpha, SoftMaskLuminosity</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-SMask" testNumber="8"/>
			<description>Entry SMask in GraphicsStateParameter shall have one of types: Dictionary, Name</description>
			<test>containsSMask == false || SMaskHasTypeDictionary == true || SMaskHasTypeName == true</test>
			<error>
				<message>Entry SMask in GraphicsStateParameter has type %1 instead of one of types: Dictionary, Name</message>
				<arguments>
					<argument>SMaskType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-SMask-Name" testNumber="6"/>
			<description>Entry SMask with type Name in GraphicsStateParameter shall have value None</description>
			<test>SMaskHasTypeName != true || SMaskNameValue == "None"</test>
			<error>
				<message>Entry SMask with type Name in GraphicsStateParameter has incorrect value %1 instead of None</message>
				<arguments>
					<argument>SMaskNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-TK" testNumber="8"/>
			<description>Entry TK in GraphicsStateParameter shall have type Boolean</description>
			<test>containsTK == false || TKHasTypeBoolean == true</test>
			<error>
				<message>Entry TK in GraphicsStateParameter has type %1 instead of type Boolean</message>
				<arguments>
					<argument>TKType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-TR-Dictionary" testNumber="17"/>
			<description>Entry TR with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>TRHasTypeDictionary != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-TR-Stream" testNumber="17"/>
			<description>Entry TR with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>TRHasTypeStream != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-TR" testNumber="8"/>
			<description>Entry TR in GraphicsStateParameter shall have one of types: Array, Dictionary, Name, Stream</description>
			<test>containsTR == false || TRHasTypeArray == true || TRHasTypeDictionary == true || TRHasTypeName == true || TRHasTypeStream == true</test>
			<error>
				<message>Entry TR in GraphicsStateParameter has type %1 instead of one of types: Array, Dictionary, Name, Stream</message>
				<arguments>
					<argument>TRType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-TR-Stream" testNumber="10"/>
			<description>Entry TR with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>TRHasTypeStream != true || isTRIndirect == true</test>
			<error>
				<message>Entry TR with type Stream in GraphicsStateParameter is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-TR2-Dictionary" testNumber="17"/>
			<description>Entry TR2 with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>TR2HasTypeDictionary != true || TR2_size == 1</test>
			<error>
				<message>Entry TR2 with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-TR2-Stream" testNumber="17"/>
			<description>Entry TR2 with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>TR2HasTypeStream != true || TR2_size == 1</test>
			<error>
				<message>Entry TR2 with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-TR2" testNumber="8"/>
			<description>Entry TR2 in GraphicsStateParameter shall have one of types: Array, Dictionary, Name, Stream</description>
			<test>containsTR2 == false || TR2HasTypeArray == true || TR2HasTypeDictionary == true || TR2HasTypeName == true || TR2HasTypeStream == true</test>
			<error>
				<message>Entry TR2 in GraphicsStateParameter has type %1 instead of one of types: Array, Dictionary, Name, Stream</message>
				<arguments>
					<argument>TR2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-TR2-Stream" testNumber="10"/>
			<description>Entry TR2 with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>TR2HasTypeStream != true || isTR2Indirect == true</test>
			<error>
				<message>Entry TR2 with type Stream in GraphicsStateParameter is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-Type" testNumber="8"/>
			<description>Entry Type in GraphicsStateParameter shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in GraphicsStateParameter has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in GraphicsStateParameter shall have value ExtGState</description>
			<test>TypeHasTypeName != true || TypeNameValue == "ExtGState"</test>
			<error>
				<message>Entry Type with type Name in GraphicsStateParameter has incorrect value %1 instead of ExtGState</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-UCR-Dictionary" testNumber="17"/>
			<description>Entry UCR with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>UCRHasTypeDictionary != true || UCR_size == 1</test>
			<error>
				<message>Entry UCR with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-UCR-Stream" testNumber="17"/>
			<description>Entry UCR with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>UCRHasTypeStream != true || UCR_size == 1</test>
			<error>
				<message>Entry UCR with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-UCR" testNumber="8"/>
			<description>Entry UCR in GraphicsStateParameter shall have one of types: Dictionary, Stream</description>
			<test>containsUCR == false || UCRHasTypeDictionary == true || UCRHasTypeStream == true</test>
			<error>
				<message>Entry UCR in GraphicsStateParameter has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>UCRType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-UCR-Stream" testNumber="10"/>
			<description>Entry UCR with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>UCRHasTypeStream != true || isUCRIndirect == true</test>
			<error>
				<message>Entry UCR with type Stream in GraphicsStateParameter is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-UCR2-Dictionary" testNumber="17"/>
			<description>Entry UCR2 with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>UCR2HasTypeDictionary != true || UCR2_size == 1</test>
			<error>
				<message>Entry UCR2 with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-UCR2-Stream" testNumber="17"/>
			<description>Entry UCR2 with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>UCR2HasTypeStream != true || UCR2_size == 1</test>
			<error>
				<message>Entry UCR2 with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-UCR2" testNumber="8"/>
			<description>Entry UCR2 in GraphicsStateParameter shall have one of types: Dictionary, Name, Stream</description>
			<test>containsUCR2 == false || UCR2HasTypeDictionary == true || UCR2HasTypeName == true || UCR2HasTypeStream == true</test>
			<error>
				<message>Entry UCR2 in GraphicsStateParameter has type %1 instead of one of types: Dictionary, Name, Stream</message>
				<arguments>
					<argument>UCR2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-UCR2-Stream" testNumber="10"/>
			<description>Entry UCR2 with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>UCR2HasTypeStream != true || isUCR2Indirect == true</test>
			<error>
				<message>Entry UCR2 with type Stream in GraphicsStateParameter is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-ca" testNumber="8"/>
			<description>Entry ca in GraphicsStateParameter shall have type Number</description>
			<test>containsca == false || caHasTypeNumber == true</test>
			<error>
				<message>Entry ca in GraphicsStateParameter has type %1 instead of type Number</message>
				<arguments>
					<argument>caType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-ca-Number" testNumber="14"/>
			<description>Entry ca with type Number in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval((@ca &gt;= 0) &amp;&amp; (@ca &lt;= 1))</description>
			<test>caHasTypeNumber != true || (caNumberValue &gt;= 0) &amp;&amp; (caNumberValue &lt;= 1)</test>
			<error>
				<message>Entry ca with type Number in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval((@ca &gt;= 0) &amp;&amp; (@ca &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameter-op" testNumber="8"/>
			<description>Entry op in GraphicsStateParameter shall have type Boolean</description>
			<test>containsop == false || opHasTypeBoolean == true</test>
			<error>
				<message>Entry op in GraphicsStateParameter has type %1 instead of type Boolean</message>
				<arguments>
					<argument>opType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameterMapEntry">
			<id specification="ISO_32000_1_7" clause="GraphicsStateParameterMapEntry" testNumber="8"/>
			<description>Entry in GraphicsStateParameterMap shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in GraphicsStateParameterMap has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="GroupAttributes" testNumber="1"/>
			<description>GroupAttributes shall not contain entries except CS, I, K, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CS' &amp;&amp; elem != 'I' &amp;&amp; elem != 'K' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>GroupAttributes contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CS' &amp;&amp; elem != 'I' &amp;&amp; elem != 'K' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="GroupAttributes-CS-Array" testNumber="17"/>
			<description>Entry CS with type Array in GroupAttributes shall be one of objects CalGrayColorSpace, CalRGBColorSpace, ICCBasedColorSpace</description>
			<test>CSHasTypeArray != true || CS_size == 1</test>
			<error>
				<message>Entry CS with type Array in GroupAttributes is not one of objects CalGrayColorSpace, CalRGBColorSpace, ICCBasedColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="GroupAttributes-CS" testNumber="8"/>
			<description>Entry CS in GroupAttributes shall have one of types: Array, Name</description>
			<test>containsCS == false || CSHasTypeArray == true || CSHasTypeName == true</test>
			<error>
				<message>Entry CS in GroupAttributes has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>CSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="GroupAttributes-CS-Name" testNumber="6"/>
			<description>Entry CS with type Name in GroupAttributes shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>CSHasTypeName != true || CSNameValue == "DeviceCMYK" || CSNameValue == "DeviceRGB" || CSNameValue == "DeviceGray"</test>
			<error>
				<message>Entry CS with type Name in GroupAttributes has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>CSNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="GroupAttributes-I" testNumber="8"/>
			<description>Entry I in GroupAttributes shall have type Boolean</description>
			<test>containsI == false || IHasTypeBoolean == true</test>
			<error>
				<message>Entry I in GroupAttributes has type %1 instead of type Boolean</message>
				<arguments>
					<argument>IType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="GroupAttributes-K" testNumber="8"/>
			<description>Entry K in GroupAttributes shall have type Boolean</description>
			<test>containsK == false || KHasTypeBoolean == true</test>
			<error>
				<message>Entry K in GroupAttributes has type %1 instead of type Boolean</message>
				<arguments>
					<argument>KType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="GroupAttributes-S" testNumber="8"/>
			<description>Entry S in GroupAttributes shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in GroupAttributes has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="GroupAttributes-S" testNumber="7"/>
			<description>Entry S in GroupAttributes is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in GroupAttributes is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="GroupAttributes-S-Name" testNumber="6"/>
			<description>Entry S with type Name in GroupAttributes shall have value Transparency</description>
			<test>SHasTypeName != true || SNameValue == "Transparency"</test>
			<error>
				<message>Entry S with type Name in GroupAttributes has incorrect value %1 instead of Transparency</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="GroupAttributes-Type" testNumber="8"/>
			<description>Entry Type in GroupAttributes shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in GroupAttributes has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="GroupAttributes-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in GroupAttributes shall have value Group</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Group"</test>
			<error>
				<message>Entry Type with type Name in GroupAttributes has incorrect value %1 instead of Group</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1" testNumber="1"/>
			<description>HalftoneType1 shall not contain entries except AccurateScreens, Angle, Frequency, HalftoneName, HalftoneType, SpotFunction, TransferFunction, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AccurateScreens' &amp;&amp; elem != 'Angle' &amp;&amp; elem != 'Frequency' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'SpotFunction' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>HalftoneType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AccurateScreens' &amp;&amp; elem != 'Angle' &amp;&amp; elem != 'Frequency' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'SpotFunction' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-AccurateScreens" testNumber="8"/>
			<description>Entry AccurateScreens in HalftoneType1 shall have type Boolean</description>
			<test>containsAccurateScreens == false || AccurateScreensHasTypeBoolean == true</test>
			<error>
				<message>Entry AccurateScreens in HalftoneType1 has type %1 instead of type Boolean</message>
				<arguments>
					<argument>AccurateScreensType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-Angle" testNumber="8"/>
			<description>Entry Angle in HalftoneType1 shall have type Number</description>
			<test>containsAngle == false || AngleHasTypeNumber == true</test>
			<error>
				<message>Entry Angle in HalftoneType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>AngleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-Angle" testNumber="7"/>
			<description>Entry Angle in HalftoneType1 is required</description>
			<test>containsAngle == true</test>
			<error>
				<message>Entry Angle in HalftoneType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-Frequency" testNumber="8"/>
			<description>Entry Frequency in HalftoneType1 shall have type Number</description>
			<test>containsFrequency == false || FrequencyHasTypeNumber == true</test>
			<error>
				<message>Entry Frequency in HalftoneType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>FrequencyType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-Frequency" testNumber="7"/>
			<description>Entry Frequency in HalftoneType1 is required</description>
			<test>containsFrequency == true</test>
			<error>
				<message>Entry Frequency in HalftoneType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-Frequency-Number" testNumber="14"/>
			<description>Entry Frequency with type Number in HalftoneType1 shall satisfy possible value predicate: fn:Eval(@Frequency &gt;= 0)</description>
			<test>FrequencyHasTypeNumber != true || FrequencyNumberValue &gt;= 0</test>
			<error>
				<message>Entry Frequency with type Number in HalftoneType1 does not satisfy possible value predicate: fn:Eval(@Frequency &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-HalftoneName" testNumber="8"/>
			<description>Entry HalftoneName in HalftoneType1 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType1 has type %1 instead of type StringByte</message>
				<arguments>
					<argument>HalftoneNameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-HalftoneType" testNumber="8"/>
			<description>Entry HalftoneType in HalftoneType1 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>HalftoneTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-HalftoneType" testNumber="7"/>
			<description>Entry HalftoneType in HalftoneType1 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-HalftoneType-Integer" testNumber="6"/>
			<description>Entry HalftoneType with type Integer in HalftoneType1 shall have value 1</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 1</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType1 has incorrect value %1 instead of 1</message>
				<arguments>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-SpotFunction-Dictionary" testNumber="17"/>
			<description>Entry SpotFunction with type Dictionary in HalftoneType1 shall be one of objects FunctionType2, FunctionType3</description>
			<test>SpotFunctionHasTypeDictionary != true || SpotFunction_size == 1</test>
			<error>
				<message>Entry SpotFunction with type Dictionary in HalftoneType1 is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-SpotFunction-Stream" testNumber="17"/>
			<description>Entry SpotFunction with type Stream in HalftoneType1 shall be one of objects FunctionType0, FunctionType4</description>
			<test>SpotFunctionHasTypeStream != true || SpotFunction_size == 1</test>
			<error>
				<message>Entry SpotFunction with type Stream in HalftoneType1 is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-SpotFunction" testNumber="8"/>
			<description>Entry SpotFunction in HalftoneType1 shall have one of types: Array, Dictionary, Name, Stream</description>
			<test>containsSpotFunction == false || SpotFunctionHasTypeArray == true || SpotFunctionHasTypeDictionary == true || SpotFunctionHasTypeName == true || SpotFunctionHasTypeStream == true</test>
			<error>
				<message>Entry SpotFunction in HalftoneType1 has type %1 instead of one of types: Array, Dictionary, Name, Stream</message>
				<arguments>
					<argument>SpotFunctionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-SpotFunction" testNumber="7"/>
			<description>Entry SpotFunction in HalftoneType1 is required</description>
			<test>containsSpotFunction == true</test>
			<error>
				<message>Entry SpotFunction in HalftoneType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-SpotFunction-Name" testNumber="6"/>
			<description>Entry SpotFunction with type Name in HalftoneType1 shall have one of values: Ellipse, LineX, SimpleDot, LineY, Cross, InvertedDouble, Diamond, InvertedDoubleDot, Square, Double, InvertedEllipseC, InvertedEllipseA, Line, CosineDot, InvertedSimpleDot, Round, EllipseA, DoubleDot, EllipseC, Rhomboid, EllipseB</description>
			<test>SpotFunctionHasTypeName != true || SpotFunctionNameValue == "SimpleDot" || SpotFunctionNameValue == "InvertedSimpleDot" || SpotFunctionNameValue == "DoubleDot" || SpotFunctionNameValue == "InvertedDoubleDot" || SpotFunctionNameValue == "CosineDot" || SpotFunctionNameValue == "Double" || SpotFunctionNameValue == "InvertedDouble" || SpotFunctionNameValue == "Line" || SpotFunctionNameValue == "LineX" || SpotFunctionNameValue == "LineY" || SpotFunctionNameValue == "Round" || SpotFunctionNameValue == "Ellipse" || SpotFunctionNameValue == "EllipseA" || SpotFunctionNameValue == "InvertedEllipseA" || SpotFunctionNameValue == "EllipseB" || SpotFunctionNameValue == "EllipseC" || SpotFunctionNameValue == "InvertedEllipseC" || SpotFunctionNameValue == "Square" || SpotFunctionNameValue == "Cross" || SpotFunctionNameValue == "Rhomboid" || SpotFunctionNameValue == "Diamond"</test>
			<error>
				<message>Entry SpotFunction with type Name in HalftoneType1 has incorrect value %1 instead of Ellipse, LineX, SimpleDot, LineY, Cross, InvertedDouble, Diamond, InvertedDoubleDot, Square, Double, InvertedEllipseC, InvertedEllipseA, Line, CosineDot, InvertedSimpleDot, Round, EllipseA, DoubleDot, EllipseC, Rhomboid, EllipseB</message>
				<arguments>
					<argument>SpotFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-SpotFunction-Stream" testNumber="10"/>
			<description>Entry SpotFunction with type Stream in HalftoneType1 shall be indirect</description>
			<test>SpotFunctionHasTypeStream != true || isSpotFunctionIndirect == true</test>
			<error>
				<message>Entry SpotFunction with type Stream in HalftoneType1 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-TransferFunction-Dictionary" testNumber="17"/>
			<description>Entry TransferFunction with type Dictionary in HalftoneType1 shall be one of objects FunctionType2, FunctionType3</description>
			<test>TransferFunctionHasTypeDictionary != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Dictionary in HalftoneType1 is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-TransferFunction-Stream" testNumber="17"/>
			<description>Entry TransferFunction with type Stream in HalftoneType1 shall be one of objects FunctionType0, FunctionType4</description>
			<test>TransferFunctionHasTypeStream != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType1 is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-TransferFunction" testNumber="8"/>
			<description>Entry TransferFunction in HalftoneType1 shall have one of types: Dictionary, Name, Stream</description>
			<test>containsTransferFunction == false || TransferFunctionHasTypeDictionary == true || TransferFunctionHasTypeName == true || TransferFunctionHasTypeStream == true</test>
			<error>
				<message>Entry TransferFunction in HalftoneType1 has type %1 instead of one of types: Dictionary, Name, Stream</message>
				<arguments>
					<argument>TransferFunctionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-TransferFunction" testNumber="11"/>
			<description>Entry TransferFunction in HalftoneType1 is required, when parent::@HalftoneType == 5</description>
			<test>parentHalftoneTypeHasTypeInteger == false || (containsTransferFunction == true || (parentHalftoneTypeIntegerValue != 5))</test>
			<error>
				<message>Entry TransferFunction in HalftoneType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-TransferFunction-Name" testNumber="6"/>
			<description>Entry TransferFunction with type Name in HalftoneType1 shall have value Identity</description>
			<test>TransferFunctionHasTypeName != true || TransferFunctionNameValue == "Identity"</test>
			<error>
				<message>Entry TransferFunction with type Name in HalftoneType1 has incorrect value %1 instead of Identity</message>
				<arguments>
					<argument>TransferFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-TransferFunction-Stream" testNumber="10"/>
			<description>Entry TransferFunction with type Stream in HalftoneType1 shall be indirect</description>
			<test>TransferFunctionHasTypeStream != true || isTransferFunctionIndirect == true</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType1 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-Type" testNumber="8"/>
			<description>Entry Type in HalftoneType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="HalftoneType1-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in HalftoneType1 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType1 has incorrect value %1 instead of Halftone</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10" testNumber="1"/>
			<description>HalftoneType10 shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, HalftoneName, HalftoneType, Length, TransferFunction, Type, Xsquare, Ysquare</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Xsquare' &amp;&amp; elem != 'Ysquare' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>HalftoneType10 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Xsquare' &amp;&amp; elem != 'Ysquare' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-DL" testNumber="8"/>
			<description>Entry DL in HalftoneType10 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in HalftoneType10 has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in HalftoneType10 shall satisfy special case: fn:Eval(@DL == ((@Xsquare * @Xsquare) + (@Ysquare * @Ysquare)))</description>
			<test>DLHasTypeInteger != true || (YsquareHasTypeInteger == false || XsquareHasTypeInteger == false || DLIntegerValue == ((XsquareIntegerValue * XsquareIntegerValue) + (YsquareIntegerValue * YsquareIntegerValue)))</test>
			<error>
				<message>Entry DL with type Integer in HalftoneType10 does not satisfy special case: fn:Eval(@DL == ((@Xsquare * @Xsquare) + (@Ysquare * @Ysquare)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in HalftoneType10 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in HalftoneType10 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in HalftoneType10 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in HalftoneType10 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in HalftoneType10 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType10 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-F" testNumber="8"/>
			<description>Entry F in HalftoneType10 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in HalftoneType10 has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in HalftoneType10 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in HalftoneType10 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in HalftoneType10 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in HalftoneType10 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in HalftoneType10 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType10 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-FFilter" testNumber="8"/>
			<description>Entry FFilter in HalftoneType10 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in HalftoneType10 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in HalftoneType10 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType10 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in HalftoneType10 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in HalftoneType10 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-Filter" testNumber="8"/>
			<description>Entry Filter in HalftoneType10 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in HalftoneType10 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in HalftoneType10 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType10 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in HalftoneType10 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in HalftoneType10 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-HalftoneName" testNumber="8"/>
			<description>Entry HalftoneName in HalftoneType10 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType10 has type %1 instead of type StringByte</message>
				<arguments>
					<argument>HalftoneNameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-HalftoneType" testNumber="8"/>
			<description>Entry HalftoneType in HalftoneType10 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType10 has type %1 instead of type Integer</message>
				<arguments>
					<argument>HalftoneTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-HalftoneType" testNumber="7"/>
			<description>Entry HalftoneType in HalftoneType10 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType10 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-HalftoneType-Integer" testNumber="6"/>
			<description>Entry HalftoneType with type Integer in HalftoneType10 shall have value 10</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 10</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType10 has incorrect value %1 instead of 10</message>
				<arguments>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-Length" testNumber="8"/>
			<description>Entry Length in HalftoneType10 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in HalftoneType10 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-Length" testNumber="7"/>
			<description>Entry Length in HalftoneType10 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in HalftoneType10 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-TransferFunction-Dictionary" testNumber="17"/>
			<description>Entry TransferFunction with type Dictionary in HalftoneType10 shall be one of objects FunctionType2, FunctionType3</description>
			<test>TransferFunctionHasTypeDictionary != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Dictionary in HalftoneType10 is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-TransferFunction-Stream" testNumber="17"/>
			<description>Entry TransferFunction with type Stream in HalftoneType10 shall be one of objects FunctionType0, FunctionType4</description>
			<test>TransferFunctionHasTypeStream != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType10 is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-TransferFunction" testNumber="8"/>
			<description>Entry TransferFunction in HalftoneType10 shall have one of types: Dictionary, Name, Stream</description>
			<test>containsTransferFunction == false || TransferFunctionHasTypeDictionary == true || TransferFunctionHasTypeName == true || TransferFunctionHasTypeStream == true</test>
			<error>
				<message>Entry TransferFunction in HalftoneType10 has type %1 instead of one of types: Dictionary, Name, Stream</message>
				<arguments>
					<argument>TransferFunctionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-TransferFunction" testNumber="11"/>
			<description>Entry TransferFunction in HalftoneType10 is required, when parent::@HalftoneType == 5</description>
			<test>parentHalftoneTypeHasTypeInteger == false || (containsTransferFunction == true || (parentHalftoneTypeIntegerValue != 5))</test>
			<error>
				<message>Entry TransferFunction in HalftoneType10 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-TransferFunction-Name" testNumber="6"/>
			<description>Entry TransferFunction with type Name in HalftoneType10 shall have value Identity</description>
			<test>TransferFunctionHasTypeName != true || TransferFunctionNameValue == "Identity"</test>
			<error>
				<message>Entry TransferFunction with type Name in HalftoneType10 has incorrect value %1 instead of Identity</message>
				<arguments>
					<argument>TransferFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-TransferFunction-Stream" testNumber="10"/>
			<description>Entry TransferFunction with type Stream in HalftoneType10 shall be indirect</description>
			<test>TransferFunctionHasTypeStream != true || isTransferFunctionIndirect == true</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType10 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-Type" testNumber="8"/>
			<description>Entry Type in HalftoneType10 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType10 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in HalftoneType10 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType10 has incorrect value %1 instead of Halftone</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-Xsquare" testNumber="8"/>
			<description>Entry Xsquare in HalftoneType10 shall have type Integer</description>
			<test>containsXsquare == false || XsquareHasTypeInteger == true</test>
			<error>
				<message>Entry Xsquare in HalftoneType10 has type %1 instead of type Integer</message>
				<arguments>
					<argument>XsquareType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-Xsquare" testNumber="7"/>
			<description>Entry Xsquare in HalftoneType10 is required</description>
			<test>containsXsquare == true</test>
			<error>
				<message>Entry Xsquare in HalftoneType10 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-Xsquare-Integer" testNumber="14"/>
			<description>Entry Xsquare with type Integer in HalftoneType10 shall satisfy possible value predicate: fn:Eval(@Xsquare &gt; 0)</description>
			<test>XsquareHasTypeInteger != true || XsquareIntegerValue &gt; 0</test>
			<error>
				<message>Entry Xsquare with type Integer in HalftoneType10 does not satisfy possible value predicate: fn:Eval(@Xsquare &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-Ysquare" testNumber="8"/>
			<description>Entry Ysquare in HalftoneType10 shall have type Integer</description>
			<test>containsYsquare == false || YsquareHasTypeInteger == true</test>
			<error>
				<message>Entry Ysquare in HalftoneType10 has type %1 instead of type Integer</message>
				<arguments>
					<argument>YsquareType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-Ysquare" testNumber="7"/>
			<description>Entry Ysquare in HalftoneType10 is required</description>
			<test>containsYsquare == true</test>
			<error>
				<message>Entry Ysquare in HalftoneType10 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="HalftoneType10-Ysquare-Integer" testNumber="14"/>
			<description>Entry Ysquare with type Integer in HalftoneType10 shall satisfy possible value predicate: fn:Eval(@Ysquare &gt; 0)</description>
			<test>YsquareHasTypeInteger != true || YsquareIntegerValue &gt; 0</test>
			<error>
				<message>Entry Ysquare with type Integer in HalftoneType10 does not satisfy possible value predicate: fn:Eval(@Ysquare &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16" testNumber="1"/>
			<description>HalftoneType16 shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, HalftoneName, HalftoneType, Height, Height2, Length, TransferFunction, Type, Width, Width2</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Height2' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'Width2' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>HalftoneType16 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Height2' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'Width2' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-DL" testNumber="8"/>
			<description>Entry DL in HalftoneType16 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in HalftoneType16 has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in HalftoneType16 shall satisfy special case: fn:Eval(@DL == (2 * (@Width * @Height) + (@Width2 * @Height2)))</description>
			<test>DLHasTypeInteger != true || (Width2HasTypeInteger == false || Height2HasTypeInteger == false || HeightHasTypeInteger == false || WidthHasTypeInteger == false || DLIntegerValue == (2 * (WidthIntegerValue * HeightIntegerValue) + (Width2IntegerValue * Height2IntegerValue)))</test>
			<error>
				<message>Entry DL with type Integer in HalftoneType16 does not satisfy special case: fn:Eval(@DL == (2 * (@Width * @Height) + (@Width2 * @Height2)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in HalftoneType16 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in HalftoneType16 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in HalftoneType16 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in HalftoneType16 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in HalftoneType16 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType16 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-F" testNumber="8"/>
			<description>Entry F in HalftoneType16 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in HalftoneType16 has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in HalftoneType16 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in HalftoneType16 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in HalftoneType16 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in HalftoneType16 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in HalftoneType16 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType16 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-FFilter" testNumber="8"/>
			<description>Entry FFilter in HalftoneType16 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in HalftoneType16 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in HalftoneType16 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType16 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in HalftoneType16 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in HalftoneType16 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Filter" testNumber="8"/>
			<description>Entry Filter in HalftoneType16 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in HalftoneType16 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in HalftoneType16 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType16 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in HalftoneType16 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in HalftoneType16 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-HalftoneName" testNumber="8"/>
			<description>Entry HalftoneName in HalftoneType16 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType16 has type %1 instead of type StringByte</message>
				<arguments>
					<argument>HalftoneNameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-HalftoneType" testNumber="8"/>
			<description>Entry HalftoneType in HalftoneType16 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType16 has type %1 instead of type Integer</message>
				<arguments>
					<argument>HalftoneTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-HalftoneType" testNumber="7"/>
			<description>Entry HalftoneType in HalftoneType16 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType16 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-HalftoneType-Integer" testNumber="6"/>
			<description>Entry HalftoneType with type Integer in HalftoneType16 shall have value 16</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 16</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType16 has incorrect value %1 instead of 16</message>
				<arguments>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Height" testNumber="8"/>
			<description>Entry Height in HalftoneType16 shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in HalftoneType16 has type %1 instead of type Integer</message>
				<arguments>
					<argument>HeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Height" testNumber="7"/>
			<description>Entry Height in HalftoneType16 is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in HalftoneType16 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Height-Integer" testNumber="14"/>
			<description>Entry Height with type Integer in HalftoneType16 shall satisfy possible value predicate: fn:Eval(@Height &gt; 0)</description>
			<test>HeightHasTypeInteger != true || HeightIntegerValue &gt; 0</test>
			<error>
				<message>Entry Height with type Integer in HalftoneType16 does not satisfy possible value predicate: fn:Eval(@Height &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Height2" testNumber="8"/>
			<description>Entry Height2 in HalftoneType16 shall have type Integer</description>
			<test>containsHeight2 == false || Height2HasTypeInteger == true</test>
			<error>
				<message>Entry Height2 in HalftoneType16 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Height2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Height2-Integer" testNumber="14"/>
			<description>Entry Height2 with type Integer in HalftoneType16 shall satisfy possible value predicate: fn:Eval(@Height2 &gt; 0)</description>
			<test>Height2HasTypeInteger != true || Height2IntegerValue &gt; 0</test>
			<error>
				<message>Entry Height2 with type Integer in HalftoneType16 does not satisfy possible value predicate: fn:Eval(@Height2 &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Height2-Integer" testNumber="9"/>
			<description>Entry Height2 with type Integer in HalftoneType16 shall satisfy special case: fn:IsPresent(Width2)</description>
			<test>Height2HasTypeInteger != true || (containsWidth2 == true)</test>
			<error>
				<message>Entry Height2 with type Integer in HalftoneType16 does not satisfy special case: fn:IsPresent(Width2)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Length" testNumber="8"/>
			<description>Entry Length in HalftoneType16 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in HalftoneType16 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Length" testNumber="7"/>
			<description>Entry Length in HalftoneType16 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in HalftoneType16 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-TransferFunction-Dictionary" testNumber="17"/>
			<description>Entry TransferFunction with type Dictionary in HalftoneType16 shall be one of objects FunctionType2, FunctionType3</description>
			<test>TransferFunctionHasTypeDictionary != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Dictionary in HalftoneType16 is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-TransferFunction-Stream" testNumber="17"/>
			<description>Entry TransferFunction with type Stream in HalftoneType16 shall be one of objects FunctionType0, FunctionType4</description>
			<test>TransferFunctionHasTypeStream != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType16 is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-TransferFunction" testNumber="8"/>
			<description>Entry TransferFunction in HalftoneType16 shall have one of types: Dictionary, Name, Stream</description>
			<test>containsTransferFunction == false || TransferFunctionHasTypeDictionary == true || TransferFunctionHasTypeName == true || TransferFunctionHasTypeStream == true</test>
			<error>
				<message>Entry TransferFunction in HalftoneType16 has type %1 instead of one of types: Dictionary, Name, Stream</message>
				<arguments>
					<argument>TransferFunctionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-TransferFunction" testNumber="11"/>
			<description>Entry TransferFunction in HalftoneType16 is required, when parent::@HalftoneType == 5</description>
			<test>parentHalftoneTypeHasTypeInteger == false || (containsTransferFunction == true || (parentHalftoneTypeIntegerValue != 5))</test>
			<error>
				<message>Entry TransferFunction in HalftoneType16 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-TransferFunction-Name" testNumber="6"/>
			<description>Entry TransferFunction with type Name in HalftoneType16 shall have value Identity</description>
			<test>TransferFunctionHasTypeName != true || TransferFunctionNameValue == "Identity"</test>
			<error>
				<message>Entry TransferFunction with type Name in HalftoneType16 has incorrect value %1 instead of Identity</message>
				<arguments>
					<argument>TransferFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-TransferFunction-Stream" testNumber="10"/>
			<description>Entry TransferFunction with type Stream in HalftoneType16 shall be indirect</description>
			<test>TransferFunctionHasTypeStream != true || isTransferFunctionIndirect == true</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType16 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Type" testNumber="8"/>
			<description>Entry Type in HalftoneType16 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType16 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in HalftoneType16 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType16 has incorrect value %1 instead of Halftone</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Width" testNumber="8"/>
			<description>Entry Width in HalftoneType16 shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in HalftoneType16 has type %1 instead of type Integer</message>
				<arguments>
					<argument>WidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Width" testNumber="7"/>
			<description>Entry Width in HalftoneType16 is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in HalftoneType16 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Width-Integer" testNumber="14"/>
			<description>Entry Width with type Integer in HalftoneType16 shall satisfy possible value predicate: fn:Eval(@Width &gt; 0)</description>
			<test>WidthHasTypeInteger != true || WidthIntegerValue &gt; 0</test>
			<error>
				<message>Entry Width with type Integer in HalftoneType16 does not satisfy possible value predicate: fn:Eval(@Width &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Width2" testNumber="8"/>
			<description>Entry Width2 in HalftoneType16 shall have type Integer</description>
			<test>containsWidth2 == false || Width2HasTypeInteger == true</test>
			<error>
				<message>Entry Width2 in HalftoneType16 has type %1 instead of type Integer</message>
				<arguments>
					<argument>Width2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="HalftoneType16-Width2-Integer" testNumber="14"/>
			<description>Entry Width2 with type Integer in HalftoneType16 shall satisfy possible value predicate: fn:Eval(@Width2 &gt; 0)</description>
			<test>Width2HasTypeInteger != true || Width2IntegerValue &gt; 0</test>
			<error>
				<message>Entry Width2 with type Integer in HalftoneType16 does not satisfy possible value predicate: fn:Eval(@Width2 &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="HalftoneType5-Default-Stream" testNumber="17"/>
			<description>Entry Default with type Stream in HalftoneType5 shall be one of objects HalftoneType6, HalftoneType10, HalftoneType16</description>
			<test>DefaultHasTypeStream != true || Default_size == 1</test>
			<error>
				<message>Entry Default with type Stream in HalftoneType5 is not one of objects HalftoneType6, HalftoneType10, HalftoneType16</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="HalftoneType5-Default" testNumber="8"/>
			<description>Entry Default in HalftoneType5 shall have one of types: Dictionary, Stream</description>
			<test>containsDefault == false || DefaultHasTypeDictionary == true || DefaultHasTypeStream == true</test>
			<error>
				<message>Entry Default in HalftoneType5 has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>DefaultType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="HalftoneType5-Default" testNumber="7"/>
			<description>Entry Default in HalftoneType5 is required</description>
			<test>containsDefault == true</test>
			<error>
				<message>Entry Default in HalftoneType5 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="HalftoneType5-Default-Stream" testNumber="10"/>
			<description>Entry Default with type Stream in HalftoneType5 shall be indirect</description>
			<test>DefaultHasTypeStream != true || isDefaultIndirect == true</test>
			<error>
				<message>Entry Default with type Stream in HalftoneType5 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="HalftoneType5-HalftoneName" testNumber="8"/>
			<description>Entry HalftoneName in HalftoneType5 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType5 has type %1 instead of type StringByte</message>
				<arguments>
					<argument>HalftoneNameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="HalftoneType5-HalftoneType" testNumber="8"/>
			<description>Entry HalftoneType in HalftoneType5 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType5 has type %1 instead of type Integer</message>
				<arguments>
					<argument>HalftoneTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="HalftoneType5-HalftoneType" testNumber="7"/>
			<description>Entry HalftoneType in HalftoneType5 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType5 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="HalftoneType5-HalftoneType-Integer" testNumber="6"/>
			<description>Entry HalftoneType with type Integer in HalftoneType5 shall have value 5</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 5</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType5 has incorrect value %1 instead of 5</message>
				<arguments>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="HalftoneType5-Type" testNumber="8"/>
			<description>Entry Type in HalftoneType5 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType5 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="HalftoneType5-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in HalftoneType5 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType5 has incorrect value %1 instead of Halftone</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5Entry">
			<id specification="ISO_32000_1_7" clause="HalftoneType5Entry-Stream" testNumber="17"/>
			<description>Entry with type Stream in HalftoneType5 shall be one of objects HalftoneType6, HalftoneType10, HalftoneType16</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Stream in HalftoneType5 is not one of objects HalftoneType6, HalftoneType10, HalftoneType16</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5Entry">
			<id specification="ISO_32000_1_7" clause="HalftoneType5Entry" testNumber="8"/>
			<description>Entry in HalftoneType5 shall have one of types: Dictionary, Stream</description>
			<test>HasTypeDictionary == true || HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in HalftoneType5 has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5Entry">
			<id specification="ISO_32000_1_7" clause="HalftoneType5Entry-Stream" testNumber="10"/>
			<description>Entry with type Stream in HalftoneType5 shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in HalftoneType5 is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6" testNumber="1"/>
			<description>HalftoneType6 shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, HalftoneName, HalftoneType, Height, Length, TransferFunction, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>HalftoneType6 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-DL" testNumber="8"/>
			<description>Entry DL in HalftoneType6 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in HalftoneType6 has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in HalftoneType6 shall satisfy special case: fn:Eval(@DL == (@Width * @Height))</description>
			<test>DLHasTypeInteger != true || (WidthHasTypeInteger == false || HeightHasTypeInteger == false || DLIntegerValue == (WidthIntegerValue * HeightIntegerValue))</test>
			<error>
				<message>Entry DL with type Integer in HalftoneType6 does not satisfy special case: fn:Eval(@DL == (@Width * @Height))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in HalftoneType6 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in HalftoneType6 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in HalftoneType6 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in HalftoneType6 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in HalftoneType6 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType6 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-F" testNumber="8"/>
			<description>Entry F in HalftoneType6 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in HalftoneType6 has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in HalftoneType6 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in HalftoneType6 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in HalftoneType6 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in HalftoneType6 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in HalftoneType6 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType6 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-FFilter" testNumber="8"/>
			<description>Entry FFilter in HalftoneType6 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in HalftoneType6 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in HalftoneType6 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType6 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in HalftoneType6 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in HalftoneType6 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-Filter" testNumber="8"/>
			<description>Entry Filter in HalftoneType6 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in HalftoneType6 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in HalftoneType6 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType6 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in HalftoneType6 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in HalftoneType6 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-HalftoneName" testNumber="8"/>
			<description>Entry HalftoneName in HalftoneType6 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType6 has type %1 instead of type StringByte</message>
				<arguments>
					<argument>HalftoneNameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-HalftoneType" testNumber="8"/>
			<description>Entry HalftoneType in HalftoneType6 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType6 has type %1 instead of type Integer</message>
				<arguments>
					<argument>HalftoneTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-HalftoneType" testNumber="7"/>
			<description>Entry HalftoneType in HalftoneType6 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType6 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-HalftoneType-Integer" testNumber="6"/>
			<description>Entry HalftoneType with type Integer in HalftoneType6 shall have value 6</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 6</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType6 has incorrect value %1 instead of 6</message>
				<arguments>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-Height" testNumber="8"/>
			<description>Entry Height in HalftoneType6 shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in HalftoneType6 has type %1 instead of type Integer</message>
				<arguments>
					<argument>HeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-Height" testNumber="7"/>
			<description>Entry Height in HalftoneType6 is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in HalftoneType6 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-Height-Integer" testNumber="14"/>
			<description>Entry Height with type Integer in HalftoneType6 shall satisfy possible value predicate: fn:Eval(@Height &gt;= 0)</description>
			<test>HeightHasTypeInteger != true || HeightIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Height with type Integer in HalftoneType6 does not satisfy possible value predicate: fn:Eval(@Height &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-Length" testNumber="8"/>
			<description>Entry Length in HalftoneType6 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in HalftoneType6 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-Length" testNumber="7"/>
			<description>Entry Length in HalftoneType6 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in HalftoneType6 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-TransferFunction-Dictionary" testNumber="17"/>
			<description>Entry TransferFunction with type Dictionary in HalftoneType6 shall be one of objects FunctionType2, FunctionType3</description>
			<test>TransferFunctionHasTypeDictionary != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Dictionary in HalftoneType6 is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-TransferFunction-Stream" testNumber="17"/>
			<description>Entry TransferFunction with type Stream in HalftoneType6 shall be one of objects FunctionType0, FunctionType4</description>
			<test>TransferFunctionHasTypeStream != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType6 is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-TransferFunction" testNumber="8"/>
			<description>Entry TransferFunction in HalftoneType6 shall have one of types: Dictionary, Name, Stream</description>
			<test>containsTransferFunction == false || TransferFunctionHasTypeDictionary == true || TransferFunctionHasTypeName == true || TransferFunctionHasTypeStream == true</test>
			<error>
				<message>Entry TransferFunction in HalftoneType6 has type %1 instead of one of types: Dictionary, Name, Stream</message>
				<arguments>
					<argument>TransferFunctionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-TransferFunction-Name" testNumber="6"/>
			<description>Entry TransferFunction with type Name in HalftoneType6 shall have value Identity</description>
			<test>TransferFunctionHasTypeName != true || TransferFunctionNameValue == "Identity"</test>
			<error>
				<message>Entry TransferFunction with type Name in HalftoneType6 has incorrect value %1 instead of Identity</message>
				<arguments>
					<argument>TransferFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-TransferFunction-Stream" testNumber="10"/>
			<description>Entry TransferFunction with type Stream in HalftoneType6 shall be indirect</description>
			<test>TransferFunctionHasTypeStream != true || isTransferFunctionIndirect == true</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType6 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-Type" testNumber="8"/>
			<description>Entry Type in HalftoneType6 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType6 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in HalftoneType6 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType6 has incorrect value %1 instead of Halftone</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-Width" testNumber="8"/>
			<description>Entry Width in HalftoneType6 shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in HalftoneType6 has type %1 instead of type Integer</message>
				<arguments>
					<argument>WidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-Width" testNumber="7"/>
			<description>Entry Width in HalftoneType6 is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in HalftoneType6 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="HalftoneType6-Width-Integer" testNumber="14"/>
			<description>Entry Width with type Integer in HalftoneType6 shall satisfy possible value predicate: fn:Eval(@Width &gt; 0)</description>
			<test>WidthHasTypeInteger != true || WidthIntegerValue &gt; 0</test>
			<error>
				<message>Entry Width with type Integer in HalftoneType6 does not satisfy possible value predicate: fn:Eval(@Width &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_7" clause="ICCBasedColorSpace" testNumber="2"/>
			<description>ICCBasedColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ICCBasedColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_7" clause="ICCBasedColorSpace-0" testNumber="8"/>
			<description>Entry 0 in ICCBasedColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ICCBasedColorSpace has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_7" clause="ICCBasedColorSpace-0-Name" testNumber="6"/>
			<description>Entry 0 with type Name in ICCBasedColorSpace shall have value ICCBased</description>
			<test>entry0HasTypeName != true || entry0NameValue == "ICCBased"</test>
			<error>
				<message>Entry 0 with type Name in ICCBasedColorSpace has incorrect value %1 instead of ICCBased</message>
				<arguments>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_7" clause="ICCBasedColorSpace-1" testNumber="8"/>
			<description>Entry 1 in ICCBasedColorSpace shall have type Stream</description>
			<test>size &lt;= 1 || entry1HasTypeStream == true</test>
			<error>
				<message>Entry 1 in ICCBasedColorSpace has type %1 instead of type Stream</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_7" clause="ICCBasedColorSpace-1-Stream" testNumber="10"/>
			<description>Entry 1 with type Stream in ICCBasedColorSpace shall be indirect</description>
			<test>entry1HasTypeStream != true || isentry1Indirect == true</test>
			<error>
				<message>Entry 1 with type Stream in ICCBasedColorSpace is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream" testNumber="1"/>
			<description>ICCProfileStream shall not contain entries except Alternate, DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Metadata, N, Range</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Alternate' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Range' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ICCProfileStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Alternate' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Range' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-Alternate-Array" testNumber="17"/>
			<description>Entry Alternate with type Array in ICCProfileStream shall be one of objects CalGrayColorSpace, CalRGBColorSpace, DeviceNColorSpace, IndexedColorSpace, LabColorSpace, SeparationColorSpace</description>
			<test>AlternateHasTypeArray != true || Alternate_size == 1</test>
			<error>
				<message>Entry Alternate with type Array in ICCProfileStream is not one of objects CalGrayColorSpace, CalRGBColorSpace, DeviceNColorSpace, IndexedColorSpace, LabColorSpace, SeparationColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-Alternate" testNumber="8"/>
			<description>Entry Alternate in ICCProfileStream shall have one of types: Array, Name</description>
			<test>containsAlternate == false || AlternateHasTypeArray == true || AlternateHasTypeName == true</test>
			<error>
				<message>Entry Alternate in ICCProfileStream has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>AlternateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-Alternate-Name" testNumber="6"/>
			<description>Entry Alternate with type Name in ICCProfileStream shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>AlternateHasTypeName != true || AlternateNameValue == "DeviceGray" || AlternateNameValue == "DeviceRGB" || AlternateNameValue == "DeviceCMYK"</test>
			<error>
				<message>Entry Alternate with type Name in ICCProfileStream has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>AlternateNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-DL" testNumber="8"/>
			<description>Entry DL in ICCProfileStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ICCProfileStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in ICCProfileStream shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ICCProfileStream does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in ICCProfileStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ICCProfileStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in ICCProfileStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ICCProfileStream has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in ICCProfileStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ICCProfileStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-F" testNumber="8"/>
			<description>Entry F in ICCProfileStream shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ICCProfileStream has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in ICCProfileStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ICCProfileStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in ICCProfileStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ICCProfileStream has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in ICCProfileStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ICCProfileStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-FFilter" testNumber="8"/>
			<description>Entry FFilter in ICCProfileStream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ICCProfileStream has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in ICCProfileStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ICCProfileStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in ICCProfileStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ICCProfileStream has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-Filter" testNumber="8"/>
			<description>Entry Filter in ICCProfileStream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ICCProfileStream has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in ICCProfileStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ICCProfileStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in ICCProfileStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ICCProfileStream has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-Length" testNumber="8"/>
			<description>Entry Length in ICCProfileStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ICCProfileStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-Length" testNumber="7"/>
			<description>Entry Length in ICCProfileStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ICCProfileStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-Metadata" testNumber="8"/>
			<description>Entry Metadata in ICCProfileStream shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in ICCProfileStream has type %1 instead of type Stream</message>
				<arguments>
					<argument>MetadataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-Metadata-Stream" testNumber="10"/>
			<description>Entry Metadata with type Stream in ICCProfileStream shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in ICCProfileStream is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-N" testNumber="8"/>
			<description>Entry N in ICCProfileStream shall have type Integer</description>
			<test>containsN == false || NHasTypeInteger == true</test>
			<error>
				<message>Entry N in ICCProfileStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-N" testNumber="7"/>
			<description>Entry N in ICCProfileStream is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in ICCProfileStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-N-Integer" testNumber="6"/>
			<description>Entry N with type Integer in ICCProfileStream shall have one of values: 1, 3, 4</description>
			<test>NHasTypeInteger != true || NIntegerValue == 1 || NIntegerValue == 3 || NIntegerValue == 4</test>
			<error>
				<message>Entry N with type Integer in ICCProfileStream has incorrect value %1 instead of 1, 3, 4</message>
				<arguments>
					<argument>NIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-Range" testNumber="8"/>
			<description>Entry Range in ICCProfileStream shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in ICCProfileStream has type %1 instead of type Array</message>
				<arguments>
					<argument>RangeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="ICCProfileStream-Range-Array" testNumber="9"/>
			<description>Entry Range with type Array in ICCProfileStream shall satisfy special case: fn:Eval(fn:ArrayLength(Range) == (2 * @N))</description>
			<test>RangeHasTypeArray != true || (NHasTypeInteger == false || RangeArraySize == (2 * NIntegerValue))</test>
			<error>
				<message>Entry Range with type Array in ICCProfileStream does not satisfy special case: fn:Eval(fn:ArrayLength(Range) == (2 * @N))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AISO_DevExtensions">
			<id specification="ISO_32000_1_7" clause="ISO_DevExtensions" testNumber="1"/>
			<description>ISO_DevExtensions shall not contain entries except BaseVersion, ExtensionLevel, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseVersion' &amp;&amp; elem != 'ExtensionLevel' &amp;&amp; elem != 'ExtensionRevision' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URL' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ISO_DevExtensions contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseVersion' &amp;&amp; elem != 'ExtensionLevel' &amp;&amp; elem != 'ExtensionRevision' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URL' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AISO_DevExtensions">
			<id specification="ISO_32000_1_7" clause="ISO_DevExtensions" testNumber="22"/>
			<description>ISO_DevExtensions shall not contain entries ExtensionRevision, URL in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'ExtensionRevision' || elem == 'URL').length == 0</test>
			<error>
				<message>ISO_DevExtensions contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'ExtensionRevision' || elem == 'URL').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AISO_DevExtensions">
			<id specification="ISO_32000_1_7" clause="ISO_DevExtensions-BaseVersion" testNumber="8"/>
			<description>Entry BaseVersion in ISO_DevExtensions shall have type Name</description>
			<test>containsBaseVersion == false || BaseVersionHasTypeName == true</test>
			<error>
				<message>Entry BaseVersion in ISO_DevExtensions has type %1 instead of type Name</message>
				<arguments>
					<argument>BaseVersionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AISO_DevExtensions">
			<id specification="ISO_32000_1_7" clause="ISO_DevExtensions-BaseVersion" testNumber="7"/>
			<description>Entry BaseVersion in ISO_DevExtensions is required</description>
			<test>containsBaseVersion == true</test>
			<error>
				<message>Entry BaseVersion in ISO_DevExtensions is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AISO_DevExtensions">
			<id specification="ISO_32000_1_7" clause="ISO_DevExtensions-BaseVersion-Name" testNumber="10"/>
			<description>Entry BaseVersion with type Name in ISO_DevExtensions shall be direct</description>
			<test>BaseVersionHasTypeName != true || isBaseVersionIndirect == false</test>
			<error>
				<message>Entry BaseVersion with type Name in ISO_DevExtensions is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AISO_DevExtensions">
			<id specification="ISO_32000_1_7" clause="ISO_DevExtensions-BaseVersion-Name" testNumber="6"/>
			<description>Entry BaseVersion with type Name in ISO_DevExtensions shall have value 2.0</description>
			<test>BaseVersionHasTypeName != true || BaseVersionNameValue == "2.0"</test>
			<error>
				<message>Entry BaseVersion with type Name in ISO_DevExtensions has incorrect value %1 instead of 2.0</message>
				<arguments>
					<argument>BaseVersionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AISO_DevExtensions">
			<id specification="ISO_32000_1_7" clause="ISO_DevExtensions-ExtensionLevel" testNumber="8"/>
			<description>Entry ExtensionLevel in ISO_DevExtensions shall have type Integer</description>
			<test>containsExtensionLevel == false || ExtensionLevelHasTypeInteger == true</test>
			<error>
				<message>Entry ExtensionLevel in ISO_DevExtensions has type %1 instead of type Integer</message>
				<arguments>
					<argument>ExtensionLevelType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AISO_DevExtensions">
			<id specification="ISO_32000_1_7" clause="ISO_DevExtensions-ExtensionLevel" testNumber="7"/>
			<description>Entry ExtensionLevel in ISO_DevExtensions is required</description>
			<test>containsExtensionLevel == true</test>
			<error>
				<message>Entry ExtensionLevel in ISO_DevExtensions is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AISO_DevExtensions">
			<id specification="ISO_32000_1_7" clause="ISO_DevExtensions-ExtensionLevel-Integer" testNumber="10"/>
			<description>Entry ExtensionLevel with type Integer in ISO_DevExtensions shall be direct</description>
			<test>ExtensionLevelHasTypeInteger != true || isExtensionLevelIndirect == false</test>
			<error>
				<message>Entry ExtensionLevel with type Integer in ISO_DevExtensions is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AISO_DevExtensions">
			<id specification="ISO_32000_1_7" clause="ISO_DevExtensions-ExtensionLevel-Integer" testNumber="6"/>
			<description>Entry ExtensionLevel with type Integer in ISO_DevExtensions shall have one of values: 32003, 32001, 24064, 32002, 32007</description>
			<test>ExtensionLevelHasTypeInteger != true || ExtensionLevelIntegerValue == 32001 || ExtensionLevelIntegerValue == 32002 || ExtensionLevelIntegerValue == 32003 || ExtensionLevelIntegerValue == 24064 || ExtensionLevelIntegerValue == 32007</test>
			<error>
				<message>Entry ExtensionLevel with type Integer in ISO_DevExtensions has incorrect value %1 instead of 32003, 32001, 24064, 32002, 32007</message>
				<arguments>
					<argument>ExtensionLevelIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AISO_DevExtensions">
			<id specification="ISO_32000_1_7" clause="ISO_DevExtensions-Type" testNumber="8"/>
			<description>Entry Type in ISO_DevExtensions shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ISO_DevExtensions has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AISO_DevExtensions">
			<id specification="ISO_32000_1_7" clause="ISO_DevExtensions-Type" testNumber="7"/>
			<description>Entry Type in ISO_DevExtensions is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in ISO_DevExtensions is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AISO_DevExtensions">
			<id specification="ISO_32000_1_7" clause="ISO_DevExtensions-Type-Name" testNumber="10"/>
			<description>Entry Type with type Name in ISO_DevExtensions shall be direct</description>
			<test>TypeHasTypeName != true || isTypeIndirect == false</test>
			<error>
				<message>Entry Type with type Name in ISO_DevExtensions is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AISO_DevExtensions">
			<id specification="ISO_32000_1_7" clause="ISO_DevExtensions-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ISO_DevExtensions shall have value DeveloperExtensions</description>
			<test>TypeHasTypeName != true || TypeNameValue == "DeveloperExtensions"</test>
			<error>
				<message>Entry Type with type Name in ISO_DevExtensions has incorrect value %1 instead of DeveloperExtensions</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="IconFit" testNumber="1"/>
			<description>IconFit shall not contain entries except A, FB, S, SW</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'FB' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SW' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>IconFit contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'FB' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SW' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="IconFit-A" testNumber="8"/>
			<description>Entry A in IconFit shall have type Array</description>
			<test>containsA == false || AHasTypeArray == true</test>
			<error>
				<message>Entry A in IconFit has type %1 instead of type Array</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="IconFit-A-Array" testNumber="9"/>
			<description>Entry A with type Array in IconFit shall satisfy special case: fn:Eval((A::@0 &gt;= 0) &amp;&amp; (A::@0 &lt;= 1) &amp;&amp; (A::@1 &gt;= 0) &amp;&amp; (A::@1 &lt;= 1))</description>
			<test>AHasTypeArray != true || ((A0HasTypeNumber == false || (A0NumberValue &gt;= 0) &amp;&amp; (A0NumberValue &lt;= 1)) &amp;&amp; (A1HasTypeNumber == false || (A1NumberValue &gt;= 0)) &amp;&amp; (A1HasTypeNumber == false || (A1NumberValue &lt;= 1)))</test>
			<error>
				<message>Entry A with type Array in IconFit does not satisfy special case: fn:Eval((A::@0 &gt;= 0) &amp;&amp; (A::@0 &lt;= 1) &amp;&amp; (A::@1 &gt;= 0) &amp;&amp; (A::@1 &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="IconFit-FB" testNumber="8"/>
			<description>Entry FB in IconFit shall have type Boolean</description>
			<test>containsFB == false || FBHasTypeBoolean == true</test>
			<error>
				<message>Entry FB in IconFit has type %1 instead of type Boolean</message>
				<arguments>
					<argument>FBType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="IconFit-S" testNumber="8"/>
			<description>Entry S in IconFit shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in IconFit has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="IconFit-S-Name" testNumber="6"/>
			<description>Entry S with type Name in IconFit shall have one of values: P, A</description>
			<test>SHasTypeName != true || SNameValue == "A" || SNameValue == "P"</test>
			<error>
				<message>Entry S with type Name in IconFit has incorrect value %1 instead of P, A</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="IconFit-SW" testNumber="8"/>
			<description>Entry SW in IconFit shall have type Name</description>
			<test>containsSW == false || SWHasTypeName == true</test>
			<error>
				<message>Entry SW in IconFit has type %1 instead of type Name</message>
				<arguments>
					<argument>SWType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="IconFit-SW-Name" testNumber="6"/>
			<description>Entry SW with type Name in IconFit shall have one of values: A, B, S, N</description>
			<test>SWHasTypeName != true || SWNameValue == "A" || SWNameValue == "B" || SWNameValue == "S" || SWNameValue == "N"</test>
			<error>
				<message>Entry SW with type Name in IconFit has incorrect value %1 instead of A, B, S, N</message>
				<arguments>
					<argument>SWNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="IndexedColorSpace" testNumber="2"/>
			<description>IndexedColorSpace shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>IndexedColorSpace contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="IndexedColorSpace-0" testNumber="8"/>
			<description>Entry 0 in IndexedColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in IndexedColorSpace has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="IndexedColorSpace-0-Name" testNumber="6"/>
			<description>Entry 0 with type Name in IndexedColorSpace shall have value Indexed</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Indexed"</test>
			<error>
				<message>Entry 0 with type Name in IndexedColorSpace has incorrect value %1 instead of Indexed</message>
				<arguments>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="IndexedColorSpace-1-Array" testNumber="17"/>
			<description>Entry 1 with type Array in IndexedColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>entry1HasTypeArray != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Array in IndexedColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="IndexedColorSpace-1" testNumber="8"/>
			<description>Entry 1 in IndexedColorSpace shall have one of types: Array, Name</description>
			<test>size &lt;= 1 || entry1HasTypeArray == true || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in IndexedColorSpace has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="IndexedColorSpace-1-Name" testNumber="6"/>
			<description>Entry 1 with type Name in IndexedColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry1HasTypeName != true || entry1NameValue == "DeviceCMYK" || entry1NameValue == "DeviceRGB" || entry1NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 1 with type Name in IndexedColorSpace has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="IndexedColorSpace-2" testNumber="8"/>
			<description>Entry 2 in IndexedColorSpace shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in IndexedColorSpace has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="IndexedColorSpace-2-Integer" testNumber="14"/>
			<description>Entry 2 with type Integer in IndexedColorSpace shall satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 255))</description>
			<test>entry2HasTypeInteger != true || (entry2IntegerValue &gt;= 0) &amp;&amp; (entry2IntegerValue &lt;= 255)</test>
			<error>
				<message>Entry 2 with type Integer in IndexedColorSpace does not satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 255))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="IndexedColorSpace-3" testNumber="8"/>
			<description>Entry 3 in IndexedColorSpace shall have one of types: Stream, String</description>
			<test>size &lt;= 3 || entry3HasTypeStream == true || entry3HasTypeString == true</test>
			<error>
				<message>Entry 3 in IndexedColorSpace has type %1 instead of one of types: Stream, String</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="IndexedColorSpace-3-Stream" testNumber="10"/>
			<description>Entry 3 with type Stream in IndexedColorSpace shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in IndexedColorSpace is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="InteractiveForm" testNumber="1"/>
			<description>InteractiveForm shall not contain entries except CO, DA, DR, Fields, NeedAppearances, Q, SigFlags, XFA</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CO' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DR' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'NeedAppearances' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'SigFlags' &amp;&amp; elem != 'XFA' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>InteractiveForm contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CO' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DR' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'NeedAppearances' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'SigFlags' &amp;&amp; elem != 'XFA' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="InteractiveForm-CO" testNumber="8"/>
			<description>Entry CO in InteractiveForm shall have type Array</description>
			<test>containsCO == false || COHasTypeArray == true</test>
			<error>
				<message>Entry CO in InteractiveForm has type %1 instead of type Array</message>
				<arguments>
					<argument>COType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="InteractiveForm-DA" testNumber="8"/>
			<description>Entry DA in InteractiveForm shall have type StringByte</description>
			<test>containsDA == false || DAHasTypeStringByte == true</test>
			<error>
				<message>Entry DA in InteractiveForm has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="InteractiveForm-DR" testNumber="8"/>
			<description>Entry DR in InteractiveForm shall have type Dictionary</description>
			<test>containsDR == false || DRHasTypeDictionary == true</test>
			<error>
				<message>Entry DR in InteractiveForm has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DRType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="InteractiveForm-DR-Dictionary" testNumber="9"/>
			<description>Entry DR with type Dictionary in InteractiveForm shall satisfy special case: fn:Eval(fn:IsPresent(DR::Font::*))</description>
			<test>DRHasTypeDictionary != true || (containsDRFontAny == true)</test>
			<error>
				<message>Entry DR with type Dictionary in InteractiveForm does not satisfy special case: fn:Eval(fn:IsPresent(DR::Font::*))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="InteractiveForm-Fields" testNumber="8"/>
			<description>Entry Fields in InteractiveForm shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in InteractiveForm has type %1 instead of type Array</message>
				<arguments>
					<argument>FieldsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="InteractiveForm-Fields" testNumber="7"/>
			<description>Entry Fields in InteractiveForm is required</description>
			<test>containsFields == true</test>
			<error>
				<message>Entry Fields in InteractiveForm is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="InteractiveForm-NeedAppearances" testNumber="8"/>
			<description>Entry NeedAppearances in InteractiveForm shall have type Boolean</description>
			<test>containsNeedAppearances == false || NeedAppearancesHasTypeBoolean == true</test>
			<error>
				<message>Entry NeedAppearances in InteractiveForm has type %1 instead of type Boolean</message>
				<arguments>
					<argument>NeedAppearancesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="InteractiveForm-Q" testNumber="8"/>
			<description>Entry Q in InteractiveForm shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in InteractiveForm has type %1 instead of type Integer</message>
				<arguments>
					<argument>QType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="InteractiveForm-Q-Integer" testNumber="6"/>
			<description>Entry Q with type Integer in InteractiveForm shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in InteractiveForm has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="InteractiveForm-SigFlags" testNumber="8"/>
			<description>Entry SigFlags in InteractiveForm shall have type Bitmask</description>
			<test>containsSigFlags == false || SigFlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry SigFlags in InteractiveForm has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>SigFlagsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="InteractiveForm-SigFlags-Bitmask" testNumber="9"/>
			<description>Entry SigFlags with type Bitmask in InteractiveForm shall satisfy special case: fn:Eval(fn:BitsClear(3, 32))</description>
			<test>SigFlagsHasTypeBitmask != true || ((SigFlagsBitmaskValue &gt;&gt; 2 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry SigFlags with type Bitmask in InteractiveForm does not satisfy special case: fn:Eval(fn:BitsClear(3, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="InteractiveForm-XFA" testNumber="8"/>
			<description>Entry XFA in InteractiveForm shall have one of types: Array, Stream</description>
			<test>containsXFA == false || XFAHasTypeArray == true || XFAHasTypeStream == true</test>
			<error>
				<message>Entry XFA in InteractiveForm has type %1 instead of one of types: Array, Stream</message>
				<arguments>
					<argument>XFAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="InteractiveForm-XFA-Stream" testNumber="10"/>
			<description>Entry XFA with type Stream in InteractiveForm shall be indirect</description>
			<test>XFAHasTypeStream != true || isXFAIndirect == true</test>
			<error>
				<message>Entry XFA with type Stream in InteractiveForm is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_7" clause="LabColorSpace" testNumber="2"/>
			<description>LabColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>LabColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_7" clause="LabColorSpace-0" testNumber="8"/>
			<description>Entry 0 in LabColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in LabColorSpace has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_7" clause="LabColorSpace-0-Name" testNumber="6"/>
			<description>Entry 0 with type Name in LabColorSpace shall have value Lab</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Lab"</test>
			<error>
				<message>Entry 0 with type Name in LabColorSpace has incorrect value %1 instead of Lab</message>
				<arguments>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_7" clause="LabColorSpace-1" testNumber="8"/>
			<description>Entry 1 in LabColorSpace shall have type Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in LabColorSpace has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_7" clause="LabDict" testNumber="1"/>
			<description>LabDict shall not contain entries except BlackPoint, Range, WhitePoint</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'WhitePoint' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>LabDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'WhitePoint' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_7" clause="LabDict-BlackPoint" testNumber="8"/>
			<description>Entry BlackPoint in LabDict shall have type Array</description>
			<test>containsBlackPoint == false || BlackPointHasTypeArray == true</test>
			<error>
				<message>Entry BlackPoint in LabDict has type %1 instead of type Array</message>
				<arguments>
					<argument>BlackPointType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_7" clause="LabDict-Range" testNumber="8"/>
			<description>Entry Range in LabDict shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in LabDict has type %1 instead of type Array</message>
				<arguments>
					<argument>RangeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_7" clause="LabDict-WhitePoint" testNumber="8"/>
			<description>Entry WhitePoint in LabDict shall have type Array</description>
			<test>containsWhitePoint == false || WhitePointHasTypeArray == true</test>
			<error>
				<message>Entry WhitePoint in LabDict has type %1 instead of type Array</message>
				<arguments>
					<argument>WhitePointType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_7" clause="LabDict-WhitePoint" testNumber="7"/>
			<description>Entry WhitePoint in LabDict is required</description>
			<test>containsWhitePoint == true</test>
			<error>
				<message>Entry WhitePoint in LabDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="LabRangeArray" testNumber="2"/>
			<description>LabRangeArray shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>LabRangeArray contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="LabRangeArray-0" testNumber="8"/>
			<description>Entry 0 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in LabRangeArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="LabRangeArray-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in LabRangeArray shall satisfy possible value predicate: fn:Eval(@0 &lt;= @1)</description>
			<test>entry0HasTypeNumber != true || (entry1HasTypeNumber == false || entry0NumberValue &lt;= entry1NumberValue)</test>
			<error>
				<message>Entry 0 with type Number in LabRangeArray does not satisfy possible value predicate: fn:Eval(@0 &lt;= @1)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="LabRangeArray-1" testNumber="8"/>
			<description>Entry 1 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in LabRangeArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="LabRangeArray-1-Number" testNumber="14"/>
			<description>Entry 1 with type Number in LabRangeArray shall satisfy possible value predicate: fn:Eval(@1 &gt;= @0)</description>
			<test>entry1HasTypeNumber != true || (entry0HasTypeNumber == false || entry1NumberValue &gt;= entry0NumberValue)</test>
			<error>
				<message>Entry 1 with type Number in LabRangeArray does not satisfy possible value predicate: fn:Eval(@1 &gt;= @0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="LabRangeArray-2" testNumber="8"/>
			<description>Entry 2 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in LabRangeArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="LabRangeArray-2-Number" testNumber="14"/>
			<description>Entry 2 with type Number in LabRangeArray shall satisfy possible value predicate: fn:Eval(@2 &lt;= @3)</description>
			<test>entry2HasTypeNumber != true || (entry3HasTypeNumber == false || entry2NumberValue &lt;= entry3NumberValue)</test>
			<error>
				<message>Entry 2 with type Number in LabRangeArray does not satisfy possible value predicate: fn:Eval(@2 &lt;= @3)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="LabRangeArray-3" testNumber="8"/>
			<description>Entry 3 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in LabRangeArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="LabRangeArray-3-Number" testNumber="14"/>
			<description>Entry 3 with type Number in LabRangeArray shall satisfy possible value predicate: fn:Eval(@3 &gt;= @2)</description>
			<test>entry3HasTypeNumber != true || (entry2HasTypeNumber == false || entry3NumberValue &gt;= entry2NumberValue)</test>
			<error>
				<message>Entry 3 with type Number in LabRangeArray does not satisfy possible value predicate: fn:Eval(@3 &gt;= @2)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation" testNumber="1"/>
			<description>LegalAttestation shall not contain entries except AlternateImages, Annotations, Attestation, DevDepGS_BG, DevDepGS_FL, DevDepGS_HT, DevDepGS_OP, DevDepGS_TR, DevDepGS_UCR, ExternalOPIdicts, ExternalRefXobjects, ExternalStreams, GoToRemoteActions, HideAnnotationActions, JavaScriptActions, LaunchActions, MovieActions, NonEmbeddedFonts, OptionalContent, SoundActions, TrueTypeFonts, URIActions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AlternateImages' &amp;&amp; elem != 'Annotations' &amp;&amp; elem != 'Attestation' &amp;&amp; elem != 'DevDepGS_BG' &amp;&amp; elem != 'DevDepGS_FL' &amp;&amp; elem != 'DevDepGS_HT' &amp;&amp; elem != 'DevDepGS_OP' &amp;&amp; elem != 'DevDepGS_TR' &amp;&amp; elem != 'DevDepGS_UCR' &amp;&amp; elem != 'ExternalOPIdicts' &amp;&amp; elem != 'ExternalRefXobjects' &amp;&amp; elem != 'ExternalStreams' &amp;&amp; elem != 'GoToRemoteActions' &amp;&amp; elem != 'HideAnnotationActions' &amp;&amp; elem != 'JavaScriptActions' &amp;&amp; elem != 'LaunchActions' &amp;&amp; elem != 'MovieActions' &amp;&amp; elem != 'NonEmbeddedFonts' &amp;&amp; elem != 'OptionalContent' &amp;&amp; elem != 'SoundActions' &amp;&amp; elem != 'TrueTypeFonts' &amp;&amp; elem != 'URIActions' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>LegalAttestation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AlternateImages' &amp;&amp; elem != 'Annotations' &amp;&amp; elem != 'Attestation' &amp;&amp; elem != 'DevDepGS_BG' &amp;&amp; elem != 'DevDepGS_FL' &amp;&amp; elem != 'DevDepGS_HT' &amp;&amp; elem != 'DevDepGS_OP' &amp;&amp; elem != 'DevDepGS_TR' &amp;&amp; elem != 'DevDepGS_UCR' &amp;&amp; elem != 'ExternalOPIdicts' &amp;&amp; elem != 'ExternalRefXobjects' &amp;&amp; elem != 'ExternalStreams' &amp;&amp; elem != 'GoToRemoteActions' &amp;&amp; elem != 'HideAnnotationActions' &amp;&amp; elem != 'JavaScriptActions' &amp;&amp; elem != 'LaunchActions' &amp;&amp; elem != 'MovieActions' &amp;&amp; elem != 'NonEmbeddedFonts' &amp;&amp; elem != 'OptionalContent' &amp;&amp; elem != 'SoundActions' &amp;&amp; elem != 'TrueTypeFonts' &amp;&amp; elem != 'URIActions' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-AlternateImages" testNumber="8"/>
			<description>Entry AlternateImages in LegalAttestation shall have type Integer</description>
			<test>containsAlternateImages == false || AlternateImagesHasTypeInteger == true</test>
			<error>
				<message>Entry AlternateImages in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>AlternateImagesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-AlternateImages-Integer" testNumber="9"/>
			<description>Entry AlternateImages with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@AlternateImages &gt;= 0)</description>
			<test>AlternateImagesHasTypeInteger != true || (AlternateImagesIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry AlternateImages with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@AlternateImages &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-Annotations" testNumber="8"/>
			<description>Entry Annotations in LegalAttestation shall have type Integer</description>
			<test>containsAnnotations == false || AnnotationsHasTypeInteger == true</test>
			<error>
				<message>Entry Annotations in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>AnnotationsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-Annotations-Integer" testNumber="9"/>
			<description>Entry Annotations with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@Annotations &gt;= 0)</description>
			<test>AnnotationsHasTypeInteger != true || (AnnotationsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Annotations with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@Annotations &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-Attestation" testNumber="8"/>
			<description>Entry Attestation in LegalAttestation shall have type StringText</description>
			<test>containsAttestation == false || AttestationHasTypeStringText == true</test>
			<error>
				<message>Entry Attestation in LegalAttestation has type %1 instead of type StringText</message>
				<arguments>
					<argument>AttestationType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-DevDepGS_BG" testNumber="8"/>
			<description>Entry DevDepGS_BG in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_BG == false || DevDepGS_BGHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_BG in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>DevDepGS_BGType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-DevDepGS_BG-Integer" testNumber="9"/>
			<description>Entry DevDepGS_BG with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@DevDepGS_BG &gt;= 0)</description>
			<test>DevDepGS_BGHasTypeInteger != true || (DevDepGS_BGIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_BG with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@DevDepGS_BG &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-DevDepGS_FL" testNumber="8"/>
			<description>Entry DevDepGS_FL in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_FL == false || DevDepGS_FLHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_FL in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>DevDepGS_FLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-DevDepGS_FL-Integer" testNumber="9"/>
			<description>Entry DevDepGS_FL with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@DevDepGS_FL &gt;= 0)</description>
			<test>DevDepGS_FLHasTypeInteger != true || (DevDepGS_FLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_FL with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@DevDepGS_FL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-DevDepGS_HT" testNumber="8"/>
			<description>Entry DevDepGS_HT in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_HT == false || DevDepGS_HTHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_HT in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>DevDepGS_HTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-DevDepGS_HT-Integer" testNumber="9"/>
			<description>Entry DevDepGS_HT with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@DevDepGS_HT &gt;= 0)</description>
			<test>DevDepGS_HTHasTypeInteger != true || (DevDepGS_HTIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_HT with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@DevDepGS_HT &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-DevDepGS_OP" testNumber="8"/>
			<description>Entry DevDepGS_OP in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_OP == false || DevDepGS_OPHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_OP in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>DevDepGS_OPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-DevDepGS_OP-Integer" testNumber="9"/>
			<description>Entry DevDepGS_OP with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@DevDepGS_OP &gt;= 0)</description>
			<test>DevDepGS_OPHasTypeInteger != true || (DevDepGS_OPIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_OP with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@DevDepGS_OP &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-DevDepGS_TR" testNumber="8"/>
			<description>Entry DevDepGS_TR in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_TR == false || DevDepGS_TRHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_TR in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>DevDepGS_TRType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-DevDepGS_TR-Integer" testNumber="9"/>
			<description>Entry DevDepGS_TR with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@DevDepGS_TR &gt;= 0)</description>
			<test>DevDepGS_TRHasTypeInteger != true || (DevDepGS_TRIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_TR with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@DevDepGS_TR &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-DevDepGS_UCR" testNumber="8"/>
			<description>Entry DevDepGS_UCR in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_UCR == false || DevDepGS_UCRHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_UCR in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>DevDepGS_UCRType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-DevDepGS_UCR-Integer" testNumber="9"/>
			<description>Entry DevDepGS_UCR with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@DevDepGS_UCR &gt;= 0)</description>
			<test>DevDepGS_UCRHasTypeInteger != true || (DevDepGS_UCRIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_UCR with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@DevDepGS_UCR &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-ExternalOPIdicts" testNumber="8"/>
			<description>Entry ExternalOPIdicts in LegalAttestation shall have type Integer</description>
			<test>containsExternalOPIdicts == false || ExternalOPIdictsHasTypeInteger == true</test>
			<error>
				<message>Entry ExternalOPIdicts in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>ExternalOPIdictsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-ExternalOPIdicts-Integer" testNumber="9"/>
			<description>Entry ExternalOPIdicts with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@ExternalOPIdicts &gt;= 0)</description>
			<test>ExternalOPIdictsHasTypeInteger != true || (ExternalOPIdictsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry ExternalOPIdicts with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@ExternalOPIdicts &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-ExternalRefXobjects" testNumber="8"/>
			<description>Entry ExternalRefXobjects in LegalAttestation shall have type Integer</description>
			<test>containsExternalRefXobjects == false || ExternalRefXobjectsHasTypeInteger == true</test>
			<error>
				<message>Entry ExternalRefXobjects in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>ExternalRefXobjectsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-ExternalRefXobjects-Integer" testNumber="9"/>
			<description>Entry ExternalRefXobjects with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@ExternalRefXobjects &gt;= 0)</description>
			<test>ExternalRefXobjectsHasTypeInteger != true || (ExternalRefXobjectsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry ExternalRefXobjects with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@ExternalRefXobjects &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-ExternalStreams" testNumber="8"/>
			<description>Entry ExternalStreams in LegalAttestation shall have type Integer</description>
			<test>containsExternalStreams == false || ExternalStreamsHasTypeInteger == true</test>
			<error>
				<message>Entry ExternalStreams in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>ExternalStreamsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-ExternalStreams-Integer" testNumber="9"/>
			<description>Entry ExternalStreams with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@ExternalStreams &gt;= 0)</description>
			<test>ExternalStreamsHasTypeInteger != true || (ExternalStreamsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry ExternalStreams with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@ExternalStreams &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-GoToRemoteActions" testNumber="8"/>
			<description>Entry GoToRemoteActions in LegalAttestation shall have type Integer</description>
			<test>containsGoToRemoteActions == false || GoToRemoteActionsHasTypeInteger == true</test>
			<error>
				<message>Entry GoToRemoteActions in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>GoToRemoteActionsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-GoToRemoteActions-Integer" testNumber="9"/>
			<description>Entry GoToRemoteActions with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@GoToRemoteActions &gt;= 0)</description>
			<test>GoToRemoteActionsHasTypeInteger != true || (GoToRemoteActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry GoToRemoteActions with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@GoToRemoteActions &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-HideAnnotationActions" testNumber="8"/>
			<description>Entry HideAnnotationActions in LegalAttestation shall have type Integer</description>
			<test>containsHideAnnotationActions == false || HideAnnotationActionsHasTypeInteger == true</test>
			<error>
				<message>Entry HideAnnotationActions in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>HideAnnotationActionsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-HideAnnotationActions-Integer" testNumber="9"/>
			<description>Entry HideAnnotationActions with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@HideAnnotationActions &gt;= 0)</description>
			<test>HideAnnotationActionsHasTypeInteger != true || (HideAnnotationActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry HideAnnotationActions with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@HideAnnotationActions &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-JavaScriptActions" testNumber="8"/>
			<description>Entry JavaScriptActions in LegalAttestation shall have type Integer</description>
			<test>containsJavaScriptActions == false || JavaScriptActionsHasTypeInteger == true</test>
			<error>
				<message>Entry JavaScriptActions in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>JavaScriptActionsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-JavaScriptActions-Integer" testNumber="9"/>
			<description>Entry JavaScriptActions with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@JavaScriptActions &gt;= 0)</description>
			<test>JavaScriptActionsHasTypeInteger != true || (JavaScriptActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry JavaScriptActions with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@JavaScriptActions &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-LaunchActions" testNumber="8"/>
			<description>Entry LaunchActions in LegalAttestation shall have type Integer</description>
			<test>containsLaunchActions == false || LaunchActionsHasTypeInteger == true</test>
			<error>
				<message>Entry LaunchActions in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>LaunchActionsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-LaunchActions-Integer" testNumber="9"/>
			<description>Entry LaunchActions with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@LaunchActions &gt;= 0)</description>
			<test>LaunchActionsHasTypeInteger != true || (LaunchActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry LaunchActions with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@LaunchActions &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-MovieActions" testNumber="8"/>
			<description>Entry MovieActions in LegalAttestation shall have type Integer</description>
			<test>containsMovieActions == false || MovieActionsHasTypeInteger == true</test>
			<error>
				<message>Entry MovieActions in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>MovieActionsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-MovieActions-Integer" testNumber="9"/>
			<description>Entry MovieActions with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@MovieActions &gt;= 0)</description>
			<test>MovieActionsHasTypeInteger != true || (MovieActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry MovieActions with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@MovieActions &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-NonEmbeddedFonts" testNumber="8"/>
			<description>Entry NonEmbeddedFonts in LegalAttestation shall have type Integer</description>
			<test>containsNonEmbeddedFonts == false || NonEmbeddedFontsHasTypeInteger == true</test>
			<error>
				<message>Entry NonEmbeddedFonts in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>NonEmbeddedFontsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-NonEmbeddedFonts-Integer" testNumber="9"/>
			<description>Entry NonEmbeddedFonts with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@NonEmbeddedFonts &gt;= 0)</description>
			<test>NonEmbeddedFontsHasTypeInteger != true || (NonEmbeddedFontsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry NonEmbeddedFonts with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@NonEmbeddedFonts &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-OptionalContent" testNumber="8"/>
			<description>Entry OptionalContent in LegalAttestation shall have type Boolean</description>
			<test>containsOptionalContent == false || OptionalContentHasTypeBoolean == true</test>
			<error>
				<message>Entry OptionalContent in LegalAttestation has type %1 instead of type Boolean</message>
				<arguments>
					<argument>OptionalContentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-SoundActions" testNumber="8"/>
			<description>Entry SoundActions in LegalAttestation shall have type Integer</description>
			<test>containsSoundActions == false || SoundActionsHasTypeInteger == true</test>
			<error>
				<message>Entry SoundActions in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>SoundActionsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-SoundActions-Integer" testNumber="9"/>
			<description>Entry SoundActions with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@SoundActions &gt;= 0)</description>
			<test>SoundActionsHasTypeInteger != true || (SoundActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry SoundActions with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@SoundActions &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-TrueTypeFonts" testNumber="8"/>
			<description>Entry TrueTypeFonts in LegalAttestation shall have type Integer</description>
			<test>containsTrueTypeFonts == false || TrueTypeFontsHasTypeInteger == true</test>
			<error>
				<message>Entry TrueTypeFonts in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>TrueTypeFontsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-TrueTypeFonts-Integer" testNumber="9"/>
			<description>Entry TrueTypeFonts with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@TrueTypeFonts &gt;= 0)</description>
			<test>TrueTypeFontsHasTypeInteger != true || (TrueTypeFontsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry TrueTypeFonts with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@TrueTypeFonts &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-URIActions" testNumber="8"/>
			<description>Entry URIActions in LegalAttestation shall have type Integer</description>
			<test>containsURIActions == false || URIActionsHasTypeInteger == true</test>
			<error>
				<message>Entry URIActions in LegalAttestation has type %1 instead of type Integer</message>
				<arguments>
					<argument>URIActionsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="LegalAttestation-URIActions-Integer" testNumber="9"/>
			<description>Entry URIActions with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@URIActions &gt;= 0)</description>
			<test>URIActionsHasTypeInteger != true || (URIActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry URIActions with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@URIActions &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict" testNumber="1"/>
			<description>LinearizationParameterDict shall not contain entries except E, H, L, Linearized, N, O, P, T</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'E' &amp;&amp; elem != 'H' &amp;&amp; elem != 'L' &amp;&amp; elem != 'Linearized' &amp;&amp; elem != 'N' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'T' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>LinearizationParameterDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'E' &amp;&amp; elem != 'H' &amp;&amp; elem != 'L' &amp;&amp; elem != 'Linearized' &amp;&amp; elem != 'N' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'T' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-E" testNumber="8"/>
			<description>Entry E in LinearizationParameterDict shall have type Integer</description>
			<test>containsE == false || EHasTypeInteger == true</test>
			<error>
				<message>Entry E in LinearizationParameterDict has type %1 instead of type Integer</message>
				<arguments>
					<argument>EType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-E" testNumber="7"/>
			<description>Entry E in LinearizationParameterDict is required</description>
			<test>containsE == true</test>
			<error>
				<message>Entry E in LinearizationParameterDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-E-Integer" testNumber="10"/>
			<description>Entry E with type Integer in LinearizationParameterDict shall be direct</description>
			<test>EHasTypeInteger != true || isEIndirect == false</test>
			<error>
				<message>Entry E with type Integer in LinearizationParameterDict is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-E-Integer" testNumber="14"/>
			<description>Entry E with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval((@E &gt; 0) &amp;&amp; (@E &lt;= @L))</description>
			<test>EHasTypeInteger != true || (EIntegerValue &gt; 0) &amp;&amp; (LHasTypeInteger == false || (EIntegerValue &lt;= LIntegerValue))</test>
			<error>
				<message>Entry E with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval((@E &gt; 0) &amp;&amp; (@E &lt;= @L))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-H-Array" testNumber="17"/>
			<description>Entry H with type Array in LinearizationParameterDict shall be one of objects ArrayOf_2Integers, ArrayOf_4Integers</description>
			<test>HHasTypeArray != true || H_size == 1</test>
			<error>
				<message>Entry H with type Array in LinearizationParameterDict is not one of objects ArrayOf_2Integers, ArrayOf_4Integers</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-H" testNumber="8"/>
			<description>Entry H in LinearizationParameterDict shall have type Array</description>
			<test>containsH == false || HHasTypeArray == true</test>
			<error>
				<message>Entry H in LinearizationParameterDict has type %1 instead of type Array</message>
				<arguments>
					<argument>HType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-H" testNumber="7"/>
			<description>Entry H in LinearizationParameterDict is required</description>
			<test>containsH == true</test>
			<error>
				<message>Entry H in LinearizationParameterDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-H-Array" testNumber="10"/>
			<description>Entry H with type Array in LinearizationParameterDict shall be direct</description>
			<test>HHasTypeArray != true || isHIndirect == false</test>
			<error>
				<message>Entry H with type Array in LinearizationParameterDict is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-L" testNumber="8"/>
			<description>Entry L in LinearizationParameterDict shall have type Integer</description>
			<test>containsL == false || LHasTypeInteger == true</test>
			<error>
				<message>Entry L in LinearizationParameterDict has type %1 instead of type Integer</message>
				<arguments>
					<argument>LType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-L" testNumber="7"/>
			<description>Entry L in LinearizationParameterDict is required</description>
			<test>containsL == true</test>
			<error>
				<message>Entry L in LinearizationParameterDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-L-Integer" testNumber="10"/>
			<description>Entry L with type Integer in LinearizationParameterDict shall be direct</description>
			<test>LHasTypeInteger != true || isLIndirect == false</test>
			<error>
				<message>Entry L with type Integer in LinearizationParameterDict is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-L-Integer" testNumber="14"/>
			<description>Entry L with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval(@L &gt; 0)</description>
			<test>LHasTypeInteger != true || LIntegerValue &gt; 0</test>
			<error>
				<message>Entry L with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval(@L &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-Linearized" testNumber="8"/>
			<description>Entry Linearized in LinearizationParameterDict shall have type Number</description>
			<test>containsLinearized == false || LinearizedHasTypeNumber == true</test>
			<error>
				<message>Entry Linearized in LinearizationParameterDict has type %1 instead of type Number</message>
				<arguments>
					<argument>LinearizedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-Linearized" testNumber="7"/>
			<description>Entry Linearized in LinearizationParameterDict is required</description>
			<test>containsLinearized == true</test>
			<error>
				<message>Entry Linearized in LinearizationParameterDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-Linearized-Number" testNumber="10"/>
			<description>Entry Linearized with type Number in LinearizationParameterDict shall be direct</description>
			<test>LinearizedHasTypeNumber != true || isLinearizedIndirect == false</test>
			<error>
				<message>Entry Linearized with type Number in LinearizationParameterDict is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-Linearized-Number" testNumber="6"/>
			<description>Entry Linearized with type Number in LinearizationParameterDict shall have value 1.0</description>
			<test>LinearizedHasTypeNumber != true || LinearizedNumberValue == 1.0</test>
			<error>
				<message>Entry Linearized with type Number in LinearizationParameterDict has incorrect value %1 instead of 1.0</message>
				<arguments>
					<argument>LinearizedNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-N" testNumber="8"/>
			<description>Entry N in LinearizationParameterDict shall have type Integer</description>
			<test>containsN == false || NHasTypeInteger == true</test>
			<error>
				<message>Entry N in LinearizationParameterDict has type %1 instead of type Integer</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-N" testNumber="7"/>
			<description>Entry N in LinearizationParameterDict is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in LinearizationParameterDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-N-Integer" testNumber="10"/>
			<description>Entry N with type Integer in LinearizationParameterDict shall be direct</description>
			<test>NHasTypeInteger != true || isNIndirect == false</test>
			<error>
				<message>Entry N with type Integer in LinearizationParameterDict is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-N-Integer" testNumber="14"/>
			<description>Entry N with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval(@N &gt; 0)</description>
			<test>NHasTypeInteger != true || NIntegerValue &gt; 0</test>
			<error>
				<message>Entry N with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval(@N &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-O" testNumber="8"/>
			<description>Entry O in LinearizationParameterDict shall have type Integer</description>
			<test>containsO == false || OHasTypeInteger == true</test>
			<error>
				<message>Entry O in LinearizationParameterDict has type %1 instead of type Integer</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-O" testNumber="7"/>
			<description>Entry O in LinearizationParameterDict is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in LinearizationParameterDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-O-Integer" testNumber="10"/>
			<description>Entry O with type Integer in LinearizationParameterDict shall be direct</description>
			<test>OHasTypeInteger != true || isOIndirect == false</test>
			<error>
				<message>Entry O with type Integer in LinearizationParameterDict is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-O-Integer" testNumber="14"/>
			<description>Entry O with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval(@O &gt; 0)</description>
			<test>OHasTypeInteger != true || OIntegerValue &gt; 0</test>
			<error>
				<message>Entry O with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval(@O &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-P" testNumber="8"/>
			<description>Entry P in LinearizationParameterDict shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in LinearizationParameterDict has type %1 instead of type Integer</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-P-Integer" testNumber="10"/>
			<description>Entry P with type Integer in LinearizationParameterDict shall be direct</description>
			<test>PHasTypeInteger != true || isPIndirect == false</test>
			<error>
				<message>Entry P with type Integer in LinearizationParameterDict is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-P-Integer" testNumber="14"/>
			<description>Entry P with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval(@P &gt;= 0)</description>
			<test>PHasTypeInteger != true || PIntegerValue &gt;= 0</test>
			<error>
				<message>Entry P with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval(@P &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-T" testNumber="8"/>
			<description>Entry T in LinearizationParameterDict shall have type Integer</description>
			<test>containsT == false || THasTypeInteger == true</test>
			<error>
				<message>Entry T in LinearizationParameterDict has type %1 instead of type Integer</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-T" testNumber="7"/>
			<description>Entry T in LinearizationParameterDict is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in LinearizationParameterDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-T-Integer" testNumber="10"/>
			<description>Entry T with type Integer in LinearizationParameterDict shall be direct</description>
			<test>THasTypeInteger != true || isTIndirect == false</test>
			<error>
				<message>Entry T with type Integer in LinearizationParameterDict is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="LinearizationParameterDict-T-Integer" testNumber="14"/>
			<description>Entry T with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval(@T &gt; 0)</description>
			<test>THasTypeInteger != true || TIntegerValue &gt; 0</test>
			<error>
				<message>Entry T with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval(@T &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMDPDict">
			<id specification="ISO_32000_1_7" clause="MDPDict" testNumber="1"/>
			<description>MDPDict shall not contain entries except P</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'P' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MDPDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'P' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMDPDict">
			<id specification="ISO_32000_1_7" clause="MDPDict-P" testNumber="8"/>
			<description>Entry P in MDPDict shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in MDPDict has type %1 instead of type Integer</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMDPDict">
			<id specification="ISO_32000_1_7" clause="MDPDict-P-Integer" testNumber="6"/>
			<description>Entry P with type Integer in MDPDict shall have one of values: 0, 1, 2, 3</description>
			<test>PHasTypeInteger != true || PIntegerValue == 0 || PIntegerValue == 1 || PIntegerValue == 2 || PIntegerValue == 3</test>
			<error>
				<message>Entry P with type Integer in MDPDict has incorrect value %1 instead of 0, 1, 2, 3</message>
				<arguments>
					<argument>PIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_7" clause="Mac" testNumber="1"/>
			<description>Mac shall not contain entries except Creator, ResFork, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Creator' &amp;&amp; elem != 'ResFork' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Mac contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Creator' &amp;&amp; elem != 'ResFork' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_7" clause="Mac-Creator" testNumber="8"/>
			<description>Entry Creator in Mac shall have type Integer</description>
			<test>containsCreator == false || CreatorHasTypeInteger == true</test>
			<error>
				<message>Entry Creator in Mac has type %1 instead of type Integer</message>
				<arguments>
					<argument>CreatorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_7" clause="Mac-ResFork" testNumber="8"/>
			<description>Entry ResFork in Mac shall have type Stream</description>
			<test>containsResFork == false || ResForkHasTypeStream == true</test>
			<error>
				<message>Entry ResFork in Mac has type %1 instead of type Stream</message>
				<arguments>
					<argument>ResForkType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_7" clause="Mac-ResFork-Stream" testNumber="10"/>
			<description>Entry ResFork with type Stream in Mac shall be indirect</description>
			<test>ResForkHasTypeStream != true || isResForkIndirect == true</test>
			<error>
				<message>Entry ResFork with type Stream in Mac is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_7" clause="Mac-Subtype" testNumber="8"/>
			<description>Entry Subtype in Mac shall have type Integer</description>
			<test>containsSubtype == false || SubtypeHasTypeInteger == true</test>
			<error>
				<message>Entry Subtype in Mac has type %1 instead of type Integer</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkInfo">
			<id specification="ISO_32000_1_7" clause="MarkInfo" testNumber="1"/>
			<description>MarkInfo shall not contain entries except Marked, Suspects, UserProperties</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Marked' &amp;&amp; elem != 'Suspects' &amp;&amp; elem != 'UserProperties' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MarkInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Marked' &amp;&amp; elem != 'Suspects' &amp;&amp; elem != 'UserProperties' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkInfo">
			<id specification="ISO_32000_1_7" clause="MarkInfo-Marked" testNumber="8"/>
			<description>Entry Marked in MarkInfo shall have type Boolean</description>
			<test>containsMarked == false || MarkedHasTypeBoolean == true</test>
			<error>
				<message>Entry Marked in MarkInfo has type %1 instead of type Boolean</message>
				<arguments>
					<argument>MarkedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkInfo">
			<id specification="ISO_32000_1_7" clause="MarkInfo-Suspects" testNumber="8"/>
			<description>Entry Suspects in MarkInfo shall have type Boolean</description>
			<test>containsSuspects == false || SuspectsHasTypeBoolean == true</test>
			<error>
				<message>Entry Suspects in MarkInfo has type %1 instead of type Boolean</message>
				<arguments>
					<argument>SuspectsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkInfo">
			<id specification="ISO_32000_1_7" clause="MarkInfo-UserProperties" testNumber="8"/>
			<description>Entry UserProperties in MarkInfo shall have type Boolean</description>
			<test>containsUserProperties == false || UserPropertiesHasTypeBoolean == true</test>
			<error>
				<message>Entry UserProperties in MarkInfo has type %1 instead of type Boolean</message>
				<arguments>
					<argument>UserPropertiesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="MarkedContentReference" testNumber="1"/>
			<description>MarkedContentReference shall not contain entries except MCID, Pg, Stm, StmOwn, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'MCID' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Stm' &amp;&amp; elem != 'StmOwn' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MarkedContentReference contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'MCID' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Stm' &amp;&amp; elem != 'StmOwn' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="MarkedContentReference-MCID" testNumber="8"/>
			<description>Entry MCID in MarkedContentReference shall have type Integer</description>
			<test>containsMCID == false || MCIDHasTypeInteger == true</test>
			<error>
				<message>Entry MCID in MarkedContentReference has type %1 instead of type Integer</message>
				<arguments>
					<argument>MCIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="MarkedContentReference-MCID" testNumber="7"/>
			<description>Entry MCID in MarkedContentReference is required</description>
			<test>containsMCID == true</test>
			<error>
				<message>Entry MCID in MarkedContentReference is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="MarkedContentReference-Pg" testNumber="8"/>
			<description>Entry Pg in MarkedContentReference shall have type Dictionary</description>
			<test>containsPg == false || PgHasTypeDictionary == true</test>
			<error>
				<message>Entry Pg in MarkedContentReference has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PgType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="MarkedContentReference-Pg-Dictionary" testNumber="10"/>
			<description>Entry Pg with type Dictionary in MarkedContentReference shall be indirect</description>
			<test>PgHasTypeDictionary != true || isPgIndirect == true</test>
			<error>
				<message>Entry Pg with type Dictionary in MarkedContentReference is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="MarkedContentReference-Stm" testNumber="8"/>
			<description>Entry Stm in MarkedContentReference shall have type Stream</description>
			<test>containsStm == false || StmHasTypeStream == true</test>
			<error>
				<message>Entry Stm in MarkedContentReference has type %1 instead of type Stream</message>
				<arguments>
					<argument>StmType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="MarkedContentReference-Stm-Stream" testNumber="10"/>
			<description>Entry Stm with type Stream in MarkedContentReference shall be indirect</description>
			<test>StmHasTypeStream != true || isStmIndirect == true</test>
			<error>
				<message>Entry Stm with type Stream in MarkedContentReference is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="MarkedContentReference-StmOwn" testNumber="8"/>
			<description>Entry StmOwn in MarkedContentReference shall have one of types: Array, Dictionary, Stream</description>
			<test>containsStmOwn == false || StmOwnHasTypeArray == true || StmOwnHasTypeDictionary == true || StmOwnHasTypeStream == true</test>
			<error>
				<message>Entry StmOwn in MarkedContentReference has type %1 instead of one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>StmOwnType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="MarkedContentReference-StmOwn-Array" testNumber="10"/>
			<description>Entry StmOwn with type Array in MarkedContentReference shall be indirect</description>
			<test>StmOwnHasTypeArray != true || isStmOwnIndirect == true</test>
			<error>
				<message>Entry StmOwn with type Array in MarkedContentReference is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="MarkedContentReference-StmOwn-Dictionary" testNumber="10"/>
			<description>Entry StmOwn with type Dictionary in MarkedContentReference shall be indirect</description>
			<test>StmOwnHasTypeDictionary != true || isStmOwnIndirect == true</test>
			<error>
				<message>Entry StmOwn with type Dictionary in MarkedContentReference is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="MarkedContentReference-StmOwn-Stream" testNumber="10"/>
			<description>Entry StmOwn with type Stream in MarkedContentReference shall be indirect</description>
			<test>StmOwnHasTypeStream != true || isStmOwnIndirect == true</test>
			<error>
				<message>Entry StmOwn with type Stream in MarkedContentReference is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="MarkedContentReference-Type" testNumber="8"/>
			<description>Entry Type in MarkedContentReference shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MarkedContentReference has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="MarkedContentReference-Type" testNumber="7"/>
			<description>Entry Type in MarkedContentReference is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in MarkedContentReference is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="MarkedContentReference-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in MarkedContentReference shall have value MCR</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MCR"</test>
			<error>
				<message>Entry Type with type Name in MarkedContentReference has incorrect value %1 instead of MCR</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO" testNumber="1"/>
			<description>MeasureGEO shall not contain entries except Bounds, DCS, GCS, GPTS, LPTS, PDU</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Bounds' &amp;&amp; elem != 'DCS' &amp;&amp; elem != 'GCS' &amp;&amp; elem != 'GPTS' &amp;&amp; elem != 'LPTS' &amp;&amp; elem != 'PCSM' &amp;&amp; elem != 'PDU' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MeasureGEO contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Bounds' &amp;&amp; elem != 'DCS' &amp;&amp; elem != 'GCS' &amp;&amp; elem != 'GPTS' &amp;&amp; elem != 'LPTS' &amp;&amp; elem != 'PCSM' &amp;&amp; elem != 'PDU' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO" testNumber="22"/>
			<description>MeasureGEO shall not contain entries PCSM, Subtype, Type in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'PCSM' || elem == 'Subtype' || elem == 'Type').length == 0</test>
			<error>
				<message>MeasureGEO contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'PCSM' || elem == 'Subtype' || elem == 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO-Bounds" testNumber="8"/>
			<description>Entry Bounds in MeasureGEO shall have type Array</description>
			<test>containsBounds == false || BoundsHasTypeArray == true</test>
			<error>
				<message>Entry Bounds in MeasureGEO has type %1 instead of type Array</message>
				<arguments>
					<argument>BoundsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO-Bounds" testNumber="23"/>
			<description>Entry Bounds in MeasureGEO can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsBounds == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Bounds in MeasureGEO is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO-DCS-Dictionary" testNumber="17"/>
			<description>Entry DCS with type Dictionary in MeasureGEO shall be one of objects GeographicCoordinateSystem, ProjectedCoordinateSystem</description>
			<test>DCSHasTypeDictionary != true || DCS_size == 1</test>
			<error>
				<message>Entry DCS with type Dictionary in MeasureGEO is not one of objects GeographicCoordinateSystem, ProjectedCoordinateSystem</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO-DCS" testNumber="8"/>
			<description>Entry DCS in MeasureGEO shall have type Dictionary</description>
			<test>containsDCS == false || DCSHasTypeDictionary == true</test>
			<error>
				<message>Entry DCS in MeasureGEO has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DCSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO-DCS" testNumber="23"/>
			<description>Entry DCS in MeasureGEO can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsDCS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry DCS in MeasureGEO is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO-GCS-Dictionary" testNumber="17"/>
			<description>Entry GCS with type Dictionary in MeasureGEO shall be one of objects GeographicCoordinateSystem, ProjectedCoordinateSystem</description>
			<test>GCSHasTypeDictionary != true || GCS_size == 1</test>
			<error>
				<message>Entry GCS with type Dictionary in MeasureGEO is not one of objects GeographicCoordinateSystem, ProjectedCoordinateSystem</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO-GCS" testNumber="8"/>
			<description>Entry GCS in MeasureGEO shall have type Dictionary</description>
			<test>containsGCS == false || GCSHasTypeDictionary == true</test>
			<error>
				<message>Entry GCS in MeasureGEO has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>GCSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO-GCS" testNumber="7"/>
			<description>Entry GCS in MeasureGEO is required</description>
			<test>containsGCS == true</test>
			<error>
				<message>Entry GCS in MeasureGEO is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO-GCS" testNumber="23"/>
			<description>Entry GCS in MeasureGEO can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsGCS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry GCS in MeasureGEO is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO-GPTS" testNumber="8"/>
			<description>Entry GPTS in MeasureGEO shall have type Array</description>
			<test>containsGPTS == false || GPTSHasTypeArray == true</test>
			<error>
				<message>Entry GPTS in MeasureGEO has type %1 instead of type Array</message>
				<arguments>
					<argument>GPTSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO-GPTS" testNumber="7"/>
			<description>Entry GPTS in MeasureGEO is required</description>
			<test>containsGPTS == true</test>
			<error>
				<message>Entry GPTS in MeasureGEO is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO-GPTS" testNumber="23"/>
			<description>Entry GPTS in MeasureGEO can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsGPTS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry GPTS in MeasureGEO is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO-LPTS" testNumber="8"/>
			<description>Entry LPTS in MeasureGEO shall have type Array</description>
			<test>containsLPTS == false || LPTSHasTypeArray == true</test>
			<error>
				<message>Entry LPTS in MeasureGEO has type %1 instead of type Array</message>
				<arguments>
					<argument>LPTSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO-LPTS" testNumber="23"/>
			<description>Entry LPTS in MeasureGEO can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsLPTS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry LPTS in MeasureGEO is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO-PDU" testNumber="8"/>
			<description>Entry PDU in MeasureGEO shall have type Array</description>
			<test>containsPDU == false || PDUHasTypeArray == true</test>
			<error>
				<message>Entry PDU in MeasureGEO has type %1 instead of type Array</message>
				<arguments>
					<argument>PDUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="MeasureGEO-PDU" testNumber="23"/>
			<description>Entry PDU in MeasureGEO can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsPDU == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PDU in MeasureGEO is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL" testNumber="1"/>
			<description>MeasureRL shall not contain entries except A, CYX, D, O, R, S, Subtype, T, Type, X, Y</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'CYX' &amp;&amp; elem != 'D' &amp;&amp; elem != 'O' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'X' &amp;&amp; elem != 'Y' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MeasureRL contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'CYX' &amp;&amp; elem != 'D' &amp;&amp; elem != 'O' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'X' &amp;&amp; elem != 'Y' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-A" testNumber="8"/>
			<description>Entry A in MeasureRL shall have type Array</description>
			<test>containsA == false || AHasTypeArray == true</test>
			<error>
				<message>Entry A in MeasureRL has type %1 instead of type Array</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-A" testNumber="7"/>
			<description>Entry A in MeasureRL is required</description>
			<test>containsA == true</test>
			<error>
				<message>Entry A in MeasureRL is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-CYX" testNumber="8"/>
			<description>Entry CYX in MeasureRL shall have type Number</description>
			<test>containsCYX == false || CYXHasTypeNumber == true</test>
			<error>
				<message>Entry CYX in MeasureRL has type %1 instead of type Number</message>
				<arguments>
					<argument>CYXType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-D" testNumber="8"/>
			<description>Entry D in MeasureRL shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in MeasureRL has type %1 instead of type Array</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-D" testNumber="7"/>
			<description>Entry D in MeasureRL is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in MeasureRL is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-O" testNumber="8"/>
			<description>Entry O in MeasureRL shall have type Array</description>
			<test>containsO == false || OHasTypeArray == true</test>
			<error>
				<message>Entry O in MeasureRL has type %1 instead of type Array</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-R" testNumber="8"/>
			<description>Entry R in MeasureRL shall have type StringText</description>
			<test>containsR == false || RHasTypeStringText == true</test>
			<error>
				<message>Entry R in MeasureRL has type %1 instead of type StringText</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-R" testNumber="7"/>
			<description>Entry R in MeasureRL is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in MeasureRL is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-S" testNumber="8"/>
			<description>Entry S in MeasureRL shall have type Array</description>
			<test>containsS == false || SHasTypeArray == true</test>
			<error>
				<message>Entry S in MeasureRL has type %1 instead of type Array</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-Subtype" testNumber="8"/>
			<description>Entry Subtype in MeasureRL shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in MeasureRL has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in MeasureRL shall have value RL</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "RL"</test>
			<error>
				<message>Entry Subtype with type Name in MeasureRL has incorrect value %1 instead of RL</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-T" testNumber="8"/>
			<description>Entry T in MeasureRL shall have type Array</description>
			<test>containsT == false || THasTypeArray == true</test>
			<error>
				<message>Entry T in MeasureRL has type %1 instead of type Array</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-Type" testNumber="8"/>
			<description>Entry Type in MeasureRL shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MeasureRL has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in MeasureRL shall have value Measure</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Measure"</test>
			<error>
				<message>Entry Type with type Name in MeasureRL has incorrect value %1 instead of Measure</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-X" testNumber="8"/>
			<description>Entry X in MeasureRL shall have type Array</description>
			<test>containsX == false || XHasTypeArray == true</test>
			<error>
				<message>Entry X in MeasureRL has type %1 instead of type Array</message>
				<arguments>
					<argument>XType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-X" testNumber="7"/>
			<description>Entry X in MeasureRL is required</description>
			<test>containsX == true</test>
			<error>
				<message>Entry X in MeasureRL is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="MeasureRL-Y" testNumber="8"/>
			<description>Entry Y in MeasureRL shall have type Array</description>
			<test>containsY == false || YHasTypeArray == true</test>
			<error>
				<message>Entry Y in MeasureRL has type %1 instead of type Array</message>
				<arguments>
					<argument>YType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="MediaClipData" testNumber="1"/>
			<description>MediaClipData shall not contain entries except Alt, BE, CT, D, MH, N, P, PL, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Alt' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'CT' &amp;&amp; elem != 'D' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PL' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaClipData contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Alt' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'CT' &amp;&amp; elem != 'D' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PL' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="MediaClipData-Alt" testNumber="8"/>
			<description>Entry Alt in MediaClipData shall have type Array</description>
			<test>containsAlt == false || AltHasTypeArray == true</test>
			<error>
				<message>Entry Alt in MediaClipData has type %1 instead of type Array</message>
				<arguments>
					<argument>AltType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="MediaClipData-BE" testNumber="8"/>
			<description>Entry BE in MediaClipData shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in MediaClipData has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="MediaClipData-CT" testNumber="8"/>
			<description>Entry CT in MediaClipData shall have type StringAscii</description>
			<test>containsCT == false || CTHasTypeStringAscii == true</test>
			<error>
				<message>Entry CT in MediaClipData has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>CTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="MediaClipData-D" testNumber="8"/>
			<description>Entry D in MediaClipData shall have one of types: Dictionary, Stream, String</description>
			<test>containsD == false || DHasTypeDictionary == true || DHasTypeStream == true || DHasTypeString == true</test>
			<error>
				<message>Entry D in MediaClipData has type %1 instead of one of types: Dictionary, Stream, String</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="MediaClipData-D" testNumber="7"/>
			<description>Entry D in MediaClipData is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in MediaClipData is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="MediaClipData-D-Stream" testNumber="10"/>
			<description>Entry D with type Stream in MediaClipData shall be indirect</description>
			<test>DHasTypeStream != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Stream in MediaClipData is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="MediaClipData-MH" testNumber="8"/>
			<description>Entry MH in MediaClipData shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in MediaClipData has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="MediaClipData-N" testNumber="8"/>
			<description>Entry N in MediaClipData shall have type StringText</description>
			<test>containsN == false || NHasTypeStringText == true</test>
			<error>
				<message>Entry N in MediaClipData has type %1 instead of type StringText</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="MediaClipData-P" testNumber="8"/>
			<description>Entry P in MediaClipData shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in MediaClipData has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="MediaClipData-PL" testNumber="8"/>
			<description>Entry PL in MediaClipData shall have type Dictionary</description>
			<test>containsPL == false || PLHasTypeDictionary == true</test>
			<error>
				<message>Entry PL in MediaClipData has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="MediaClipData-S" testNumber="8"/>
			<description>Entry S in MediaClipData shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaClipData has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="MediaClipData-S" testNumber="7"/>
			<description>Entry S in MediaClipData is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaClipData is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="MediaClipData-S-Name" testNumber="6"/>
			<description>Entry S with type Name in MediaClipData shall have value MCD</description>
			<test>SHasTypeName != true || SNameValue == "MCD"</test>
			<error>
				<message>Entry S with type Name in MediaClipData has incorrect value %1 instead of MCD</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="MediaClipData-Type" testNumber="8"/>
			<description>Entry Type in MediaClipData shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaClipData has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="MediaClipData-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in MediaClipData shall have value MediaClip</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaClip"</test>
			<error>
				<message>Entry Type with type Name in MediaClipData has incorrect value %1 instead of MediaClip</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipDataMHBE">
			<id specification="ISO_32000_1_7" clause="MediaClipDataMHBE" testNumber="1"/>
			<description>MediaClipDataMHBE shall not contain entries except BU</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BU' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaClipDataMHBE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BU' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipDataMHBE">
			<id specification="ISO_32000_1_7" clause="MediaClipDataMHBE-BU" testNumber="8"/>
			<description>Entry BU in MediaClipDataMHBE shall have type StringAscii</description>
			<test>containsBU == false || BUHasTypeStringAscii == true</test>
			<error>
				<message>Entry BU in MediaClipDataMHBE has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>BUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="MediaClipSection" testNumber="1"/>
			<description>MediaClipSection shall not contain entries except Alt, BE, D, MH, N, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Alt' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'D' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'N' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaClipSection contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Alt' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'D' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'N' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="MediaClipSection-Alt" testNumber="8"/>
			<description>Entry Alt in MediaClipSection shall have type Array</description>
			<test>containsAlt == false || AltHasTypeArray == true</test>
			<error>
				<message>Entry Alt in MediaClipSection has type %1 instead of type Array</message>
				<arguments>
					<argument>AltType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="MediaClipSection-BE" testNumber="8"/>
			<description>Entry BE in MediaClipSection shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in MediaClipSection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="MediaClipSection-D-Dictionary" testNumber="17"/>
			<description>Entry D with type Dictionary in MediaClipSection shall be one of objects MediaClipSection, MediaClipData</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in MediaClipSection is not one of objects MediaClipSection, MediaClipData</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="MediaClipSection-D" testNumber="8"/>
			<description>Entry D in MediaClipSection shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in MediaClipSection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="MediaClipSection-D" testNumber="7"/>
			<description>Entry D in MediaClipSection is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in MediaClipSection is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="MediaClipSection-MH" testNumber="8"/>
			<description>Entry MH in MediaClipSection shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in MediaClipSection has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="MediaClipSection-N" testNumber="8"/>
			<description>Entry N in MediaClipSection shall have type StringText</description>
			<test>containsN == false || NHasTypeStringText == true</test>
			<error>
				<message>Entry N in MediaClipSection has type %1 instead of type StringText</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="MediaClipSection-S" testNumber="8"/>
			<description>Entry S in MediaClipSection shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaClipSection has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="MediaClipSection-S" testNumber="7"/>
			<description>Entry S in MediaClipSection is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaClipSection is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="MediaClipSection-S-Name" testNumber="6"/>
			<description>Entry S with type Name in MediaClipSection shall have value MCS</description>
			<test>SHasTypeName != true || SNameValue == "MCS"</test>
			<error>
				<message>Entry S with type Name in MediaClipSection has incorrect value %1 instead of MCS</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="MediaClipSection-Type" testNumber="8"/>
			<description>Entry Type in MediaClipSection shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaClipSection has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="MediaClipSection-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in MediaClipSection shall have value MediaClip</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaClip"</test>
			<error>
				<message>Entry Type with type Name in MediaClipSection has incorrect value %1 instead of MediaClip</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSectionMHBE">
			<id specification="ISO_32000_1_7" clause="MediaClipSectionMHBE" testNumber="1"/>
			<description>MediaClipSectionMHBE shall not contain entries except B, E</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'E' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaClipSectionMHBE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'E' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSectionMHBE">
			<id specification="ISO_32000_1_7" clause="MediaClipSectionMHBE-B-Dictionary" testNumber="17"/>
			<description>Entry B with type Dictionary in MediaClipSectionMHBE shall be one of objects MediaOffsetTime, MediaOffsetMarker, MediaOffsetFrame</description>
			<test>BHasTypeDictionary != true || B_size == 1</test>
			<error>
				<message>Entry B with type Dictionary in MediaClipSectionMHBE is not one of objects MediaOffsetTime, MediaOffsetMarker, MediaOffsetFrame</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSectionMHBE">
			<id specification="ISO_32000_1_7" clause="MediaClipSectionMHBE-B" testNumber="8"/>
			<description>Entry B in MediaClipSectionMHBE shall have type Dictionary</description>
			<test>containsB == false || BHasTypeDictionary == true</test>
			<error>
				<message>Entry B in MediaClipSectionMHBE has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSectionMHBE">
			<id specification="ISO_32000_1_7" clause="MediaClipSectionMHBE-E-Dictionary" testNumber="17"/>
			<description>Entry E with type Dictionary in MediaClipSectionMHBE shall be one of objects MediaOffsetTime, MediaOffsetMarker, MediaOffsetFrame</description>
			<test>EHasTypeDictionary != true || E_size == 1</test>
			<error>
				<message>Entry E with type Dictionary in MediaClipSectionMHBE is not one of objects MediaOffsetTime, MediaOffsetMarker, MediaOffsetFrame</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSectionMHBE">
			<id specification="ISO_32000_1_7" clause="MediaClipSectionMHBE-E" testNumber="8"/>
			<description>Entry E in MediaClipSectionMHBE shall have type Dictionary</description>
			<test>containsE == false || EHasTypeDictionary == true</test>
			<error>
				<message>Entry E in MediaClipSectionMHBE has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>EType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="MediaCriteria" testNumber="1"/>
			<description>MediaCriteria shall not contain entries except A, C, D, L, O, P, R, S, Type, V, Z</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'L' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Z' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaCriteria contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'L' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Z' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="MediaCriteria-A" testNumber="8"/>
			<description>Entry A in MediaCriteria shall have type Boolean</description>
			<test>containsA == false || AHasTypeBoolean == true</test>
			<error>
				<message>Entry A in MediaCriteria has type %1 instead of type Boolean</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="MediaCriteria-C" testNumber="8"/>
			<description>Entry C in MediaCriteria shall have type Boolean</description>
			<test>containsC == false || CHasTypeBoolean == true</test>
			<error>
				<message>Entry C in MediaCriteria has type %1 instead of type Boolean</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="MediaCriteria-D" testNumber="8"/>
			<description>Entry D in MediaCriteria shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in MediaCriteria has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="MediaCriteria-L" testNumber="8"/>
			<description>Entry L in MediaCriteria shall have type Array</description>
			<test>containsL == false || LHasTypeArray == true</test>
			<error>
				<message>Entry L in MediaCriteria has type %1 instead of type Array</message>
				<arguments>
					<argument>LType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="MediaCriteria-O" testNumber="8"/>
			<description>Entry O in MediaCriteria shall have type Boolean</description>
			<test>containsO == false || OHasTypeBoolean == true</test>
			<error>
				<message>Entry O in MediaCriteria has type %1 instead of type Boolean</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="MediaCriteria-P" testNumber="8"/>
			<description>Entry P in MediaCriteria shall have type Array</description>
			<test>containsP == false || PHasTypeArray == true</test>
			<error>
				<message>Entry P in MediaCriteria has type %1 instead of type Array</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="MediaCriteria-R" testNumber="8"/>
			<description>Entry R in MediaCriteria shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in MediaCriteria has type %1 instead of type Integer</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="MediaCriteria-R-Integer" testNumber="9"/>
			<description>Entry R with type Integer in MediaCriteria shall satisfy special case: fn:Eval(@R &gt; 0)</description>
			<test>RHasTypeInteger != true || (RIntegerValue &gt; 0)</test>
			<error>
				<message>Entry R with type Integer in MediaCriteria does not satisfy special case: fn:Eval(@R &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="MediaCriteria-S" testNumber="8"/>
			<description>Entry S in MediaCriteria shall have type Boolean</description>
			<test>containsS == false || SHasTypeBoolean == true</test>
			<error>
				<message>Entry S in MediaCriteria has type %1 instead of type Boolean</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="MediaCriteria-Type" testNumber="8"/>
			<description>Entry Type in MediaCriteria shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaCriteria has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="MediaCriteria-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in MediaCriteria shall have value MediaCriteria</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaCriteria"</test>
			<error>
				<message>Entry Type with type Name in MediaCriteria has incorrect value %1 instead of MediaCriteria</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="MediaCriteria-V" testNumber="8"/>
			<description>Entry V in MediaCriteria shall have type Array</description>
			<test>containsV == false || VHasTypeArray == true</test>
			<error>
				<message>Entry V in MediaCriteria has type %1 instead of type Array</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="MediaCriteria-Z" testNumber="8"/>
			<description>Entry Z in MediaCriteria shall have type Dictionary</description>
			<test>containsZ == false || ZHasTypeDictionary == true</test>
			<error>
				<message>Entry Z in MediaCriteria has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ZType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="MediaDuration" testNumber="1"/>
			<description>MediaDuration shall not contain entries except S, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaDuration contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="MediaDuration-S" testNumber="8"/>
			<description>Entry S in MediaDuration shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaDuration has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="MediaDuration-S" testNumber="7"/>
			<description>Entry S in MediaDuration is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaDuration is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="MediaDuration-S-Name" testNumber="6"/>
			<description>Entry S with type Name in MediaDuration shall have one of values: T, F, I</description>
			<test>SHasTypeName != true || SNameValue == "I" || SNameValue == "F" || SNameValue == "T"</test>
			<error>
				<message>Entry S with type Name in MediaDuration has incorrect value %1 instead of T, F, I</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="MediaDuration-T" testNumber="8"/>
			<description>Entry T in MediaDuration shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in MediaDuration has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="MediaDuration-T" testNumber="11"/>
			<description>Entry T in MediaDuration is required, when @S == T</description>
			<test>containsT == true || (SNameValue != "T")</test>
			<error>
				<message>Entry T in MediaDuration is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="MediaDuration-Type" testNumber="8"/>
			<description>Entry Type in MediaDuration shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaDuration has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="MediaDuration-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in MediaDuration shall have value MediaDuration</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaDuration"</test>
			<error>
				<message>Entry Type with type Name in MediaDuration has incorrect value %1 instead of MediaDuration</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="MediaOffsetFrame" testNumber="1"/>
			<description>MediaOffsetFrame shall not contain entries except F, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaOffsetFrame contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="MediaOffsetFrame-F" testNumber="8"/>
			<description>Entry F in MediaOffsetFrame shall have type Integer</description>
			<test>containsF == false || FHasTypeInteger == true</test>
			<error>
				<message>Entry F in MediaOffsetFrame has type %1 instead of type Integer</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="MediaOffsetFrame-F" testNumber="7"/>
			<description>Entry F in MediaOffsetFrame is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in MediaOffsetFrame is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="MediaOffsetFrame-F-Integer" testNumber="14"/>
			<description>Entry F with type Integer in MediaOffsetFrame shall satisfy possible value predicate: fn:Eval(@F &gt;= 0)</description>
			<test>FHasTypeInteger != true || FIntegerValue &gt;= 0</test>
			<error>
				<message>Entry F with type Integer in MediaOffsetFrame does not satisfy possible value predicate: fn:Eval(@F &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="MediaOffsetFrame-S" testNumber="8"/>
			<description>Entry S in MediaOffsetFrame shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaOffsetFrame has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="MediaOffsetFrame-S" testNumber="7"/>
			<description>Entry S in MediaOffsetFrame is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaOffsetFrame is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="MediaOffsetFrame-S-Name" testNumber="6"/>
			<description>Entry S with type Name in MediaOffsetFrame shall have value F</description>
			<test>SHasTypeName != true || SNameValue == "F"</test>
			<error>
				<message>Entry S with type Name in MediaOffsetFrame has incorrect value %1 instead of F</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="MediaOffsetFrame-Type" testNumber="8"/>
			<description>Entry Type in MediaOffsetFrame shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaOffsetFrame has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="MediaOffsetFrame-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in MediaOffsetFrame shall have value MediaOffset</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaOffset"</test>
			<error>
				<message>Entry Type with type Name in MediaOffsetFrame has incorrect value %1 instead of MediaOffset</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_7" clause="MediaOffsetMarker" testNumber="1"/>
			<description>MediaOffsetMarker shall not contain entries except M, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'M' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaOffsetMarker contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'M' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_7" clause="MediaOffsetMarker-M" testNumber="8"/>
			<description>Entry M in MediaOffsetMarker shall have type StringText</description>
			<test>containsM == false || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in MediaOffsetMarker has type %1 instead of type StringText</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_7" clause="MediaOffsetMarker-M" testNumber="7"/>
			<description>Entry M in MediaOffsetMarker is required</description>
			<test>containsM == true</test>
			<error>
				<message>Entry M in MediaOffsetMarker is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_7" clause="MediaOffsetMarker-S" testNumber="8"/>
			<description>Entry S in MediaOffsetMarker shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaOffsetMarker has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_7" clause="MediaOffsetMarker-S" testNumber="7"/>
			<description>Entry S in MediaOffsetMarker is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaOffsetMarker is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_7" clause="MediaOffsetMarker-S-Name" testNumber="6"/>
			<description>Entry S with type Name in MediaOffsetMarker shall have value M</description>
			<test>SHasTypeName != true || SNameValue == "M"</test>
			<error>
				<message>Entry S with type Name in MediaOffsetMarker has incorrect value %1 instead of M</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_7" clause="MediaOffsetMarker-Type" testNumber="8"/>
			<description>Entry Type in MediaOffsetMarker shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaOffsetMarker has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_7" clause="MediaOffsetMarker-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in MediaOffsetMarker shall have value MediaOffset</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaOffset"</test>
			<error>
				<message>Entry Type with type Name in MediaOffsetMarker has incorrect value %1 instead of MediaOffset</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="MediaOffsetTime" testNumber="1"/>
			<description>MediaOffsetTime shall not contain entries except S, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaOffsetTime contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="MediaOffsetTime-S" testNumber="8"/>
			<description>Entry S in MediaOffsetTime shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaOffsetTime has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="MediaOffsetTime-S" testNumber="7"/>
			<description>Entry S in MediaOffsetTime is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaOffsetTime is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="MediaOffsetTime-S-Name" testNumber="6"/>
			<description>Entry S with type Name in MediaOffsetTime shall have value T</description>
			<test>SHasTypeName != true || SNameValue == "T"</test>
			<error>
				<message>Entry S with type Name in MediaOffsetTime has incorrect value %1 instead of T</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="MediaOffsetTime-T" testNumber="8"/>
			<description>Entry T in MediaOffsetTime shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in MediaOffsetTime has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="MediaOffsetTime-T" testNumber="7"/>
			<description>Entry T in MediaOffsetTime is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in MediaOffsetTime is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="MediaOffsetTime-Type" testNumber="8"/>
			<description>Entry Type in MediaOffsetTime shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaOffsetTime has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="MediaOffsetTime-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in MediaOffsetTime shall have value MediaOffset</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaOffset"</test>
			<error>
				<message>Entry Type with type Name in MediaOffsetTime has incorrect value %1 instead of MediaOffset</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPermissions">
			<id specification="ISO_32000_1_7" clause="MediaPermissions" testNumber="1"/>
			<description>MediaPermissions shall not contain entries except TF, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'TF' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaPermissions contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'TF' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPermissions">
			<id specification="ISO_32000_1_7" clause="MediaPermissions-TF" testNumber="8"/>
			<description>Entry TF in MediaPermissions shall have type StringAscii</description>
			<test>containsTF == false || TFHasTypeStringAscii == true</test>
			<error>
				<message>Entry TF in MediaPermissions has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>TFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPermissions">
			<id specification="ISO_32000_1_7" clause="MediaPermissions-TF-StringAscii" testNumber="6"/>
			<description>Entry TF with type StringAscii in MediaPermissions shall have one of values: TEMPALWAYS, TEMPEXTRACT, TEMPACCESS, TEMPNEVER</description>
			<test>TFHasTypeStringAscii != true || TFStringAsciiValue == "TEMPNEVER" || TFStringAsciiValue == "TEMPALWAYS" || TFStringAsciiValue == "TEMPEXTRACT" || TFStringAsciiValue == "TEMPACCESS"</test>
			<error>
				<message>Entry TF with type StringAscii in MediaPermissions has incorrect value %1 instead of TEMPALWAYS, TEMPEXTRACT, TEMPACCESS, TEMPNEVER</message>
				<arguments>
					<argument>TFStringAsciiValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPermissions">
			<id specification="ISO_32000_1_7" clause="MediaPermissions-Type" testNumber="8"/>
			<description>Entry Type in MediaPermissions shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaPermissions has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPermissions">
			<id specification="ISO_32000_1_7" clause="MediaPermissions-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in MediaPermissions shall have value MediaPermissions</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaPermissions"</test>
			<error>
				<message>Entry Type with type Name in MediaPermissions has incorrect value %1 instead of MediaPermissions</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_7" clause="MediaPlayParameters" testNumber="1"/>
			<description>MediaPlayParameters shall not contain entries except BE, MH, PL, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'PL' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaPlayParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'PL' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_7" clause="MediaPlayParameters-BE" testNumber="8"/>
			<description>Entry BE in MediaPlayParameters shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in MediaPlayParameters has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_7" clause="MediaPlayParameters-MH" testNumber="8"/>
			<description>Entry MH in MediaPlayParameters shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in MediaPlayParameters has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_7" clause="MediaPlayParameters-PL" testNumber="8"/>
			<description>Entry PL in MediaPlayParameters shall have type Dictionary</description>
			<test>containsPL == false || PLHasTypeDictionary == true</test>
			<error>
				<message>Entry PL in MediaPlayParameters has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_7" clause="MediaPlayParameters-Type" testNumber="8"/>
			<description>Entry Type in MediaPlayParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaPlayParameters has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_7" clause="MediaPlayParameters-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in MediaPlayParameters shall have value MediaPlayParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaPlayParams"</test>
			<error>
				<message>Entry Type with type Name in MediaPlayParameters has incorrect value %1 instead of MediaPlayParams</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersBE" testNumber="1"/>
			<description>MediaPlayParametersBE shall not contain entries except A, C, D, F, RC, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaPlayParametersBE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersBE-A" testNumber="8"/>
			<description>Entry A in MediaPlayParametersBE shall have type Boolean</description>
			<test>containsA == false || AHasTypeBoolean == true</test>
			<error>
				<message>Entry A in MediaPlayParametersBE has type %1 instead of type Boolean</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersBE-C" testNumber="8"/>
			<description>Entry C in MediaPlayParametersBE shall have type Boolean</description>
			<test>containsC == false || CHasTypeBoolean == true</test>
			<error>
				<message>Entry C in MediaPlayParametersBE has type %1 instead of type Boolean</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersBE-D" testNumber="8"/>
			<description>Entry D in MediaPlayParametersBE shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in MediaPlayParametersBE has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersBE-F" testNumber="8"/>
			<description>Entry F in MediaPlayParametersBE shall have type Integer</description>
			<test>containsF == false || FHasTypeInteger == true</test>
			<error>
				<message>Entry F in MediaPlayParametersBE has type %1 instead of type Integer</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersBE-F-Integer" testNumber="6"/>
			<description>Entry F with type Integer in MediaPlayParametersBE shall have one of values: 0, 1, 2, 3, 4, 5</description>
			<test>FHasTypeInteger != true || FIntegerValue == 0 || FIntegerValue == 1 || FIntegerValue == 2 || FIntegerValue == 3 || FIntegerValue == 4 || FIntegerValue == 5</test>
			<error>
				<message>Entry F with type Integer in MediaPlayParametersBE has incorrect value %1 instead of 0, 1, 2, 3, 4, 5</message>
				<arguments>
					<argument>FIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersBE-RC" testNumber="8"/>
			<description>Entry RC in MediaPlayParametersBE shall have type Number</description>
			<test>containsRC == false || RCHasTypeNumber == true</test>
			<error>
				<message>Entry RC in MediaPlayParametersBE has type %1 instead of type Number</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersBE-RC-Number" testNumber="14"/>
			<description>Entry RC with type Number in MediaPlayParametersBE shall satisfy possible value predicate: fn:Eval(@RC &gt;= 0.0)</description>
			<test>RCHasTypeNumber != true || RCNumberValue &gt;= 0.0</test>
			<error>
				<message>Entry RC with type Number in MediaPlayParametersBE does not satisfy possible value predicate: fn:Eval(@RC &gt;= 0.0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersBE-V" testNumber="8"/>
			<description>Entry V in MediaPlayParametersBE shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in MediaPlayParametersBE has type %1 instead of type Integer</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersBE-V-Integer" testNumber="14"/>
			<description>Entry V with type Integer in MediaPlayParametersBE shall satisfy possible value predicate: fn:Eval((@V &gt;= 0) &amp;&amp; (@V &lt;= 100))</description>
			<test>VHasTypeInteger != true || (VIntegerValue &gt;= 0) &amp;&amp; (VIntegerValue &lt;= 100)</test>
			<error>
				<message>Entry V with type Integer in MediaPlayParametersBE does not satisfy possible value predicate: fn:Eval((@V &gt;= 0) &amp;&amp; (@V &lt;= 100))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersMH" testNumber="1"/>
			<description>MediaPlayParametersMH shall not contain entries except A, C, D, F, RC, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaPlayParametersMH contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersMH-A" testNumber="8"/>
			<description>Entry A in MediaPlayParametersMH shall have type Boolean</description>
			<test>containsA == false || AHasTypeBoolean == true</test>
			<error>
				<message>Entry A in MediaPlayParametersMH has type %1 instead of type Boolean</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersMH-C" testNumber="8"/>
			<description>Entry C in MediaPlayParametersMH shall have type Boolean</description>
			<test>containsC == false || CHasTypeBoolean == true</test>
			<error>
				<message>Entry C in MediaPlayParametersMH has type %1 instead of type Boolean</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersMH-D" testNumber="8"/>
			<description>Entry D in MediaPlayParametersMH shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in MediaPlayParametersMH has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersMH-F" testNumber="8"/>
			<description>Entry F in MediaPlayParametersMH shall have type Integer</description>
			<test>containsF == false || FHasTypeInteger == true</test>
			<error>
				<message>Entry F in MediaPlayParametersMH has type %1 instead of type Integer</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersMH-F-Integer" testNumber="6"/>
			<description>Entry F with type Integer in MediaPlayParametersMH shall have one of values: 0, 1, 2, 3, 4, 5</description>
			<test>FHasTypeInteger != true || FIntegerValue == 0 || FIntegerValue == 1 || FIntegerValue == 2 || FIntegerValue == 3 || FIntegerValue == 4 || FIntegerValue == 5</test>
			<error>
				<message>Entry F with type Integer in MediaPlayParametersMH has incorrect value %1 instead of 0, 1, 2, 3, 4, 5</message>
				<arguments>
					<argument>FIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersMH-RC" testNumber="8"/>
			<description>Entry RC in MediaPlayParametersMH shall have type Number</description>
			<test>containsRC == false || RCHasTypeNumber == true</test>
			<error>
				<message>Entry RC in MediaPlayParametersMH has type %1 instead of type Number</message>
				<arguments>
					<argument>RCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersMH-RC-Number" testNumber="14"/>
			<description>Entry RC with type Number in MediaPlayParametersMH shall satisfy possible value predicate: fn:Eval(@RC &gt;= 0.0)</description>
			<test>RCHasTypeNumber != true || RCNumberValue &gt;= 0.0</test>
			<error>
				<message>Entry RC with type Number in MediaPlayParametersMH does not satisfy possible value predicate: fn:Eval(@RC &gt;= 0.0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersMH-V" testNumber="8"/>
			<description>Entry V in MediaPlayParametersMH shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in MediaPlayParametersMH has type %1 instead of type Integer</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="MediaPlayParametersMH-V-Integer" testNumber="14"/>
			<description>Entry V with type Integer in MediaPlayParametersMH shall satisfy possible value predicate: fn:Eval((@V &gt;= 0) &amp;&amp; (@V &lt;= 100))</description>
			<test>VHasTypeInteger != true || (VIntegerValue &gt;= 0) &amp;&amp; (VIntegerValue &lt;= 100)</test>
			<error>
				<message>Entry V with type Integer in MediaPlayParametersMH does not satisfy possible value predicate: fn:Eval((@V &gt;= 0) &amp;&amp; (@V &lt;= 100))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_7" clause="MediaPlayerInfo" testNumber="1"/>
			<description>MediaPlayerInfo shall not contain entries except BE, MH, PID, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'PID' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaPlayerInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'PID' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_7" clause="MediaPlayerInfo-BE" testNumber="8"/>
			<description>Entry BE in MediaPlayerInfo shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in MediaPlayerInfo has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_7" clause="MediaPlayerInfo-MH" testNumber="8"/>
			<description>Entry MH in MediaPlayerInfo shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in MediaPlayerInfo has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_7" clause="MediaPlayerInfo-PID" testNumber="8"/>
			<description>Entry PID in MediaPlayerInfo shall have type Dictionary</description>
			<test>containsPID == false || PIDHasTypeDictionary == true</test>
			<error>
				<message>Entry PID in MediaPlayerInfo has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_7" clause="MediaPlayerInfo-Type" testNumber="8"/>
			<description>Entry Type in MediaPlayerInfo shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaPlayerInfo has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_7" clause="MediaPlayerInfo-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in MediaPlayerInfo shall have value MediaPlayerInfo</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaPlayerInfo"</test>
			<error>
				<message>Entry Type with type Name in MediaPlayerInfo has incorrect value %1 instead of MediaPlayerInfo</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_7" clause="MediaPlayers" testNumber="1"/>
			<description>MediaPlayers shall not contain entries except A, MU, NU, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'MU' &amp;&amp; elem != 'NU' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaPlayers contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'MU' &amp;&amp; elem != 'NU' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_7" clause="MediaPlayers-A" testNumber="8"/>
			<description>Entry A in MediaPlayers shall have type Array</description>
			<test>containsA == false || AHasTypeArray == true</test>
			<error>
				<message>Entry A in MediaPlayers has type %1 instead of type Array</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_7" clause="MediaPlayers-MU" testNumber="8"/>
			<description>Entry MU in MediaPlayers shall have type Array</description>
			<test>containsMU == false || MUHasTypeArray == true</test>
			<error>
				<message>Entry MU in MediaPlayers has type %1 instead of type Array</message>
				<arguments>
					<argument>MUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_7" clause="MediaPlayers-NU" testNumber="8"/>
			<description>Entry NU in MediaPlayers shall have type Array</description>
			<test>containsNU == false || NUHasTypeArray == true</test>
			<error>
				<message>Entry NU in MediaPlayers has type %1 instead of type Array</message>
				<arguments>
					<argument>NUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_7" clause="MediaPlayers-Type" testNumber="8"/>
			<description>Entry Type in MediaPlayers shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaPlayers has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_7" clause="MediaPlayers-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in MediaPlayers shall have value MediaPlayers</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaPlayers"</test>
			<error>
				<message>Entry Type with type Name in MediaPlayers has incorrect value %1 instead of MediaPlayers</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_7" clause="MediaScreenParameters" testNumber="1"/>
			<description>MediaScreenParameters shall not contain entries except BE, MH, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaScreenParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_7" clause="MediaScreenParameters-BE" testNumber="8"/>
			<description>Entry BE in MediaScreenParameters shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in MediaScreenParameters has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_7" clause="MediaScreenParameters-MH" testNumber="8"/>
			<description>Entry MH in MediaScreenParameters shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in MediaScreenParameters has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_7" clause="MediaScreenParameters-Type" testNumber="8"/>
			<description>Entry Type in MediaScreenParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaScreenParameters has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_7" clause="MediaScreenParameters-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in MediaScreenParameters shall have value MediaScreenParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaScreenParams"</test>
			<error>
				<message>Entry Type with type Name in MediaScreenParameters has incorrect value %1 instead of MediaScreenParams</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="MediaScreenParametersMHBE" testNumber="1"/>
			<description>MediaScreenParametersMHBE shall not contain entries except B, F, M, O, W</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'O' &amp;&amp; elem != 'W' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MediaScreenParametersMHBE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'O' &amp;&amp; elem != 'W' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="MediaScreenParametersMHBE-B" testNumber="8"/>
			<description>Entry B in MediaScreenParametersMHBE shall have type Array</description>
			<test>containsB == false || BHasTypeArray == true</test>
			<error>
				<message>Entry B in MediaScreenParametersMHBE has type %1 instead of type Array</message>
				<arguments>
					<argument>BType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="MediaScreenParametersMHBE-F" testNumber="8"/>
			<description>Entry F in MediaScreenParametersMHBE shall have type Dictionary</description>
			<test>containsF == false || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in MediaScreenParametersMHBE has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="MediaScreenParametersMHBE-M" testNumber="8"/>
			<description>Entry M in MediaScreenParametersMHBE shall have type Integer</description>
			<test>containsM == false || MHasTypeInteger == true</test>
			<error>
				<message>Entry M in MediaScreenParametersMHBE has type %1 instead of type Integer</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="MediaScreenParametersMHBE-M-Integer" testNumber="6"/>
			<description>Entry M with type Integer in MediaScreenParametersMHBE shall have one of values: 0, 1, 2, 3, 4, 5, 6</description>
			<test>MHasTypeInteger != true || MIntegerValue == 0 || MIntegerValue == 1 || MIntegerValue == 2 || MIntegerValue == 3 || MIntegerValue == 4 || MIntegerValue == 5 || MIntegerValue == 6</test>
			<error>
				<message>Entry M with type Integer in MediaScreenParametersMHBE has incorrect value %1 instead of 0, 1, 2, 3, 4, 5, 6</message>
				<arguments>
					<argument>MIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="MediaScreenParametersMHBE-O" testNumber="8"/>
			<description>Entry O in MediaScreenParametersMHBE shall have type Number</description>
			<test>containsO == false || OHasTypeNumber == true</test>
			<error>
				<message>Entry O in MediaScreenParametersMHBE has type %1 instead of type Number</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="MediaScreenParametersMHBE-O-Number" testNumber="14"/>
			<description>Entry O with type Number in MediaScreenParametersMHBE shall satisfy possible value predicate: fn:Eval((@O &gt;= 0.0) &amp;&amp; (@O &lt;= 1.0))</description>
			<test>OHasTypeNumber != true || (ONumberValue &gt;= 0.0) &amp;&amp; (ONumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry O with type Number in MediaScreenParametersMHBE does not satisfy possible value predicate: fn:Eval((@O &gt;= 0.0) &amp;&amp; (@O &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="MediaScreenParametersMHBE-W" testNumber="8"/>
			<description>Entry W in MediaScreenParametersMHBE shall have type Integer</description>
			<test>containsW == false || WHasTypeInteger == true</test>
			<error>
				<message>Entry W in MediaScreenParametersMHBE has type %1 instead of type Integer</message>
				<arguments>
					<argument>WType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="MediaScreenParametersMHBE-W-Integer" testNumber="6"/>
			<description>Entry W with type Integer in MediaScreenParametersMHBE shall have one of values: 0, 1, 2, 3</description>
			<test>WHasTypeInteger != true || WIntegerValue == 0 || WIntegerValue == 1 || WIntegerValue == 2 || WIntegerValue == 3</test>
			<error>
				<message>Entry W with type Integer in MediaScreenParametersMHBE has incorrect value %1 instead of 0, 1, 2, 3</message>
				<arguments>
					<argument>WIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata" testNumber="1"/>
			<description>Metadata shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Metadata contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-DL" testNumber="8"/>
			<description>Entry DL in Metadata shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in Metadata has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in Metadata shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in Metadata does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in Metadata shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in Metadata is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in Metadata shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in Metadata has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in Metadata shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in Metadata does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-F" testNumber="8"/>
			<description>Entry F in Metadata shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in Metadata has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in Metadata shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in Metadata is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in Metadata shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in Metadata has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in Metadata shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in Metadata does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-FFilter" testNumber="8"/>
			<description>Entry FFilter in Metadata shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in Metadata has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in Metadata shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in Metadata does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in Metadata shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in Metadata has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-Filter" testNumber="8"/>
			<description>Entry Filter in Metadata shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in Metadata has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in Metadata shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in Metadata does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in Metadata shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in Metadata has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-Length" testNumber="8"/>
			<description>Entry Length in Metadata shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in Metadata has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-Length" testNumber="7"/>
			<description>Entry Length in Metadata is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in Metadata is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-Subtype" testNumber="8"/>
			<description>Entry Subtype in Metadata shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in Metadata has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-Subtype" testNumber="7"/>
			<description>Entry Subtype in Metadata is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in Metadata is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in Metadata shall have value XML</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "XML"</test>
			<error>
				<message>Entry Subtype with type Name in Metadata has incorrect value %1 instead of XML</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-Type" testNumber="8"/>
			<description>Entry Type in Metadata shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Metadata has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-Type" testNumber="7"/>
			<description>Entry Type in Metadata is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in Metadata is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="Metadata-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Metadata shall have value Metadata</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Metadata"</test>
			<error>
				<message>Entry Type with type Name in Metadata has incorrect value %1 instead of Metadata</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_7" clause="MicrosoftWindowsLaunchParam" testNumber="1"/>
			<description>MicrosoftWindowsLaunchParam shall not contain entries except D, F, O, P</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MicrosoftWindowsLaunchParam contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_7" clause="MicrosoftWindowsLaunchParam-D" testNumber="8"/>
			<description>Entry D in MicrosoftWindowsLaunchParam shall have type StringByte</description>
			<test>containsD == false || DHasTypeStringByte == true</test>
			<error>
				<message>Entry D in MicrosoftWindowsLaunchParam has type %1 instead of type StringByte</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_7" clause="MicrosoftWindowsLaunchParam-F" testNumber="8"/>
			<description>Entry F in MicrosoftWindowsLaunchParam shall have type StringByte</description>
			<test>containsF == false || FHasTypeStringByte == true</test>
			<error>
				<message>Entry F in MicrosoftWindowsLaunchParam has type %1 instead of type StringByte</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_7" clause="MicrosoftWindowsLaunchParam-F" testNumber="7"/>
			<description>Entry F in MicrosoftWindowsLaunchParam is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in MicrosoftWindowsLaunchParam is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_7" clause="MicrosoftWindowsLaunchParam-O" testNumber="8"/>
			<description>Entry O in MicrosoftWindowsLaunchParam shall have type StringAscii</description>
			<test>containsO == false || OHasTypeStringAscii == true</test>
			<error>
				<message>Entry O in MicrosoftWindowsLaunchParam has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_7" clause="MicrosoftWindowsLaunchParam-O-StringAscii" testNumber="6"/>
			<description>Entry O with type StringAscii in MicrosoftWindowsLaunchParam shall have one of values: print, open</description>
			<test>OHasTypeStringAscii != true || OStringAsciiValue == "open" || OStringAsciiValue == "print"</test>
			<error>
				<message>Entry O with type StringAscii in MicrosoftWindowsLaunchParam has incorrect value %1 instead of print, open</message>
				<arguments>
					<argument>OStringAsciiValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_7" clause="MicrosoftWindowsLaunchParam-P" testNumber="8"/>
			<description>Entry P in MicrosoftWindowsLaunchParam shall have type StringByte</description>
			<test>containsP == false || PHasTypeStringByte == true</test>
			<error>
				<message>Entry P in MicrosoftWindowsLaunchParam has type %1 instead of type StringByte</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_7" clause="MinimumBitDepth" testNumber="1"/>
			<description>MinimumBitDepth shall not contain entries except M, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'M' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MinimumBitDepth contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'M' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_7" clause="MinimumBitDepth-M" testNumber="8"/>
			<description>Entry M in MinimumBitDepth shall have type Integer</description>
			<test>containsM == false || MHasTypeInteger == true</test>
			<error>
				<message>Entry M in MinimumBitDepth has type %1 instead of type Integer</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_7" clause="MinimumBitDepth-M-Integer" testNumber="6"/>
			<description>Entry M with type Integer in MinimumBitDepth shall have one of values: 0, 1, 2, 3, 4, 5, 6</description>
			<test>MHasTypeInteger != true || MIntegerValue == 0 || MIntegerValue == 1 || MIntegerValue == 2 || MIntegerValue == 3 || MIntegerValue == 4 || MIntegerValue == 5 || MIntegerValue == 6</test>
			<error>
				<message>Entry M with type Integer in MinimumBitDepth has incorrect value %1 instead of 0, 1, 2, 3, 4, 5, 6</message>
				<arguments>
					<argument>MIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_7" clause="MinimumBitDepth-Type" testNumber="8"/>
			<description>Entry Type in MinimumBitDepth shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MinimumBitDepth has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_7" clause="MinimumBitDepth-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in MinimumBitDepth shall have value MinBitDepth</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MinBitDepth"</test>
			<error>
				<message>Entry Type with type Name in MinimumBitDepth has incorrect value %1 instead of MinBitDepth</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_7" clause="MinimumBitDepth-V" testNumber="8"/>
			<description>Entry V in MinimumBitDepth shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in MinimumBitDepth has type %1 instead of type Integer</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_7" clause="MinimumBitDepth-V" testNumber="7"/>
			<description>Entry V in MinimumBitDepth is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in MinimumBitDepth is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_7" clause="MinimumBitDepth-V-Integer" testNumber="9"/>
			<description>Entry V with type Integer in MinimumBitDepth shall satisfy special case: fn:Eval(@V &gt; 0)</description>
			<test>VHasTypeInteger != true || (VIntegerValue &gt; 0)</test>
			<error>
				<message>Entry V with type Integer in MinimumBitDepth does not satisfy special case: fn:Eval(@V &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_7" clause="MinimumScreenSize" testNumber="1"/>
			<description>MinimumScreenSize shall not contain entries except M, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'M' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MinimumScreenSize contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'M' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_7" clause="MinimumScreenSize-M" testNumber="8"/>
			<description>Entry M in MinimumScreenSize shall have type Integer</description>
			<test>containsM == false || MHasTypeInteger == true</test>
			<error>
				<message>Entry M in MinimumScreenSize has type %1 instead of type Integer</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_7" clause="MinimumScreenSize-M-Integer" testNumber="6"/>
			<description>Entry M with type Integer in MinimumScreenSize shall have one of values: 0, 1, 2, 3, 4, 5, 6</description>
			<test>MHasTypeInteger != true || MIntegerValue == 0 || MIntegerValue == 1 || MIntegerValue == 2 || MIntegerValue == 3 || MIntegerValue == 4 || MIntegerValue == 5 || MIntegerValue == 6</test>
			<error>
				<message>Entry M with type Integer in MinimumScreenSize has incorrect value %1 instead of 0, 1, 2, 3, 4, 5, 6</message>
				<arguments>
					<argument>MIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_7" clause="MinimumScreenSize-Type" testNumber="8"/>
			<description>Entry Type in MinimumScreenSize shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MinimumScreenSize has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_7" clause="MinimumScreenSize-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in MinimumScreenSize shall have value MinScreenSize</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MinScreenSize"</test>
			<error>
				<message>Entry Type with type Name in MinimumScreenSize has incorrect value %1 instead of MinScreenSize</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_7" clause="MinimumScreenSize-V" testNumber="8"/>
			<description>Entry V in MinimumScreenSize shall have type Array</description>
			<test>containsV == false || VHasTypeArray == true</test>
			<error>
				<message>Entry V in MinimumScreenSize has type %1 instead of type Array</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_7" clause="MinimumScreenSize-V" testNumber="7"/>
			<description>Entry V in MinimumScreenSize is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in MinimumScreenSize is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="Movie" testNumber="1"/>
			<description>Movie shall not contain entries except Aspect, F, Poster, Rotate</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Aspect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Poster' &amp;&amp; elem != 'Rotate' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Movie contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Aspect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Poster' &amp;&amp; elem != 'Rotate' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="Movie-Aspect" testNumber="8"/>
			<description>Entry Aspect in Movie shall have type Array</description>
			<test>containsAspect == false || AspectHasTypeArray == true</test>
			<error>
				<message>Entry Aspect in Movie has type %1 instead of type Array</message>
				<arguments>
					<argument>AspectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="Movie-F" testNumber="8"/>
			<description>Entry F in Movie shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in Movie has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="Movie-F" testNumber="7"/>
			<description>Entry F in Movie is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in Movie is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="Movie-Poster" testNumber="8"/>
			<description>Entry Poster in Movie shall have one of types: Boolean, Stream</description>
			<test>containsPoster == false || PosterHasTypeBoolean == true || PosterHasTypeStream == true</test>
			<error>
				<message>Entry Poster in Movie has type %1 instead of one of types: Boolean, Stream</message>
				<arguments>
					<argument>PosterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="Movie-Poster-Stream" testNumber="10"/>
			<description>Entry Poster with type Stream in Movie shall be indirect</description>
			<test>PosterHasTypeStream != true || isPosterIndirect == true</test>
			<error>
				<message>Entry Poster with type Stream in Movie is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="Movie-Rotate" testNumber="8"/>
			<description>Entry Rotate in Movie shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in Movie has type %1 instead of type Integer</message>
				<arguments>
					<argument>RotateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="Movie-Rotate-Integer" testNumber="14"/>
			<description>Entry Rotate with type Integer in Movie shall satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in Movie does not satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation" testNumber="1"/>
			<description>MovieActivation shall not contain entries except Duration, FWPosition, FWScale, Mode, Rate, ShowControls, Start, Synchronous, Volume</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Duration' &amp;&amp; elem != 'FWPosition' &amp;&amp; elem != 'FWScale' &amp;&amp; elem != 'Mode' &amp;&amp; elem != 'Rate' &amp;&amp; elem != 'ShowControls' &amp;&amp; elem != 'Start' &amp;&amp; elem != 'Synchronous' &amp;&amp; elem != 'Volume' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>MovieActivation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Duration' &amp;&amp; elem != 'FWPosition' &amp;&amp; elem != 'FWScale' &amp;&amp; elem != 'Mode' &amp;&amp; elem != 'Rate' &amp;&amp; elem != 'ShowControls' &amp;&amp; elem != 'Start' &amp;&amp; elem != 'Synchronous' &amp;&amp; elem != 'Volume' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-Duration" testNumber="8"/>
			<description>Entry Duration in MovieActivation shall have one of types: Array, Integer, StringByte</description>
			<test>containsDuration == false || DurationHasTypeArray == true || DurationHasTypeInteger == true || DurationHasTypeStringByte == true</test>
			<error>
				<message>Entry Duration in MovieActivation has type %1 instead of one of types: Array, Integer, StringByte</message>
				<arguments>
					<argument>DurationType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-Duration-Integer" testNumber="9"/>
			<description>Entry Duration with type Integer in MovieActivation shall satisfy special case: fn:Eval(@Duration &gt; 0)</description>
			<test>DurationHasTypeInteger != true || (DurationIntegerValue &gt; 0)</test>
			<error>
				<message>Entry Duration with type Integer in MovieActivation does not satisfy special case: fn:Eval(@Duration &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-Duration-StringByte" testNumber="9"/>
			<description>Entry Duration with type StringByte in MovieActivation shall satisfy special case: fn:Eval(fn:StringLength(Duration) == 8)</description>
			<test>DurationHasTypeStringByte != true || (DurationStringSize == 8)</test>
			<error>
				<message>Entry Duration with type StringByte in MovieActivation does not satisfy special case: fn:Eval(fn:StringLength(Duration) == 8)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-FWPosition" testNumber="8"/>
			<description>Entry FWPosition in MovieActivation shall have type Array</description>
			<test>containsFWPosition == false || FWPositionHasTypeArray == true</test>
			<error>
				<message>Entry FWPosition in MovieActivation has type %1 instead of type Array</message>
				<arguments>
					<argument>FWPositionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-FWPosition-Array" testNumber="9"/>
			<description>Entry FWPosition with type Array in MovieActivation shall satisfy special case: fn:Eval((FWPosition::@0 &gt;= 0.0) &amp;&amp; (FWPosition::@0 &lt;= 1.0) &amp;&amp; (FWPosition::@1 &gt;= 0.0) &amp;&amp; (FWPosition::@1 &lt;= 1.0))</description>
			<test>FWPositionHasTypeArray != true || ((FWPosition0HasTypeNumber == false || (FWPosition0NumberValue &gt;= 0.0) &amp;&amp; (FWPosition0NumberValue &lt;= 1.0)) &amp;&amp; (FWPosition1HasTypeNumber == false || (FWPosition1NumberValue &gt;= 0.0)) &amp;&amp; (FWPosition1HasTypeNumber == false || (FWPosition1NumberValue &lt;= 1.0)))</test>
			<error>
				<message>Entry FWPosition with type Array in MovieActivation does not satisfy special case: fn:Eval((FWPosition::@0 &gt;= 0.0) &amp;&amp; (FWPosition::@0 &lt;= 1.0) &amp;&amp; (FWPosition::@1 &gt;= 0.0) &amp;&amp; (FWPosition::@1 &lt;= 1.0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-FWScale" testNumber="8"/>
			<description>Entry FWScale in MovieActivation shall have type Array</description>
			<test>containsFWScale == false || FWScaleHasTypeArray == true</test>
			<error>
				<message>Entry FWScale in MovieActivation has type %1 instead of type Array</message>
				<arguments>
					<argument>FWScaleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-FWScale-Array" testNumber="9"/>
			<description>Entry FWScale with type Array in MovieActivation shall satisfy special case: fn:Eval((FWScale::@0 &gt; 0) &amp;&amp; (FWScale::@1 &gt; 0))</description>
			<test>FWScaleHasTypeArray != true || ((FWScale0HasTypeInteger == false || (FWScale0IntegerValue &gt; 0)) &amp;&amp; (FWScale1HasTypeInteger == false || (FWScale1IntegerValue &gt; 0)))</test>
			<error>
				<message>Entry FWScale with type Array in MovieActivation does not satisfy special case: fn:Eval((FWScale::@0 &gt; 0) &amp;&amp; (FWScale::@1 &gt; 0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-Mode" testNumber="8"/>
			<description>Entry Mode in MovieActivation shall have type Name</description>
			<test>containsMode == false || ModeHasTypeName == true</test>
			<error>
				<message>Entry Mode in MovieActivation has type %1 instead of type Name</message>
				<arguments>
					<argument>ModeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-Mode-Name" testNumber="6"/>
			<description>Entry Mode with type Name in MovieActivation shall have one of values: Palindrome, Once, Repeat, Open</description>
			<test>ModeHasTypeName != true || ModeNameValue == "Once" || ModeNameValue == "Open" || ModeNameValue == "Repeat" || ModeNameValue == "Palindrome"</test>
			<error>
				<message>Entry Mode with type Name in MovieActivation has incorrect value %1 instead of Palindrome, Once, Repeat, Open</message>
				<arguments>
					<argument>ModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-Rate" testNumber="8"/>
			<description>Entry Rate in MovieActivation shall have type Number</description>
			<test>containsRate == false || RateHasTypeNumber == true</test>
			<error>
				<message>Entry Rate in MovieActivation has type %1 instead of type Number</message>
				<arguments>
					<argument>RateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-ShowControls" testNumber="8"/>
			<description>Entry ShowControls in MovieActivation shall have type Boolean</description>
			<test>containsShowControls == false || ShowControlsHasTypeBoolean == true</test>
			<error>
				<message>Entry ShowControls in MovieActivation has type %1 instead of type Boolean</message>
				<arguments>
					<argument>ShowControlsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-Start" testNumber="8"/>
			<description>Entry Start in MovieActivation shall have one of types: Array, Integer, StringByte</description>
			<test>containsStart == false || StartHasTypeArray == true || StartHasTypeInteger == true || StartHasTypeStringByte == true</test>
			<error>
				<message>Entry Start in MovieActivation has type %1 instead of one of types: Array, Integer, StringByte</message>
				<arguments>
					<argument>StartType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-Start-Integer" testNumber="9"/>
			<description>Entry Start with type Integer in MovieActivation shall satisfy special case: fn:Eval(@Start &gt;= 0)</description>
			<test>StartHasTypeInteger != true || (StartIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Start with type Integer in MovieActivation does not satisfy special case: fn:Eval(@Start &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-Start-StringByte" testNumber="9"/>
			<description>Entry Start with type StringByte in MovieActivation shall satisfy special case: fn:Eval(fn:StringLength(Start) == 8)</description>
			<test>StartHasTypeStringByte != true || (StartStringSize == 8)</test>
			<error>
				<message>Entry Start with type StringByte in MovieActivation does not satisfy special case: fn:Eval(fn:StringLength(Start) == 8)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-Synchronous" testNumber="8"/>
			<description>Entry Synchronous in MovieActivation shall have type Boolean</description>
			<test>containsSynchronous == false || SynchronousHasTypeBoolean == true</test>
			<error>
				<message>Entry Synchronous in MovieActivation has type %1 instead of type Boolean</message>
				<arguments>
					<argument>SynchronousType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-Volume" testNumber="8"/>
			<description>Entry Volume in MovieActivation shall have type Number</description>
			<test>containsVolume == false || VolumeHasTypeNumber == true</test>
			<error>
				<message>Entry Volume in MovieActivation has type %1 instead of type Number</message>
				<arguments>
					<argument>VolumeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="MovieActivation-Volume-Number" testNumber="14"/>
			<description>Entry Volume with type Number in MovieActivation shall satisfy possible value predicate: fn:Eval((@Volume &gt;= -1) &amp;&amp; (@Volume &lt;= 1))</description>
			<test>VolumeHasTypeNumber != true || (VolumeNumberValue &gt;= -1) &amp;&amp; (VolumeNumberValue &lt;= 1)</test>
			<error>
				<message>Entry Volume with type Number in MovieActivation does not satisfy possible value predicate: fn:Eval((@Volume &gt;= -1) &amp;&amp; (@Volume &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name" testNumber="1"/>
			<description>Name shall not contain entries except AP, AlternatePresentations, Dests, EmbeddedFiles, IDS, JavaScript, Pages, Renditions, Templates, URLS, XFAResources</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AlternatePresentations' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'EmbeddedFiles' &amp;&amp; elem != 'IDS' &amp;&amp; elem != 'JavaScript' &amp;&amp; elem != 'Pages' &amp;&amp; elem != 'Renditions' &amp;&amp; elem != 'Templates' &amp;&amp; elem != 'URLS' &amp;&amp; elem != 'XFAResources' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Name contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AlternatePresentations' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'EmbeddedFiles' &amp;&amp; elem != 'IDS' &amp;&amp; elem != 'JavaScript' &amp;&amp; elem != 'Pages' &amp;&amp; elem != 'Renditions' &amp;&amp; elem != 'Templates' &amp;&amp; elem != 'URLS' &amp;&amp; elem != 'XFAResources' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-AP" testNumber="8"/>
			<description>Entry AP in Name shall have type NameTree</description>
			<test>containsAP == false || APHasTypeNameTree == true</test>
			<error>
				<message>Entry AP in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>APType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-APTreeNode" testNumber="8"/>
			<description>Entry APTreeNode in Name shall have type NameTree</description>
			<test>containsAPTreeNode == false || APTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry APTreeNode in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>APTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-AlternatePresentations" testNumber="8"/>
			<description>Entry AlternatePresentations in Name shall have type NameTree</description>
			<test>containsAlternatePresentations == false || AlternatePresentationsHasTypeNameTree == true</test>
			<error>
				<message>Entry AlternatePresentations in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>AlternatePresentationsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-AlternatePresentationsTreeNode" testNumber="8"/>
			<description>Entry AlternatePresentationsTreeNode in Name shall have type NameTree</description>
			<test>containsAlternatePresentationsTreeNode == false || AlternatePresentationsTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry AlternatePresentationsTreeNode in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>AlternatePresentationsTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-Dests" testNumber="8"/>
			<description>Entry Dests in Name shall have type NameTree</description>
			<test>containsDests == false || DestsHasTypeNameTree == true</test>
			<error>
				<message>Entry Dests in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>DestsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-DestsTreeNode" testNumber="8"/>
			<description>Entry DestsTreeNode in Name shall have type NameTree</description>
			<test>containsDestsTreeNode == false || DestsTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry DestsTreeNode in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>DestsTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-EmbeddedFiles" testNumber="8"/>
			<description>Entry EmbeddedFiles in Name shall have type NameTree</description>
			<test>containsEmbeddedFiles == false || EmbeddedFilesHasTypeNameTree == true</test>
			<error>
				<message>Entry EmbeddedFiles in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>EmbeddedFilesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-EmbeddedFilesTreeNode" testNumber="8"/>
			<description>Entry EmbeddedFilesTreeNode in Name shall have type NameTree</description>
			<test>containsEmbeddedFilesTreeNode == false || EmbeddedFilesTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry EmbeddedFilesTreeNode in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>EmbeddedFilesTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-IDS" testNumber="8"/>
			<description>Entry IDS in Name shall have type NameTree</description>
			<test>containsIDS == false || IDSHasTypeNameTree == true</test>
			<error>
				<message>Entry IDS in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>IDSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-IDSTreeNode" testNumber="8"/>
			<description>Entry IDSTreeNode in Name shall have type NameTree</description>
			<test>containsIDSTreeNode == false || IDSTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry IDSTreeNode in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>IDSTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-JavaScript" testNumber="8"/>
			<description>Entry JavaScript in Name shall have type NameTree</description>
			<test>containsJavaScript == false || JavaScriptHasTypeNameTree == true</test>
			<error>
				<message>Entry JavaScript in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>JavaScriptType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-JavaScriptTreeNode" testNumber="8"/>
			<description>Entry JavaScriptTreeNode in Name shall have type NameTree</description>
			<test>containsJavaScriptTreeNode == false || JavaScriptTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry JavaScriptTreeNode in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>JavaScriptTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-Pages" testNumber="8"/>
			<description>Entry Pages in Name shall have type NameTree</description>
			<test>containsPages == false || PagesHasTypeNameTree == true</test>
			<error>
				<message>Entry Pages in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>PagesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-PagesTreeNode" testNumber="8"/>
			<description>Entry PagesTreeNode in Name shall have type NameTree</description>
			<test>containsPagesTreeNode == false || PagesTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry PagesTreeNode in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>PagesTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-Renditions" testNumber="8"/>
			<description>Entry Renditions in Name shall have type NameTree</description>
			<test>containsRenditions == false || RenditionsHasTypeNameTree == true</test>
			<error>
				<message>Entry Renditions in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>RenditionsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-RenditionsTreeNode" testNumber="8"/>
			<description>Entry RenditionsTreeNode in Name shall have type NameTree</description>
			<test>containsRenditionsTreeNode == false || RenditionsTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry RenditionsTreeNode in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>RenditionsTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-Templates" testNumber="8"/>
			<description>Entry Templates in Name shall have type NameTree</description>
			<test>containsTemplates == false || TemplatesHasTypeNameTree == true</test>
			<error>
				<message>Entry Templates in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>TemplatesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-TemplatesTreeNode" testNumber="8"/>
			<description>Entry TemplatesTreeNode in Name shall have type NameTree</description>
			<test>containsTemplatesTreeNode == false || TemplatesTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry TemplatesTreeNode in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>TemplatesTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-URLS" testNumber="8"/>
			<description>Entry URLS in Name shall have type NameTree</description>
			<test>containsURLS == false || URLSHasTypeNameTree == true</test>
			<error>
				<message>Entry URLS in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>URLSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-URLSTreeNode" testNumber="8"/>
			<description>Entry URLSTreeNode in Name shall have type NameTree</description>
			<test>containsURLSTreeNode == false || URLSTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry URLSTreeNode in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>URLSTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-XFAResources" testNumber="8"/>
			<description>Entry XFAResources in Name shall have type NameTree</description>
			<test>containsXFAResources == false || XFAResourcesHasTypeNameTree == true</test>
			<error>
				<message>Entry XFAResources in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>XFAResourcesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-XFAResources" testNumber="23"/>
			<description>Entry XFAResources in Name can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsXFAResources == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry XFAResources in Name is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-XFAResourcesTreeNode" testNumber="8"/>
			<description>Entry XFAResourcesTreeNode in Name shall have type NameTree</description>
			<test>containsXFAResourcesTreeNode == false || XFAResourcesTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry XFAResourcesTreeNode in Name has type %1 instead of type NameTree</message>
				<arguments>
					<argument>XFAResourcesTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="Name-XFAResourcesTreeNode" testNumber="23"/>
			<description>Entry XFAResourcesTreeNode in Name can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsXFAResourcesTreeNode == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry XFAResourcesTreeNode in Name is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeAPEntry">
			<id specification="ISO_32000_1_7" clause="NameNameTreeAPEntry-Stream" testNumber="17"/>
			<description>Entry with type Stream in NameNameTreeAP shall be one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Stream in NameNameTreeAP is not one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeAlternatePresentationsEntry">
			<id specification="ISO_32000_1_7" clause="NameNameTreeAlternatePresentationsEntry" testNumber="8"/>
			<description>Entry in NameNameTreeAlternatePresentations shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in NameNameTreeAlternatePresentations has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeDestsEntry">
			<id specification="ISO_32000_1_7" clause="NameNameTreeDestsEntry-Array" testNumber="17"/>
			<description>Entry with type Array in NameNameTreeDests shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Array in NameNameTreeDests is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeDestsEntry">
			<id specification="ISO_32000_1_7" clause="NameNameTreeDestsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in NameNameTreeDests shall be one of objects ActionGoTo, ActionGoToE, ActionGoToR, DestDict</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in NameNameTreeDests is not one of objects ActionGoTo, ActionGoToE, ActionGoToR, DestDict</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeEmbeddedFilesEntry">
			<id specification="ISO_32000_1_7" clause="NameNameTreeEmbeddedFilesEntry" testNumber="8"/>
			<description>Entry in NameNameTreeEmbeddedFiles shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in NameNameTreeEmbeddedFiles has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeIDSEntry">
			<id specification="ISO_32000_1_7" clause="NameNameTreeIDSEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in NameNameTreeIDS shall be one of objects WebCaptureImageSet, WebCapturePageSet</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in NameNameTreeIDS is not one of objects WebCaptureImageSet, WebCapturePageSet</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeJavaScriptEntry">
			<id specification="ISO_32000_1_7" clause="NameNameTreeJavaScriptEntry" testNumber="8"/>
			<description>Entry in NameNameTreeJavaScript shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in NameNameTreeJavaScript has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreePagesEntry">
			<id specification="ISO_32000_1_7" clause="NameNameTreePagesEntry" testNumber="8"/>
			<description>Entry in NameNameTreePages shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in NameNameTreePages has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeRenditionsEntry">
			<id specification="ISO_32000_1_7" clause="NameNameTreeRenditionsEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in NameNameTreeRenditions shall be one of objects RenditionMedia, RenditionSelector</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in NameNameTreeRenditions is not one of objects RenditionMedia, RenditionSelector</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeTemplatesEntry">
			<id specification="ISO_32000_1_7" clause="NameNameTreeTemplatesEntry" testNumber="8"/>
			<description>Entry in NameNameTreeTemplates shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in NameNameTreeTemplates has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeURLSEntry">
			<id specification="ISO_32000_1_7" clause="NameNameTreeURLSEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in NameNameTreeURLS shall be one of objects WebCaptureImageSet, WebCapturePageSet</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in NameNameTreeURLS is not one of objects WebCaptureImageSet, WebCapturePageSet</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeXFAResourcesEntry">
			<id specification="ISO_32000_1_7" clause="NameNameTreeXFAResourcesEntry" testNumber="8"/>
			<description>Entry in NameNameTreeXFAResources shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in NameNameTreeXFAResources has type %1 instead of type Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameTreeNode">
			<id specification="ISO_32000_1_7" clause="NameTreeNode" testNumber="1"/>
			<description>NameTreeNode shall not contain entries except Kids, Limits, Names</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Kids' &amp;&amp; elem != 'Limits' &amp;&amp; elem != 'Names' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>NameTreeNode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Kids' &amp;&amp; elem != 'Limits' &amp;&amp; elem != 'Names' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameTreeNode">
			<id specification="ISO_32000_1_7" clause="NameTreeNode-Kids" testNumber="8"/>
			<description>Entry Kids in NameTreeNode shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in NameTreeNode has type %1 instead of type Array</message>
				<arguments>
					<argument>KidsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameTreeNode">
			<id specification="ISO_32000_1_7" clause="NameTreeNode-Kids" testNumber="11"/>
			<description>Entry Kids in NameTreeNode is required, when fn:Not(fn:IsPresent(Names))</description>
			<test>containsKids == true || (containsNames == true)</test>
			<error>
				<message>Entry Kids in NameTreeNode is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANameTreeNode">
			<id specification="ISO_32000_1_7" clause="NameTreeNode-Kids-Array" testNumber="9"/>
			<description>Entry Kids with type Array in NameTreeNode shall satisfy special case: fn:Not(fn:IsPresent(fn:IsPresent(Names)))</description>
			<test>KidsHasTypeArray != true || ((containsNames != true) || containsKids != true)</test>
			<error>
				<message>Entry Kids with type Array in NameTreeNode does not satisfy special case: fn:Not(fn:IsPresent(fn:IsPresent(Names)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANameTreeNode">
			<id specification="ISO_32000_1_7" clause="NameTreeNode-Limits" testNumber="8"/>
			<description>Entry Limits in NameTreeNode shall have type Array</description>
			<test>containsLimits == false || LimitsHasTypeArray == true</test>
			<error>
				<message>Entry Limits in NameTreeNode has type %1 instead of type Array</message>
				<arguments>
					<argument>LimitsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameTreeNode">
			<id specification="ISO_32000_1_7" clause="NameTreeNode-Names" testNumber="8"/>
			<description>Entry Names in NameTreeNode shall have type Array</description>
			<test>containsNames == false || NamesHasTypeArray == true</test>
			<error>
				<message>Entry Names in NameTreeNode has type %1 instead of type Array</message>
				<arguments>
					<argument>NamesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameTreeNode">
			<id specification="ISO_32000_1_7" clause="NameTreeNode-Names" testNumber="11"/>
			<description>Entry Names in NameTreeNode is required, when fn:Not(fn:IsPresent(Kids))</description>
			<test>containsNames == true || (containsKids == true)</test>
			<error>
				<message>Entry Names in NameTreeNode is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANameTreeNode">
			<id specification="ISO_32000_1_7" clause="NameTreeNode-Names-Array" testNumber="9"/>
			<description>Entry Names with type Array in NameTreeNode shall satisfy special case: fn:Not(fn:IsPresent(fn:IsPresent(Kids)))</description>
			<test>NamesHasTypeArray != true || ((containsKids != true) || containsNames != true)</test>
			<error>
				<message>Entry Names with type Array in NameTreeNode does not satisfy special case: fn:Not(fn:IsPresent(fn:IsPresent(Kids)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANameTreeNodeLimitsArray">
			<id specification="ISO_32000_1_7" clause="NameTreeNodeLimitsArray" testNumber="2"/>
			<description>NameTreeNodeLimitsArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>NameTreeNodeLimitsArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameTreeNodeLimitsArray">
			<id specification="ISO_32000_1_7" clause="NameTreeNodeLimitsArray-0" testNumber="8"/>
			<description>Entry 0 in NameTreeNodeLimitsArray shall have type String</description>
			<test>size &lt;= 0 || entry0HasTypeString == true</test>
			<error>
				<message>Entry 0 in NameTreeNodeLimitsArray has type %1 instead of type String</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameTreeNodeLimitsArray">
			<id specification="ISO_32000_1_7" clause="NameTreeNodeLimitsArray-1" testNumber="8"/>
			<description>Entry 1 in NameTreeNodeLimitsArray shall have type String</description>
			<test>size &lt;= 1 || entry1HasTypeString == true</test>
			<error>
				<message>Entry 1 in NameTreeNodeLimitsArray has type %1 instead of type String</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameTreeNodeNamesArray">
			<id specification="ISO_32000_1_7" clause="NameTreeNodeNamesArray" testNumber="3"/>
			<description>NameTreeNodeNamesArray shall contain 2 * n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>NameTreeNodeNamesArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameTreeNodeNamesArraySubArray">
			<id specification="ISO_32000_1_7" clause="NameTreeNodeNamesArraySubArray" testNumber="2"/>
			<description>NameTreeNodeNamesArraySubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>NameTreeNodeNamesArraySubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameTreeNodeNamesArraySubArray">
			<id specification="ISO_32000_1_7" clause="NameTreeNodeNamesArraySubArray-0" testNumber="8"/>
			<description>Entry 0 in NameTreeNodeNamesArraySubArray shall have type String</description>
			<test>size &lt;= 0 || entry0HasTypeString == true</test>
			<error>
				<message>Entry 0 in NameTreeNodeNamesArraySubArray has type %1 instead of type String</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameTreeNodesArrayEntry">
			<id specification="ISO_32000_1_7" clause="NameTreeNodesArrayEntry" testNumber="8"/>
			<description>Entry in NameTreeNodesArray shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in NameTreeNodesArray has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="NavNode" testNumber="1"/>
			<description>NavNode shall not contain entries except Dur, NA, Next, PA, Prev, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Dur' &amp;&amp; elem != 'NA' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'PA' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>NavNode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Dur' &amp;&amp; elem != 'NA' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'PA' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="NavNode-Dur" testNumber="8"/>
			<description>Entry Dur in NavNode shall have type Number</description>
			<test>containsDur == false || DurHasTypeNumber == true</test>
			<error>
				<message>Entry Dur in NavNode has type %1 instead of type Number</message>
				<arguments>
					<argument>DurType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="NavNode-NA-Dictionary" testNumber="17"/>
			<description>Entry NA with type Dictionary in NavNode shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NAHasTypeDictionary != true || NA_size == 1</test>
			<error>
				<message>Entry NA with type Dictionary in NavNode is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="NavNode-NA" testNumber="8"/>
			<description>Entry NA in NavNode shall have type Dictionary</description>
			<test>containsNA == false || NAHasTypeDictionary == true</test>
			<error>
				<message>Entry NA in NavNode has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>NAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="NavNode-Next" testNumber="8"/>
			<description>Entry Next in NavNode shall have type Dictionary</description>
			<test>containsNext == false || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in NavNode has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="NavNode-PA-Dictionary" testNumber="17"/>
			<description>Entry PA with type Dictionary in NavNode shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>PAHasTypeDictionary != true || PA_size == 1</test>
			<error>
				<message>Entry PA with type Dictionary in NavNode is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="NavNode-PA" testNumber="8"/>
			<description>Entry PA in NavNode shall have type Dictionary</description>
			<test>containsPA == false || PAHasTypeDictionary == true</test>
			<error>
				<message>Entry PA in NavNode has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="NavNode-Prev" testNumber="8"/>
			<description>Entry Prev in NavNode shall have type Dictionary</description>
			<test>containsPrev == false || PrevHasTypeDictionary == true</test>
			<error>
				<message>Entry Prev in NavNode has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PrevType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="NavNode-Type" testNumber="8"/>
			<description>Entry Type in NavNode shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in NavNode has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="NavNode-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in NavNode shall have value NavNode</description>
			<test>TypeHasTypeName != true || TypeNameValue == "NavNode"</test>
			<error>
				<message>Entry Type with type Name in NavNode has incorrect value %1 instead of NavNode</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator" testNumber="1"/>
			<description>Navigator shall not contain entries except APIVersion, Category, Desc, ID, Icon, InitialFields, LoadType, Locale, Name, Resources, SWF, Strings, Version</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'APIVersion' &amp;&amp; elem != 'Category' &amp;&amp; elem != 'Desc' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Icon' &amp;&amp; elem != 'InitialFields' &amp;&amp; elem != 'Layout' &amp;&amp; elem != 'LoadType' &amp;&amp; elem != 'Locale' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'SWF' &amp;&amp; elem != 'Strings' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Navigator contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'APIVersion' &amp;&amp; elem != 'Category' &amp;&amp; elem != 'Desc' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Icon' &amp;&amp; elem != 'InitialFields' &amp;&amp; elem != 'Layout' &amp;&amp; elem != 'LoadType' &amp;&amp; elem != 'Locale' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'SWF' &amp;&amp; elem != 'Strings' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator" testNumber="22"/>
			<description>Navigator shall not contain entries Layout, Type in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'Layout' || elem == 'Type').length == 0</test>
			<error>
				<message>Navigator contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'Layout' || elem == 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-APIVersion" testNumber="8"/>
			<description>Entry APIVersion in Navigator shall have type StringText</description>
			<test>containsAPIVersion == false || APIVersionHasTypeStringText == true</test>
			<error>
				<message>Entry APIVersion in Navigator has type %1 instead of type StringText</message>
				<arguments>
					<argument>APIVersionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-APIVersion" testNumber="7"/>
			<description>Entry APIVersion in Navigator is required</description>
			<test>containsAPIVersion == true</test>
			<error>
				<message>Entry APIVersion in Navigator is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-APIVersion" testNumber="23"/>
			<description>Entry APIVersion in Navigator can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsAPIVersion == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry APIVersion in Navigator is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Category" testNumber="8"/>
			<description>Entry Category in Navigator shall have type StringText</description>
			<test>containsCategory == false || CategoryHasTypeStringText == true</test>
			<error>
				<message>Entry Category in Navigator has type %1 instead of type StringText</message>
				<arguments>
					<argument>CategoryType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Category" testNumber="23"/>
			<description>Entry Category in Navigator can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsCategory == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Category in Navigator is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Desc" testNumber="8"/>
			<description>Entry Desc in Navigator shall have type StringText</description>
			<test>containsDesc == false || DescHasTypeStringText == true</test>
			<error>
				<message>Entry Desc in Navigator has type %1 instead of type StringText</message>
				<arguments>
					<argument>DescType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Desc" testNumber="23"/>
			<description>Entry Desc in Navigator can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsDesc == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Desc in Navigator is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-ID" testNumber="8"/>
			<description>Entry ID in Navigator shall have type StringText</description>
			<test>containsID == false || entryIDHasTypeStringText == true</test>
			<error>
				<message>Entry ID in Navigator has type %1 instead of type StringText</message>
				<arguments>
					<argument>entryIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-ID" testNumber="7"/>
			<description>Entry ID in Navigator is required</description>
			<test>containsID == true</test>
			<error>
				<message>Entry ID in Navigator is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-ID" testNumber="23"/>
			<description>Entry ID in Navigator can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsID == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry ID in Navigator is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Icon" testNumber="8"/>
			<description>Entry Icon in Navigator shall have type StringText</description>
			<test>containsIcon == false || IconHasTypeStringText == true</test>
			<error>
				<message>Entry Icon in Navigator has type %1 instead of type StringText</message>
				<arguments>
					<argument>IconType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Icon" testNumber="23"/>
			<description>Entry Icon in Navigator can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsIcon == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Icon in Navigator is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-InitialFields" testNumber="8"/>
			<description>Entry InitialFields in Navigator shall have type Dictionary</description>
			<test>containsInitialFields == false || InitialFieldsHasTypeDictionary == true</test>
			<error>
				<message>Entry InitialFields in Navigator has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>InitialFieldsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-InitialFields" testNumber="23"/>
			<description>Entry InitialFields in Navigator can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsInitialFields == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry InitialFields in Navigator is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-LoadType" testNumber="8"/>
			<description>Entry LoadType in Navigator shall have type Name</description>
			<test>containsLoadType == false || LoadTypeHasTypeName == true</test>
			<error>
				<message>Entry LoadType in Navigator has type %1 instead of type Name</message>
				<arguments>
					<argument>LoadTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-LoadType" testNumber="23"/>
			<description>Entry LoadType in Navigator can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsLoadType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry LoadType in Navigator is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-LoadType-Name" testNumber="6"/>
			<description>Entry LoadType with type Name in Navigator shall have one of values: Module, Default</description>
			<test>LoadTypeHasTypeName != true || LoadTypeNameValue == "Module" || LoadTypeNameValue == "Default"</test>
			<error>
				<message>Entry LoadType with type Name in Navigator has incorrect value %1 instead of Module, Default</message>
				<arguments>
					<argument>LoadTypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Locale" testNumber="8"/>
			<description>Entry Locale in Navigator shall have type StringText</description>
			<test>containsLocale == false || LocaleHasTypeStringText == true</test>
			<error>
				<message>Entry Locale in Navigator has type %1 instead of type StringText</message>
				<arguments>
					<argument>LocaleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Locale" testNumber="23"/>
			<description>Entry Locale in Navigator can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsLocale == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Locale in Navigator is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Name" testNumber="8"/>
			<description>Entry Name in Navigator shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in Navigator has type %1 instead of type StringText</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Name" testNumber="23"/>
			<description>Entry Name in Navigator can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsName == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Name in Navigator is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Resources" testNumber="8"/>
			<description>Entry Resources in Navigator shall have type NameTree</description>
			<test>containsResources == false || ResourcesHasTypeNameTree == true</test>
			<error>
				<message>Entry Resources in Navigator has type %1 instead of type NameTree</message>
				<arguments>
					<argument>ResourcesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Resources" testNumber="7"/>
			<description>Entry Resources in Navigator is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in Navigator is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Resources" testNumber="23"/>
			<description>Entry Resources in Navigator can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsResources == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Resources in Navigator is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-ResourcesTreeNode" testNumber="8"/>
			<description>Entry ResourcesTreeNode in Navigator shall have type NameTree</description>
			<test>containsResourcesTreeNode == false || ResourcesTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry ResourcesTreeNode in Navigator has type %1 instead of type NameTree</message>
				<arguments>
					<argument>ResourcesTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-ResourcesTreeNode" testNumber="7"/>
			<description>Entry ResourcesTreeNode in Navigator is required</description>
			<test>containsResourcesTreeNode == true</test>
			<error>
				<message>Entry ResourcesTreeNode in Navigator is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-ResourcesTreeNode" testNumber="23"/>
			<description>Entry ResourcesTreeNode in Navigator can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsResourcesTreeNode == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry ResourcesTreeNode in Navigator is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-SWF" testNumber="8"/>
			<description>Entry SWF in Navigator shall have type StringText</description>
			<test>containsSWF == false || SWFHasTypeStringText == true</test>
			<error>
				<message>Entry SWF in Navigator has type %1 instead of type StringText</message>
				<arguments>
					<argument>SWFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-SWF" testNumber="7"/>
			<description>Entry SWF in Navigator is required</description>
			<test>containsSWF == true</test>
			<error>
				<message>Entry SWF in Navigator is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-SWF" testNumber="23"/>
			<description>Entry SWF in Navigator can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsSWF == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry SWF in Navigator is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Strings" testNumber="8"/>
			<description>Entry Strings in Navigator shall have type NameTree</description>
			<test>containsStrings == false || StringsHasTypeNameTree == true</test>
			<error>
				<message>Entry Strings in Navigator has type %1 instead of type NameTree</message>
				<arguments>
					<argument>StringsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Strings" testNumber="23"/>
			<description>Entry Strings in Navigator can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsStrings == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Strings in Navigator is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-StringsTreeNode" testNumber="8"/>
			<description>Entry StringsTreeNode in Navigator shall have type NameTree</description>
			<test>containsStringsTreeNode == false || StringsTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry StringsTreeNode in Navigator has type %1 instead of type NameTree</message>
				<arguments>
					<argument>StringsTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-StringsTreeNode" testNumber="23"/>
			<description>Entry StringsTreeNode in Navigator can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsStringsTreeNode == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry StringsTreeNode in Navigator is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Version" testNumber="8"/>
			<description>Entry Version in Navigator shall have type StringText</description>
			<test>containsVersion == false || VersionHasTypeStringText == true</test>
			<error>
				<message>Entry Version in Navigator has type %1 instead of type StringText</message>
				<arguments>
					<argument>VersionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="Navigator-Version" testNumber="23"/>
			<description>Entry Version in Navigator can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsVersion == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Version in Navigator is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANavigatorNameTreeResourcesEntry">
			<id specification="ISO_32000_1_7" clause="NavigatorNameTreeResourcesEntry" testNumber="8"/>
			<description>Entry in NavigatorNameTreeResources shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in NavigatorNameTreeResources has type %1 instead of type Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat" testNumber="1"/>
			<description>NumberFormat shall not contain entries except C, D, F, FD, O, PS, RD, RT, SS, Type, U</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'O' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'SS' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>NumberFormat contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'O' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'SS' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-C" testNumber="8"/>
			<description>Entry C in NumberFormat shall have type Number</description>
			<test>containsC == false || CHasTypeNumber == true</test>
			<error>
				<message>Entry C in NumberFormat has type %1 instead of type Number</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-C" testNumber="7"/>
			<description>Entry C in NumberFormat is required</description>
			<test>containsC == true</test>
			<error>
				<message>Entry C in NumberFormat is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-D" testNumber="8"/>
			<description>Entry D in NumberFormat shall have type Integer</description>
			<test>containsD == false || DHasTypeInteger == true</test>
			<error>
				<message>Entry D in NumberFormat has type %1 instead of type Integer</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-D-Integer" testNumber="14"/>
			<description>Entry D with type Integer in NumberFormat shall satisfy possible value predicate: fn:Eval(@D &gt; 0)</description>
			<test>DHasTypeInteger != true || DIntegerValue &gt; 0</test>
			<error>
				<message>Entry D with type Integer in NumberFormat does not satisfy possible value predicate: fn:Eval(@D &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-F" testNumber="8"/>
			<description>Entry F in NumberFormat shall have type Name</description>
			<test>containsF == false || FHasTypeName == true</test>
			<error>
				<message>Entry F in NumberFormat has type %1 instead of type Name</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-F-Name" testNumber="6"/>
			<description>Entry F with type Name in NumberFormat shall have one of values: R, D, T, F</description>
			<test>FHasTypeName != true || FNameValue == "D" || FNameValue == "F" || FNameValue == "R" || FNameValue == "T"</test>
			<error>
				<message>Entry F with type Name in NumberFormat has incorrect value %1 instead of R, D, T, F</message>
				<arguments>
					<argument>FNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-FD" testNumber="8"/>
			<description>Entry FD in NumberFormat shall have type Boolean</description>
			<test>containsFD == false || FDHasTypeBoolean == true</test>
			<error>
				<message>Entry FD in NumberFormat has type %1 instead of type Boolean</message>
				<arguments>
					<argument>FDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-O" testNumber="8"/>
			<description>Entry O in NumberFormat shall have type Name</description>
			<test>containsO == false || OHasTypeName == true</test>
			<error>
				<message>Entry O in NumberFormat has type %1 instead of type Name</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-O-Name" testNumber="6"/>
			<description>Entry O with type Name in NumberFormat shall have one of values: P, S</description>
			<test>OHasTypeName != true || ONameValue == "S" || ONameValue == "P"</test>
			<error>
				<message>Entry O with type Name in NumberFormat has incorrect value %1 instead of P, S</message>
				<arguments>
					<argument>ONameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-PS" testNumber="8"/>
			<description>Entry PS in NumberFormat shall have type StringText</description>
			<test>containsPS == false || PSHasTypeStringText == true</test>
			<error>
				<message>Entry PS in NumberFormat has type %1 instead of type StringText</message>
				<arguments>
					<argument>PSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-RD" testNumber="8"/>
			<description>Entry RD in NumberFormat shall have type StringText</description>
			<test>containsRD == false || RDHasTypeStringText == true</test>
			<error>
				<message>Entry RD in NumberFormat has type %1 instead of type StringText</message>
				<arguments>
					<argument>RDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-RT" testNumber="8"/>
			<description>Entry RT in NumberFormat shall have type StringText</description>
			<test>containsRT == false || RTHasTypeStringText == true</test>
			<error>
				<message>Entry RT in NumberFormat has type %1 instead of type StringText</message>
				<arguments>
					<argument>RTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-SS" testNumber="8"/>
			<description>Entry SS in NumberFormat shall have type StringText</description>
			<test>containsSS == false || SSHasTypeStringText == true</test>
			<error>
				<message>Entry SS in NumberFormat has type %1 instead of type StringText</message>
				<arguments>
					<argument>SSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-Type" testNumber="8"/>
			<description>Entry Type in NumberFormat shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in NumberFormat has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in NumberFormat shall have value NumberFormat</description>
			<test>TypeHasTypeName != true || TypeNameValue == "NumberFormat"</test>
			<error>
				<message>Entry Type with type Name in NumberFormat has incorrect value %1 instead of NumberFormat</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-U" testNumber="8"/>
			<description>Entry U in NumberFormat shall have type StringText</description>
			<test>containsU == false || UHasTypeStringText == true</test>
			<error>
				<message>Entry U in NumberFormat has type %1 instead of type StringText</message>
				<arguments>
					<argument>UType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="NumberFormat-U" testNumber="7"/>
			<description>Entry U in NumberFormat is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in NumberFormat is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANumberTreeNode">
			<id specification="ISO_32000_1_7" clause="NumberTreeNode" testNumber="1"/>
			<description>NumberTreeNode shall not contain entries except Kids, Limits, Nums</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Kids' &amp;&amp; elem != 'Limits' &amp;&amp; elem != 'Nums' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>NumberTreeNode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Kids' &amp;&amp; elem != 'Limits' &amp;&amp; elem != 'Nums' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberTreeNode">
			<id specification="ISO_32000_1_7" clause="NumberTreeNode-Kids" testNumber="8"/>
			<description>Entry Kids in NumberTreeNode shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in NumberTreeNode has type %1 instead of type Array</message>
				<arguments>
					<argument>KidsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberTreeNode">
			<id specification="ISO_32000_1_7" clause="NumberTreeNode-Kids" testNumber="11"/>
			<description>Entry Kids in NumberTreeNode is required, when fn:Not(fn:IsPresent(Nums))</description>
			<test>containsKids == true || (containsNums == true)</test>
			<error>
				<message>Entry Kids in NumberTreeNode is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANumberTreeNode">
			<id specification="ISO_32000_1_7" clause="NumberTreeNode-Kids-Array" testNumber="9"/>
			<description>Entry Kids with type Array in NumberTreeNode shall satisfy special case: fn:Not(fn:IsPresent(fn:IsPresent(Nums)))</description>
			<test>KidsHasTypeArray != true || ((containsNums != true) || containsKids != true)</test>
			<error>
				<message>Entry Kids with type Array in NumberTreeNode does not satisfy special case: fn:Not(fn:IsPresent(fn:IsPresent(Nums)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANumberTreeNode">
			<id specification="ISO_32000_1_7" clause="NumberTreeNode-Limits" testNumber="8"/>
			<description>Entry Limits in NumberTreeNode shall have type Array</description>
			<test>containsLimits == false || LimitsHasTypeArray == true</test>
			<error>
				<message>Entry Limits in NumberTreeNode has type %1 instead of type Array</message>
				<arguments>
					<argument>LimitsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberTreeNode">
			<id specification="ISO_32000_1_7" clause="NumberTreeNode-Nums" testNumber="8"/>
			<description>Entry Nums in NumberTreeNode shall have type Array</description>
			<test>containsNums == false || NumsHasTypeArray == true</test>
			<error>
				<message>Entry Nums in NumberTreeNode has type %1 instead of type Array</message>
				<arguments>
					<argument>NumsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberTreeNode">
			<id specification="ISO_32000_1_7" clause="NumberTreeNode-Nums" testNumber="11"/>
			<description>Entry Nums in NumberTreeNode is required, when fn:Not(fn:IsPresent(Kids))</description>
			<test>containsNums == true || (containsKids == true)</test>
			<error>
				<message>Entry Nums in NumberTreeNode is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANumberTreeNode">
			<id specification="ISO_32000_1_7" clause="NumberTreeNode-Nums-Array" testNumber="9"/>
			<description>Entry Nums with type Array in NumberTreeNode shall satisfy special case: fn:Not(fn:IsPresent(fn:IsPresent(Kids)))</description>
			<test>NumsHasTypeArray != true || ((containsKids != true) || containsNums != true)</test>
			<error>
				<message>Entry Nums with type Array in NumberTreeNode does not satisfy special case: fn:Not(fn:IsPresent(fn:IsPresent(Kids)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ANumberTreeNodeLimitsArray">
			<id specification="ISO_32000_1_7" clause="NumberTreeNodeLimitsArray" testNumber="2"/>
			<description>NumberTreeNodeLimitsArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>NumberTreeNodeLimitsArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberTreeNodeLimitsArray">
			<id specification="ISO_32000_1_7" clause="NumberTreeNodeLimitsArray-0" testNumber="8"/>
			<description>Entry 0 in NumberTreeNodeLimitsArray shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in NumberTreeNodeLimitsArray has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberTreeNodeLimitsArray">
			<id specification="ISO_32000_1_7" clause="NumberTreeNodeLimitsArray-1" testNumber="8"/>
			<description>Entry 1 in NumberTreeNodeLimitsArray shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in NumberTreeNodeLimitsArray has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberTreeNodeNumsArray">
			<id specification="ISO_32000_1_7" clause="NumberTreeNodeNumsArray" testNumber="3"/>
			<description>NumberTreeNodeNumsArray shall contain 2 * n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>NumberTreeNodeNumsArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberTreeNodeNumsArraySubArray">
			<id specification="ISO_32000_1_7" clause="NumberTreeNodeNumsArraySubArray" testNumber="2"/>
			<description>NumberTreeNodeNumsArraySubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>NumberTreeNodeNumsArraySubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberTreeNodeNumsArraySubArray">
			<id specification="ISO_32000_1_7" clause="NumberTreeNodeNumsArraySubArray-0" testNumber="8"/>
			<description>Entry 0 in NumberTreeNodeNumsArraySubArray shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in NumberTreeNodeNumsArraySubArray has type %1 instead of type Integer</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberTreeNodesArrayEntry">
			<id specification="ISO_32000_1_7" clause="NumberTreeNodesArrayEntry" testNumber="8"/>
			<description>Entry in NumberTreeNodesArray shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in NumberTreeNodesArray has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOOAdditionalStmsArray">
			<id specification="ISO_32000_1_7" clause="OOAdditionalStmsArray" testNumber="3"/>
			<description>OOAdditionalStmsArray shall contain 2 * n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>OOAdditionalStmsArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOOAdditionalStmsArraySubArray">
			<id specification="ISO_32000_1_7" clause="OOAdditionalStmsArraySubArray" testNumber="2"/>
			<description>OOAdditionalStmsArraySubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>OOAdditionalStmsArraySubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOOAdditionalStmsArraySubArray">
			<id specification="ISO_32000_1_7" clause="OOAdditionalStmsArraySubArray-0" testNumber="8"/>
			<description>Entry 0 in OOAdditionalStmsArraySubArray shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in OOAdditionalStmsArraySubArray has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOOAdditionalStmsArraySubArray">
			<id specification="ISO_32000_1_7" clause="OOAdditionalStmsArraySubArray-0-Name" testNumber="10"/>
			<description>Entry 0 with type Name in OOAdditionalStmsArraySubArray shall be direct</description>
			<test>entry0HasTypeName != true || isentry0Indirect == false</test>
			<error>
				<message>Entry 0 with type Name in OOAdditionalStmsArraySubArray is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOOAdditionalStmsArraySubArray">
			<id specification="ISO_32000_1_7" clause="OOAdditionalStmsArraySubArray-1" testNumber="8"/>
			<description>Entry 1 in OOAdditionalStmsArraySubArray shall have type Stream</description>
			<test>size &lt;= 1 || entry1HasTypeStream == true</test>
			<error>
				<message>Entry 1 in OOAdditionalStmsArraySubArray has type %1 instead of type Stream</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOOAdditionalStmsArraySubArray">
			<id specification="ISO_32000_1_7" clause="OOAdditionalStmsArraySubArray-1-Stream" testNumber="10"/>
			<description>Entry 1 with type Stream in OOAdditionalStmsArraySubArray shall be indirect</description>
			<test>entry1HasTypeStream != true || isentry1Indirect == true</test>
			<error>
				<message>Entry 1 with type Stream in OOAdditionalStmsArraySubArray is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13">
			<id specification="ISO_32000_1_7" clause="OPIVersion13" testNumber="1"/>
			<description>OPIVersion13 shall not contain entries except 1.3</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != '1.3' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OPIVersion13 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != '1.3' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13">
			<id specification="ISO_32000_1_7" clause="OPIVersion13-1.3" testNumber="8"/>
			<description>Entry 1.3 in OPIVersion13 shall have type Dictionary</description>
			<test>contains13 == false || entry13HasTypeDictionary == true</test>
			<error>
				<message>Entry 1.3 in OPIVersion13 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>entry13Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict" testNumber="1"/>
			<description>OPIVersion13Dict shall not contain entries except Color, ColorType, Comments, CropFixed, CropRect, F, GrayMap, ID, ImageType, Overprint, Position, Resolution, Size, Tags, Tint, Transparency, Type, Version</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Color' &amp;&amp; elem != 'ColorType' &amp;&amp; elem != 'Comments' &amp;&amp; elem != 'CropFixed' &amp;&amp; elem != 'CropRect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'GrayMap' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageType' &amp;&amp; elem != 'Overprint' &amp;&amp; elem != 'Position' &amp;&amp; elem != 'Resolution' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Tags' &amp;&amp; elem != 'Tint' &amp;&amp; elem != 'Transparency' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OPIVersion13Dict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Color' &amp;&amp; elem != 'ColorType' &amp;&amp; elem != 'Comments' &amp;&amp; elem != 'CropFixed' &amp;&amp; elem != 'CropRect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'GrayMap' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageType' &amp;&amp; elem != 'Overprint' &amp;&amp; elem != 'Position' &amp;&amp; elem != 'Resolution' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Tags' &amp;&amp; elem != 'Tint' &amp;&amp; elem != 'Transparency' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-Color" testNumber="8"/>
			<description>Entry Color in OPIVersion13Dict shall have type Array</description>
			<test>containsColor == false || ColorHasTypeArray == true</test>
			<error>
				<message>Entry Color in OPIVersion13Dict has type %1 instead of type Array</message>
				<arguments>
					<argument>ColorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-ColorType" testNumber="8"/>
			<description>Entry ColorType in OPIVersion13Dict shall have type Name</description>
			<test>containsColorType == false || ColorTypeHasTypeName == true</test>
			<error>
				<message>Entry ColorType in OPIVersion13Dict has type %1 instead of type Name</message>
				<arguments>
					<argument>ColorTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-Comments" testNumber="8"/>
			<description>Entry Comments in OPIVersion13Dict shall have type StringText</description>
			<test>containsComments == false || CommentsHasTypeStringText == true</test>
			<error>
				<message>Entry Comments in OPIVersion13Dict has type %1 instead of type StringText</message>
				<arguments>
					<argument>CommentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-CropFixed" testNumber="8"/>
			<description>Entry CropFixed in OPIVersion13Dict shall have type Array</description>
			<test>containsCropFixed == false || CropFixedHasTypeArray == true</test>
			<error>
				<message>Entry CropFixed in OPIVersion13Dict has type %1 instead of type Array</message>
				<arguments>
					<argument>CropFixedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-CropRect" testNumber="8"/>
			<description>Entry CropRect in OPIVersion13Dict shall have type Rectangle</description>
			<test>containsCropRect == false || CropRectHasTypeRectangle == true</test>
			<error>
				<message>Entry CropRect in OPIVersion13Dict has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>CropRectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-F" testNumber="8"/>
			<description>Entry F in OPIVersion13Dict shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in OPIVersion13Dict has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-F" testNumber="7"/>
			<description>Entry F in OPIVersion13Dict is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in OPIVersion13Dict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-GrayMap" testNumber="8"/>
			<description>Entry GrayMap in OPIVersion13Dict shall have type Array</description>
			<test>containsGrayMap == false || GrayMapHasTypeArray == true</test>
			<error>
				<message>Entry GrayMap in OPIVersion13Dict has type %1 instead of type Array</message>
				<arguments>
					<argument>GrayMapType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-GrayMap-Array" testNumber="9"/>
			<description>Entry GrayMap with type Array in OPIVersion13Dict shall satisfy special case: fn:Eval((fn:ArrayLength(GrayMap) mod 2) == 0)</description>
			<test>GrayMapHasTypeArray != true || ((GrayMapArraySize % 2) == 0)</test>
			<error>
				<message>Entry GrayMap with type Array in OPIVersion13Dict does not satisfy special case: fn:Eval((fn:ArrayLength(GrayMap) mod 2) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-ID" testNumber="8"/>
			<description>Entry ID in OPIVersion13Dict shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in OPIVersion13Dict has type %1 instead of type StringByte</message>
				<arguments>
					<argument>entryIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-ImageType" testNumber="8"/>
			<description>Entry ImageType in OPIVersion13Dict shall have type Array</description>
			<test>containsImageType == false || ImageTypeHasTypeArray == true</test>
			<error>
				<message>Entry ImageType in OPIVersion13Dict has type %1 instead of type Array</message>
				<arguments>
					<argument>ImageTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-Overprint" testNumber="8"/>
			<description>Entry Overprint in OPIVersion13Dict shall have type Boolean</description>
			<test>containsOverprint == false || OverprintHasTypeBoolean == true</test>
			<error>
				<message>Entry Overprint in OPIVersion13Dict has type %1 instead of type Boolean</message>
				<arguments>
					<argument>OverprintType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-Position" testNumber="8"/>
			<description>Entry Position in OPIVersion13Dict shall have type Array</description>
			<test>containsPosition == false || PositionHasTypeArray == true</test>
			<error>
				<message>Entry Position in OPIVersion13Dict has type %1 instead of type Array</message>
				<arguments>
					<argument>PositionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-Resolution" testNumber="8"/>
			<description>Entry Resolution in OPIVersion13Dict shall have type Array</description>
			<test>containsResolution == false || ResolutionHasTypeArray == true</test>
			<error>
				<message>Entry Resolution in OPIVersion13Dict has type %1 instead of type Array</message>
				<arguments>
					<argument>ResolutionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-Size" testNumber="8"/>
			<description>Entry Size in OPIVersion13Dict shall have type Array</description>
			<test>containsSize == false || SizeHasTypeArray == true</test>
			<error>
				<message>Entry Size in OPIVersion13Dict has type %1 instead of type Array</message>
				<arguments>
					<argument>SizeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-Tags" testNumber="8"/>
			<description>Entry Tags in OPIVersion13Dict shall have type Array</description>
			<test>containsTags == false || TagsHasTypeArray == true</test>
			<error>
				<message>Entry Tags in OPIVersion13Dict has type %1 instead of type Array</message>
				<arguments>
					<argument>TagsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-Tint" testNumber="8"/>
			<description>Entry Tint in OPIVersion13Dict shall have type Number</description>
			<test>containsTint == false || TintHasTypeNumber == true</test>
			<error>
				<message>Entry Tint in OPIVersion13Dict has type %1 instead of type Number</message>
				<arguments>
					<argument>TintType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-Transparency" testNumber="8"/>
			<description>Entry Transparency in OPIVersion13Dict shall have type Boolean</description>
			<test>containsTransparency == false || TransparencyHasTypeBoolean == true</test>
			<error>
				<message>Entry Transparency in OPIVersion13Dict has type %1 instead of type Boolean</message>
				<arguments>
					<argument>TransparencyType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-Type" testNumber="8"/>
			<description>Entry Type in OPIVersion13Dict shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OPIVersion13Dict has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in OPIVersion13Dict shall have value OPI</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OPI"</test>
			<error>
				<message>Entry Type with type Name in OPIVersion13Dict has incorrect value %1 instead of OPI</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-Version" testNumber="8"/>
			<description>Entry Version in OPIVersion13Dict shall have type Number</description>
			<test>containsVersion == false || VersionHasTypeNumber == true</test>
			<error>
				<message>Entry Version in OPIVersion13Dict has type %1 instead of type Number</message>
				<arguments>
					<argument>VersionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-Version" testNumber="7"/>
			<description>Entry Version in OPIVersion13Dict is required</description>
			<test>containsVersion == true</test>
			<error>
				<message>Entry Version in OPIVersion13Dict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion13Dict-Version-Number" testNumber="6"/>
			<description>Entry Version with type Number in OPIVersion13Dict shall have value 1.3</description>
			<test>VersionHasTypeNumber != true || VersionNumberValue == 1.3</test>
			<error>
				<message>Entry Version with type Number in OPIVersion13Dict has incorrect value %1 instead of 1.3</message>
				<arguments>
					<argument>VersionNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20">
			<id specification="ISO_32000_1_7" clause="OPIVersion20" testNumber="1"/>
			<description>OPIVersion20 shall not contain entries except 2.0</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != '2.0' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OPIVersion20 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != '2.0' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20">
			<id specification="ISO_32000_1_7" clause="OPIVersion20-2.0" testNumber="8"/>
			<description>Entry 2.0 in OPIVersion20 shall have type Dictionary</description>
			<test>contains20 == false || entry20HasTypeDictionary == true</test>
			<error>
				<message>Entry 2.0 in OPIVersion20 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>entry20Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict" testNumber="1"/>
			<description>OPIVersion20Dict shall not contain entries except CropRect, F, IncludedImageDimensions, IncludedImageQuality, Inks, MainImage, Overprint, Size, Tags, Type, Version</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CropRect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IncludedImageDimensions' &amp;&amp; elem != 'IncludedImageQuality' &amp;&amp; elem != 'Inks' &amp;&amp; elem != 'MainImage' &amp;&amp; elem != 'Overprint' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Tags' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OPIVersion20Dict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CropRect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IncludedImageDimensions' &amp;&amp; elem != 'IncludedImageQuality' &amp;&amp; elem != 'Inks' &amp;&amp; elem != 'MainImage' &amp;&amp; elem != 'Overprint' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Tags' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-CropRect" testNumber="8"/>
			<description>Entry CropRect in OPIVersion20Dict shall have type Rectangle</description>
			<test>containsCropRect == false || CropRectHasTypeRectangle == true</test>
			<error>
				<message>Entry CropRect in OPIVersion20Dict has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>CropRectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-CropRect" testNumber="11"/>
			<description>Entry CropRect in OPIVersion20Dict is required, when fn:IsPresent(Size)</description>
			<test>containsCropRect == true || (containsSize != true)</test>
			<error>
				<message>Entry CropRect in OPIVersion20Dict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-F" testNumber="8"/>
			<description>Entry F in OPIVersion20Dict shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in OPIVersion20Dict has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-F" testNumber="7"/>
			<description>Entry F in OPIVersion20Dict is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in OPIVersion20Dict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-IncludedImageDimensions" testNumber="8"/>
			<description>Entry IncludedImageDimensions in OPIVersion20Dict shall have type Array</description>
			<test>containsIncludedImageDimensions == false || IncludedImageDimensionsHasTypeArray == true</test>
			<error>
				<message>Entry IncludedImageDimensions in OPIVersion20Dict has type %1 instead of type Array</message>
				<arguments>
					<argument>IncludedImageDimensionsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-IncludedImageDimensions-Array" testNumber="9"/>
			<description>Entry IncludedImageDimensions with type Array in OPIVersion20Dict shall satisfy special case: fn:Eval((IncludedImageDimensions::@0 &gt; 0) &amp;&amp; (IncludedImageDimensions::@1 &gt; 0))</description>
			<test>IncludedImageDimensionsHasTypeArray != true || ((IncludedImageDimensions0HasTypeInteger == false || (IncludedImageDimensions0IntegerValue &gt; 0)) &amp;&amp; (IncludedImageDimensions1HasTypeInteger == false || (IncludedImageDimensions1IntegerValue &gt; 0)))</test>
			<error>
				<message>Entry IncludedImageDimensions with type Array in OPIVersion20Dict does not satisfy special case: fn:Eval((IncludedImageDimensions::@0 &gt; 0) &amp;&amp; (IncludedImageDimensions::@1 &gt; 0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-IncludedImageQuality" testNumber="8"/>
			<description>Entry IncludedImageQuality in OPIVersion20Dict shall have type Number</description>
			<test>containsIncludedImageQuality == false || IncludedImageQualityHasTypeNumber == true</test>
			<error>
				<message>Entry IncludedImageQuality in OPIVersion20Dict has type %1 instead of type Number</message>
				<arguments>
					<argument>IncludedImageQualityType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-IncludedImageQuality-Number" testNumber="6"/>
			<description>Entry IncludedImageQuality with type Number in OPIVersion20Dict shall have one of values: 1, 2, 3</description>
			<test>IncludedImageQualityHasTypeNumber != true || IncludedImageQualityNumberValue == 1 || IncludedImageQualityNumberValue == 2 || IncludedImageQualityNumberValue == 3</test>
			<error>
				<message>Entry IncludedImageQuality with type Number in OPIVersion20Dict has incorrect value %1 instead of 1, 2, 3</message>
				<arguments>
					<argument>IncludedImageQualityNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-Inks" testNumber="8"/>
			<description>Entry Inks in OPIVersion20Dict shall have one of types: Array, Name</description>
			<test>containsInks == false || InksHasTypeArray == true || InksHasTypeName == true</test>
			<error>
				<message>Entry Inks in OPIVersion20Dict has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>InksType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-Inks-Name" testNumber="6"/>
			<description>Entry Inks with type Name in OPIVersion20Dict shall have one of values: registration, full_color</description>
			<test>InksHasTypeName != true || InksNameValue == "full_color" || InksNameValue == "registration"</test>
			<error>
				<message>Entry Inks with type Name in OPIVersion20Dict has incorrect value %1 instead of registration, full_color</message>
				<arguments>
					<argument>InksNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-MainImage" testNumber="8"/>
			<description>Entry MainImage in OPIVersion20Dict shall have type StringByte</description>
			<test>containsMainImage == false || MainImageHasTypeStringByte == true</test>
			<error>
				<message>Entry MainImage in OPIVersion20Dict has type %1 instead of type StringByte</message>
				<arguments>
					<argument>MainImageType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-Overprint" testNumber="8"/>
			<description>Entry Overprint in OPIVersion20Dict shall have type Boolean</description>
			<test>containsOverprint == false || OverprintHasTypeBoolean == true</test>
			<error>
				<message>Entry Overprint in OPIVersion20Dict has type %1 instead of type Boolean</message>
				<arguments>
					<argument>OverprintType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-Size" testNumber="8"/>
			<description>Entry Size in OPIVersion20Dict shall have type Array</description>
			<test>containsSize == false || SizeHasTypeArray == true</test>
			<error>
				<message>Entry Size in OPIVersion20Dict has type %1 instead of type Array</message>
				<arguments>
					<argument>SizeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-Size" testNumber="11"/>
			<description>Entry Size in OPIVersion20Dict is required, when fn:IsPresent(CropRect)</description>
			<test>containsSize == true || (containsCropRect != true)</test>
			<error>
				<message>Entry Size in OPIVersion20Dict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-Size-Array" testNumber="9"/>
			<description>Entry Size with type Array in OPIVersion20Dict shall satisfy special case: fn:Eval((Size::@0 &gt; 0) &amp;&amp; (Size::@1 &gt; 0))</description>
			<test>SizeHasTypeArray != true || ((Size0HasTypeNumber == false || (Size0NumberValue &gt; 0)) &amp;&amp; (Size1HasTypeNumber == false || (Size1NumberValue &gt; 0)))</test>
			<error>
				<message>Entry Size with type Array in OPIVersion20Dict does not satisfy special case: fn:Eval((Size::@0 &gt; 0) &amp;&amp; (Size::@1 &gt; 0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-Tags" testNumber="8"/>
			<description>Entry Tags in OPIVersion20Dict shall have type Array</description>
			<test>containsTags == false || TagsHasTypeArray == true</test>
			<error>
				<message>Entry Tags in OPIVersion20Dict has type %1 instead of type Array</message>
				<arguments>
					<argument>TagsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-Type" testNumber="8"/>
			<description>Entry Type in OPIVersion20Dict shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OPIVersion20Dict has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in OPIVersion20Dict shall have value OPI</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OPI"</test>
			<error>
				<message>Entry Type with type Name in OPIVersion20Dict has incorrect value %1 instead of OPI</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-Version" testNumber="8"/>
			<description>Entry Version in OPIVersion20Dict shall have type Number</description>
			<test>containsVersion == false || VersionHasTypeNumber == true</test>
			<error>
				<message>Entry Version in OPIVersion20Dict has type %1 instead of type Number</message>
				<arguments>
					<argument>VersionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-Version" testNumber="7"/>
			<description>Entry Version in OPIVersion20Dict is required</description>
			<test>containsVersion == true</test>
			<error>
				<message>Entry Version in OPIVersion20Dict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="OPIVersion20Dict-Version-Number" testNumber="6"/>
			<description>Entry Version with type Number in OPIVersion20Dict shall have value 2.0</description>
			<test>VersionHasTypeNumber != true || VersionNumberValue == 2.0</test>
			<error>
				<message>Entry Version with type Number in OPIVersion20Dict has incorrect value %1 instead of 2.0</message>
				<arguments>
					<argument>VersionNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="ObjectReference" testNumber="1"/>
			<description>ObjectReference shall not contain entries except Obj, Pg, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Obj' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ObjectReference contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Obj' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="ObjectReference-Obj-Stream" testNumber="17"/>
			<description>Entry Obj with type Stream in ObjectReference shall be one of objects XObjectFormType1, XObjectImage</description>
			<test>ObjHasTypeStream != true || Obj_size == 1</test>
			<error>
				<message>Entry Obj with type Stream in ObjectReference is not one of objects XObjectFormType1, XObjectImage</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="ObjectReference-Obj" testNumber="8"/>
			<description>Entry Obj in ObjectReference shall have one of types: Array, Dictionary, Stream</description>
			<test>containsObj == false || ObjHasTypeArray == true || ObjHasTypeDictionary == true || ObjHasTypeStream == true</test>
			<error>
				<message>Entry Obj in ObjectReference has type %1 instead of one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>ObjType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="ObjectReference-Obj" testNumber="7"/>
			<description>Entry Obj in ObjectReference is required</description>
			<test>containsObj == true</test>
			<error>
				<message>Entry Obj in ObjectReference is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="ObjectReference-Obj-Array" testNumber="10"/>
			<description>Entry Obj with type Array in ObjectReference shall be indirect</description>
			<test>ObjHasTypeArray != true || isObjIndirect == true</test>
			<error>
				<message>Entry Obj with type Array in ObjectReference is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="ObjectReference-Obj-Dictionary" testNumber="10"/>
			<description>Entry Obj with type Dictionary in ObjectReference shall be indirect</description>
			<test>ObjHasTypeDictionary != true || isObjIndirect == true</test>
			<error>
				<message>Entry Obj with type Dictionary in ObjectReference is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="ObjectReference-Obj-Stream" testNumber="10"/>
			<description>Entry Obj with type Stream in ObjectReference shall be indirect</description>
			<test>ObjHasTypeStream != true || isObjIndirect == true</test>
			<error>
				<message>Entry Obj with type Stream in ObjectReference is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="ObjectReference-Pg" testNumber="8"/>
			<description>Entry Pg in ObjectReference shall have type Dictionary</description>
			<test>containsPg == false || PgHasTypeDictionary == true</test>
			<error>
				<message>Entry Pg in ObjectReference has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PgType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="ObjectReference-Pg-Dictionary" testNumber="10"/>
			<description>Entry Pg with type Dictionary in ObjectReference shall be indirect</description>
			<test>PgHasTypeDictionary != true || isPgIndirect == true</test>
			<error>
				<message>Entry Pg with type Dictionary in ObjectReference is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="ObjectReference-Type" testNumber="8"/>
			<description>Entry Type in ObjectReference shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ObjectReference has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="ObjectReference-Type" testNumber="7"/>
			<description>Entry Type in ObjectReference is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in ObjectReference is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="ObjectReference-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ObjectReference shall have value OBJR</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OBJR"</test>
			<error>
				<message>Entry Type with type Name in ObjectReference has incorrect value %1 instead of OBJR</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream" testNumber="1"/>
			<description>ObjectStream shall not contain entries except DL, DecodeParms, Extends, F, FDecodeParms, FFilter, Filter, First, Length, N, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Extends' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ObjectStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Extends' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-DL" testNumber="8"/>
			<description>Entry DL in ObjectStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ObjectStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-DL-Integer" testNumber="14"/>
			<description>Entry DL with type Integer in ObjectStream shall satisfy possible value predicate: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || DLIntegerValue &gt;= 0</test>
			<error>
				<message>Entry DL with type Integer in ObjectStream does not satisfy possible value predicate: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in ObjectStream shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ObjectStream does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in ObjectStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ObjectStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in ObjectStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ObjectStream has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in ObjectStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ObjectStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-Extends" testNumber="8"/>
			<description>Entry Extends in ObjectStream shall have type Stream</description>
			<test>containsExtends == false || ExtendsHasTypeStream == true</test>
			<error>
				<message>Entry Extends in ObjectStream has type %1 instead of type Stream</message>
				<arguments>
					<argument>ExtendsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-Extends-Stream" testNumber="10"/>
			<description>Entry Extends with type Stream in ObjectStream shall be indirect</description>
			<test>ExtendsHasTypeStream != true || isExtendsIndirect == true</test>
			<error>
				<message>Entry Extends with type Stream in ObjectStream is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-Extends-Stream" testNumber="9"/>
			<description>Entry Extends with type Stream in ObjectStream shall satisfy special case: fn:NoCycle()</description>
			<test>ExtendsHasTypeStream != true || (ExtendshasCycle == false)</test>
			<error>
				<message>Entry Extends with type Stream in ObjectStream does not satisfy special case: fn:NoCycle()</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-F" testNumber="8"/>
			<description>Entry F in ObjectStream shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ObjectStream has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in ObjectStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ObjectStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in ObjectStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ObjectStream has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in ObjectStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ObjectStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-FFilter" testNumber="8"/>
			<description>Entry FFilter in ObjectStream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ObjectStream has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in ObjectStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ObjectStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in ObjectStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ObjectStream has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-Filter" testNumber="8"/>
			<description>Entry Filter in ObjectStream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ObjectStream has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in ObjectStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ObjectStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in ObjectStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ObjectStream has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-First" testNumber="8"/>
			<description>Entry First in ObjectStream shall have type Integer</description>
			<test>containsFirst == false || FirstHasTypeInteger == true</test>
			<error>
				<message>Entry First in ObjectStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>FirstType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-First" testNumber="7"/>
			<description>Entry First in ObjectStream is required</description>
			<test>containsFirst == true</test>
			<error>
				<message>Entry First in ObjectStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-First-Integer" testNumber="14"/>
			<description>Entry First with type Integer in ObjectStream shall satisfy possible value predicate: fn:Eval(@First &gt;= 0)</description>
			<test>FirstHasTypeInteger != true || FirstIntegerValue &gt;= 0</test>
			<error>
				<message>Entry First with type Integer in ObjectStream does not satisfy possible value predicate: fn:Eval(@First &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-Length" testNumber="8"/>
			<description>Entry Length in ObjectStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ObjectStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-Length" testNumber="7"/>
			<description>Entry Length in ObjectStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ObjectStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-N" testNumber="8"/>
			<description>Entry N in ObjectStream shall have type Integer</description>
			<test>containsN == false || NHasTypeInteger == true</test>
			<error>
				<message>Entry N in ObjectStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-N" testNumber="7"/>
			<description>Entry N in ObjectStream is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in ObjectStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-N-Integer" testNumber="14"/>
			<description>Entry N with type Integer in ObjectStream shall satisfy possible value predicate: fn:Eval(@N &gt;= 0)</description>
			<test>NHasTypeInteger != true || NIntegerValue &gt;= 0</test>
			<error>
				<message>Entry N with type Integer in ObjectStream does not satisfy possible value predicate: fn:Eval(@N &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-Type" testNumber="8"/>
			<description>Entry Type in ObjectStream shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ObjectStream has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-Type" testNumber="7"/>
			<description>Entry Type in ObjectStream is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in ObjectStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="ObjectStream-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ObjectStream shall have value ObjStm</description>
			<test>TypeHasTypeName != true || TypeNameValue == "ObjStm"</test>
			<error>
				<message>Entry Type with type Name in ObjectStream has incorrect value %1 instead of ObjStm</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="OptContentConfig" testNumber="1"/>
			<description>OptContentConfig shall not contain entries except AS, BaseState, Creator, Intent, ListMode, Locked, Name, OFF, ON, Order, RBGroups</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AS' &amp;&amp; elem != 'BaseState' &amp;&amp; elem != 'Creator' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'ListMode' &amp;&amp; elem != 'Locked' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OFF' &amp;&amp; elem != 'ON' &amp;&amp; elem != 'Order' &amp;&amp; elem != 'RBGroups' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OptContentConfig contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AS' &amp;&amp; elem != 'BaseState' &amp;&amp; elem != 'Creator' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'ListMode' &amp;&amp; elem != 'Locked' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OFF' &amp;&amp; elem != 'ON' &amp;&amp; elem != 'Order' &amp;&amp; elem != 'RBGroups' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="OptContentConfig-AS" testNumber="8"/>
			<description>Entry AS in OptContentConfig shall have type Array</description>
			<test>containsAS == false || ASHasTypeArray == true</test>
			<error>
				<message>Entry AS in OptContentConfig has type %1 instead of type Array</message>
				<arguments>
					<argument>ASType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="OptContentConfig-BaseState" testNumber="8"/>
			<description>Entry BaseState in OptContentConfig shall have type Name</description>
			<test>containsBaseState == false || BaseStateHasTypeName == true</test>
			<error>
				<message>Entry BaseState in OptContentConfig has type %1 instead of type Name</message>
				<arguments>
					<argument>BaseStateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="OptContentConfig-BaseState-Name" testNumber="6"/>
			<description>Entry BaseState with type Name in OptContentConfig shall have one of values: OFF, Unchanged, ON</description>
			<test>BaseStateHasTypeName != true || BaseStateNameValue == "ON" || BaseStateNameValue == "OFF" || BaseStateNameValue == "Unchanged"</test>
			<error>
				<message>Entry BaseState with type Name in OptContentConfig has incorrect value %1 instead of OFF, Unchanged, ON</message>
				<arguments>
					<argument>BaseStateNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="OptContentConfig-Creator" testNumber="8"/>
			<description>Entry Creator in OptContentConfig shall have type StringText</description>
			<test>containsCreator == false || CreatorHasTypeStringText == true</test>
			<error>
				<message>Entry Creator in OptContentConfig has type %1 instead of type StringText</message>
				<arguments>
					<argument>CreatorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="OptContentConfig-Intent" testNumber="8"/>
			<description>Entry Intent in OptContentConfig shall have one of types: Array, Name</description>
			<test>containsIntent == false || IntentHasTypeArray == true || IntentHasTypeName == true</test>
			<error>
				<message>Entry Intent in OptContentConfig has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>IntentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="OptContentConfig-Intent-Name" testNumber="6"/>
			<description>Entry Intent with type Name in OptContentConfig shall have one of values: All, Design, View</description>
			<test>IntentHasTypeName != true || IntentNameValue == "All" || IntentNameValue == "Design" || IntentNameValue == "View"</test>
			<error>
				<message>Entry Intent with type Name in OptContentConfig has incorrect value %1 instead of All, Design, View</message>
				<arguments>
					<argument>IntentNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="OptContentConfig-ListMode" testNumber="8"/>
			<description>Entry ListMode in OptContentConfig shall have type Name</description>
			<test>containsListMode == false || ListModeHasTypeName == true</test>
			<error>
				<message>Entry ListMode in OptContentConfig has type %1 instead of type Name</message>
				<arguments>
					<argument>ListModeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="OptContentConfig-ListMode-Name" testNumber="6"/>
			<description>Entry ListMode with type Name in OptContentConfig shall have one of values: AllPages, VisiblePages</description>
			<test>ListModeHasTypeName != true || ListModeNameValue == "AllPages" || ListModeNameValue == "VisiblePages"</test>
			<error>
				<message>Entry ListMode with type Name in OptContentConfig has incorrect value %1 instead of AllPages, VisiblePages</message>
				<arguments>
					<argument>ListModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="OptContentConfig-Locked" testNumber="8"/>
			<description>Entry Locked in OptContentConfig shall have type Array</description>
			<test>containsLocked == false || LockedHasTypeArray == true</test>
			<error>
				<message>Entry Locked in OptContentConfig has type %1 instead of type Array</message>
				<arguments>
					<argument>LockedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="OptContentConfig-Name" testNumber="8"/>
			<description>Entry Name in OptContentConfig shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in OptContentConfig has type %1 instead of type StringText</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="OptContentConfig-OFF" testNumber="8"/>
			<description>Entry OFF in OptContentConfig shall have type Array</description>
			<test>containsOFF == false || OFFHasTypeArray == true</test>
			<error>
				<message>Entry OFF in OptContentConfig has type %1 instead of type Array</message>
				<arguments>
					<argument>OFFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="OptContentConfig-ON" testNumber="8"/>
			<description>Entry ON in OptContentConfig shall have type Array</description>
			<test>containsON == false || ONHasTypeArray == true</test>
			<error>
				<message>Entry ON in OptContentConfig has type %1 instead of type Array</message>
				<arguments>
					<argument>ONType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="OptContentConfig-Order" testNumber="8"/>
			<description>Entry Order in OptContentConfig shall have type Array</description>
			<test>containsOrder == false || OrderHasTypeArray == true</test>
			<error>
				<message>Entry Order in OptContentConfig has type %1 instead of type Array</message>
				<arguments>
					<argument>OrderType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="OptContentConfig-RBGroups" testNumber="8"/>
			<description>Entry RBGroups in OptContentConfig shall have type Array</description>
			<test>containsRBGroups == false || RBGroupsHasTypeArray == true</test>
			<error>
				<message>Entry RBGroups in OptContentConfig has type %1 instead of type Array</message>
				<arguments>
					<argument>RBGroupsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_7" clause="OptContentCreatorInfo" testNumber="1"/>
			<description>OptContentCreatorInfo shall not contain entries except Creator, SubType, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Creator' &amp;&amp; elem != 'SubType' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OptContentCreatorInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Creator' &amp;&amp; elem != 'SubType' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_7" clause="OptContentCreatorInfo-Creator" testNumber="8"/>
			<description>Entry Creator in OptContentCreatorInfo shall have type StringText</description>
			<test>containsCreator == false || CreatorHasTypeStringText == true</test>
			<error>
				<message>Entry Creator in OptContentCreatorInfo has type %1 instead of type StringText</message>
				<arguments>
					<argument>CreatorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_7" clause="OptContentCreatorInfo-Creator" testNumber="7"/>
			<description>Entry Creator in OptContentCreatorInfo is required</description>
			<test>containsCreator == true</test>
			<error>
				<message>Entry Creator in OptContentCreatorInfo is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_7" clause="OptContentCreatorInfo-SubType" testNumber="8"/>
			<description>Entry SubType in OptContentCreatorInfo shall have type Name</description>
			<test>containsSubType == false || SubTypeHasTypeName == true</test>
			<error>
				<message>Entry SubType in OptContentCreatorInfo has type %1 instead of type Name</message>
				<arguments>
					<argument>SubTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_7" clause="OptContentCreatorInfo-SubType" testNumber="7"/>
			<description>Entry SubType in OptContentCreatorInfo is required</description>
			<test>containsSubType == true</test>
			<error>
				<message>Entry SubType in OptContentCreatorInfo is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_7" clause="OptContentCreatorInfo-SubType" testNumber="23"/>
			<description>Entry SubType in OptContentCreatorInfo can only be present, if satisfy predicate fn:Extension(Malforms, 1.5)</description>
			<test>containsSubType == false || hasExtensionMalforms == true</test>
			<error>
				<message>Entry SubType in OptContentCreatorInfo is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_7" clause="OptContentCreatorInfo-Subtype" testNumber="8"/>
			<description>Entry Subtype in OptContentCreatorInfo shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in OptContentCreatorInfo has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_7" clause="OptContentCreatorInfo-Subtype" testNumber="7"/>
			<description>Entry Subtype in OptContentCreatorInfo is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in OptContentCreatorInfo is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentExport">
			<id specification="ISO_32000_1_7" clause="OptContentExport" testNumber="1"/>
			<description>OptContentExport shall not contain entries except ExportState</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ExportState' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OptContentExport contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ExportState' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentExport">
			<id specification="ISO_32000_1_7" clause="OptContentExport-ExportState" testNumber="8"/>
			<description>Entry ExportState in OptContentExport shall have type Name</description>
			<test>containsExportState == false || ExportStateHasTypeName == true</test>
			<error>
				<message>Entry ExportState in OptContentExport has type %1 instead of type Name</message>
				<arguments>
					<argument>ExportStateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentExport">
			<id specification="ISO_32000_1_7" clause="OptContentExport-ExportState" testNumber="7"/>
			<description>Entry ExportState in OptContentExport is required</description>
			<test>containsExportState == true</test>
			<error>
				<message>Entry ExportState in OptContentExport is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentExport">
			<id specification="ISO_32000_1_7" clause="OptContentExport-ExportState-Name" testNumber="6"/>
			<description>Entry ExportState with type Name in OptContentExport shall have one of values: OFF, ON</description>
			<test>ExportStateHasTypeName != true || ExportStateNameValue == "ON" || ExportStateNameValue == "OFF"</test>
			<error>
				<message>Entry ExportState with type Name in OptContentExport has incorrect value %1 instead of OFF, ON</message>
				<arguments>
					<argument>ExportStateNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="OptContentGroup" testNumber="1"/>
			<description>OptContentGroup shall not contain entries except GTS_Metadata, Intent, Name, Type, Usage</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'GTS_Metadata' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Usage' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OptContentGroup contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'GTS_Metadata' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Usage' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="OptContentGroup-GTS_Metadata" testNumber="8"/>
			<description>Entry GTS_Metadata in OptContentGroup shall have type Dictionary</description>
			<test>containsGTS_Metadata == false || GTS_MetadataHasTypeDictionary == true</test>
			<error>
				<message>Entry GTS_Metadata in OptContentGroup has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>GTS_MetadataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="OptContentGroup-GTS_Metadata" testNumber="23"/>
			<description>Entry GTS_Metadata in OptContentGroup can only be present, if satisfy predicate fn:Extension(ISO_19593)</description>
			<test>containsGTS_Metadata == false || hasExtensionISO_19593 == true</test>
			<error>
				<message>Entry GTS_Metadata in OptContentGroup is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="OptContentGroup-Intent" testNumber="8"/>
			<description>Entry Intent in OptContentGroup shall have one of types: Array, Name</description>
			<test>containsIntent == false || IntentHasTypeArray == true || IntentHasTypeName == true</test>
			<error>
				<message>Entry Intent in OptContentGroup has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>IntentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="OptContentGroup-Name" testNumber="8"/>
			<description>Entry Name in OptContentGroup shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in OptContentGroup has type %1 instead of type StringText</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="OptContentGroup-Name" testNumber="7"/>
			<description>Entry Name in OptContentGroup is required</description>
			<test>containsName == true</test>
			<error>
				<message>Entry Name in OptContentGroup is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="OptContentGroup-Type" testNumber="8"/>
			<description>Entry Type in OptContentGroup shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OptContentGroup has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="OptContentGroup-Type" testNumber="7"/>
			<description>Entry Type in OptContentGroup is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in OptContentGroup is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="OptContentGroup-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in OptContentGroup shall have value OCG</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OCG"</test>
			<error>
				<message>Entry Type with type Name in OptContentGroup has incorrect value %1 instead of OCG</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="OptContentGroup-Usage" testNumber="8"/>
			<description>Entry Usage in OptContentGroup shall have type Dictionary</description>
			<test>containsUsage == false || UsageHasTypeDictionary == true</test>
			<error>
				<message>Entry Usage in OptContentGroup has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>UsageType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentLanguage">
			<id specification="ISO_32000_1_7" clause="OptContentLanguage" testNumber="1"/>
			<description>OptContentLanguage shall not contain entries except Lang, Preferred</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Lang' &amp;&amp; elem != 'Preferred' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OptContentLanguage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Lang' &amp;&amp; elem != 'Preferred' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentLanguage">
			<id specification="ISO_32000_1_7" clause="OptContentLanguage-Lang" testNumber="8"/>
			<description>Entry Lang in OptContentLanguage shall have type String</description>
			<test>containsLang == false || LangHasTypeString == true</test>
			<error>
				<message>Entry Lang in OptContentLanguage has type %1 instead of type String</message>
				<arguments>
					<argument>LangType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentLanguage">
			<id specification="ISO_32000_1_7" clause="OptContentLanguage-Lang" testNumber="7"/>
			<description>Entry Lang in OptContentLanguage is required</description>
			<test>containsLang == true</test>
			<error>
				<message>Entry Lang in OptContentLanguage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentLanguage">
			<id specification="ISO_32000_1_7" clause="OptContentLanguage-Preferred" testNumber="8"/>
			<description>Entry Preferred in OptContentLanguage shall have type Name</description>
			<test>containsPreferred == false || PreferredHasTypeName == true</test>
			<error>
				<message>Entry Preferred in OptContentLanguage has type %1 instead of type Name</message>
				<arguments>
					<argument>PreferredType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentLanguage">
			<id specification="ISO_32000_1_7" clause="OptContentLanguage-Preferred-Name" testNumber="6"/>
			<description>Entry Preferred with type Name in OptContentLanguage shall have one of values: OFF, ON</description>
			<test>PreferredHasTypeName != true || PreferredNameValue == "ON" || PreferredNameValue == "OFF"</test>
			<error>
				<message>Entry Preferred with type Name in OptContentLanguage has incorrect value %1 instead of OFF, ON</message>
				<arguments>
					<argument>PreferredNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="OptContentMembership" testNumber="1"/>
			<description>OptContentMembership shall not contain entries except OCGs, P, Type, VE</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'OCGs' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'VE' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OptContentMembership contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'OCGs' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'VE' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="OptContentMembership-OCGs" testNumber="8"/>
			<description>Entry OCGs in OptContentMembership shall have one of types: Array, Dictionary, Null</description>
			<test>containsOCGs == false || OCGsHasTypeArray == true || OCGsHasTypeDictionary == true || OCGsHasTypeNull == true</test>
			<error>
				<message>Entry OCGs in OptContentMembership has type %1 instead of one of types: Array, Dictionary, Null</message>
				<arguments>
					<argument>OCGsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="OptContentMembership-P" testNumber="8"/>
			<description>Entry P in OptContentMembership shall have type Name</description>
			<test>containsP == false || PHasTypeName == true</test>
			<error>
				<message>Entry P in OptContentMembership has type %1 instead of type Name</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="OptContentMembership-P-Name" testNumber="6"/>
			<description>Entry P with type Name in OptContentMembership shall have one of values: AllOff, AnyOff, AllOn, AnyOn</description>
			<test>PHasTypeName != true || PNameValue == "AllOn" || PNameValue == "AnyOn" || PNameValue == "AnyOff" || PNameValue == "AllOff"</test>
			<error>
				<message>Entry P with type Name in OptContentMembership has incorrect value %1 instead of AllOff, AnyOff, AllOn, AnyOn</message>
				<arguments>
					<argument>PNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="OptContentMembership-Type" testNumber="8"/>
			<description>Entry Type in OptContentMembership shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OptContentMembership has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="OptContentMembership-Type" testNumber="7"/>
			<description>Entry Type in OptContentMembership is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in OptContentMembership is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="OptContentMembership-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in OptContentMembership shall have value OCMD</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OCMD"</test>
			<error>
				<message>Entry Type with type Name in OptContentMembership has incorrect value %1 instead of OCMD</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="OptContentMembership-VE" testNumber="8"/>
			<description>Entry VE in OptContentMembership shall have type Array</description>
			<test>containsVE == false || VEHasTypeArray == true</test>
			<error>
				<message>Entry VE in OptContentMembership has type %1 instead of type Array</message>
				<arguments>
					<argument>VEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPageElement">
			<id specification="ISO_32000_1_7" clause="OptContentPageElement" testNumber="1"/>
			<description>OptContentPageElement shall not contain entries except Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OptContentPageElement contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPageElement">
			<id specification="ISO_32000_1_7" clause="OptContentPageElement-Subtype" testNumber="8"/>
			<description>Entry Subtype in OptContentPageElement shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in OptContentPageElement has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPageElement">
			<id specification="ISO_32000_1_7" clause="OptContentPageElement-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in OptContentPageElement shall have one of values: FG, BG, L, HF</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "HF" || SubtypeNameValue == "FG" || SubtypeNameValue == "BG" || SubtypeNameValue == "L"</test>
			<error>
				<message>Entry Subtype with type Name in OptContentPageElement has incorrect value %1 instead of FG, BG, L, HF</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPrint">
			<id specification="ISO_32000_1_7" clause="OptContentPrint" testNumber="1"/>
			<description>OptContentPrint shall not contain entries except PrintState, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'PrintState' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OptContentPrint contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'PrintState' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPrint">
			<id specification="ISO_32000_1_7" clause="OptContentPrint-PrintState" testNumber="8"/>
			<description>Entry PrintState in OptContentPrint shall have type Name</description>
			<test>containsPrintState == false || PrintStateHasTypeName == true</test>
			<error>
				<message>Entry PrintState in OptContentPrint has type %1 instead of type Name</message>
				<arguments>
					<argument>PrintStateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPrint">
			<id specification="ISO_32000_1_7" clause="OptContentPrint-PrintState-Name" testNumber="6"/>
			<description>Entry PrintState with type Name in OptContentPrint shall have one of values: OFF, ON</description>
			<test>PrintStateHasTypeName != true || PrintStateNameValue == "ON" || PrintStateNameValue == "OFF"</test>
			<error>
				<message>Entry PrintState with type Name in OptContentPrint has incorrect value %1 instead of OFF, ON</message>
				<arguments>
					<argument>PrintStateNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPrint">
			<id specification="ISO_32000_1_7" clause="OptContentPrint-Subtype" testNumber="8"/>
			<description>Entry Subtype in OptContentPrint shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in OptContentPrint has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_7" clause="OptContentProperties" testNumber="1"/>
			<description>OptContentProperties shall not contain entries except Configs, D, OCGs</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Configs' &amp;&amp; elem != 'D' &amp;&amp; elem != 'OCGs' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OptContentProperties contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Configs' &amp;&amp; elem != 'D' &amp;&amp; elem != 'OCGs' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_7" clause="OptContentProperties-Configs" testNumber="8"/>
			<description>Entry Configs in OptContentProperties shall have type Array</description>
			<test>containsConfigs == false || ConfigsHasTypeArray == true</test>
			<error>
				<message>Entry Configs in OptContentProperties has type %1 instead of type Array</message>
				<arguments>
					<argument>ConfigsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_7" clause="OptContentProperties-D" testNumber="8"/>
			<description>Entry D in OptContentProperties shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in OptContentProperties has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_7" clause="OptContentProperties-D" testNumber="7"/>
			<description>Entry D in OptContentProperties is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in OptContentProperties is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_7" clause="OptContentProperties-OCGs" testNumber="8"/>
			<description>Entry OCGs in OptContentProperties shall have type Array</description>
			<test>containsOCGs == false || OCGsHasTypeArray == true</test>
			<error>
				<message>Entry OCGs in OptContentProperties has type %1 instead of type Array</message>
				<arguments>
					<argument>OCGsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_7" clause="OptContentProperties-OCGs" testNumber="7"/>
			<description>Entry OCGs in OptContentProperties is required</description>
			<test>containsOCGs == true</test>
			<error>
				<message>Entry OCGs in OptContentProperties is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="OptContentUsage" testNumber="1"/>
			<description>OptContentUsage shall not contain entries except CreatorInfo, Export, Language, PageElement, Print, User, View, Zoom</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CreatorInfo' &amp;&amp; elem != 'Export' &amp;&amp; elem != 'Language' &amp;&amp; elem != 'PageElement' &amp;&amp; elem != 'Print' &amp;&amp; elem != 'User' &amp;&amp; elem != 'View' &amp;&amp; elem != 'Zoom' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OptContentUsage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CreatorInfo' &amp;&amp; elem != 'Export' &amp;&amp; elem != 'Language' &amp;&amp; elem != 'PageElement' &amp;&amp; elem != 'Print' &amp;&amp; elem != 'User' &amp;&amp; elem != 'View' &amp;&amp; elem != 'Zoom' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="OptContentUsage-CreatorInfo" testNumber="8"/>
			<description>Entry CreatorInfo in OptContentUsage shall have type Dictionary</description>
			<test>containsCreatorInfo == false || CreatorInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry CreatorInfo in OptContentUsage has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CreatorInfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="OptContentUsage-Export" testNumber="8"/>
			<description>Entry Export in OptContentUsage shall have type Dictionary</description>
			<test>containsExport == false || ExportHasTypeDictionary == true</test>
			<error>
				<message>Entry Export in OptContentUsage has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExportType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="OptContentUsage-Language" testNumber="8"/>
			<description>Entry Language in OptContentUsage shall have type Dictionary</description>
			<test>containsLanguage == false || LanguageHasTypeDictionary == true</test>
			<error>
				<message>Entry Language in OptContentUsage has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>LanguageType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="OptContentUsage-PageElement" testNumber="8"/>
			<description>Entry PageElement in OptContentUsage shall have type Dictionary</description>
			<test>containsPageElement == false || PageElementHasTypeDictionary == true</test>
			<error>
				<message>Entry PageElement in OptContentUsage has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PageElementType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="OptContentUsage-Print" testNumber="8"/>
			<description>Entry Print in OptContentUsage shall have type Dictionary</description>
			<test>containsPrint == false || PrintHasTypeDictionary == true</test>
			<error>
				<message>Entry Print in OptContentUsage has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PrintType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="OptContentUsage-User" testNumber="8"/>
			<description>Entry User in OptContentUsage shall have type Dictionary</description>
			<test>containsUser == false || UserHasTypeDictionary == true</test>
			<error>
				<message>Entry User in OptContentUsage has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>UserType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="OptContentUsage-View" testNumber="8"/>
			<description>Entry View in OptContentUsage shall have type Dictionary</description>
			<test>containsView == false || ViewHasTypeDictionary == true</test>
			<error>
				<message>Entry View in OptContentUsage has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ViewType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="OptContentUsage-Zoom" testNumber="8"/>
			<description>Entry Zoom in OptContentUsage shall have type Dictionary</description>
			<test>containsZoom == false || ZoomHasTypeDictionary == true</test>
			<error>
				<message>Entry Zoom in OptContentUsage has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ZoomType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_7" clause="OptContentUsageApplication" testNumber="1"/>
			<description>OptContentUsageApplication shall not contain entries except Category, Event, OCGs</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Category' &amp;&amp; elem != 'Event' &amp;&amp; elem != 'OCGs' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OptContentUsageApplication contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Category' &amp;&amp; elem != 'Event' &amp;&amp; elem != 'OCGs' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_7" clause="OptContentUsageApplication-Category" testNumber="8"/>
			<description>Entry Category in OptContentUsageApplication shall have type Array</description>
			<test>containsCategory == false || CategoryHasTypeArray == true</test>
			<error>
				<message>Entry Category in OptContentUsageApplication has type %1 instead of type Array</message>
				<arguments>
					<argument>CategoryType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_7" clause="OptContentUsageApplication-Category" testNumber="7"/>
			<description>Entry Category in OptContentUsageApplication is required</description>
			<test>containsCategory == true</test>
			<error>
				<message>Entry Category in OptContentUsageApplication is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_7" clause="OptContentUsageApplication-Event" testNumber="8"/>
			<description>Entry Event in OptContentUsageApplication shall have type Name</description>
			<test>containsEvent == false || EventHasTypeName == true</test>
			<error>
				<message>Entry Event in OptContentUsageApplication has type %1 instead of type Name</message>
				<arguments>
					<argument>EventType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_7" clause="OptContentUsageApplication-Event" testNumber="7"/>
			<description>Entry Event in OptContentUsageApplication is required</description>
			<test>containsEvent == true</test>
			<error>
				<message>Entry Event in OptContentUsageApplication is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_7" clause="OptContentUsageApplication-Event-Name" testNumber="6"/>
			<description>Entry Event with type Name in OptContentUsageApplication shall have one of values: Print, Export, View</description>
			<test>EventHasTypeName != true || EventNameValue == "View" || EventNameValue == "Print" || EventNameValue == "Export"</test>
			<error>
				<message>Entry Event with type Name in OptContentUsageApplication has incorrect value %1 instead of Print, Export, View</message>
				<arguments>
					<argument>EventNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_7" clause="OptContentUsageApplication-OCGs" testNumber="8"/>
			<description>Entry OCGs in OptContentUsageApplication shall have type Array</description>
			<test>containsOCGs == false || OCGsHasTypeArray == true</test>
			<error>
				<message>Entry OCGs in OptContentUsageApplication has type %1 instead of type Array</message>
				<arguments>
					<argument>OCGsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_7" clause="OptContentUser" testNumber="1"/>
			<description>OptContentUser shall not contain entries except Name, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OptContentUser contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_7" clause="OptContentUser-Name" testNumber="8"/>
			<description>Entry Name in OptContentUser shall have one of types: Array, StringText</description>
			<test>containsName == false || NameHasTypeArray == true || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in OptContentUser has type %1 instead of one of types: Array, StringText</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_7" clause="OptContentUser-Type" testNumber="8"/>
			<description>Entry Type in OptContentUser shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OptContentUser has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_7" clause="OptContentUser-Type" testNumber="7"/>
			<description>Entry Type in OptContentUser is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in OptContentUser is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_7" clause="OptContentUser-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in OptContentUser shall have one of values: Org, Ttl, Ind</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Ind" || TypeNameValue == "Ttl" || TypeNameValue == "Org"</test>
			<error>
				<message>Entry Type with type Name in OptContentUser has incorrect value %1 instead of Org, Ttl, Ind</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentView">
			<id specification="ISO_32000_1_7" clause="OptContentView" testNumber="1"/>
			<description>OptContentView shall not contain entries except ViewState</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ViewState' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OptContentView contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ViewState' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentView">
			<id specification="ISO_32000_1_7" clause="OptContentView-ViewState" testNumber="8"/>
			<description>Entry ViewState in OptContentView shall have type Name</description>
			<test>containsViewState == false || ViewStateHasTypeName == true</test>
			<error>
				<message>Entry ViewState in OptContentView has type %1 instead of type Name</message>
				<arguments>
					<argument>ViewStateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentView">
			<id specification="ISO_32000_1_7" clause="OptContentView-ViewState-Name" testNumber="6"/>
			<description>Entry ViewState with type Name in OptContentView shall have one of values: OFF, ON</description>
			<test>ViewStateHasTypeName != true || ViewStateNameValue == "ON" || ViewStateNameValue == "OFF"</test>
			<error>
				<message>Entry ViewState with type Name in OptContentView has incorrect value %1 instead of OFF, ON</message>
				<arguments>
					<argument>ViewStateNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_7" clause="OptContentZoom" testNumber="1"/>
			<description>OptContentZoom shall not contain entries except max, min</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'max' &amp;&amp; elem != 'min' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OptContentZoom contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'max' &amp;&amp; elem != 'min' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_7" clause="OptContentZoom-max" testNumber="8"/>
			<description>Entry max in OptContentZoom shall have type Number</description>
			<test>containsmax == false || maxHasTypeNumber == true</test>
			<error>
				<message>Entry max in OptContentZoom has type %1 instead of type Number</message>
				<arguments>
					<argument>maxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_7" clause="OptContentZoom-max" testNumber="11"/>
			<description>Entry max in OptContentZoom is required, when fn:Not(fn:IsPresent(min))</description>
			<test>containsmax == true || (containsmin == true)</test>
			<error>
				<message>Entry max in OptContentZoom is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_7" clause="OptContentZoom-max-Number" testNumber="14"/>
			<description>Entry max with type Number in OptContentZoom shall satisfy possible value predicate: fn:Eval((@max &gt;= 0.0) &amp;&amp; (@max &gt;= @min))</description>
			<test>maxHasTypeNumber != true || (maxNumberValue &gt;= 0.0) &amp;&amp; (minHasTypeNumber == false || (maxNumberValue &gt;= minNumberValue))</test>
			<error>
				<message>Entry max with type Number in OptContentZoom does not satisfy possible value predicate: fn:Eval((@max &gt;= 0.0) &amp;&amp; (@max &gt;= @min))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_7" clause="OptContentZoom-min" testNumber="8"/>
			<description>Entry min in OptContentZoom shall have type Number</description>
			<test>containsmin == false || minHasTypeNumber == true</test>
			<error>
				<message>Entry min in OptContentZoom has type %1 instead of type Number</message>
				<arguments>
					<argument>minType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_7" clause="OptContentZoom-min" testNumber="11"/>
			<description>Entry min in OptContentZoom is required, when fn:Not(fn:IsPresent(max))</description>
			<test>containsmin == true || (containsmax == true)</test>
			<error>
				<message>Entry min in OptContentZoom is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_7" clause="OptContentZoom-min-Number" testNumber="14"/>
			<description>Entry min with type Number in OptContentZoom shall satisfy possible value predicate: fn:Eval((@min &gt;= 0.0) &amp;&amp; (@min &lt;= @max))</description>
			<test>minHasTypeNumber != true || (minNumberValue &gt;= 0.0) &amp;&amp; (maxHasTypeNumber == false || (minNumberValue &lt;= maxNumberValue))</test>
			<error>
				<message>Entry min with type Number in OptContentZoom does not satisfy possible value predicate: fn:Eval((@min &gt;= 0.0) &amp;&amp; (@min &lt;= @max))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="Outline" testNumber="1"/>
			<description>Outline shall not contain entries except Count, First, Last, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Outline contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="Outline-Count" testNumber="8"/>
			<description>Entry Count in Outline shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in Outline has type %1 instead of type Integer</message>
				<arguments>
					<argument>CountType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="Outline-Count-Integer" testNumber="14"/>
			<description>Entry Count with type Integer in Outline shall satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Count with type Integer in Outline does not satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="Outline-First" testNumber="8"/>
			<description>Entry First in Outline shall have type Dictionary</description>
			<test>containsFirst == false || FirstHasTypeDictionary == true</test>
			<error>
				<message>Entry First in Outline has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FirstType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="Outline-First-Dictionary" testNumber="10"/>
			<description>Entry First with type Dictionary in Outline shall be indirect</description>
			<test>FirstHasTypeDictionary != true || isFirstIndirect == true</test>
			<error>
				<message>Entry First with type Dictionary in Outline is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="Outline-Last" testNumber="8"/>
			<description>Entry Last in Outline shall have type Dictionary</description>
			<test>containsLast == false || LastHasTypeDictionary == true</test>
			<error>
				<message>Entry Last in Outline has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>LastType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="Outline-Last-Dictionary" testNumber="10"/>
			<description>Entry Last with type Dictionary in Outline shall be indirect</description>
			<test>LastHasTypeDictionary != true || isLastIndirect == true</test>
			<error>
				<message>Entry Last with type Dictionary in Outline is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="Outline-Type" testNumber="8"/>
			<description>Entry Type in Outline shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Outline has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="Outline-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Outline shall have value Outlines</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Outlines"</test>
			<error>
				<message>Entry Type with type Name in Outline has incorrect value %1 instead of Outlines</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem" testNumber="1"/>
			<description>OutlineItem shall not contain entries except A, C, Count, Dest, F, First, Last, Next, Parent, Prev, SE, Title</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'F' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'SE' &amp;&amp; elem != 'Title' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OutlineItem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'F' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'SE' &amp;&amp; elem != 'Title' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-A-Dictionary" testNumber="17"/>
			<description>Entry A with type Dictionary in OutlineItem shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in OutlineItem is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-A" testNumber="8"/>
			<description>Entry A in OutlineItem shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in OutlineItem has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-A-Dictionary" testNumber="9"/>
			<description>Entry A with type Dictionary in OutlineItem shall satisfy special case: fn:Not(fn:IsPresent(Dest))</description>
			<test>AHasTypeDictionary != true || (containsDest != true)</test>
			<error>
				<message>Entry A with type Dictionary in OutlineItem does not satisfy special case: fn:Not(fn:IsPresent(Dest))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-C" testNumber="8"/>
			<description>Entry C in OutlineItem shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in OutlineItem has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Count" testNumber="8"/>
			<description>Entry Count in OutlineItem shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in OutlineItem has type %1 instead of type Integer</message>
				<arguments>
					<argument>CountType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Dest-Array" testNumber="17"/>
			<description>Entry Dest with type Array in OutlineItem shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DestHasTypeArray != true || Dest_size == 1</test>
			<error>
				<message>Entry Dest with type Array in OutlineItem is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Dest" testNumber="8"/>
			<description>Entry Dest in OutlineItem shall have one of types: Array, Name, StringByte</description>
			<test>containsDest == false || DestHasTypeArray == true || DestHasTypeName == true || DestHasTypeStringByte == true</test>
			<error>
				<message>Entry Dest in OutlineItem has type %1 instead of one of types: Array, Name, StringByte</message>
				<arguments>
					<argument>DestType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Dest-Array" testNumber="9"/>
			<description>Entry Dest with type Array in OutlineItem shall satisfy special case: fn:Not(fn:IsPresent(A))</description>
			<test>DestHasTypeArray != true || (containsA != true)</test>
			<error>
				<message>Entry Dest with type Array in OutlineItem does not satisfy special case: fn:Not(fn:IsPresent(A))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Dest-Name" testNumber="9"/>
			<description>Entry Dest with type Name in OutlineItem shall satisfy special case: fn:Not(fn:IsPresent(A))</description>
			<test>DestHasTypeName != true || (containsA != true)</test>
			<error>
				<message>Entry Dest with type Name in OutlineItem does not satisfy special case: fn:Not(fn:IsPresent(A))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Dest-StringByte" testNumber="9"/>
			<description>Entry Dest with type StringByte in OutlineItem shall satisfy special case: fn:Not(fn:IsPresent(A))</description>
			<test>DestHasTypeStringByte != true || (containsA != true)</test>
			<error>
				<message>Entry Dest with type StringByte in OutlineItem does not satisfy special case: fn:Not(fn:IsPresent(A))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-F" testNumber="8"/>
			<description>Entry F in OutlineItem shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in OutlineItem has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in OutlineItem shall satisfy special case: fn:Eval(fn:BitsClear(3, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 2 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in OutlineItem does not satisfy special case: fn:Eval(fn:BitsClear(3, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-First" testNumber="8"/>
			<description>Entry First in OutlineItem shall have type Dictionary</description>
			<test>containsFirst == false || FirstHasTypeDictionary == true</test>
			<error>
				<message>Entry First in OutlineItem has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FirstType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-First-Dictionary" testNumber="10"/>
			<description>Entry First with type Dictionary in OutlineItem shall be indirect</description>
			<test>FirstHasTypeDictionary != true || isFirstIndirect == true</test>
			<error>
				<message>Entry First with type Dictionary in OutlineItem is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Last" testNumber="8"/>
			<description>Entry Last in OutlineItem shall have type Dictionary</description>
			<test>containsLast == false || LastHasTypeDictionary == true</test>
			<error>
				<message>Entry Last in OutlineItem has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>LastType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Last-Dictionary" testNumber="10"/>
			<description>Entry Last with type Dictionary in OutlineItem shall be indirect</description>
			<test>LastHasTypeDictionary != true || isLastIndirect == true</test>
			<error>
				<message>Entry Last with type Dictionary in OutlineItem is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Next" testNumber="8"/>
			<description>Entry Next in OutlineItem shall have type Dictionary</description>
			<test>containsNext == false || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in OutlineItem has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>NextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Next-Dictionary" testNumber="10"/>
			<description>Entry Next with type Dictionary in OutlineItem shall be indirect</description>
			<test>NextHasTypeDictionary != true || isNextIndirect == true</test>
			<error>
				<message>Entry Next with type Dictionary in OutlineItem is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in OutlineItem shall be one of objects OutlineItem, Outline</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in OutlineItem is not one of objects OutlineItem, Outline</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Parent" testNumber="8"/>
			<description>Entry Parent in OutlineItem shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in OutlineItem has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Parent" testNumber="7"/>
			<description>Entry Parent in OutlineItem is required</description>
			<test>containsParent == true</test>
			<error>
				<message>Entry Parent in OutlineItem is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Parent-Dictionary" testNumber="10"/>
			<description>Entry Parent with type Dictionary in OutlineItem shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in OutlineItem is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Prev" testNumber="8"/>
			<description>Entry Prev in OutlineItem shall have type Dictionary</description>
			<test>containsPrev == false || PrevHasTypeDictionary == true</test>
			<error>
				<message>Entry Prev in OutlineItem has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PrevType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Prev-Dictionary" testNumber="10"/>
			<description>Entry Prev with type Dictionary in OutlineItem shall be indirect</description>
			<test>PrevHasTypeDictionary != true || isPrevIndirect == true</test>
			<error>
				<message>Entry Prev with type Dictionary in OutlineItem is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-SE" testNumber="8"/>
			<description>Entry SE in OutlineItem shall have type Dictionary</description>
			<test>containsSE == false || SEHasTypeDictionary == true</test>
			<error>
				<message>Entry SE in OutlineItem has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-SE-Dictionary" testNumber="10"/>
			<description>Entry SE with type Dictionary in OutlineItem shall be indirect</description>
			<test>SEHasTypeDictionary != true || isSEIndirect == true</test>
			<error>
				<message>Entry SE with type Dictionary in OutlineItem is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Title" testNumber="8"/>
			<description>Entry Title in OutlineItem shall have type StringText</description>
			<test>containsTitle == false || TitleHasTypeStringText == true</test>
			<error>
				<message>Entry Title in OutlineItem has type %1 instead of type StringText</message>
				<arguments>
					<argument>TitleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="OutlineItem-Title" testNumber="7"/>
			<description>Entry Title in OutlineItem is required</description>
			<test>containsTitle == true</test>
			<error>
				<message>Entry Title in OutlineItem is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="OutputIntents" testNumber="1"/>
			<description>OutputIntents shall not contain entries except DestOutputProfile, Info, OutputCondition, OutputConditionIdentifier, RegistryName, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DestOutputProfile' &amp;&amp; elem != 'DestOutputProfileRef' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'MixingHints' &amp;&amp; elem != 'OutputCondition' &amp;&amp; elem != 'OutputConditionIdentifier' &amp;&amp; elem != 'RegistryName' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SpectralData' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>OutputIntents contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DestOutputProfile' &amp;&amp; elem != 'DestOutputProfileRef' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'MixingHints' &amp;&amp; elem != 'OutputCondition' &amp;&amp; elem != 'OutputConditionIdentifier' &amp;&amp; elem != 'RegistryName' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SpectralData' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="OutputIntents" testNumber="22"/>
			<description>OutputIntents shall not contain entries DestOutputProfileRef, MixingHints, SpectralData in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'DestOutputProfileRef' || elem == 'MixingHints' || elem == 'SpectralData').length == 0</test>
			<error>
				<message>OutputIntents contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'DestOutputProfileRef' || elem == 'MixingHints' || elem == 'SpectralData').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="OutputIntents-DestOutputProfile" testNumber="8"/>
			<description>Entry DestOutputProfile in OutputIntents shall have type Stream</description>
			<test>containsDestOutputProfile == false || DestOutputProfileHasTypeStream == true</test>
			<error>
				<message>Entry DestOutputProfile in OutputIntents has type %1 instead of type Stream</message>
				<arguments>
					<argument>DestOutputProfileType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="OutputIntents-DestOutputProfile-Stream" testNumber="10"/>
			<description>Entry DestOutputProfile with type Stream in OutputIntents shall be indirect</description>
			<test>DestOutputProfileHasTypeStream != true || isDestOutputProfileIndirect == true</test>
			<error>
				<message>Entry DestOutputProfile with type Stream in OutputIntents is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="OutputIntents-Info" testNumber="8"/>
			<description>Entry Info in OutputIntents shall have type StringText</description>
			<test>containsInfo == false || InfoHasTypeStringText == true</test>
			<error>
				<message>Entry Info in OutputIntents has type %1 instead of type StringText</message>
				<arguments>
					<argument>InfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="OutputIntents-OutputCondition" testNumber="8"/>
			<description>Entry OutputCondition in OutputIntents shall have type StringText</description>
			<test>containsOutputCondition == false || OutputConditionHasTypeStringText == true</test>
			<error>
				<message>Entry OutputCondition in OutputIntents has type %1 instead of type StringText</message>
				<arguments>
					<argument>OutputConditionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="OutputIntents-OutputConditionIdentifier" testNumber="8"/>
			<description>Entry OutputConditionIdentifier in OutputIntents shall have type StringText</description>
			<test>containsOutputConditionIdentifier == false || OutputConditionIdentifierHasTypeStringText == true</test>
			<error>
				<message>Entry OutputConditionIdentifier in OutputIntents has type %1 instead of type StringText</message>
				<arguments>
					<argument>OutputConditionIdentifierType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="OutputIntents-OutputConditionIdentifier" testNumber="7"/>
			<description>Entry OutputConditionIdentifier in OutputIntents is required</description>
			<test>containsOutputConditionIdentifier == true</test>
			<error>
				<message>Entry OutputConditionIdentifier in OutputIntents is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="OutputIntents-RegistryName" testNumber="8"/>
			<description>Entry RegistryName in OutputIntents shall have type StringText</description>
			<test>containsRegistryName == false || RegistryNameHasTypeStringText == true</test>
			<error>
				<message>Entry RegistryName in OutputIntents has type %1 instead of type StringText</message>
				<arguments>
					<argument>RegistryNameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="OutputIntents-S" testNumber="8"/>
			<description>Entry S in OutputIntents shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in OutputIntents has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="OutputIntents-S" testNumber="7"/>
			<description>Entry S in OutputIntents is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in OutputIntents is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="OutputIntents-S-Name" testNumber="6"/>
			<description>Entry S with type Name in OutputIntents shall have one of values: ISO_PDFE1, GTS_PDFX, GTS_PDFA1</description>
			<test>SHasTypeName != true || SNameValue == "GTS_PDFX" || SNameValue == "GTS_PDFA1" || SNameValue == "ISO_PDFE1"</test>
			<error>
				<message>Entry S with type Name in OutputIntents has incorrect value %1 instead of ISO_PDFE1, GTS_PDFX, GTS_PDFA1</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="OutputIntents-Type" testNumber="8"/>
			<description>Entry Type in OutputIntents shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OutputIntents has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="OutputIntents-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in OutputIntents shall have value OutputIntent</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OutputIntent"</test>
			<error>
				<message>Entry Type with type Name in OutputIntents has incorrect value %1 instead of OutputIntent</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_7" clause="PageLabel" testNumber="1"/>
			<description>PageLabel shall not contain entries except P, S, St, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'St' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>PageLabel contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'St' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_7" clause="PageLabel-P" testNumber="8"/>
			<description>Entry P in PageLabel shall have type StringText</description>
			<test>containsP == false || PHasTypeStringText == true</test>
			<error>
				<message>Entry P in PageLabel has type %1 instead of type StringText</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_7" clause="PageLabel-S" testNumber="8"/>
			<description>Entry S in PageLabel shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in PageLabel has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_7" clause="PageLabel-S-Name" testNumber="6"/>
			<description>Entry S with type Name in PageLabel shall have one of values: A, a, R, r, D</description>
			<test>SHasTypeName != true || SNameValue == "D" || SNameValue == "R" || SNameValue == "r" || SNameValue == "A" || SNameValue == "a"</test>
			<error>
				<message>Entry S with type Name in PageLabel has incorrect value %1 instead of A, a, R, r, D</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_7" clause="PageLabel-St" testNumber="8"/>
			<description>Entry St in PageLabel shall have type Integer</description>
			<test>containsSt == false || StHasTypeInteger == true</test>
			<error>
				<message>Entry St in PageLabel has type %1 instead of type Integer</message>
				<arguments>
					<argument>StType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_7" clause="PageLabel-St-Integer" testNumber="14"/>
			<description>Entry St with type Integer in PageLabel shall satisfy possible value predicate: fn:Eval(@St &gt;= 1)</description>
			<test>StHasTypeInteger != true || StIntegerValue &gt;= 1</test>
			<error>
				<message>Entry St with type Integer in PageLabel does not satisfy possible value predicate: fn:Eval(@St &gt;= 1)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_7" clause="PageLabel-Type" testNumber="8"/>
			<description>Entry Type in PageLabel shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageLabel has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_7" clause="PageLabel-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in PageLabel shall have value PageLabel</description>
			<test>TypeHasTypeName != true || TypeNameValue == "PageLabel"</test>
			<error>
				<message>Entry Type with type Name in PageLabel has incorrect value %1 instead of PageLabel</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject" testNumber="1"/>
			<description>PageObject shall not contain entries except AA, AF, Annots, ArtBox, B, BleedBox, BoxColorInfo, Contents, CropBox, DPart, Dur, Group, Hid, ID, LastModified, MediaBox, Metadata, PZ, Parent, PieceInfo, PresSteps, Resources, Rotate, SeparationInfo, StructParents, Tabs, TemplateInstantiated, Thumb, Trans, TrimBox, Type, UserUnit, VP</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'Annots' &amp;&amp; elem != 'ArtBox' &amp;&amp; elem != 'B' &amp;&amp; elem != 'BleedBox' &amp;&amp; elem != 'BoxColorInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'DPart' &amp;&amp; elem != 'Dur' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'Hid' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'OutputIntents' &amp;&amp; elem != 'PZ' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'PresSteps' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'SeparationInfo' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Tabs' &amp;&amp; elem != 'TemplateInstantiated' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'TrimBox' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UserUnit' &amp;&amp; elem != 'VP' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>PageObject contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'Annots' &amp;&amp; elem != 'ArtBox' &amp;&amp; elem != 'B' &amp;&amp; elem != 'BleedBox' &amp;&amp; elem != 'BoxColorInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'DPart' &amp;&amp; elem != 'Dur' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'Hid' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'OutputIntents' &amp;&amp; elem != 'PZ' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'PresSteps' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'SeparationInfo' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Tabs' &amp;&amp; elem != 'TemplateInstantiated' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'TrimBox' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UserUnit' &amp;&amp; elem != 'VP' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject" testNumber="22"/>
			<description>PageObject shall not contain entry OutputIntents in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsOutputIntents == false</test>
			<error>
				<message>PageObject contains entry OutputIntents</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-AA" testNumber="8"/>
			<description>Entry AA in PageObject shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in PageObject has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AAType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-AF" testNumber="8"/>
			<description>Entry AF in PageObject shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in PageObject has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-AF" testNumber="23"/>
			<description>Entry AF in PageObject can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in PageObject is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Annots" testNumber="8"/>
			<description>Entry Annots in PageObject shall have type Array</description>
			<test>containsAnnots == false || AnnotsHasTypeArray == true</test>
			<error>
				<message>Entry Annots in PageObject has type %1 instead of type Array</message>
				<arguments>
					<argument>AnnotsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-ArtBox" testNumber="8"/>
			<description>Entry ArtBox in PageObject shall have type Rectangle</description>
			<test>containsArtBox == false || ArtBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry ArtBox in PageObject has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>ArtBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-B" testNumber="8"/>
			<description>Entry B in PageObject shall have type Array</description>
			<test>containsB == false || BHasTypeArray == true</test>
			<error>
				<message>Entry B in PageObject has type %1 instead of type Array</message>
				<arguments>
					<argument>BType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-B-Array" testNumber="9"/>
			<description>Entry B with type Array in PageObject shall satisfy special case: fn:Not(fn:IsPresent(@Type == Template))</description>
			<test>BHasTypeArray != true || ((TypeNameValue != "Template") || containsB != true)</test>
			<error>
				<message>Entry B with type Array in PageObject does not satisfy special case: fn:Not(fn:IsPresent(@Type == Template))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-BleedBox" testNumber="8"/>
			<description>Entry BleedBox in PageObject shall have type Rectangle</description>
			<test>containsBleedBox == false || BleedBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BleedBox in PageObject has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>BleedBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-BoxColorInfo" testNumber="8"/>
			<description>Entry BoxColorInfo in PageObject shall have type Dictionary</description>
			<test>containsBoxColorInfo == false || BoxColorInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry BoxColorInfo in PageObject has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BoxColorInfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Contents" testNumber="8"/>
			<description>Entry Contents in PageObject shall have one of types: Array, Stream</description>
			<test>containsContents == false || ContentsHasTypeArray == true || ContentsHasTypeStream == true</test>
			<error>
				<message>Entry Contents in PageObject has type %1 instead of one of types: Array, Stream</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Contents-Stream" testNumber="10"/>
			<description>Entry Contents with type Stream in PageObject shall be indirect</description>
			<test>ContentsHasTypeStream != true || isContentsIndirect == true</test>
			<error>
				<message>Entry Contents with type Stream in PageObject is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-CropBox" testNumber="8"/>
			<description>Entry CropBox in PageObject shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageObject has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>CropBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-DPart" testNumber="8"/>
			<description>Entry DPart in PageObject shall have type Dictionary</description>
			<test>containsDPart == false || DPartHasTypeDictionary == true</test>
			<error>
				<message>Entry DPart in PageObject has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DPartType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-DPart" testNumber="23"/>
			<description>Entry DPart in PageObject can only be present, if satisfy predicate fn:Eval(fn:Extension(PDF_VT2, 1.6) || 2.0)</description>
			<test>containsDPart == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry DPart in PageObject is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Dur" testNumber="8"/>
			<description>Entry Dur in PageObject shall have type Number</description>
			<test>containsDur == false || DurHasTypeNumber == true</test>
			<error>
				<message>Entry Dur in PageObject has type %1 instead of type Number</message>
				<arguments>
					<argument>DurType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Group" testNumber="8"/>
			<description>Entry Group in PageObject shall have type Dictionary</description>
			<test>containsGroup == false || GroupHasTypeDictionary == true</test>
			<error>
				<message>Entry Group in PageObject has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>GroupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Hid" testNumber="8"/>
			<description>Entry Hid in PageObject shall have type Boolean</description>
			<test>containsHid == false || HidHasTypeBoolean == true</test>
			<error>
				<message>Entry Hid in PageObject has type %1 instead of type Boolean</message>
				<arguments>
					<argument>HidType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Hid" testNumber="5"/>
			<description>Entry Hid in PageObject is deprecated since PDF 1.3</description>
			<test>containsHid == false</test>
			<error>
				<message>Entry Hid in PageObject is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-ID" testNumber="8"/>
			<description>Entry ID in PageObject shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in PageObject has type %1 instead of type StringByte</message>
				<arguments>
					<argument>entryIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-LastModified" testNumber="8"/>
			<description>Entry LastModified in PageObject shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in PageObject has type %1 instead of type Date</message>
				<arguments>
					<argument>LastModifiedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-LastModified" testNumber="11"/>
			<description>Entry LastModified in PageObject is required, when fn:IsPresent(PieceInfo)</description>
			<test>containsLastModified == true || (containsPieceInfo != true)</test>
			<error>
				<message>Entry LastModified in PageObject is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-MediaBox" testNumber="8"/>
			<description>Entry MediaBox in PageObject shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageObject has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>MediaBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-MediaBox" testNumber="7"/>
			<description>Entry MediaBox in PageObject is required</description>
			<test>containsMediaBox == true</test>
			<error>
				<message>Entry MediaBox in PageObject is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Metadata" testNumber="8"/>
			<description>Entry Metadata in PageObject shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in PageObject has type %1 instead of type Stream</message>
				<arguments>
					<argument>MetadataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Metadata-Stream" testNumber="10"/>
			<description>Entry Metadata with type Stream in PageObject shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in PageObject is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-PZ" testNumber="8"/>
			<description>Entry PZ in PageObject shall have type Number</description>
			<test>containsPZ == false || PZHasTypeNumber == true</test>
			<error>
				<message>Entry PZ in PageObject has type %1 instead of type Number</message>
				<arguments>
					<argument>PZType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in PageObject shall be one of objects PageTreeNode, PageTreeNodeRoot</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject is not one of objects PageTreeNode, PageTreeNodeRoot</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Parent" testNumber="8"/>
			<description>Entry Parent in PageObject shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in PageObject has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Parent" testNumber="11"/>
			<description>Entry Parent in PageObject is required, when @Type != Template</description>
			<test>containsParent == true || (TypeNameValue == "Template")</test>
			<error>
				<message>Entry Parent in PageObject is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Parent-Dictionary" testNumber="10"/>
			<description>Entry Parent with type Dictionary in PageObject shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Parent-Dictionary" testNumber="9"/>
			<description>Entry Parent with type Dictionary in PageObject shall satisfy special case: fn:Not(fn:IsPresent(@Type == Template))</description>
			<test>ParentHasTypeDictionary != true || ((TypeNameValue != "Template") || containsParent != true)</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject does not satisfy special case: fn:Not(fn:IsPresent(@Type == Template))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-PieceInfo" testNumber="8"/>
			<description>Entry PieceInfo in PageObject shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in PageObject has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PieceInfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-PresSteps" testNumber="8"/>
			<description>Entry PresSteps in PageObject shall have type Dictionary</description>
			<test>containsPresSteps == false || PresStepsHasTypeDictionary == true</test>
			<error>
				<message>Entry PresSteps in PageObject has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PresStepsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Resources" testNumber="8"/>
			<description>Entry Resources in PageObject shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageObject has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ResourcesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Resources" testNumber="7"/>
			<description>Entry Resources in PageObject is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in PageObject is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Rotate" testNumber="8"/>
			<description>Entry Rotate in PageObject shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageObject has type %1 instead of type Integer</message>
				<arguments>
					<argument>RotateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Rotate-Integer" testNumber="14"/>
			<description>Entry Rotate with type Integer in PageObject shall satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageObject does not satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-SeparationInfo" testNumber="8"/>
			<description>Entry SeparationInfo in PageObject shall have type Dictionary</description>
			<test>containsSeparationInfo == false || SeparationInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry SeparationInfo in PageObject has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SeparationInfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-StructParents" testNumber="8"/>
			<description>Entry StructParents in PageObject shall have type Integer</description>
			<test>containsStructParents == false || StructParentsHasTypeInteger == true</test>
			<error>
				<message>Entry StructParents in PageObject has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-StructParents" testNumber="11"/>
			<description>Entry StructParents in PageObject is required, when fn:PageContainsStructContentItems()</description>
			<test>containsStructParents == true || (pageContainsStructContentItems != true)</test>
			<error>
				<message>Entry StructParents in PageObject is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Tabs" testNumber="8"/>
			<description>Entry Tabs in PageObject shall have type Name</description>
			<test>containsTabs == false || TabsHasTypeName == true</test>
			<error>
				<message>Entry Tabs in PageObject has type %1 instead of type Name</message>
				<arguments>
					<argument>TabsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Tabs-Name" testNumber="6"/>
			<description>Entry Tabs with type Name in PageObject shall have one of values: A, R, C, S, W</description>
			<test>TabsHasTypeName != true || TabsNameValue == "R" || TabsNameValue == "C" || TabsNameValue == "S" || TabsNameValue == "A" || TabsNameValue == "W"</test>
			<error>
				<message>Entry Tabs with type Name in PageObject has incorrect value %1 instead of A, R, C, S, W</message>
				<arguments>
					<argument>TabsNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-TemplateInstantiated" testNumber="8"/>
			<description>Entry TemplateInstantiated in PageObject shall have type Name</description>
			<test>containsTemplateInstantiated == false || TemplateInstantiatedHasTypeName == true</test>
			<error>
				<message>Entry TemplateInstantiated in PageObject has type %1 instead of type Name</message>
				<arguments>
					<argument>TemplateInstantiatedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-TemplateInstantiated" testNumber="11"/>
			<description>Entry TemplateInstantiated in PageObject is required, when fn:InNameTree(trailer::Catalog::Names::Pages) || fn:InNameTree(trailer::Catalog::Names::Templates)</description>
			<test>containsTemplateInstantiated == true || ((TemplateInstantiatedEntryIsIndexInNameTreetrailerCatalogNamesPages != true) &amp;&amp; (TemplateInstantiatedEntryIsIndexInNameTreetrailerCatalogNamesTemplates != true))</test>
			<error>
				<message>Entry TemplateInstantiated in PageObject is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Thumb" testNumber="8"/>
			<description>Entry Thumb in PageObject shall have type Stream</description>
			<test>containsThumb == false || ThumbHasTypeStream == true</test>
			<error>
				<message>Entry Thumb in PageObject has type %1 instead of type Stream</message>
				<arguments>
					<argument>ThumbType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Thumb-Stream" testNumber="10"/>
			<description>Entry Thumb with type Stream in PageObject shall be indirect</description>
			<test>ThumbHasTypeStream != true || isThumbIndirect == true</test>
			<error>
				<message>Entry Thumb with type Stream in PageObject is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Trans" testNumber="8"/>
			<description>Entry Trans in PageObject shall have type Dictionary</description>
			<test>containsTrans == false || TransHasTypeDictionary == true</test>
			<error>
				<message>Entry Trans in PageObject has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TransType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-TrimBox" testNumber="8"/>
			<description>Entry TrimBox in PageObject shall have type Rectangle</description>
			<test>containsTrimBox == false || TrimBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry TrimBox in PageObject has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>TrimBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Type" testNumber="8"/>
			<description>Entry Type in PageObject shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageObject has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Type" testNumber="7"/>
			<description>Entry Type in PageObject is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageObject is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in PageObject shall have one of values: Page, Template</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Page" || TypeNameValue == "Template"</test>
			<error>
				<message>Entry Type with type Name in PageObject has incorrect value %1 instead of Page, Template</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-UserUnit" testNumber="8"/>
			<description>Entry UserUnit in PageObject shall have type Number</description>
			<test>containsUserUnit == false || UserUnitHasTypeNumber == true</test>
			<error>
				<message>Entry UserUnit in PageObject has type %1 instead of type Number</message>
				<arguments>
					<argument>UserUnitType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="PageObject-VP" testNumber="8"/>
			<description>Entry VP in PageObject shall have type Array</description>
			<test>containsVP == false || VPHasTypeArray == true</test>
			<error>
				<message>Entry VP in PageObject has type %1 instead of type Array</message>
				<arguments>
					<argument>VPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APagePieceEntry">
			<id specification="ISO_32000_1_7" clause="PagePieceEntry" testNumber="8"/>
			<description>Entry in PagePiece shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in PagePiece has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode" testNumber="1"/>
			<description>PageTreeNode shall not contain entries except Count, CropBox, Kids, MediaBox, Parent, Resources, Rotate, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>PageTreeNode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-Count" testNumber="8"/>
			<description>Entry Count in PageTreeNode shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in PageTreeNode has type %1 instead of type Integer</message>
				<arguments>
					<argument>CountType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-Count" testNumber="7"/>
			<description>Entry Count in PageTreeNode is required</description>
			<test>containsCount == true</test>
			<error>
				<message>Entry Count in PageTreeNode is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-Count-Integer" testNumber="14"/>
			<description>Entry Count with type Integer in PageTreeNode shall satisfy possible value predicate: fn:Eval(@Count &gt; 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt; 0</test>
			<error>
				<message>Entry Count with type Integer in PageTreeNode does not satisfy possible value predicate: fn:Eval(@Count &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-CropBox" testNumber="8"/>
			<description>Entry CropBox in PageTreeNode shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageTreeNode has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>CropBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-Kids" testNumber="8"/>
			<description>Entry Kids in PageTreeNode shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in PageTreeNode has type %1 instead of type Array</message>
				<arguments>
					<argument>KidsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-Kids" testNumber="7"/>
			<description>Entry Kids in PageTreeNode is required</description>
			<test>containsKids == true</test>
			<error>
				<message>Entry Kids in PageTreeNode is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-Kids-Array" testNumber="9"/>
			<description>Entry Kids with type Array in PageTreeNode shall satisfy special case: fn:Eval(fn:ArrayLength(Kids) &gt; 0)</description>
			<test>KidsHasTypeArray != true || (KidsArraySize &gt; 0)</test>
			<error>
				<message>Entry Kids with type Array in PageTreeNode does not satisfy special case: fn:Eval(fn:ArrayLength(Kids) &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-MediaBox" testNumber="8"/>
			<description>Entry MediaBox in PageTreeNode shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageTreeNode has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>MediaBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-Parent-Dictionary" testNumber="17"/>
			<description>Entry Parent with type Dictionary in PageTreeNode shall be one of objects PageTreeNode, PageTreeNodeRoot</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in PageTreeNode is not one of objects PageTreeNode, PageTreeNodeRoot</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-Parent" testNumber="8"/>
			<description>Entry Parent in PageTreeNode shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in PageTreeNode has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-Parent" testNumber="7"/>
			<description>Entry Parent in PageTreeNode is required</description>
			<test>containsParent == true</test>
			<error>
				<message>Entry Parent in PageTreeNode is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-Parent-Dictionary" testNumber="10"/>
			<description>Entry Parent with type Dictionary in PageTreeNode shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in PageTreeNode is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-Resources" testNumber="8"/>
			<description>Entry Resources in PageTreeNode shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageTreeNode has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ResourcesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-Rotate" testNumber="8"/>
			<description>Entry Rotate in PageTreeNode shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageTreeNode has type %1 instead of type Integer</message>
				<arguments>
					<argument>RotateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-Rotate-Integer" testNumber="14"/>
			<description>Entry Rotate with type Integer in PageTreeNode shall satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageTreeNode does not satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-Type" testNumber="8"/>
			<description>Entry Type in PageTreeNode shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageTreeNode has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-Type" testNumber="7"/>
			<description>Entry Type in PageTreeNode is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageTreeNode is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="PageTreeNode-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in PageTreeNode shall have value Pages</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pages"</test>
			<error>
				<message>Entry Type with type Name in PageTreeNode has incorrect value %1 instead of Pages</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="PageTreeNodeRoot" testNumber="1"/>
			<description>PageTreeNodeRoot shall not contain entries except Count, CropBox, Kids, MediaBox, Resources, Rotate, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>PageTreeNodeRoot contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="PageTreeNodeRoot-Count" testNumber="8"/>
			<description>Entry Count in PageTreeNodeRoot shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in PageTreeNodeRoot has type %1 instead of type Integer</message>
				<arguments>
					<argument>CountType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="PageTreeNodeRoot-Count" testNumber="7"/>
			<description>Entry Count in PageTreeNodeRoot is required</description>
			<test>containsCount == true</test>
			<error>
				<message>Entry Count in PageTreeNodeRoot is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="PageTreeNodeRoot-Count-Integer" testNumber="14"/>
			<description>Entry Count with type Integer in PageTreeNodeRoot shall satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Count with type Integer in PageTreeNodeRoot does not satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="PageTreeNodeRoot-CropBox" testNumber="8"/>
			<description>Entry CropBox in PageTreeNodeRoot shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageTreeNodeRoot has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>CropBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="PageTreeNodeRoot-Kids" testNumber="8"/>
			<description>Entry Kids in PageTreeNodeRoot shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in PageTreeNodeRoot has type %1 instead of type Array</message>
				<arguments>
					<argument>KidsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="PageTreeNodeRoot-Kids" testNumber="7"/>
			<description>Entry Kids in PageTreeNodeRoot is required</description>
			<test>containsKids == true</test>
			<error>
				<message>Entry Kids in PageTreeNodeRoot is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="PageTreeNodeRoot-MediaBox" testNumber="8"/>
			<description>Entry MediaBox in PageTreeNodeRoot shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageTreeNodeRoot has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>MediaBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="PageTreeNodeRoot-Resources" testNumber="8"/>
			<description>Entry Resources in PageTreeNodeRoot shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageTreeNodeRoot has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ResourcesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="PageTreeNodeRoot-Rotate" testNumber="8"/>
			<description>Entry Rotate in PageTreeNodeRoot shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageTreeNodeRoot has type %1 instead of type Integer</message>
				<arguments>
					<argument>RotateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="PageTreeNodeRoot-Rotate-Integer" testNumber="14"/>
			<description>Entry Rotate with type Integer in PageTreeNodeRoot shall satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageTreeNodeRoot does not satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="PageTreeNodeRoot-Type" testNumber="8"/>
			<description>Entry Type in PageTreeNodeRoot shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageTreeNodeRoot has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="PageTreeNodeRoot-Type" testNumber="7"/>
			<description>Entry Type in PageTreeNodeRoot is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageTreeNodeRoot is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="PageTreeNodeRoot-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in PageTreeNodeRoot shall have value Pages</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pages"</test>
			<error>
				<message>Entry Type with type Name in PageTreeNodeRoot has incorrect value %1 instead of Pages</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData" testNumber="1"/>
			<description>PaperMetaData shall not contain entries except Caption, ECC, Height, Resolution, Symbology, Type, Version, Width, XSymWidth, YSymHeight, nCodeWordCol, nCodeWordRow</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Caption' &amp;&amp; elem != 'ECC' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Resolution' &amp;&amp; elem != 'Symbology' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'XSymWidth' &amp;&amp; elem != 'YSymHeight' &amp;&amp; elem != 'nCodeWordCol' &amp;&amp; elem != 'nCodeWordRow' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>PaperMetaData contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Caption' &amp;&amp; elem != 'ECC' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Resolution' &amp;&amp; elem != 'Symbology' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'XSymWidth' &amp;&amp; elem != 'YSymHeight' &amp;&amp; elem != 'nCodeWordCol' &amp;&amp; elem != 'nCodeWordRow' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Caption" testNumber="8"/>
			<description>Entry Caption in PaperMetaData shall have type StringText</description>
			<test>containsCaption == false || CaptionHasTypeStringText == true</test>
			<error>
				<message>Entry Caption in PaperMetaData has type %1 instead of type StringText</message>
				<arguments>
					<argument>CaptionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Caption" testNumber="23"/>
			<description>Entry Caption in PaperMetaData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsCaption == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Caption in PaperMetaData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-ECC" testNumber="8"/>
			<description>Entry ECC in PaperMetaData shall have type Integer</description>
			<test>containsECC == false || ECCHasTypeInteger == true</test>
			<error>
				<message>Entry ECC in PaperMetaData has type %1 instead of type Integer</message>
				<arguments>
					<argument>ECCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-ECC" testNumber="11"/>
			<description>Entry ECC in PaperMetaData is required, when (@Symbology == PDF417) || (@Symbology == QRCode)</description>
			<test>containsECC == true || ((SymbologyNameValue != "PDF417") &amp;&amp; (SymbologyNameValue != "QRCode"))</test>
			<error>
				<message>Entry ECC in PaperMetaData is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-ECC" testNumber="23"/>
			<description>Entry ECC in PaperMetaData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsECC == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry ECC in PaperMetaData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-ECC-Integer" testNumber="14"/>
			<description>Entry ECC with type Integer in PaperMetaData shall satisfy possible value predicate: fn:Eval((@ECC &gt;= 0) &amp;&amp; (((@Symbology == PDF417) &amp;&amp; (@ECC &lt;= 8)) || ((@Symbology == QRCode) &amp;&amp; (@ECC &lt;= 3))))</description>
			<test>ECCHasTypeInteger != true || (ECCIntegerValue &gt;= 0) &amp;&amp; (((SymbologyNameValue == "PDF417") &amp;&amp; (ECCIntegerValue &lt;= 8)) || ((SymbologyNameValue == "QRCode") &amp;&amp; (ECCIntegerValue &lt;= 3)))</test>
			<error>
				<message>Entry ECC with type Integer in PaperMetaData does not satisfy possible value predicate: fn:Eval((@ECC &gt;= 0) &amp;&amp; (((@Symbology == PDF417) &amp;&amp; (@ECC &lt;= 8)) || ((@Symbology == QRCode) &amp;&amp; (@ECC &lt;= 3))))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Height" testNumber="8"/>
			<description>Entry Height in PaperMetaData shall have type Number</description>
			<test>containsHeight == false || HeightHasTypeNumber == true</test>
			<error>
				<message>Entry Height in PaperMetaData has type %1 instead of type Number</message>
				<arguments>
					<argument>HeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Height" testNumber="7"/>
			<description>Entry Height in PaperMetaData is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in PaperMetaData is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Height" testNumber="23"/>
			<description>Entry Height in PaperMetaData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsHeight == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Height in PaperMetaData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Height-Number" testNumber="9"/>
			<description>Entry Height with type Number in PaperMetaData shall satisfy special case: fn:Eval(@Height &gt; 0)</description>
			<test>HeightHasTypeNumber != true || (HeightNumberValue &gt; 0)</test>
			<error>
				<message>Entry Height with type Number in PaperMetaData does not satisfy special case: fn:Eval(@Height &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Resolution" testNumber="8"/>
			<description>Entry Resolution in PaperMetaData shall have type Number</description>
			<test>containsResolution == false || ResolutionHasTypeNumber == true</test>
			<error>
				<message>Entry Resolution in PaperMetaData has type %1 instead of type Number</message>
				<arguments>
					<argument>ResolutionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Resolution" testNumber="23"/>
			<description>Entry Resolution in PaperMetaData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsResolution == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Resolution in PaperMetaData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Resolution-Number" testNumber="9"/>
			<description>Entry Resolution with type Number in PaperMetaData shall satisfy special case: fn:Eval(@Resolution &gt; 0)</description>
			<test>ResolutionHasTypeNumber != true || (ResolutionNumberValue &gt; 0)</test>
			<error>
				<message>Entry Resolution with type Number in PaperMetaData does not satisfy special case: fn:Eval(@Resolution &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Symbology" testNumber="8"/>
			<description>Entry Symbology in PaperMetaData shall have type Name</description>
			<test>containsSymbology == false || SymbologyHasTypeName == true</test>
			<error>
				<message>Entry Symbology in PaperMetaData has type %1 instead of type Name</message>
				<arguments>
					<argument>SymbologyType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Symbology" testNumber="7"/>
			<description>Entry Symbology in PaperMetaData is required</description>
			<test>containsSymbology == true</test>
			<error>
				<message>Entry Symbology in PaperMetaData is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Symbology" testNumber="23"/>
			<description>Entry Symbology in PaperMetaData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsSymbology == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Symbology in PaperMetaData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Symbology-Name" testNumber="6"/>
			<description>Entry Symbology with type Name in PaperMetaData shall have one of values: QRCode, PDF417, DataMatrix</description>
			<test>SymbologyHasTypeName != true || SymbologyNameValue == "PDF417" || SymbologyNameValue == "QRCode" || SymbologyNameValue == "DataMatrix"</test>
			<error>
				<message>Entry Symbology with type Name in PaperMetaData has incorrect value %1 instead of QRCode, PDF417, DataMatrix</message>
				<arguments>
					<argument>SymbologyNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Type" testNumber="8"/>
			<description>Entry Type in PaperMetaData shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PaperMetaData has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Type" testNumber="7"/>
			<description>Entry Type in PaperMetaData is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PaperMetaData is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Type" testNumber="23"/>
			<description>Entry Type in PaperMetaData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in PaperMetaData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in PaperMetaData shall have value PaperMetaData</description>
			<test>TypeHasTypeName != true || TypeNameValue == "PaperMetaData"</test>
			<error>
				<message>Entry Type with type Name in PaperMetaData has incorrect value %1 instead of PaperMetaData</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Version" testNumber="8"/>
			<description>Entry Version in PaperMetaData shall have type Number</description>
			<test>containsVersion == false || VersionHasTypeNumber == true</test>
			<error>
				<message>Entry Version in PaperMetaData has type %1 instead of type Number</message>
				<arguments>
					<argument>VersionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Version" testNumber="7"/>
			<description>Entry Version in PaperMetaData is required</description>
			<test>containsVersion == true</test>
			<error>
				<message>Entry Version in PaperMetaData is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Version" testNumber="23"/>
			<description>Entry Version in PaperMetaData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsVersion == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Version in PaperMetaData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Version-Number" testNumber="6"/>
			<description>Entry Version with type Number in PaperMetaData shall have value 1</description>
			<test>VersionHasTypeNumber != true || VersionNumberValue == 1</test>
			<error>
				<message>Entry Version with type Number in PaperMetaData has incorrect value %1 instead of 1</message>
				<arguments>
					<argument>VersionNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Width" testNumber="8"/>
			<description>Entry Width in PaperMetaData shall have type Number</description>
			<test>containsWidth == false || WidthHasTypeNumber == true</test>
			<error>
				<message>Entry Width in PaperMetaData has type %1 instead of type Number</message>
				<arguments>
					<argument>WidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Width" testNumber="7"/>
			<description>Entry Width in PaperMetaData is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in PaperMetaData is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Width" testNumber="23"/>
			<description>Entry Width in PaperMetaData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsWidth == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Width in PaperMetaData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-Width-Number" testNumber="9"/>
			<description>Entry Width with type Number in PaperMetaData shall satisfy special case: fn:Eval(@Width &gt; 0)</description>
			<test>WidthHasTypeNumber != true || (WidthNumberValue &gt; 0)</test>
			<error>
				<message>Entry Width with type Number in PaperMetaData does not satisfy special case: fn:Eval(@Width &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-XSymWidth" testNumber="8"/>
			<description>Entry XSymWidth in PaperMetaData shall have type Integer</description>
			<test>containsXSymWidth == false || XSymWidthHasTypeInteger == true</test>
			<error>
				<message>Entry XSymWidth in PaperMetaData has type %1 instead of type Integer</message>
				<arguments>
					<argument>XSymWidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-XSymWidth" testNumber="7"/>
			<description>Entry XSymWidth in PaperMetaData is required</description>
			<test>containsXSymWidth == true</test>
			<error>
				<message>Entry XSymWidth in PaperMetaData is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-XSymWidth" testNumber="23"/>
			<description>Entry XSymWidth in PaperMetaData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsXSymWidth == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry XSymWidth in PaperMetaData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-XSymWidth-Integer" testNumber="9"/>
			<description>Entry XSymWidth with type Integer in PaperMetaData shall satisfy special case: fn:Eval(@XSymWidth &gt; 0)</description>
			<test>XSymWidthHasTypeInteger != true || (XSymWidthIntegerValue &gt; 0)</test>
			<error>
				<message>Entry XSymWidth with type Integer in PaperMetaData does not satisfy special case: fn:Eval(@XSymWidth &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-YSymHeight" testNumber="8"/>
			<description>Entry YSymHeight in PaperMetaData shall have type Integer</description>
			<test>containsYSymHeight == false || YSymHeightHasTypeInteger == true</test>
			<error>
				<message>Entry YSymHeight in PaperMetaData has type %1 instead of type Integer</message>
				<arguments>
					<argument>YSymHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-YSymHeight" testNumber="7"/>
			<description>Entry YSymHeight in PaperMetaData is required</description>
			<test>containsYSymHeight == true</test>
			<error>
				<message>Entry YSymHeight in PaperMetaData is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-YSymHeight" testNumber="23"/>
			<description>Entry YSymHeight in PaperMetaData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsYSymHeight == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry YSymHeight in PaperMetaData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-YSymHeight-Integer" testNumber="9"/>
			<description>Entry YSymHeight with type Integer in PaperMetaData shall satisfy special case: fn:Eval(@YSymHeight &gt; 0)</description>
			<test>YSymHeightHasTypeInteger != true || (YSymHeightIntegerValue &gt; 0)</test>
			<error>
				<message>Entry YSymHeight with type Integer in PaperMetaData does not satisfy special case: fn:Eval(@YSymHeight &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-nCodeWordCol" testNumber="8"/>
			<description>Entry nCodeWordCol in PaperMetaData shall have type Number</description>
			<test>containsnCodeWordCol == false || nCodeWordColHasTypeNumber == true</test>
			<error>
				<message>Entry nCodeWordCol in PaperMetaData has type %1 instead of type Number</message>
				<arguments>
					<argument>nCodeWordColType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-nCodeWordCol" testNumber="23"/>
			<description>Entry nCodeWordCol in PaperMetaData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsnCodeWordCol == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry nCodeWordCol in PaperMetaData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-nCodeWordCol" testNumber="5"/>
			<description>Entry nCodeWordCol in PaperMetaData is deprecated since PDF 1.7</description>
			<test>containsnCodeWordCol == false</test>
			<error>
				<message>Entry nCodeWordCol in PaperMetaData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-nCodeWordRow" testNumber="8"/>
			<description>Entry nCodeWordRow in PaperMetaData shall have type Number</description>
			<test>containsnCodeWordRow == false || nCodeWordRowHasTypeNumber == true</test>
			<error>
				<message>Entry nCodeWordRow in PaperMetaData has type %1 instead of type Number</message>
				<arguments>
					<argument>nCodeWordRowType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-nCodeWordRow" testNumber="23"/>
			<description>Entry nCodeWordRow in PaperMetaData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsnCodeWordRow == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry nCodeWordRow in PaperMetaData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="PaperMetaData-nCodeWordRow" testNumber="5"/>
			<description>Entry nCodeWordRow in PaperMetaData is deprecated since PDF 1.7</description>
			<test>containsnCodeWordRow == false</test>
			<error>
				<message>Entry nCodeWordRow in PaperMetaData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_7" clause="PatternColorSpace" testNumber="2"/>
			<description>PatternColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>PatternColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_7" clause="PatternColorSpace-0" testNumber="8"/>
			<description>Entry 0 in PatternColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in PatternColorSpace has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_7" clause="PatternColorSpace-0-Name" testNumber="6"/>
			<description>Entry 0 with type Name in PatternColorSpace shall have value Pattern</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Pattern"</test>
			<error>
				<message>Entry 0 with type Name in PatternColorSpace has incorrect value %1 instead of Pattern</message>
				<arguments>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_7" clause="PatternColorSpace-1-Array" testNumber="17"/>
			<description>Entry 1 with type Array in PatternColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>entry1HasTypeArray != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Array in PatternColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_7" clause="PatternColorSpace-1" testNumber="8"/>
			<description>Entry 1 in PatternColorSpace shall have one of types: Array, Name</description>
			<test>size &lt;= 1 || entry1HasTypeArray == true || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in PatternColorSpace has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_7" clause="PatternColorSpace-1-Name" testNumber="6"/>
			<description>Entry 1 with type Name in PatternColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry1HasTypeName != true || entry1NameValue == "DeviceCMYK" || entry1NameValue == "DeviceRGB" || entry1NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 1 with type Name in PatternColorSpace has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternMapEntry">
			<id specification="ISO_32000_1_7" clause="PatternMapEntry" testNumber="8"/>
			<description>Entry in PatternMap shall have one of types: Dictionary, Stream</description>
			<test>HasTypeDictionary == true || HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in PatternMap has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternMapEntry">
			<id specification="ISO_32000_1_7" clause="PatternMapEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in PatternMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in PatternMap is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1" testNumber="1"/>
			<description>PatternType1 shall not contain entries except BBox, DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Matrix, PaintType, PatternType, Resources, TilingType, Type, XStep, XUID, YStep</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PaintType' &amp;&amp; elem != 'PatternType' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'TilingType' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XStep' &amp;&amp; elem != 'XUID' &amp;&amp; elem != 'YStep' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>PatternType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PaintType' &amp;&amp; elem != 'PatternType' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'TilingType' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XStep' &amp;&amp; elem != 'XUID' &amp;&amp; elem != 'YStep' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-BBox" testNumber="8"/>
			<description>Entry BBox in PatternType1 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in PatternType1 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>BBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-BBox" testNumber="7"/>
			<description>Entry BBox in PatternType1 is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in PatternType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-DL" testNumber="8"/>
			<description>Entry DL in PatternType1 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in PatternType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in PatternType1 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in PatternType1 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in PatternType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in PatternType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in PatternType1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in PatternType1 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in PatternType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in PatternType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-F" testNumber="8"/>
			<description>Entry F in PatternType1 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in PatternType1 has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in PatternType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in PatternType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in PatternType1 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in PatternType1 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in PatternType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in PatternType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-FFilter" testNumber="8"/>
			<description>Entry FFilter in PatternType1 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in PatternType1 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in PatternType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in PatternType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in PatternType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in PatternType1 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-Filter" testNumber="8"/>
			<description>Entry Filter in PatternType1 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in PatternType1 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in PatternType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in PatternType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in PatternType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in PatternType1 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-Length" testNumber="8"/>
			<description>Entry Length in PatternType1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in PatternType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-Length" testNumber="7"/>
			<description>Entry Length in PatternType1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in PatternType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-Matrix" testNumber="8"/>
			<description>Entry Matrix in PatternType1 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in PatternType1 has type %1 instead of type Matrix</message>
				<arguments>
					<argument>MatrixType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-PaintType" testNumber="8"/>
			<description>Entry PaintType in PatternType1 shall have type Integer</description>
			<test>containsPaintType == false || PaintTypeHasTypeInteger == true</test>
			<error>
				<message>Entry PaintType in PatternType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>PaintTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-PaintType" testNumber="7"/>
			<description>Entry PaintType in PatternType1 is required</description>
			<test>containsPaintType == true</test>
			<error>
				<message>Entry PaintType in PatternType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-PaintType-Integer" testNumber="6"/>
			<description>Entry PaintType with type Integer in PatternType1 shall have one of values: 1, 2</description>
			<test>PaintTypeHasTypeInteger != true || PaintTypeIntegerValue == 1 || PaintTypeIntegerValue == 2</test>
			<error>
				<message>Entry PaintType with type Integer in PatternType1 has incorrect value %1 instead of 1, 2</message>
				<arguments>
					<argument>PaintTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-PatternType" testNumber="8"/>
			<description>Entry PatternType in PatternType1 shall have type Integer</description>
			<test>containsPatternType == false || PatternTypeHasTypeInteger == true</test>
			<error>
				<message>Entry PatternType in PatternType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>PatternTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-PatternType" testNumber="7"/>
			<description>Entry PatternType in PatternType1 is required</description>
			<test>containsPatternType == true</test>
			<error>
				<message>Entry PatternType in PatternType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-PatternType-Integer" testNumber="6"/>
			<description>Entry PatternType with type Integer in PatternType1 shall have value 1</description>
			<test>PatternTypeHasTypeInteger != true || PatternTypeIntegerValue == 1</test>
			<error>
				<message>Entry PatternType with type Integer in PatternType1 has incorrect value %1 instead of 1</message>
				<arguments>
					<argument>PatternTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-Resources" testNumber="8"/>
			<description>Entry Resources in PatternType1 shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PatternType1 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ResourcesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-Resources" testNumber="7"/>
			<description>Entry Resources in PatternType1 is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in PatternType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-TilingType" testNumber="8"/>
			<description>Entry TilingType in PatternType1 shall have type Integer</description>
			<test>containsTilingType == false || TilingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry TilingType in PatternType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>TilingTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-TilingType" testNumber="7"/>
			<description>Entry TilingType in PatternType1 is required</description>
			<test>containsTilingType == true</test>
			<error>
				<message>Entry TilingType in PatternType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-TilingType-Integer" testNumber="6"/>
			<description>Entry TilingType with type Integer in PatternType1 shall have one of values: 1, 2, 3</description>
			<test>TilingTypeHasTypeInteger != true || TilingTypeIntegerValue == 1 || TilingTypeIntegerValue == 2 || TilingTypeIntegerValue == 3</test>
			<error>
				<message>Entry TilingType with type Integer in PatternType1 has incorrect value %1 instead of 1, 2, 3</message>
				<arguments>
					<argument>TilingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-Type" testNumber="8"/>
			<description>Entry Type in PatternType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PatternType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in PatternType1 shall have value Pattern</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pattern"</test>
			<error>
				<message>Entry Type with type Name in PatternType1 has incorrect value %1 instead of Pattern</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-XStep" testNumber="8"/>
			<description>Entry XStep in PatternType1 shall have type Number</description>
			<test>containsXStep == false || XStepHasTypeNumber == true</test>
			<error>
				<message>Entry XStep in PatternType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>XStepType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-XStep" testNumber="7"/>
			<description>Entry XStep in PatternType1 is required</description>
			<test>containsXStep == true</test>
			<error>
				<message>Entry XStep in PatternType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-XUID" testNumber="8"/>
			<description>Entry XUID in PatternType1 shall have type Array</description>
			<test>containsXUID == false || XUIDHasTypeArray == true</test>
			<error>
				<message>Entry XUID in PatternType1 has type %1 instead of type Array</message>
				<arguments>
					<argument>XUIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-XUID" testNumber="5"/>
			<description>Entry XUID in PatternType1 is deprecated since PDF 1.3</description>
			<test>containsXUID == false</test>
			<error>
				<message>Entry XUID in PatternType1 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-YStep" testNumber="8"/>
			<description>Entry YStep in PatternType1 shall have type Number</description>
			<test>containsYStep == false || YStepHasTypeNumber == true</test>
			<error>
				<message>Entry YStep in PatternType1 has type %1 instead of type Number</message>
				<arguments>
					<argument>YStepType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="PatternType1-YStep" testNumber="7"/>
			<description>Entry YStep in PatternType1 is required</description>
			<test>containsYStep == true</test>
			<error>
				<message>Entry YStep in PatternType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="PatternType2" testNumber="1"/>
			<description>PatternType2 shall not contain entries except ExtGState, Matrix, PatternType, Shading, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ExtGState' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PatternType' &amp;&amp; elem != 'Shading' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>PatternType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ExtGState' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PatternType' &amp;&amp; elem != 'Shading' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="PatternType2-ExtGState" testNumber="8"/>
			<description>Entry ExtGState in PatternType2 shall have type Dictionary</description>
			<test>containsExtGState == false || ExtGStateHasTypeDictionary == true</test>
			<error>
				<message>Entry ExtGState in PatternType2 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExtGStateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="PatternType2-Matrix" testNumber="8"/>
			<description>Entry Matrix in PatternType2 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in PatternType2 has type %1 instead of type Matrix</message>
				<arguments>
					<argument>MatrixType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="PatternType2-PatternType" testNumber="8"/>
			<description>Entry PatternType in PatternType2 shall have type Integer</description>
			<test>containsPatternType == false || PatternTypeHasTypeInteger == true</test>
			<error>
				<message>Entry PatternType in PatternType2 has type %1 instead of type Integer</message>
				<arguments>
					<argument>PatternTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="PatternType2-PatternType" testNumber="7"/>
			<description>Entry PatternType in PatternType2 is required</description>
			<test>containsPatternType == true</test>
			<error>
				<message>Entry PatternType in PatternType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="PatternType2-PatternType-Integer" testNumber="6"/>
			<description>Entry PatternType with type Integer in PatternType2 shall have value 2</description>
			<test>PatternTypeHasTypeInteger != true || PatternTypeIntegerValue == 2</test>
			<error>
				<message>Entry PatternType with type Integer in PatternType2 has incorrect value %1 instead of 2</message>
				<arguments>
					<argument>PatternTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="PatternType2-Shading-Dictionary" testNumber="17"/>
			<description>Entry Shading with type Dictionary in PatternType2 shall be one of objects ShadingType1, ShadingType2, ShadingType3</description>
			<test>ShadingHasTypeDictionary != true || Shading_size == 1</test>
			<error>
				<message>Entry Shading with type Dictionary in PatternType2 is not one of objects ShadingType1, ShadingType2, ShadingType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="PatternType2-Shading-Stream" testNumber="17"/>
			<description>Entry Shading with type Stream in PatternType2 shall be one of objects ShadingType4, ShadingType5, ShadingType6, ShadingType7</description>
			<test>ShadingHasTypeStream != true || Shading_size == 1</test>
			<error>
				<message>Entry Shading with type Stream in PatternType2 is not one of objects ShadingType4, ShadingType5, ShadingType6, ShadingType7</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="PatternType2-Shading" testNumber="8"/>
			<description>Entry Shading in PatternType2 shall have one of types: Dictionary, Stream</description>
			<test>containsShading == false || ShadingHasTypeDictionary == true || ShadingHasTypeStream == true</test>
			<error>
				<message>Entry Shading in PatternType2 has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>ShadingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="PatternType2-Shading" testNumber="7"/>
			<description>Entry Shading in PatternType2 is required</description>
			<test>containsShading == true</test>
			<error>
				<message>Entry Shading in PatternType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="PatternType2-Shading-Stream" testNumber="10"/>
			<description>Entry Shading with type Stream in PatternType2 shall be indirect</description>
			<test>ShadingHasTypeStream != true || isShadingIndirect == true</test>
			<error>
				<message>Entry Shading with type Stream in PatternType2 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="PatternType2-Type" testNumber="8"/>
			<description>Entry Type in PatternType2 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PatternType2 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="PatternType2-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in PatternType2 shall have value Pattern</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pattern"</test>
			<error>
				<message>Entry Type with type Name in PatternType2 has incorrect value %1 instead of Pattern</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_7" clause="Permissions" testNumber="1"/>
			<description>Permissions shall not contain entries except DocMDP, UR3</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DocMDP' &amp;&amp; elem != 'UR3' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Permissions contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DocMDP' &amp;&amp; elem != 'UR3' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_7" clause="Permissions-DocMDP" testNumber="8"/>
			<description>Entry DocMDP in Permissions shall have type Dictionary</description>
			<test>containsDocMDP == false || DocMDPHasTypeDictionary == true</test>
			<error>
				<message>Entry DocMDP in Permissions has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DocMDPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_7" clause="Permissions-DocMDP-Dictionary" testNumber="10"/>
			<description>Entry DocMDP with type Dictionary in Permissions shall be indirect</description>
			<test>DocMDPHasTypeDictionary != true || isDocMDPIndirect == true</test>
			<error>
				<message>Entry DocMDP with type Dictionary in Permissions is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_7" clause="Permissions-DocMDP-Dictionary" testNumber="9"/>
			<description>Entry DocMDP with type Dictionary in Permissions shall satisfy special case: fn:Eval(fn:ArrayLength(DocMDP::Reference) &gt;= 1)</description>
			<test>DocMDPHasTypeDictionary != true || (DocMDPReferenceHasTypeArray == false || DocMDPReferenceArraySize &gt;= 1)</test>
			<error>
				<message>Entry DocMDP with type Dictionary in Permissions does not satisfy special case: fn:Eval(fn:ArrayLength(DocMDP::Reference) &gt;= 1)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_7" clause="Permissions-UR3" testNumber="8"/>
			<description>Entry UR3 in Permissions shall have type Dictionary</description>
			<test>containsUR3 == false || UR3HasTypeDictionary == true</test>
			<error>
				<message>Entry UR3 in Permissions has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>UR3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_7" clause="Permissions-UR3-Dictionary" testNumber="9"/>
			<description>Entry UR3 with type Dictionary in Permissions shall satisfy special case: fn:Eval(UR3::Reference::0::@TransformMethod == UR3)</description>
			<test>UR3HasTypeDictionary != true || (UR3Reference0TransformMethodNameValue == "UR3")</test>
			<error>
				<message>Entry UR3 with type Dictionary in Permissions does not satisfy special case: fn:Eval(UR3::Reference::0::@TransformMethod == UR3)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="PointData" testNumber="1"/>
			<description>PointData shall not contain entries except Names, Subtype, Type, XPTS</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Names' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XPTS' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>PointData contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Names' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XPTS' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="PointData-Names" testNumber="8"/>
			<description>Entry Names in PointData shall have type Array</description>
			<test>containsNames == false || NamesHasTypeArray == true</test>
			<error>
				<message>Entry Names in PointData has type %1 instead of type Array</message>
				<arguments>
					<argument>NamesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="PointData-Names" testNumber="7"/>
			<description>Entry Names in PointData is required</description>
			<test>containsNames == true</test>
			<error>
				<message>Entry Names in PointData is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="PointData-Names" testNumber="23"/>
			<description>Entry Names in PointData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsNames == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Names in PointData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="PointData-Subtype" testNumber="8"/>
			<description>Entry Subtype in PointData shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in PointData has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="PointData-Subtype" testNumber="7"/>
			<description>Entry Subtype in PointData is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in PointData is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="PointData-Subtype" testNumber="23"/>
			<description>Entry Subtype in PointData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSubtype == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Subtype in PointData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="PointData-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in PointData shall have value Cloud</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Cloud"</test>
			<error>
				<message>Entry Subtype with type Name in PointData has incorrect value %1 instead of Cloud</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="PointData-Type" testNumber="8"/>
			<description>Entry Type in PointData shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PointData has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="PointData-Type" testNumber="7"/>
			<description>Entry Type in PointData is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PointData is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="PointData-Type" testNumber="23"/>
			<description>Entry Type in PointData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in PointData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="PointData-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in PointData shall have value PtData</description>
			<test>TypeHasTypeName != true || TypeNameValue == "PtData"</test>
			<error>
				<message>Entry Type with type Name in PointData has incorrect value %1 instead of PtData</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="PointData-XPTS" testNumber="8"/>
			<description>Entry XPTS in PointData shall have type Array</description>
			<test>containsXPTS == false || XPTSHasTypeArray == true</test>
			<error>
				<message>Entry XPTS in PointData has type %1 instead of type Array</message>
				<arguments>
					<argument>XPTSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="PointData-XPTS" testNumber="7"/>
			<description>Entry XPTS in PointData is required</description>
			<test>containsXPTS == true</test>
			<error>
				<message>Entry XPTS in PointData is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="PointData-XPTS" testNumber="23"/>
			<description>Entry XPTS in PointData can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsXPTS == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry XPTS in PointData is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="ProjectedCoordinateSystem" testNumber="1"/>
			<description>ProjectedCoordinateSystem shall not contain entries except EPSG, Type, WKT</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'EPSG' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'WKT' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ProjectedCoordinateSystem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'EPSG' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'WKT' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="ProjectedCoordinateSystem-EPSG" testNumber="8"/>
			<description>Entry EPSG in ProjectedCoordinateSystem shall have type Integer</description>
			<test>containsEPSG == false || EPSGHasTypeInteger == true</test>
			<error>
				<message>Entry EPSG in ProjectedCoordinateSystem has type %1 instead of type Integer</message>
				<arguments>
					<argument>EPSGType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="ProjectedCoordinateSystem-EPSG" testNumber="11"/>
			<description>Entry EPSG in ProjectedCoordinateSystem is required, when fn:Not(fn:IsPresent(WKT))</description>
			<test>containsEPSG == true || (containsWKT == true)</test>
			<error>
				<message>Entry EPSG in ProjectedCoordinateSystem is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="ProjectedCoordinateSystem-EPSG" testNumber="23"/>
			<description>Entry EPSG in ProjectedCoordinateSystem can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsEPSG == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry EPSG in ProjectedCoordinateSystem is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="ProjectedCoordinateSystem-Type" testNumber="8"/>
			<description>Entry Type in ProjectedCoordinateSystem shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ProjectedCoordinateSystem has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="ProjectedCoordinateSystem-Type" testNumber="7"/>
			<description>Entry Type in ProjectedCoordinateSystem is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in ProjectedCoordinateSystem is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="ProjectedCoordinateSystem-Type" testNumber="23"/>
			<description>Entry Type in ProjectedCoordinateSystem can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in ProjectedCoordinateSystem is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="ProjectedCoordinateSystem-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in ProjectedCoordinateSystem shall have value PROJCS</description>
			<test>TypeHasTypeName != true || TypeNameValue == "PROJCS"</test>
			<error>
				<message>Entry Type with type Name in ProjectedCoordinateSystem has incorrect value %1 instead of PROJCS</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="ProjectedCoordinateSystem-WKT" testNumber="8"/>
			<description>Entry WKT in ProjectedCoordinateSystem shall have type StringAscii</description>
			<test>containsWKT == false || WKTHasTypeStringAscii == true</test>
			<error>
				<message>Entry WKT in ProjectedCoordinateSystem has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>WKTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="ProjectedCoordinateSystem-WKT" testNumber="11"/>
			<description>Entry WKT in ProjectedCoordinateSystem is required, when fn:Not(fn:IsPresent(EPSG))</description>
			<test>containsWKT == true || (containsEPSG == true)</test>
			<error>
				<message>Entry WKT in ProjectedCoordinateSystem is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="ProjectedCoordinateSystem-WKT" testNumber="23"/>
			<description>Entry WKT in ProjectedCoordinateSystem can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsWKT == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry WKT in ProjectedCoordinateSystem is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection" testNumber="1"/>
			<description>Projection shall not contain entries except CS, F, FOV, N, OB, OS, PS, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CS' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FOV' &amp;&amp; elem != 'N' &amp;&amp; elem != 'OB' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Projection contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CS' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FOV' &amp;&amp; elem != 'N' &amp;&amp; elem != 'OB' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'Subtype' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-CS" testNumber="8"/>
			<description>Entry CS in Projection shall have type Name</description>
			<test>containsCS == false || CSHasTypeName == true</test>
			<error>
				<message>Entry CS in Projection has type %1 instead of type Name</message>
				<arguments>
					<argument>CSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-CS-Name" testNumber="6"/>
			<description>Entry CS with type Name in Projection shall have one of values: XNF, ANF</description>
			<test>CSHasTypeName != true || CSNameValue == "XNF" || CSNameValue == "ANF"</test>
			<error>
				<message>Entry CS with type Name in Projection has incorrect value %1 instead of XNF, ANF</message>
				<arguments>
					<argument>CSNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-F" testNumber="8"/>
			<description>Entry F in Projection shall have type Number</description>
			<test>containsF == false || FHasTypeNumber == true</test>
			<error>
				<message>Entry F in Projection has type %1 instead of type Number</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-FOV" testNumber="8"/>
			<description>Entry FOV in Projection shall have type Number</description>
			<test>containsFOV == false || FOVHasTypeNumber == true</test>
			<error>
				<message>Entry FOV in Projection has type %1 instead of type Number</message>
				<arguments>
					<argument>FOVType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-FOV-Number" testNumber="14"/>
			<description>Entry FOV with type Number in Projection shall satisfy possible value predicate: fn:Eval((@FOV &gt;= 0) &amp;&amp; (@FOV &lt;= 180))</description>
			<test>FOVHasTypeNumber != true || (FOVNumberValue &gt;= 0) &amp;&amp; (FOVNumberValue &lt;= 180)</test>
			<error>
				<message>Entry FOV with type Number in Projection does not satisfy possible value predicate: fn:Eval((@FOV &gt;= 0) &amp;&amp; (@FOV &lt;= 180))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-N" testNumber="8"/>
			<description>Entry N in Projection shall have type Number</description>
			<test>containsN == false || NHasTypeNumber == true</test>
			<error>
				<message>Entry N in Projection has type %1 instead of type Number</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-N" testNumber="11"/>
			<description>Entry N in Projection is required, when @Subtype == P</description>
			<test>containsN == true || (SubtypeNameValue != "P")</test>
			<error>
				<message>Entry N in Projection is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-N-Number" testNumber="14"/>
			<description>Entry N with type Number in Projection shall satisfy possible value predicate: fn:Eval(((@Subtype == P) &amp;&amp; (@N &gt; 0)) || ((@Subtype == O) &amp;&amp; (@N &gt;= 0)))</description>
			<test>NHasTypeNumber != true || ((SubtypeNameValue == "P") &amp;&amp; (NNumberValue &gt; 0)) || ((SubtypeNameValue == "O") &amp;&amp; (NNumberValue &gt;= 0))</test>
			<error>
				<message>Entry N with type Number in Projection does not satisfy possible value predicate: fn:Eval(((@Subtype == P) &amp;&amp; (@N &gt; 0)) || ((@Subtype == O) &amp;&amp; (@N &gt;= 0)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-OB" testNumber="8"/>
			<description>Entry OB in Projection shall have type Name</description>
			<test>containsOB == false || OBHasTypeName == true</test>
			<error>
				<message>Entry OB in Projection has type %1 instead of type Name</message>
				<arguments>
					<argument>OBType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-OB-Name" testNumber="6"/>
			<description>Entry OB with type Name in Projection shall have one of values: Min, Max, W, H, Absolute</description>
			<test>OBHasTypeName != true || OBNameValue == "W" || OBNameValue == "H" || OBNameValue == "Min" || OBNameValue == "Max" || OBNameValue == "Absolute"</test>
			<error>
				<message>Entry OB with type Name in Projection has incorrect value %1 instead of Min, Max, W, H, Absolute</message>
				<arguments>
					<argument>OBNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-OS" testNumber="8"/>
			<description>Entry OS in Projection shall have type Number</description>
			<test>containsOS == false || OSHasTypeNumber == true</test>
			<error>
				<message>Entry OS in Projection has type %1 instead of type Number</message>
				<arguments>
					<argument>OSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-OS-Number" testNumber="14"/>
			<description>Entry OS with type Number in Projection shall satisfy possible value predicate: fn:Eval(@OS &gt; 0)</description>
			<test>OSHasTypeNumber != true || OSNumberValue &gt; 0</test>
			<error>
				<message>Entry OS with type Number in Projection does not satisfy possible value predicate: fn:Eval(@OS &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-PS" testNumber="8"/>
			<description>Entry PS in Projection shall have one of types: Name, Number</description>
			<test>containsPS == false || PSHasTypeName == true || PSHasTypeNumber == true</test>
			<error>
				<message>Entry PS in Projection has type %1 instead of one of types: Name, Number</message>
				<arguments>
					<argument>PSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-PS-Number" testNumber="14"/>
			<description>Entry PS with type Number in Projection shall satisfy possible value predicate: fn:Eval(@PS &gt; 0)</description>
			<test>PSHasTypeNumber != true || PSNumberValue &gt; 0</test>
			<error>
				<message>Entry PS with type Number in Projection does not satisfy possible value predicate: fn:Eval(@PS &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-Subtype" testNumber="8"/>
			<description>Entry Subtype in Projection shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in Projection has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-Subtype" testNumber="7"/>
			<description>Entry Subtype in Projection is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in Projection is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="Projection-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in Projection shall have one of values: P, O</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "O" || SubtypeNameValue == "P"</test>
			<error>
				<message>Entry Subtype with type Name in Projection has incorrect value %1 instead of P, O</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_7" clause="Reference" testNumber="1"/>
			<description>Reference shall not contain entries except F, ID, Page</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Page' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Reference contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Page' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_7" clause="Reference-F" testNumber="8"/>
			<description>Entry F in Reference shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in Reference has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_7" clause="Reference-F" testNumber="7"/>
			<description>Entry F in Reference is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in Reference is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_7" clause="Reference-ID" testNumber="8"/>
			<description>Entry ID in Reference shall have type Array</description>
			<test>containsID == false || entryIDHasTypeArray == true</test>
			<error>
				<message>Entry ID in Reference has type %1 instead of type Array</message>
				<arguments>
					<argument>entryIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_7" clause="Reference-Page" testNumber="8"/>
			<description>Entry Page in Reference shall have one of types: Integer, StringText</description>
			<test>containsPage == false || PageHasTypeInteger == true || PageHasTypeStringText == true</test>
			<error>
				<message>Entry Page in Reference has type %1 instead of one of types: Integer, StringText</message>
				<arguments>
					<argument>PageType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_7" clause="Reference-Page" testNumber="7"/>
			<description>Entry Page in Reference is required</description>
			<test>containsPage == true</test>
			<error>
				<message>Entry Page in Reference is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_7" clause="Reference-Page-Integer" testNumber="14"/>
			<description>Entry Page with type Integer in Reference shall satisfy possible value predicate: fn:Eval(@Page &gt;= 0)</description>
			<test>PageHasTypeInteger != true || PageIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Page with type Integer in Reference does not satisfy possible value predicate: fn:Eval(@Page &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArray">
			<id specification="ISO_32000_1_7" clause="RelatedFilesArray" testNumber="3"/>
			<description>RelatedFilesArray shall contain 2 * n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>RelatedFilesArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_7" clause="RelatedFilesArraySubArray" testNumber="2"/>
			<description>RelatedFilesArraySubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>RelatedFilesArraySubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_7" clause="RelatedFilesArraySubArray-0" testNumber="8"/>
			<description>Entry 0 in RelatedFilesArraySubArray shall have type String</description>
			<test>size &lt;= 0 || entry0HasTypeString == true</test>
			<error>
				<message>Entry 0 in RelatedFilesArraySubArray has type %1 instead of type String</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_7" clause="RelatedFilesArraySubArray-1" testNumber="8"/>
			<description>Entry 1 in RelatedFilesArraySubArray shall have type Stream</description>
			<test>size &lt;= 1 || entry1HasTypeStream == true</test>
			<error>
				<message>Entry 1 in RelatedFilesArraySubArray has type %1 instead of type Stream</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_7" clause="RelatedFilesArraySubArray-1-Stream" testNumber="10"/>
			<description>Entry 1 with type Stream in RelatedFilesArraySubArray shall be indirect</description>
			<test>entry1HasTypeStream != true || isentry1Indirect == true</test>
			<error>
				<message>Entry 1 with type Stream in RelatedFilesArraySubArray is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionBE">
			<id specification="ISO_32000_1_7" clause="RenditionBE" testNumber="1"/>
			<description>RenditionBE shall not contain entries except C</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RenditionBE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionBE">
			<id specification="ISO_32000_1_7" clause="RenditionBE-C" testNumber="8"/>
			<description>Entry C in RenditionBE shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in RenditionBE has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMH">
			<id specification="ISO_32000_1_7" clause="RenditionMH" testNumber="1"/>
			<description>RenditionMH shall not contain entries except C</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RenditionMH contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMH">
			<id specification="ISO_32000_1_7" clause="RenditionMH-C" testNumber="8"/>
			<description>Entry C in RenditionMH shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in RenditionMH has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="RenditionMedia" testNumber="1"/>
			<description>RenditionMedia shall not contain entries except BE, C, MH, N, P, S, SP, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'C' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SP' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RenditionMedia contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'C' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SP' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="RenditionMedia-BE" testNumber="8"/>
			<description>Entry BE in RenditionMedia shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in RenditionMedia has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="RenditionMedia-C-Dictionary" testNumber="17"/>
			<description>Entry C with type Dictionary in RenditionMedia shall be one of objects MediaClipSection, MediaClipData</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in RenditionMedia is not one of objects MediaClipSection, MediaClipData</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="RenditionMedia-C" testNumber="8"/>
			<description>Entry C in RenditionMedia shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in RenditionMedia has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="RenditionMedia-MH" testNumber="8"/>
			<description>Entry MH in RenditionMedia shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in RenditionMedia has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="RenditionMedia-N" testNumber="8"/>
			<description>Entry N in RenditionMedia shall have type StringText</description>
			<test>containsN == false || NHasTypeStringText == true</test>
			<error>
				<message>Entry N in RenditionMedia has type %1 instead of type StringText</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="RenditionMedia-P" testNumber="8"/>
			<description>Entry P in RenditionMedia shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in RenditionMedia has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="RenditionMedia-P" testNumber="11"/>
			<description>Entry P in RenditionMedia is required, when fn:Not(fn:IsPresent(C))</description>
			<test>containsP == true || (containsC == true)</test>
			<error>
				<message>Entry P in RenditionMedia is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="RenditionMedia-S" testNumber="8"/>
			<description>Entry S in RenditionMedia shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in RenditionMedia has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="RenditionMedia-S" testNumber="7"/>
			<description>Entry S in RenditionMedia is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in RenditionMedia is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="RenditionMedia-S-Name" testNumber="6"/>
			<description>Entry S with type Name in RenditionMedia shall have value MR</description>
			<test>SHasTypeName != true || SNameValue == "MR"</test>
			<error>
				<message>Entry S with type Name in RenditionMedia has incorrect value %1 instead of MR</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="RenditionMedia-SP" testNumber="8"/>
			<description>Entry SP in RenditionMedia shall have type Dictionary</description>
			<test>containsSP == false || SPHasTypeDictionary == true</test>
			<error>
				<message>Entry SP in RenditionMedia has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="RenditionMedia-Type" testNumber="8"/>
			<description>Entry Type in RenditionMedia shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RenditionMedia has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="RenditionMedia-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RenditionMedia shall have value Rendition</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Rendition"</test>
			<error>
				<message>Entry Type with type Name in RenditionMedia has incorrect value %1 instead of Rendition</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="RenditionSelector" testNumber="1"/>
			<description>RenditionSelector shall not contain entries except BE, MH, N, R, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RenditionSelector contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="RenditionSelector-BE" testNumber="8"/>
			<description>Entry BE in RenditionSelector shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in RenditionSelector has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>BEType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="RenditionSelector-MH" testNumber="8"/>
			<description>Entry MH in RenditionSelector shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in RenditionSelector has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="RenditionSelector-N" testNumber="8"/>
			<description>Entry N in RenditionSelector shall have type StringText</description>
			<test>containsN == false || NHasTypeStringText == true</test>
			<error>
				<message>Entry N in RenditionSelector has type %1 instead of type StringText</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="RenditionSelector-R" testNumber="8"/>
			<description>Entry R in RenditionSelector shall have type Array</description>
			<test>containsR == false || RHasTypeArray == true</test>
			<error>
				<message>Entry R in RenditionSelector has type %1 instead of type Array</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="RenditionSelector-R" testNumber="7"/>
			<description>Entry R in RenditionSelector is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in RenditionSelector is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="RenditionSelector-S" testNumber="8"/>
			<description>Entry S in RenditionSelector shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in RenditionSelector has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="RenditionSelector-S" testNumber="7"/>
			<description>Entry S in RenditionSelector is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in RenditionSelector is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="RenditionSelector-S-Name" testNumber="6"/>
			<description>Entry S with type Name in RenditionSelector shall have value SR</description>
			<test>SHasTypeName != true || SNameValue == "SR"</test>
			<error>
				<message>Entry S with type Name in RenditionSelector has incorrect value %1 instead of SR</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="RenditionSelector-Type" testNumber="8"/>
			<description>Entry Type in RenditionSelector shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RenditionSelector has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="RenditionSelector-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RenditionSelector shall have value Rendition</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Rendition"</test>
			<error>
				<message>Entry Type with type Name in RenditionSelector has incorrect value %1 instead of Rendition</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="RequirementsEnableJavaScripts" testNumber="1"/>
			<description>RequirementsEnableJavaScripts shall not contain entries except RH, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Penalty' &amp;&amp; elem != 'RH' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RequirementsEnableJavaScripts contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Penalty' &amp;&amp; elem != 'RH' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="RequirementsEnableJavaScripts" testNumber="22"/>
			<description>RequirementsEnableJavaScripts shall not contain entries Penalty, V in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'Penalty' || elem == 'V').length == 0</test>
			<error>
				<message>RequirementsEnableJavaScripts contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'Penalty' || elem == 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="RequirementsEnableJavaScripts-RH" testNumber="8"/>
			<description>Entry RH in RequirementsEnableJavaScripts shall have one of types: Array, Dictionary</description>
			<test>containsRH == false || RHHasTypeArray == true || RHHasTypeDictionary == true</test>
			<error>
				<message>Entry RH in RequirementsEnableJavaScripts has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>RHType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="RequirementsEnableJavaScripts-S" testNumber="8"/>
			<description>Entry S in RequirementsEnableJavaScripts shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in RequirementsEnableJavaScripts has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="RequirementsEnableJavaScripts-S" testNumber="7"/>
			<description>Entry S in RequirementsEnableJavaScripts is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in RequirementsEnableJavaScripts is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="RequirementsEnableJavaScripts-S-Name" testNumber="6"/>
			<description>Entry S with type Name in RequirementsEnableJavaScripts shall have value EnableJavaScripts</description>
			<test>SHasTypeName != true || SNameValue == "EnableJavaScripts"</test>
			<error>
				<message>Entry S with type Name in RequirementsEnableJavaScripts has incorrect value %1 instead of EnableJavaScripts</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="RequirementsEnableJavaScripts-Type" testNumber="8"/>
			<description>Entry Type in RequirementsEnableJavaScripts shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RequirementsEnableJavaScripts has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="RequirementsEnableJavaScripts-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RequirementsEnableJavaScripts shall have value Requirement</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Requirement"</test>
			<error>
				<message>Entry Type with type Name in RequirementsEnableJavaScripts has incorrect value %1 instead of Requirement</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsHandler">
			<id specification="ISO_32000_1_7" clause="RequirementsHandler" testNumber="1"/>
			<description>RequirementsHandler shall not contain entries except S, Script, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Script' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RequirementsHandler contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Script' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsHandler">
			<id specification="ISO_32000_1_7" clause="RequirementsHandler-S" testNumber="8"/>
			<description>Entry S in RequirementsHandler shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in RequirementsHandler has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsHandler">
			<id specification="ISO_32000_1_7" clause="RequirementsHandler-S" testNumber="7"/>
			<description>Entry S in RequirementsHandler is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in RequirementsHandler is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsHandler">
			<id specification="ISO_32000_1_7" clause="RequirementsHandler-S-Name" testNumber="6"/>
			<description>Entry S with type Name in RequirementsHandler shall have one of values: NoOp, JS</description>
			<test>SHasTypeName != true || SNameValue == "JS" || SNameValue == "NoOp"</test>
			<error>
				<message>Entry S with type Name in RequirementsHandler has incorrect value %1 instead of NoOp, JS</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsHandler">
			<id specification="ISO_32000_1_7" clause="RequirementsHandler-Script" testNumber="8"/>
			<description>Entry Script in RequirementsHandler shall have type StringText</description>
			<test>containsScript == false || ScriptHasTypeStringText == true</test>
			<error>
				<message>Entry Script in RequirementsHandler has type %1 instead of type StringText</message>
				<arguments>
					<argument>ScriptType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsHandler">
			<id specification="ISO_32000_1_7" clause="RequirementsHandler-Type" testNumber="8"/>
			<description>Entry Type in RequirementsHandler shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RequirementsHandler has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsHandler">
			<id specification="ISO_32000_1_7" clause="RequirementsHandler-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RequirementsHandler shall have value ReqHandler</description>
			<test>TypeHasTypeName != true || TypeNameValue == "ReqHandler"</test>
			<error>
				<message>Entry Type with type Name in RequirementsHandler has incorrect value %1 instead of ReqHandler</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="Resource" testNumber="1"/>
			<description>Resource shall not contain entries except ColorSpace, ExtGState, Font, Pattern, ProcSet, Properties, Shading, XObject</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'ExtGState' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'Pattern' &amp;&amp; elem != 'ProcSet' &amp;&amp; elem != 'Properties' &amp;&amp; elem != 'Shading' &amp;&amp; elem != 'XObject' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Resource contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'ExtGState' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'Pattern' &amp;&amp; elem != 'ProcSet' &amp;&amp; elem != 'Properties' &amp;&amp; elem != 'Shading' &amp;&amp; elem != 'XObject' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="Resource-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in Resource shall have type Dictionary</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeDictionary == true</test>
			<error>
				<message>Entry ColorSpace in Resource has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="Resource-ExtGState" testNumber="8"/>
			<description>Entry ExtGState in Resource shall have type Dictionary</description>
			<test>containsExtGState == false || ExtGStateHasTypeDictionary == true</test>
			<error>
				<message>Entry ExtGState in Resource has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ExtGStateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="Resource-Font" testNumber="8"/>
			<description>Entry Font in Resource shall have type Dictionary</description>
			<test>containsFont == false || FontHasTypeDictionary == true</test>
			<error>
				<message>Entry Font in Resource has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FontType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="Resource-Pattern" testNumber="8"/>
			<description>Entry Pattern in Resource shall have type Dictionary</description>
			<test>containsPattern == false || PatternHasTypeDictionary == true</test>
			<error>
				<message>Entry Pattern in Resource has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PatternType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="Resource-ProcSet" testNumber="8"/>
			<description>Entry ProcSet in Resource shall have type Array</description>
			<test>containsProcSet == false || ProcSetHasTypeArray == true</test>
			<error>
				<message>Entry ProcSet in Resource has type %1 instead of type Array</message>
				<arguments>
					<argument>ProcSetType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="Resource-Properties" testNumber="8"/>
			<description>Entry Properties in Resource shall have type Dictionary</description>
			<test>containsProperties == false || entryPropertiesHasTypeDictionary == true</test>
			<error>
				<message>Entry Properties in Resource has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>entryPropertiesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="Resource-Shading" testNumber="8"/>
			<description>Entry Shading in Resource shall have type Dictionary</description>
			<test>containsShading == false || ShadingHasTypeDictionary == true</test>
			<error>
				<message>Entry Shading in Resource has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ShadingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="Resource-XObject" testNumber="8"/>
			<description>Entry XObject in Resource shall have type Dictionary</description>
			<test>containsXObject == false || XObjectHasTypeDictionary == true</test>
			<error>
				<message>Entry XObject in Resource has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>XObjectType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation" testNumber="1"/>
			<description>RichMediaActivation shall not contain entries except Animation, Condition, Configuration, Presentation, Scripts, Type, View</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Animation' &amp;&amp; elem != 'Condition' &amp;&amp; elem != 'Configuration' &amp;&amp; elem != 'Presentation' &amp;&amp; elem != 'Scripts' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'View' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RichMediaActivation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Animation' &amp;&amp; elem != 'Condition' &amp;&amp; elem != 'Configuration' &amp;&amp; elem != 'Presentation' &amp;&amp; elem != 'Scripts' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'View' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-Animation" testNumber="8"/>
			<description>Entry Animation in RichMediaActivation shall have type Dictionary</description>
			<test>containsAnimation == false || AnimationHasTypeDictionary == true</test>
			<error>
				<message>Entry Animation in RichMediaActivation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AnimationType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-Animation" testNumber="23"/>
			<description>Entry Animation in RichMediaActivation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsAnimation == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Animation in RichMediaActivation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-Condition" testNumber="8"/>
			<description>Entry Condition in RichMediaActivation shall have type Name</description>
			<test>containsCondition == false || ConditionHasTypeName == true</test>
			<error>
				<message>Entry Condition in RichMediaActivation has type %1 instead of type Name</message>
				<arguments>
					<argument>ConditionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-Condition" testNumber="23"/>
			<description>Entry Condition in RichMediaActivation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsCondition == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Condition in RichMediaActivation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-Condition-Name" testNumber="6"/>
			<description>Entry Condition with type Name in RichMediaActivation shall have one of values: PV, XA, PO</description>
			<test>ConditionHasTypeName != true || ConditionNameValue == "XA" || ConditionNameValue == "PO" || ConditionNameValue == "PV"</test>
			<error>
				<message>Entry Condition with type Name in RichMediaActivation has incorrect value %1 instead of PV, XA, PO</message>
				<arguments>
					<argument>ConditionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-Configuration" testNumber="8"/>
			<description>Entry Configuration in RichMediaActivation shall have type Dictionary</description>
			<test>containsConfiguration == false || ConfigurationHasTypeDictionary == true</test>
			<error>
				<message>Entry Configuration in RichMediaActivation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ConfigurationType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-Configuration" testNumber="23"/>
			<description>Entry Configuration in RichMediaActivation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsConfiguration == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Configuration in RichMediaActivation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-Configuration-Dictionary" testNumber="10"/>
			<description>Entry Configuration with type Dictionary in RichMediaActivation shall be indirect</description>
			<test>ConfigurationHasTypeDictionary != true || isConfigurationIndirect == true</test>
			<error>
				<message>Entry Configuration with type Dictionary in RichMediaActivation is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-Presentation" testNumber="8"/>
			<description>Entry Presentation in RichMediaActivation shall have type Dictionary</description>
			<test>containsPresentation == false || PresentationHasTypeDictionary == true</test>
			<error>
				<message>Entry Presentation in RichMediaActivation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PresentationType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-Presentation" testNumber="23"/>
			<description>Entry Presentation in RichMediaActivation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsPresentation == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Presentation in RichMediaActivation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-Scripts" testNumber="8"/>
			<description>Entry Scripts in RichMediaActivation shall have type Array</description>
			<test>containsScripts == false || ScriptsHasTypeArray == true</test>
			<error>
				<message>Entry Scripts in RichMediaActivation has type %1 instead of type Array</message>
				<arguments>
					<argument>ScriptsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-Scripts" testNumber="23"/>
			<description>Entry Scripts in RichMediaActivation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsScripts == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Scripts in RichMediaActivation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-Type" testNumber="8"/>
			<description>Entry Type in RichMediaActivation shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaActivation has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-Type" testNumber="23"/>
			<description>Entry Type in RichMediaActivation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in RichMediaActivation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RichMediaActivation shall have value RichMediaActivation</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaActivation"</test>
			<error>
				<message>Entry Type with type Name in RichMediaActivation has incorrect value %1 instead of RichMediaActivation</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-View" testNumber="8"/>
			<description>Entry View in RichMediaActivation shall have type Dictionary</description>
			<test>containsView == false || ViewHasTypeDictionary == true</test>
			<error>
				<message>Entry View in RichMediaActivation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ViewType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-View" testNumber="23"/>
			<description>Entry View in RichMediaActivation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsView == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry View in RichMediaActivation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="RichMediaActivation-View-Dictionary" testNumber="10"/>
			<description>Entry View with type Dictionary in RichMediaActivation shall be indirect</description>
			<test>ViewHasTypeDictionary != true || isViewIndirect == true</test>
			<error>
				<message>Entry View with type Dictionary in RichMediaActivation is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="RichMediaAnimation" testNumber="1"/>
			<description>RichMediaAnimation shall not contain entries except PlayCount, Speed, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AO' &amp;&amp; elem != 'PlayCount' &amp;&amp; elem != 'Speed' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RichMediaAnimation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AO' &amp;&amp; elem != 'PlayCount' &amp;&amp; elem != 'Speed' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="RichMediaAnimation" testNumber="22"/>
			<description>RichMediaAnimation shall not contain entry AO in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsAO == false</test>
			<error>
				<message>RichMediaAnimation contains entry AO</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="RichMediaAnimation-PlayCount" testNumber="8"/>
			<description>Entry PlayCount in RichMediaAnimation shall have type Integer</description>
			<test>containsPlayCount == false || PlayCountHasTypeInteger == true</test>
			<error>
				<message>Entry PlayCount in RichMediaAnimation has type %1 instead of type Integer</message>
				<arguments>
					<argument>PlayCountType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="RichMediaAnimation-PlayCount" testNumber="23"/>
			<description>Entry PlayCount in RichMediaAnimation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsPlayCount == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PlayCount in RichMediaAnimation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="RichMediaAnimation-Speed" testNumber="8"/>
			<description>Entry Speed in RichMediaAnimation shall have type Number</description>
			<test>containsSpeed == false || SpeedHasTypeNumber == true</test>
			<error>
				<message>Entry Speed in RichMediaAnimation has type %1 instead of type Number</message>
				<arguments>
					<argument>SpeedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="RichMediaAnimation-Speed" testNumber="23"/>
			<description>Entry Speed in RichMediaAnimation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSpeed == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Speed in RichMediaAnimation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="RichMediaAnimation-Speed-Number" testNumber="14"/>
			<description>Entry Speed with type Number in RichMediaAnimation shall satisfy possible value predicate: fn:Eval(@Speed &gt; 0)</description>
			<test>SpeedHasTypeNumber != true || SpeedNumberValue &gt; 0</test>
			<error>
				<message>Entry Speed with type Number in RichMediaAnimation does not satisfy possible value predicate: fn:Eval(@Speed &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="RichMediaAnimation-Subtype" testNumber="8"/>
			<description>Entry Subtype in RichMediaAnimation shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in RichMediaAnimation has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="RichMediaAnimation-Subtype" testNumber="23"/>
			<description>Entry Subtype in RichMediaAnimation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSubtype == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Subtype in RichMediaAnimation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="RichMediaAnimation-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in RichMediaAnimation shall have one of values: Oscillating, None, Linear</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "None" || SubtypeNameValue == "Linear" || SubtypeNameValue == "Oscillating"</test>
			<error>
				<message>Entry Subtype with type Name in RichMediaAnimation has incorrect value %1 instead of Oscillating, None, Linear</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="RichMediaAnimation-Type" testNumber="8"/>
			<description>Entry Type in RichMediaAnimation shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaAnimation has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="RichMediaAnimation-Type" testNumber="23"/>
			<description>Entry Type in RichMediaAnimation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in RichMediaAnimation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="RichMediaAnimation-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RichMediaAnimation shall have value RichMediaAnimation</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaAnimation"</test>
			<error>
				<message>Entry Type with type Name in RichMediaAnimation has incorrect value %1 instead of RichMediaAnimation</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommand">
			<id specification="ISO_32000_1_7" clause="RichMediaCommand" testNumber="1"/>
			<description>RichMediaCommand shall not contain entries except A, C, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RichMediaCommand contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommand">
			<id specification="ISO_32000_1_7" clause="RichMediaCommand-A" testNumber="8"/>
			<description>Entry A in RichMediaCommand shall have one of types: Array, Boolean, Integer, Number, StringText</description>
			<test>containsA == false || AHasTypeArray == true || AHasTypeBoolean == true || AHasTypeInteger == true || AHasTypeNumber == true || AHasTypeStringText == true</test>
			<error>
				<message>Entry A in RichMediaCommand has type %1 instead of one of types: Array, Boolean, Integer, Number, StringText</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommand">
			<id specification="ISO_32000_1_7" clause="RichMediaCommand-A" testNumber="23"/>
			<description>Entry A in RichMediaCommand can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsA == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry A in RichMediaCommand is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommand">
			<id specification="ISO_32000_1_7" clause="RichMediaCommand-C" testNumber="8"/>
			<description>Entry C in RichMediaCommand shall have type StringText</description>
			<test>containsC == false || CHasTypeStringText == true</test>
			<error>
				<message>Entry C in RichMediaCommand has type %1 instead of type StringText</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommand">
			<id specification="ISO_32000_1_7" clause="RichMediaCommand-C" testNumber="7"/>
			<description>Entry C in RichMediaCommand is required</description>
			<test>containsC == true</test>
			<error>
				<message>Entry C in RichMediaCommand is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommand">
			<id specification="ISO_32000_1_7" clause="RichMediaCommand-C" testNumber="23"/>
			<description>Entry C in RichMediaCommand can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsC == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry C in RichMediaCommand is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommand">
			<id specification="ISO_32000_1_7" clause="RichMediaCommand-Type" testNumber="8"/>
			<description>Entry Type in RichMediaCommand shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaCommand has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommand">
			<id specification="ISO_32000_1_7" clause="RichMediaCommand-Type" testNumber="23"/>
			<description>Entry Type in RichMediaCommand can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in RichMediaCommand is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommand">
			<id specification="ISO_32000_1_7" clause="RichMediaCommand-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RichMediaCommand shall have value RichMediaCommand</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaCommand"</test>
			<error>
				<message>Entry Type with type Name in RichMediaCommand has incorrect value %1 instead of RichMediaCommand</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommandArrayEntry">
			<id specification="ISO_32000_1_7" clause="RichMediaCommandArrayEntry" testNumber="8"/>
			<description>Entry in RichMediaCommandArray shall have one of types: Boolean, Integer, Number, StringText</description>
			<test>HasTypeBoolean == true || HasTypeInteger == true || HasTypeNumber == true || HasTypeStringText == true</test>
			<error>
				<message>Entry %keyName% in RichMediaCommandArray has type %1 instead of one of types: Boolean, Integer, Number, StringText</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommandArrayEntry">
			<id specification="ISO_32000_1_7" clause="RichMediaCommandArrayEntry" testNumber="23"/>
			<description>Entry in RichMediaCommandArray can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry %keyName% in RichMediaCommandArray is present</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="RichMediaConfiguration" testNumber="1"/>
			<description>RichMediaConfiguration shall not contain entries except Instances, Name, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Instances' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RichMediaConfiguration contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Instances' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="RichMediaConfiguration-Instances" testNumber="8"/>
			<description>Entry Instances in RichMediaConfiguration shall have type Array</description>
			<test>containsInstances == false || InstancesHasTypeArray == true</test>
			<error>
				<message>Entry Instances in RichMediaConfiguration has type %1 instead of type Array</message>
				<arguments>
					<argument>InstancesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="RichMediaConfiguration-Instances" testNumber="23"/>
			<description>Entry Instances in RichMediaConfiguration can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsInstances == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Instances in RichMediaConfiguration is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="RichMediaConfiguration-Name" testNumber="8"/>
			<description>Entry Name in RichMediaConfiguration shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in RichMediaConfiguration has type %1 instead of type StringText</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="RichMediaConfiguration-Name" testNumber="23"/>
			<description>Entry Name in RichMediaConfiguration can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsName == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Name in RichMediaConfiguration is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="RichMediaConfiguration-Subtype" testNumber="8"/>
			<description>Entry Subtype in RichMediaConfiguration shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in RichMediaConfiguration has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="RichMediaConfiguration-Subtype" testNumber="23"/>
			<description>Entry Subtype in RichMediaConfiguration can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSubtype == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Subtype in RichMediaConfiguration is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="RichMediaConfiguration-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in RichMediaConfiguration shall have one of values: 3D, Video, Sound</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "3D" || SubtypeNameValue == "Sound" || SubtypeNameValue == "Video"</test>
			<error>
				<message>Entry Subtype with type Name in RichMediaConfiguration has incorrect value %1 instead of 3D, Video, Sound</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="RichMediaConfiguration-Type" testNumber="8"/>
			<description>Entry Type in RichMediaConfiguration shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaConfiguration has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="RichMediaConfiguration-Type" testNumber="23"/>
			<description>Entry Type in RichMediaConfiguration can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in RichMediaConfiguration is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="RichMediaConfiguration-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RichMediaConfiguration shall have value RichMediaConfiguration</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaConfiguration"</test>
			<error>
				<message>Entry Type with type Name in RichMediaConfiguration has incorrect value %1 instead of RichMediaConfiguration</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="RichMediaContent" testNumber="1"/>
			<description>RichMediaContent shall not contain entries except Assets, Configurations, Type, Views</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Assets' &amp;&amp; elem != 'Configurations' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Views' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RichMediaContent contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Assets' &amp;&amp; elem != 'Configurations' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Views' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="RichMediaContent-Assets" testNumber="8"/>
			<description>Entry Assets in RichMediaContent shall have type NameTree</description>
			<test>containsAssets == false || AssetsHasTypeNameTree == true</test>
			<error>
				<message>Entry Assets in RichMediaContent has type %1 instead of type NameTree</message>
				<arguments>
					<argument>AssetsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="RichMediaContent-Assets" testNumber="23"/>
			<description>Entry Assets in RichMediaContent can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsAssets == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Assets in RichMediaContent is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="RichMediaContent-AssetsTreeNode" testNumber="8"/>
			<description>Entry AssetsTreeNode in RichMediaContent shall have type NameTree</description>
			<test>containsAssetsTreeNode == false || AssetsTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry AssetsTreeNode in RichMediaContent has type %1 instead of type NameTree</message>
				<arguments>
					<argument>AssetsTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="RichMediaContent-AssetsTreeNode" testNumber="23"/>
			<description>Entry AssetsTreeNode in RichMediaContent can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsAssetsTreeNode == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry AssetsTreeNode in RichMediaContent is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="RichMediaContent-Configurations" testNumber="8"/>
			<description>Entry Configurations in RichMediaContent shall have type Array</description>
			<test>containsConfigurations == false || ConfigurationsHasTypeArray == true</test>
			<error>
				<message>Entry Configurations in RichMediaContent has type %1 instead of type Array</message>
				<arguments>
					<argument>ConfigurationsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="RichMediaContent-Configurations" testNumber="7"/>
			<description>Entry Configurations in RichMediaContent is required</description>
			<test>containsConfigurations == true</test>
			<error>
				<message>Entry Configurations in RichMediaContent is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="RichMediaContent-Configurations" testNumber="23"/>
			<description>Entry Configurations in RichMediaContent can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsConfigurations == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Configurations in RichMediaContent is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="RichMediaContent-Configurations-Array" testNumber="9"/>
			<description>Entry Configurations with type Array in RichMediaContent shall satisfy special case: fn:Eval(fn:ArrayLength(Configurations) &gt; 0)</description>
			<test>ConfigurationsHasTypeArray != true || (ConfigurationsArraySize &gt; 0)</test>
			<error>
				<message>Entry Configurations with type Array in RichMediaContent does not satisfy special case: fn:Eval(fn:ArrayLength(Configurations) &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="RichMediaContent-Type" testNumber="8"/>
			<description>Entry Type in RichMediaContent shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaContent has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="RichMediaContent-Type" testNumber="23"/>
			<description>Entry Type in RichMediaContent can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in RichMediaContent is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="RichMediaContent-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RichMediaContent shall have value RichMediaContent</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaContent"</test>
			<error>
				<message>Entry Type with type Name in RichMediaContent has incorrect value %1 instead of RichMediaContent</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="RichMediaContent-Views" testNumber="8"/>
			<description>Entry Views in RichMediaContent shall have type Array</description>
			<test>containsViews == false || ViewsHasTypeArray == true</test>
			<error>
				<message>Entry Views in RichMediaContent has type %1 instead of type Array</message>
				<arguments>
					<argument>ViewsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="RichMediaContent-Views" testNumber="23"/>
			<description>Entry Views in RichMediaContent can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsViews == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Views in RichMediaContent is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContentNameTreeAssetsEntry">
			<id specification="ISO_32000_1_7" clause="RichMediaContentNameTreeAssetsEntry" testNumber="8"/>
			<description>Entry in RichMediaContentNameTreeAssets shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in RichMediaContentNameTreeAssets has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint" testNumber="1"/>
			<description>RichMediaCuePoint shall not contain entries except A, Name, Subtype, Time, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Time' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RichMediaCuePoint contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Time' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint-A-Dictionary" testNumber="17"/>
			<description>Entry A with type Dictionary in RichMediaCuePoint shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript, ActionRichMediaExecute</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in RichMediaCuePoint is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript, ActionRichMediaExecute</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint-A" testNumber="8"/>
			<description>Entry A in RichMediaCuePoint shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in RichMediaCuePoint has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint-A" testNumber="7"/>
			<description>Entry A in RichMediaCuePoint is required</description>
			<test>containsA == true</test>
			<error>
				<message>Entry A in RichMediaCuePoint is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint-A" testNumber="23"/>
			<description>Entry A in RichMediaCuePoint can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsA == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry A in RichMediaCuePoint is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint-Name" testNumber="8"/>
			<description>Entry Name in RichMediaCuePoint shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in RichMediaCuePoint has type %1 instead of type StringText</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint-Name" testNumber="7"/>
			<description>Entry Name in RichMediaCuePoint is required</description>
			<test>containsName == true</test>
			<error>
				<message>Entry Name in RichMediaCuePoint is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint-Name" testNumber="23"/>
			<description>Entry Name in RichMediaCuePoint can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsName == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Name in RichMediaCuePoint is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint-Subtype" testNumber="8"/>
			<description>Entry Subtype in RichMediaCuePoint shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in RichMediaCuePoint has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint-Subtype" testNumber="23"/>
			<description>Entry Subtype in RichMediaCuePoint can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsSubtype == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Subtype in RichMediaCuePoint is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in RichMediaCuePoint shall have one of values: Navigation, Event</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Navigation" || SubtypeNameValue == "Event"</test>
			<error>
				<message>Entry Subtype with type Name in RichMediaCuePoint has incorrect value %1 instead of Navigation, Event</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint-Time" testNumber="8"/>
			<description>Entry Time in RichMediaCuePoint shall have type Number</description>
			<test>containsTime == false || TimeHasTypeNumber == true</test>
			<error>
				<message>Entry Time in RichMediaCuePoint has type %1 instead of type Number</message>
				<arguments>
					<argument>TimeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint-Time" testNumber="7"/>
			<description>Entry Time in RichMediaCuePoint is required</description>
			<test>containsTime == true</test>
			<error>
				<message>Entry Time in RichMediaCuePoint is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint-Time" testNumber="23"/>
			<description>Entry Time in RichMediaCuePoint can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsTime == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Time in RichMediaCuePoint is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint-Type" testNumber="8"/>
			<description>Entry Type in RichMediaCuePoint shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaCuePoint has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint-Type" testNumber="23"/>
			<description>Entry Type in RichMediaCuePoint can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in RichMediaCuePoint is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="RichMediaCuePoint-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RichMediaCuePoint shall have value CuePoint</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CuePoint"</test>
			<error>
				<message>Entry Type with type Name in RichMediaCuePoint has incorrect value %1 instead of CuePoint</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaDeactivation">
			<id specification="ISO_32000_1_7" clause="RichMediaDeactivation" testNumber="1"/>
			<description>RichMediaDeactivation shall not contain entries except Condition, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Condition' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RichMediaDeactivation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Condition' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaDeactivation">
			<id specification="ISO_32000_1_7" clause="RichMediaDeactivation-Condition" testNumber="8"/>
			<description>Entry Condition in RichMediaDeactivation shall have type Name</description>
			<test>containsCondition == false || ConditionHasTypeName == true</test>
			<error>
				<message>Entry Condition in RichMediaDeactivation has type %1 instead of type Name</message>
				<arguments>
					<argument>ConditionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaDeactivation">
			<id specification="ISO_32000_1_7" clause="RichMediaDeactivation-Condition" testNumber="23"/>
			<description>Entry Condition in RichMediaDeactivation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsCondition == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Condition in RichMediaDeactivation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaDeactivation">
			<id specification="ISO_32000_1_7" clause="RichMediaDeactivation-Condition-Name" testNumber="6"/>
			<description>Entry Condition with type Name in RichMediaDeactivation shall have one of values: PC, PI, XD</description>
			<test>ConditionHasTypeName != true || ConditionNameValue == "XD" || ConditionNameValue == "PC" || ConditionNameValue == "PI"</test>
			<error>
				<message>Entry Condition with type Name in RichMediaDeactivation has incorrect value %1 instead of PC, PI, XD</message>
				<arguments>
					<argument>ConditionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaDeactivation">
			<id specification="ISO_32000_1_7" clause="RichMediaDeactivation-Type" testNumber="8"/>
			<description>Entry Type in RichMediaDeactivation shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaDeactivation has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaDeactivation">
			<id specification="ISO_32000_1_7" clause="RichMediaDeactivation-Type" testNumber="23"/>
			<description>Entry Type in RichMediaDeactivation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in RichMediaDeactivation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaDeactivation">
			<id specification="ISO_32000_1_7" clause="RichMediaDeactivation-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RichMediaDeactivation shall have value RichMediaDeactivation</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaDeactivation"</test>
			<error>
				<message>Entry Type with type Name in RichMediaDeactivation has incorrect value %1 instead of RichMediaDeactivation</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="RichMediaHeight" testNumber="1"/>
			<description>RichMediaHeight shall not contain entries except Default, Max, Min</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Default' &amp;&amp; elem != 'Max' &amp;&amp; elem != 'Min' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RichMediaHeight contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Default' &amp;&amp; elem != 'Max' &amp;&amp; elem != 'Min' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="RichMediaHeight-Default" testNumber="8"/>
			<description>Entry Default in RichMediaHeight shall have type Integer</description>
			<test>containsDefault == false || DefaultHasTypeInteger == true</test>
			<error>
				<message>Entry Default in RichMediaHeight has type %1 instead of type Integer</message>
				<arguments>
					<argument>DefaultType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="RichMediaHeight-Default" testNumber="23"/>
			<description>Entry Default in RichMediaHeight can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsDefault == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Default in RichMediaHeight is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="RichMediaHeight-Default-Integer" testNumber="14"/>
			<description>Entry Default with type Integer in RichMediaHeight shall satisfy possible value predicate: fn:Eval(@Default &gt; 0)</description>
			<test>DefaultHasTypeInteger != true || DefaultIntegerValue &gt; 0</test>
			<error>
				<message>Entry Default with type Integer in RichMediaHeight does not satisfy possible value predicate: fn:Eval(@Default &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="RichMediaHeight-Max" testNumber="8"/>
			<description>Entry Max in RichMediaHeight shall have type Integer</description>
			<test>containsMax == false || MaxHasTypeInteger == true</test>
			<error>
				<message>Entry Max in RichMediaHeight has type %1 instead of type Integer</message>
				<arguments>
					<argument>MaxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="RichMediaHeight-Max" testNumber="23"/>
			<description>Entry Max in RichMediaHeight can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsMax == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Max in RichMediaHeight is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="RichMediaHeight-Max-Integer" testNumber="14"/>
			<description>Entry Max with type Integer in RichMediaHeight shall satisfy possible value predicate: fn:Eval(@Max &gt; 0)</description>
			<test>MaxHasTypeInteger != true || MaxIntegerValue &gt; 0</test>
			<error>
				<message>Entry Max with type Integer in RichMediaHeight does not satisfy possible value predicate: fn:Eval(@Max &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="RichMediaHeight-Min" testNumber="8"/>
			<description>Entry Min in RichMediaHeight shall have type Integer</description>
			<test>containsMin == false || MinHasTypeInteger == true</test>
			<error>
				<message>Entry Min in RichMediaHeight has type %1 instead of type Integer</message>
				<arguments>
					<argument>MinType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="RichMediaHeight-Min" testNumber="23"/>
			<description>Entry Min in RichMediaHeight can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsMin == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Min in RichMediaHeight is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="RichMediaHeight-Min-Integer" testNumber="14"/>
			<description>Entry Min with type Integer in RichMediaHeight shall satisfy possible value predicate: fn:Eval(@Min &gt; 0)</description>
			<test>MinHasTypeInteger != true || MinIntegerValue &gt; 0</test>
			<error>
				<message>Entry Min with type Integer in RichMediaHeight does not satisfy possible value predicate: fn:Eval(@Min &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="RichMediaInstance" testNumber="1"/>
			<description>RichMediaInstance shall not contain entries except Asset, Params, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Asset' &amp;&amp; elem != 'Params' &amp;&amp; elem != 'Scene' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RichMediaInstance contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Asset' &amp;&amp; elem != 'Params' &amp;&amp; elem != 'Scene' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="RichMediaInstance" testNumber="22"/>
			<description>RichMediaInstance shall not contain entry Scene in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsScene == false</test>
			<error>
				<message>RichMediaInstance contains entry Scene</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="RichMediaInstance-Asset" testNumber="8"/>
			<description>Entry Asset in RichMediaInstance shall have type Dictionary</description>
			<test>containsAsset == false || AssetHasTypeDictionary == true</test>
			<error>
				<message>Entry Asset in RichMediaInstance has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AssetType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="RichMediaInstance-Asset" testNumber="7"/>
			<description>Entry Asset in RichMediaInstance is required</description>
			<test>containsAsset == true</test>
			<error>
				<message>Entry Asset in RichMediaInstance is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="RichMediaInstance-Asset" testNumber="23"/>
			<description>Entry Asset in RichMediaInstance can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsAsset == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Asset in RichMediaInstance is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="RichMediaInstance-Params" testNumber="8"/>
			<description>Entry Params in RichMediaInstance shall have type Dictionary</description>
			<test>containsParams == false || ParamsHasTypeDictionary == true</test>
			<error>
				<message>Entry Params in RichMediaInstance has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ParamsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="RichMediaInstance-Params" testNumber="23"/>
			<description>Entry Params in RichMediaInstance can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsParams == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Params in RichMediaInstance is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="RichMediaInstance-Params-Dictionary" testNumber="9"/>
			<description>Entry Params with type Dictionary in RichMediaInstance shall satisfy special case: fn:Eval(@Subtype == Flash)</description>
			<test>ParamsHasTypeDictionary != true || (SubtypeNameValue == "Flash")</test>
			<error>
				<message>Entry Params with type Dictionary in RichMediaInstance does not satisfy special case: fn:Eval(@Subtype == Flash)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="RichMediaInstance-Subtype" testNumber="8"/>
			<description>Entry Subtype in RichMediaInstance shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in RichMediaInstance has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="RichMediaInstance-Subtype" testNumber="7"/>
			<description>Entry Subtype in RichMediaInstance is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in RichMediaInstance is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="RichMediaInstance-Subtype" testNumber="23"/>
			<description>Entry Subtype in RichMediaInstance can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsSubtype == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Subtype in RichMediaInstance is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="RichMediaInstance-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in RichMediaInstance shall have one of values: 3D, Video, Sound, Flash</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "3D" || SubtypeNameValue == "Sound" || SubtypeNameValue == "Video" || SubtypeNameValue == "Flash"</test>
			<error>
				<message>Entry Subtype with type Name in RichMediaInstance has incorrect value %1 instead of 3D, Video, Sound, Flash</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="RichMediaInstance-Type" testNumber="8"/>
			<description>Entry Type in RichMediaInstance shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaInstance has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="RichMediaInstance-Type" testNumber="23"/>
			<description>Entry Type in RichMediaInstance can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in RichMediaInstance is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="RichMediaInstance-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RichMediaInstance shall have value RichMediaInstance</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaInstance"</test>
			<error>
				<message>Entry Type with type Name in RichMediaInstance has incorrect value %1 instead of RichMediaInstance</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams" testNumber="1"/>
			<description>RichMediaParams shall not contain entries except Binding, BindingMaterial, CuePoints, FlashVars, Settings, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Binding' &amp;&amp; elem != 'BindingMaterial' &amp;&amp; elem != 'CuePoints' &amp;&amp; elem != 'FlashVars' &amp;&amp; elem != 'Settings' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RichMediaParams contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Binding' &amp;&amp; elem != 'BindingMaterial' &amp;&amp; elem != 'CuePoints' &amp;&amp; elem != 'FlashVars' &amp;&amp; elem != 'Settings' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-Binding" testNumber="8"/>
			<description>Entry Binding in RichMediaParams shall have type Name</description>
			<test>containsBinding == false || BindingHasTypeName == true</test>
			<error>
				<message>Entry Binding in RichMediaParams has type %1 instead of type Name</message>
				<arguments>
					<argument>BindingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-Binding" testNumber="23"/>
			<description>Entry Binding in RichMediaParams can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsBinding == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Binding in RichMediaParams is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-Binding-Name" testNumber="6"/>
			<description>Entry Binding with type Name in RichMediaParams shall have one of values: Background, Foreground, Material, None</description>
			<test>BindingHasTypeName != true || BindingNameValue == "None" || BindingNameValue == "Foreground" || BindingNameValue == "Background" || BindingNameValue == "Material"</test>
			<error>
				<message>Entry Binding with type Name in RichMediaParams has incorrect value %1 instead of Background, Foreground, Material, None</message>
				<arguments>
					<argument>BindingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-BindingMaterial" testNumber="8"/>
			<description>Entry BindingMaterial in RichMediaParams shall have type StringText</description>
			<test>containsBindingMaterial == false || BindingMaterialHasTypeStringText == true</test>
			<error>
				<message>Entry BindingMaterial in RichMediaParams has type %1 instead of type StringText</message>
				<arguments>
					<argument>BindingMaterialType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-BindingMaterial" testNumber="11"/>
			<description>Entry BindingMaterial in RichMediaParams is required, when @Binding == Material</description>
			<test>containsBindingMaterial == true || (BindingNameValue != "Material")</test>
			<error>
				<message>Entry BindingMaterial in RichMediaParams is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-BindingMaterial" testNumber="23"/>
			<description>Entry BindingMaterial in RichMediaParams can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsBindingMaterial == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry BindingMaterial in RichMediaParams is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-CuePoints" testNumber="8"/>
			<description>Entry CuePoints in RichMediaParams shall have type Array</description>
			<test>containsCuePoints == false || CuePointsHasTypeArray == true</test>
			<error>
				<message>Entry CuePoints in RichMediaParams has type %1 instead of type Array</message>
				<arguments>
					<argument>CuePointsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-CuePoints" testNumber="23"/>
			<description>Entry CuePoints in RichMediaParams can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsCuePoints == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry CuePoints in RichMediaParams is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-FlashVars" testNumber="8"/>
			<description>Entry FlashVars in RichMediaParams shall have one of types: Stream, StringText</description>
			<test>containsFlashVars == false || FlashVarsHasTypeStream == true || FlashVarsHasTypeStringText == true</test>
			<error>
				<message>Entry FlashVars in RichMediaParams has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>FlashVarsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-FlashVars" testNumber="23"/>
			<description>Entry FlashVars in RichMediaParams can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsFlashVars == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry FlashVars in RichMediaParams is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-FlashVars-Stream" testNumber="10"/>
			<description>Entry FlashVars with type Stream in RichMediaParams shall be indirect</description>
			<test>FlashVarsHasTypeStream != true || isFlashVarsIndirect == true</test>
			<error>
				<message>Entry FlashVars with type Stream in RichMediaParams is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-Settings" testNumber="8"/>
			<description>Entry Settings in RichMediaParams shall have one of types: Stream, StringText</description>
			<test>containsSettings == false || SettingsHasTypeStream == true || SettingsHasTypeStringText == true</test>
			<error>
				<message>Entry Settings in RichMediaParams has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>SettingsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-Settings" testNumber="23"/>
			<description>Entry Settings in RichMediaParams can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsSettings == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Settings in RichMediaParams is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-Settings-Stream" testNumber="10"/>
			<description>Entry Settings with type Stream in RichMediaParams shall be indirect</description>
			<test>SettingsHasTypeStream != true || isSettingsIndirect == true</test>
			<error>
				<message>Entry Settings with type Stream in RichMediaParams is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-Type" testNumber="8"/>
			<description>Entry Type in RichMediaParams shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaParams has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-Type" testNumber="23"/>
			<description>Entry Type in RichMediaParams can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in RichMediaParams is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="RichMediaParams-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RichMediaParams shall have value RichMediaParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaParams"</test>
			<error>
				<message>Entry Type with type Name in RichMediaParams has incorrect value %1 instead of RichMediaParams</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="RichMediaPosition" testNumber="1"/>
			<description>RichMediaPosition shall not contain entries except HAlign, HOffset, Type, VAlign, VOffset</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'HAlign' &amp;&amp; elem != 'HOffset' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'VAlign' &amp;&amp; elem != 'VOffset' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RichMediaPosition contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'HAlign' &amp;&amp; elem != 'HOffset' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'VAlign' &amp;&amp; elem != 'VOffset' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="RichMediaPosition-HAlign" testNumber="8"/>
			<description>Entry HAlign in RichMediaPosition shall have type Name</description>
			<test>containsHAlign == false || HAlignHasTypeName == true</test>
			<error>
				<message>Entry HAlign in RichMediaPosition has type %1 instead of type Name</message>
				<arguments>
					<argument>HAlignType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="RichMediaPosition-HAlign" testNumber="23"/>
			<description>Entry HAlign in RichMediaPosition can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsHAlign == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry HAlign in RichMediaPosition is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="RichMediaPosition-HAlign-Name" testNumber="6"/>
			<description>Entry HAlign with type Name in RichMediaPosition shall have one of values: Center, Far, Near</description>
			<test>HAlignHasTypeName != true || HAlignNameValue == "Near" || HAlignNameValue == "Center" || HAlignNameValue == "Far"</test>
			<error>
				<message>Entry HAlign with type Name in RichMediaPosition has incorrect value %1 instead of Center, Far, Near</message>
				<arguments>
					<argument>HAlignNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="RichMediaPosition-HOffset" testNumber="8"/>
			<description>Entry HOffset in RichMediaPosition shall have type Number</description>
			<test>containsHOffset == false || HOffsetHasTypeNumber == true</test>
			<error>
				<message>Entry HOffset in RichMediaPosition has type %1 instead of type Number</message>
				<arguments>
					<argument>HOffsetType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="RichMediaPosition-HOffset" testNumber="23"/>
			<description>Entry HOffset in RichMediaPosition can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsHOffset == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry HOffset in RichMediaPosition is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="RichMediaPosition-Type" testNumber="8"/>
			<description>Entry Type in RichMediaPosition shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaPosition has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="RichMediaPosition-Type" testNumber="23"/>
			<description>Entry Type in RichMediaPosition can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in RichMediaPosition is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="RichMediaPosition-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RichMediaPosition shall have value RichMediaPosition</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaPosition"</test>
			<error>
				<message>Entry Type with type Name in RichMediaPosition has incorrect value %1 instead of RichMediaPosition</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="RichMediaPosition-VAlign" testNumber="8"/>
			<description>Entry VAlign in RichMediaPosition shall have type Name</description>
			<test>containsVAlign == false || VAlignHasTypeName == true</test>
			<error>
				<message>Entry VAlign in RichMediaPosition has type %1 instead of type Name</message>
				<arguments>
					<argument>VAlignType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="RichMediaPosition-VAlign" testNumber="23"/>
			<description>Entry VAlign in RichMediaPosition can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsVAlign == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry VAlign in RichMediaPosition is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="RichMediaPosition-VAlign-Name" testNumber="6"/>
			<description>Entry VAlign with type Name in RichMediaPosition shall have one of values: Center, Far, Near</description>
			<test>VAlignHasTypeName != true || VAlignNameValue == "Near" || VAlignNameValue == "Center" || VAlignNameValue == "Far"</test>
			<error>
				<message>Entry VAlign with type Name in RichMediaPosition has incorrect value %1 instead of Center, Far, Near</message>
				<arguments>
					<argument>VAlignNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="RichMediaPosition-VOffset" testNumber="8"/>
			<description>Entry VOffset in RichMediaPosition shall have type Number</description>
			<test>containsVOffset == false || VOffsetHasTypeNumber == true</test>
			<error>
				<message>Entry VOffset in RichMediaPosition has type %1 instead of type Number</message>
				<arguments>
					<argument>VOffsetType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="RichMediaPosition-VOffset" testNumber="23"/>
			<description>Entry VOffset in RichMediaPosition can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsVOffset == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry VOffset in RichMediaPosition is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation" testNumber="1"/>
			<description>RichMediaPresentation shall not contain entries except NavigationPane, PassContextClick, Style, Toolbar, Transparent, Type, Window</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'NavigationPane' &amp;&amp; elem != 'PassContextClick' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'Toolbar' &amp;&amp; elem != 'Transparent' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Window' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RichMediaPresentation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'NavigationPane' &amp;&amp; elem != 'PassContextClick' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'Toolbar' &amp;&amp; elem != 'Transparent' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Window' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation-NavigationPane" testNumber="8"/>
			<description>Entry NavigationPane in RichMediaPresentation shall have type Boolean</description>
			<test>containsNavigationPane == false || NavigationPaneHasTypeBoolean == true</test>
			<error>
				<message>Entry NavigationPane in RichMediaPresentation has type %1 instead of type Boolean</message>
				<arguments>
					<argument>NavigationPaneType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation-NavigationPane" testNumber="23"/>
			<description>Entry NavigationPane in RichMediaPresentation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsNavigationPane == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry NavigationPane in RichMediaPresentation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation-PassContextClick" testNumber="8"/>
			<description>Entry PassContextClick in RichMediaPresentation shall have type Boolean</description>
			<test>containsPassContextClick == false || PassContextClickHasTypeBoolean == true</test>
			<error>
				<message>Entry PassContextClick in RichMediaPresentation has type %1 instead of type Boolean</message>
				<arguments>
					<argument>PassContextClickType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation-PassContextClick" testNumber="23"/>
			<description>Entry PassContextClick in RichMediaPresentation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsPassContextClick == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PassContextClick in RichMediaPresentation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation-Style" testNumber="8"/>
			<description>Entry Style in RichMediaPresentation shall have type Name</description>
			<test>containsStyle == false || StyleHasTypeName == true</test>
			<error>
				<message>Entry Style in RichMediaPresentation has type %1 instead of type Name</message>
				<arguments>
					<argument>StyleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation-Style" testNumber="23"/>
			<description>Entry Style in RichMediaPresentation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsStyle == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Style in RichMediaPresentation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation-Style-Name" testNumber="6"/>
			<description>Entry Style with type Name in RichMediaPresentation shall have one of values: Windowed, Embedded</description>
			<test>StyleHasTypeName != true || StyleNameValue == "Embedded" || StyleNameValue == "Windowed"</test>
			<error>
				<message>Entry Style with type Name in RichMediaPresentation has incorrect value %1 instead of Windowed, Embedded</message>
				<arguments>
					<argument>StyleNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation-Toolbar" testNumber="8"/>
			<description>Entry Toolbar in RichMediaPresentation shall have type Boolean</description>
			<test>containsToolbar == false || ToolbarHasTypeBoolean == true</test>
			<error>
				<message>Entry Toolbar in RichMediaPresentation has type %1 instead of type Boolean</message>
				<arguments>
					<argument>ToolbarType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation-Toolbar" testNumber="23"/>
			<description>Entry Toolbar in RichMediaPresentation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsToolbar == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Toolbar in RichMediaPresentation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation-Transparent" testNumber="8"/>
			<description>Entry Transparent in RichMediaPresentation shall have type Boolean</description>
			<test>containsTransparent == false || TransparentHasTypeBoolean == true</test>
			<error>
				<message>Entry Transparent in RichMediaPresentation has type %1 instead of type Boolean</message>
				<arguments>
					<argument>TransparentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation-Transparent" testNumber="23"/>
			<description>Entry Transparent in RichMediaPresentation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsTransparent == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Transparent in RichMediaPresentation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation-Type" testNumber="8"/>
			<description>Entry Type in RichMediaPresentation shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaPresentation has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation-Type" testNumber="23"/>
			<description>Entry Type in RichMediaPresentation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in RichMediaPresentation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RichMediaPresentation shall have value RichMediaPresentation</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaPresentation"</test>
			<error>
				<message>Entry Type with type Name in RichMediaPresentation has incorrect value %1 instead of RichMediaPresentation</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation-Window" testNumber="8"/>
			<description>Entry Window in RichMediaPresentation shall have type Dictionary</description>
			<test>containsWindow == false || WindowHasTypeDictionary == true</test>
			<error>
				<message>Entry Window in RichMediaPresentation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>WindowType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="RichMediaPresentation-Window" testNumber="23"/>
			<description>Entry Window in RichMediaPresentation can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsWindow == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Window in RichMediaPresentation is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaSettings">
			<id specification="ISO_32000_1_7" clause="RichMediaSettings" testNumber="1"/>
			<description>RichMediaSettings shall not contain entries except Activation, Deactivation, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Activation' &amp;&amp; elem != 'Deactivation' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RichMediaSettings contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Activation' &amp;&amp; elem != 'Deactivation' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaSettings">
			<id specification="ISO_32000_1_7" clause="RichMediaSettings-Activation" testNumber="8"/>
			<description>Entry Activation in RichMediaSettings shall have type Dictionary</description>
			<test>containsActivation == false || ActivationHasTypeDictionary == true</test>
			<error>
				<message>Entry Activation in RichMediaSettings has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ActivationType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaSettings">
			<id specification="ISO_32000_1_7" clause="RichMediaSettings-Activation" testNumber="23"/>
			<description>Entry Activation in RichMediaSettings can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsActivation == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Activation in RichMediaSettings is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaSettings">
			<id specification="ISO_32000_1_7" clause="RichMediaSettings-Deactivation" testNumber="8"/>
			<description>Entry Deactivation in RichMediaSettings shall have type Dictionary</description>
			<test>containsDeactivation == false || DeactivationHasTypeDictionary == true</test>
			<error>
				<message>Entry Deactivation in RichMediaSettings has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>DeactivationType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaSettings">
			<id specification="ISO_32000_1_7" clause="RichMediaSettings-Deactivation" testNumber="23"/>
			<description>Entry Deactivation in RichMediaSettings can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsDeactivation == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Deactivation in RichMediaSettings is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaSettings">
			<id specification="ISO_32000_1_7" clause="RichMediaSettings-Type" testNumber="8"/>
			<description>Entry Type in RichMediaSettings shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaSettings has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaSettings">
			<id specification="ISO_32000_1_7" clause="RichMediaSettings-Type" testNumber="23"/>
			<description>Entry Type in RichMediaSettings can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in RichMediaSettings is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaSettings">
			<id specification="ISO_32000_1_7" clause="RichMediaSettings-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RichMediaSettings shall have value RichMediaSettings</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaSettings"</test>
			<error>
				<message>Entry Type with type Name in RichMediaSettings has incorrect value %1 instead of RichMediaSettings</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="RichMediaWidth" testNumber="1"/>
			<description>RichMediaWidth shall not contain entries except Default, Max, Min</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Default' &amp;&amp; elem != 'Max' &amp;&amp; elem != 'Min' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RichMediaWidth contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Default' &amp;&amp; elem != 'Max' &amp;&amp; elem != 'Min' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="RichMediaWidth-Default" testNumber="8"/>
			<description>Entry Default in RichMediaWidth shall have type Integer</description>
			<test>containsDefault == false || DefaultHasTypeInteger == true</test>
			<error>
				<message>Entry Default in RichMediaWidth has type %1 instead of type Integer</message>
				<arguments>
					<argument>DefaultType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="RichMediaWidth-Default" testNumber="23"/>
			<description>Entry Default in RichMediaWidth can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsDefault == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Default in RichMediaWidth is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="RichMediaWidth-Default-Integer" testNumber="14"/>
			<description>Entry Default with type Integer in RichMediaWidth shall satisfy possible value predicate: fn:Eval(@Default &gt; 0)</description>
			<test>DefaultHasTypeInteger != true || DefaultIntegerValue &gt; 0</test>
			<error>
				<message>Entry Default with type Integer in RichMediaWidth does not satisfy possible value predicate: fn:Eval(@Default &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="RichMediaWidth-Max" testNumber="8"/>
			<description>Entry Max in RichMediaWidth shall have type Integer</description>
			<test>containsMax == false || MaxHasTypeInteger == true</test>
			<error>
				<message>Entry Max in RichMediaWidth has type %1 instead of type Integer</message>
				<arguments>
					<argument>MaxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="RichMediaWidth-Max" testNumber="23"/>
			<description>Entry Max in RichMediaWidth can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsMax == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Max in RichMediaWidth is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="RichMediaWidth-Max-Integer" testNumber="14"/>
			<description>Entry Max with type Integer in RichMediaWidth shall satisfy possible value predicate: fn:Eval(@Max &gt; 0)</description>
			<test>MaxHasTypeInteger != true || MaxIntegerValue &gt; 0</test>
			<error>
				<message>Entry Max with type Integer in RichMediaWidth does not satisfy possible value predicate: fn:Eval(@Max &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="RichMediaWidth-Min" testNumber="8"/>
			<description>Entry Min in RichMediaWidth shall have type Integer</description>
			<test>containsMin == false || MinHasTypeInteger == true</test>
			<error>
				<message>Entry Min in RichMediaWidth has type %1 instead of type Integer</message>
				<arguments>
					<argument>MinType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="RichMediaWidth-Min" testNumber="23"/>
			<description>Entry Min in RichMediaWidth can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsMin == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Min in RichMediaWidth is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="RichMediaWidth-Min-Integer" testNumber="14"/>
			<description>Entry Min with type Integer in RichMediaWidth shall satisfy possible value predicate: fn:Eval(@Min &gt; 0)</description>
			<test>MinHasTypeInteger != true || MinIntegerValue &gt; 0</test>
			<error>
				<message>Entry Min with type Integer in RichMediaWidth does not satisfy possible value predicate: fn:Eval(@Min &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="RichMediaWindow" testNumber="1"/>
			<description>RichMediaWindow shall not contain entries except Height, Position, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Height' &amp;&amp; elem != 'Position' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>RichMediaWindow contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Height' &amp;&amp; elem != 'Position' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="RichMediaWindow-Height" testNumber="8"/>
			<description>Entry Height in RichMediaWindow shall have type Dictionary</description>
			<test>containsHeight == false || HeightHasTypeDictionary == true</test>
			<error>
				<message>Entry Height in RichMediaWindow has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>HeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="RichMediaWindow-Height" testNumber="23"/>
			<description>Entry Height in RichMediaWindow can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsHeight == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Height in RichMediaWindow is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="RichMediaWindow-Position" testNumber="8"/>
			<description>Entry Position in RichMediaWindow shall have type Dictionary</description>
			<test>containsPosition == false || PositionHasTypeDictionary == true</test>
			<error>
				<message>Entry Position in RichMediaWindow has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PositionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="RichMediaWindow-Position" testNumber="23"/>
			<description>Entry Position in RichMediaWindow can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsPosition == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Position in RichMediaWindow is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="RichMediaWindow-Type" testNumber="8"/>
			<description>Entry Type in RichMediaWindow shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaWindow has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="RichMediaWindow-Type" testNumber="23"/>
			<description>Entry Type in RichMediaWindow can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsType == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Type in RichMediaWindow is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="RichMediaWindow-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in RichMediaWindow shall have value RichMediaWindow</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaWindow"</test>
			<error>
				<message>Entry Type with type Name in RichMediaWindow has incorrect value %1 instead of RichMediaWindow</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="RichMediaWindow-Width" testNumber="8"/>
			<description>Entry Width in RichMediaWindow shall have type Dictionary</description>
			<test>containsWidth == false || WidthHasTypeDictionary == true</test>
			<error>
				<message>Entry Width in RichMediaWindow has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>WidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="RichMediaWindow-Width" testNumber="23"/>
			<description>Entry Width in RichMediaWindow can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsWidth == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Width in RichMediaWindow is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ARoleMapEntry">
			<id specification="ISO_32000_1_7" clause="RoleMapEntry" testNumber="8"/>
			<description>Entry in RoleMap shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in RoleMap has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_7" clause="Separation" testNumber="1"/>
			<description>Separation shall not contain entries except ColorSpace, DeviceColorant, Pages</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'DeviceColorant' &amp;&amp; elem != 'Pages' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Separation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'DeviceColorant' &amp;&amp; elem != 'Pages' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_7" clause="Separation-ColorSpace-Array" testNumber="17"/>
			<description>Entry ColorSpace with type Array in Separation shall be one of objects SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in Separation is not one of objects SeparationColorSpace, DeviceNColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_7" clause="Separation-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in Separation shall have type Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in Separation has type %1 instead of type Array</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_7" clause="Separation-DeviceColorant" testNumber="8"/>
			<description>Entry DeviceColorant in Separation shall have one of types: Name, String</description>
			<test>containsDeviceColorant == false || DeviceColorantHasTypeName == true || DeviceColorantHasTypeString == true</test>
			<error>
				<message>Entry DeviceColorant in Separation has type %1 instead of one of types: Name, String</message>
				<arguments>
					<argument>DeviceColorantType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_7" clause="Separation-DeviceColorant" testNumber="7"/>
			<description>Entry DeviceColorant in Separation is required</description>
			<test>containsDeviceColorant == true</test>
			<error>
				<message>Entry DeviceColorant in Separation is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_7" clause="Separation-Pages" testNumber="8"/>
			<description>Entry Pages in Separation shall have type Array</description>
			<test>containsPages == false || PagesHasTypeArray == true</test>
			<error>
				<message>Entry Pages in Separation has type %1 instead of type Array</message>
				<arguments>
					<argument>PagesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_7" clause="Separation-Pages" testNumber="7"/>
			<description>Entry Pages in Separation is required</description>
			<test>containsPages == true</test>
			<error>
				<message>Entry Pages in Separation is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="SeparationColorSpace" testNumber="2"/>
			<description>SeparationColorSpace shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>SeparationColorSpace contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="SeparationColorSpace-0" testNumber="8"/>
			<description>Entry 0 in SeparationColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in SeparationColorSpace has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="SeparationColorSpace-0-Name" testNumber="6"/>
			<description>Entry 0 with type Name in SeparationColorSpace shall have value Separation</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Separation"</test>
			<error>
				<message>Entry 0 with type Name in SeparationColorSpace has incorrect value %1 instead of Separation</message>
				<arguments>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="SeparationColorSpace-1" testNumber="8"/>
			<description>Entry 1 in SeparationColorSpace shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in SeparationColorSpace has type %1 instead of type Name</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="SeparationColorSpace-2-Array" testNumber="17"/>
			<description>Entry 2 with type Array in SeparationColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace</description>
			<test>entry2HasTypeArray != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Array in SeparationColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="SeparationColorSpace-2" testNumber="8"/>
			<description>Entry 2 in SeparationColorSpace shall have one of types: Array, Name</description>
			<test>size &lt;= 2 || entry2HasTypeArray == true || entry2HasTypeName == true</test>
			<error>
				<message>Entry 2 in SeparationColorSpace has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="SeparationColorSpace-2-Name" testNumber="6"/>
			<description>Entry 2 with type Name in SeparationColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry2HasTypeName != true || entry2NameValue == "DeviceCMYK" || entry2NameValue == "DeviceRGB" || entry2NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 2 with type Name in SeparationColorSpace has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>entry2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="SeparationColorSpace-3-Dictionary" testNumber="17"/>
			<description>Entry 3 with type Dictionary in SeparationColorSpace shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry3HasTypeDictionary != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Dictionary in SeparationColorSpace is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="SeparationColorSpace-3-Stream" testNumber="17"/>
			<description>Entry 3 with type Stream in SeparationColorSpace shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry3HasTypeStream != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Stream in SeparationColorSpace is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="SeparationColorSpace-3" testNumber="8"/>
			<description>Entry 3 in SeparationColorSpace shall have one of types: Dictionary, Stream</description>
			<test>size &lt;= 3 || entry3HasTypeDictionary == true || entry3HasTypeStream == true</test>
			<error>
				<message>Entry 3 in SeparationColorSpace has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>entry3Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="SeparationColorSpace-3-Stream" testNumber="10"/>
			<description>Entry 3 with type Stream in SeparationColorSpace shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in SeparationColorSpace is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingMapEntry">
			<id specification="ISO_32000_1_7" clause="ShadingMapEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in ShadingMap shall be one of objects ShadingType1, ShadingType2, ShadingType3</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in ShadingMap is not one of objects ShadingType1, ShadingType2, ShadingType3</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingMapEntry">
			<id specification="ISO_32000_1_7" clause="ShadingMapEntry-Stream" testNumber="17"/>
			<description>Entry with type Stream in ShadingMap shall be one of objects ShadingType4, ShadingType5, ShadingType6, ShadingType7</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Stream in ShadingMap is not one of objects ShadingType4, ShadingType5, ShadingType6, ShadingType7</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingMapEntry">
			<id specification="ISO_32000_1_7" clause="ShadingMapEntry" testNumber="8"/>
			<description>Entry in ShadingMap shall have one of types: Dictionary, Stream</description>
			<test>HasTypeDictionary == true || HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in ShadingMap has type %1 instead of one of types: Dictionary, Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingMapEntry">
			<id specification="ISO_32000_1_7" clause="ShadingMapEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in ShadingMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in ShadingMap is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1" testNumber="1"/>
			<description>ShadingType1 shall not contain entries except AntiAlias, BBox, Background, ColorSpace, Domain, Function, Matrix, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'ShadingType' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ShadingType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'ShadingType' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-AntiAlias" testNumber="8"/>
			<description>Entry AntiAlias in ShadingType1 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType1 has type %1 instead of type Boolean</message>
				<arguments>
					<argument>AntiAliasType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-BBox" testNumber="8"/>
			<description>Entry BBox in ShadingType1 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType1 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>BBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-Background" testNumber="8"/>
			<description>Entry Background in ShadingType1 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType1 has type %1 instead of type Array</message>
				<arguments>
					<argument>BackgroundType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-ColorSpace-Array" testNumber="17"/>
			<description>Entry ColorSpace with type Array in ShadingType1 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType1 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in ShadingType1 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType1 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-ColorSpace" testNumber="7"/>
			<description>Entry ColorSpace in ShadingType1 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-ColorSpace-Name" testNumber="6"/>
			<description>Entry ColorSpace with type Name in ShadingType1 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType1 has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-Domain" testNumber="8"/>
			<description>Entry Domain in ShadingType1 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in ShadingType1 has type %1 instead of type Array</message>
				<arguments>
					<argument>DomainType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-Function-Dictionary" testNumber="17"/>
			<description>Entry Function with type Dictionary in ShadingType1 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType1 is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-Function-Stream" testNumber="17"/>
			<description>Entry Function with type Stream in ShadingType1 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType1 is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-Function" testNumber="8"/>
			<description>Entry Function in ShadingType1 shall have one of types: Array, Dictionary, Stream</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeDictionary == true || FunctionHasTypeStream == true</test>
			<error>
				<message>Entry Function in ShadingType1 has type %1 instead of one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>FunctionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-Function" testNumber="7"/>
			<description>Entry Function in ShadingType1 is required</description>
			<test>containsFunction == true</test>
			<error>
				<message>Entry Function in ShadingType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-Function-Stream" testNumber="10"/>
			<description>Entry Function with type Stream in ShadingType1 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType1 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-Matrix" testNumber="8"/>
			<description>Entry Matrix in ShadingType1 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in ShadingType1 has type %1 instead of type Matrix</message>
				<arguments>
					<argument>MatrixType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-ShadingType" testNumber="8"/>
			<description>Entry ShadingType in ShadingType1 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>ShadingTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-ShadingType" testNumber="7"/>
			<description>Entry ShadingType in ShadingType1 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="ShadingType1-ShadingType-Integer" testNumber="6"/>
			<description>Entry ShadingType with type Integer in ShadingType1 shall have value 1</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 1</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType1 has incorrect value %1 instead of 1</message>
				<arguments>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2" testNumber="1"/>
			<description>ShadingType2 shall not contain entries except AntiAlias, BBox, Background, ColorSpace, Coords, Domain, Extend, Function, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Coords' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Extend' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'ShadingType' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ShadingType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Coords' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Extend' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'ShadingType' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-AntiAlias" testNumber="8"/>
			<description>Entry AntiAlias in ShadingType2 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType2 has type %1 instead of type Boolean</message>
				<arguments>
					<argument>AntiAliasType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-BBox" testNumber="8"/>
			<description>Entry BBox in ShadingType2 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType2 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>BBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-Background" testNumber="8"/>
			<description>Entry Background in ShadingType2 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType2 has type %1 instead of type Array</message>
				<arguments>
					<argument>BackgroundType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-ColorSpace-Array" testNumber="17"/>
			<description>Entry ColorSpace with type Array in ShadingType2 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType2 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in ShadingType2 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType2 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-ColorSpace" testNumber="7"/>
			<description>Entry ColorSpace in ShadingType2 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-ColorSpace-Name" testNumber="6"/>
			<description>Entry ColorSpace with type Name in ShadingType2 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType2 has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-Coords" testNumber="8"/>
			<description>Entry Coords in ShadingType2 shall have type Array</description>
			<test>containsCoords == false || CoordsHasTypeArray == true</test>
			<error>
				<message>Entry Coords in ShadingType2 has type %1 instead of type Array</message>
				<arguments>
					<argument>CoordsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-Coords" testNumber="7"/>
			<description>Entry Coords in ShadingType2 is required</description>
			<test>containsCoords == true</test>
			<error>
				<message>Entry Coords in ShadingType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-Domain" testNumber="8"/>
			<description>Entry Domain in ShadingType2 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in ShadingType2 has type %1 instead of type Array</message>
				<arguments>
					<argument>DomainType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-Extend" testNumber="8"/>
			<description>Entry Extend in ShadingType2 shall have type Array</description>
			<test>containsExtend == false || ExtendHasTypeArray == true</test>
			<error>
				<message>Entry Extend in ShadingType2 has type %1 instead of type Array</message>
				<arguments>
					<argument>ExtendType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-Function-Dictionary" testNumber="17"/>
			<description>Entry Function with type Dictionary in ShadingType2 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType2 is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-Function-Stream" testNumber="17"/>
			<description>Entry Function with type Stream in ShadingType2 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType2 is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-Function" testNumber="8"/>
			<description>Entry Function in ShadingType2 shall have one of types: Array, Dictionary, Stream</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeDictionary == true || FunctionHasTypeStream == true</test>
			<error>
				<message>Entry Function in ShadingType2 has type %1 instead of one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>FunctionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-Function" testNumber="7"/>
			<description>Entry Function in ShadingType2 is required</description>
			<test>containsFunction == true</test>
			<error>
				<message>Entry Function in ShadingType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-Function-Stream" testNumber="10"/>
			<description>Entry Function with type Stream in ShadingType2 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType2 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-ShadingType" testNumber="8"/>
			<description>Entry ShadingType in ShadingType2 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType2 has type %1 instead of type Integer</message>
				<arguments>
					<argument>ShadingTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-ShadingType" testNumber="7"/>
			<description>Entry ShadingType in ShadingType2 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType2 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="ShadingType2-ShadingType-Integer" testNumber="6"/>
			<description>Entry ShadingType with type Integer in ShadingType2 shall have value 2</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 2</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType2 has incorrect value %1 instead of 2</message>
				<arguments>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3" testNumber="1"/>
			<description>ShadingType3 shall not contain entries except AntiAlias, BBox, Background, ColorSpace, Coords, Domain, Extend, Function, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Coords' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Extend' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'ShadingType' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ShadingType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Coords' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Extend' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'ShadingType' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-AntiAlias" testNumber="8"/>
			<description>Entry AntiAlias in ShadingType3 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType3 has type %1 instead of type Boolean</message>
				<arguments>
					<argument>AntiAliasType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-BBox" testNumber="8"/>
			<description>Entry BBox in ShadingType3 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType3 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>BBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-Background" testNumber="8"/>
			<description>Entry Background in ShadingType3 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType3 has type %1 instead of type Array</message>
				<arguments>
					<argument>BackgroundType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-ColorSpace-Array" testNumber="17"/>
			<description>Entry ColorSpace with type Array in ShadingType3 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType3 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in ShadingType3 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType3 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-ColorSpace" testNumber="7"/>
			<description>Entry ColorSpace in ShadingType3 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-ColorSpace-Name" testNumber="6"/>
			<description>Entry ColorSpace with type Name in ShadingType3 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType3 has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-Coords" testNumber="8"/>
			<description>Entry Coords in ShadingType3 shall have type Array</description>
			<test>containsCoords == false || CoordsHasTypeArray == true</test>
			<error>
				<message>Entry Coords in ShadingType3 has type %1 instead of type Array</message>
				<arguments>
					<argument>CoordsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-Coords" testNumber="7"/>
			<description>Entry Coords in ShadingType3 is required</description>
			<test>containsCoords == true</test>
			<error>
				<message>Entry Coords in ShadingType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-Domain" testNumber="8"/>
			<description>Entry Domain in ShadingType3 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in ShadingType3 has type %1 instead of type Array</message>
				<arguments>
					<argument>DomainType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-Extend" testNumber="8"/>
			<description>Entry Extend in ShadingType3 shall have type Array</description>
			<test>containsExtend == false || ExtendHasTypeArray == true</test>
			<error>
				<message>Entry Extend in ShadingType3 has type %1 instead of type Array</message>
				<arguments>
					<argument>ExtendType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-Function-Dictionary" testNumber="17"/>
			<description>Entry Function with type Dictionary in ShadingType3 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType3 is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-Function-Stream" testNumber="17"/>
			<description>Entry Function with type Stream in ShadingType3 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType3 is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-Function" testNumber="8"/>
			<description>Entry Function in ShadingType3 shall have one of types: Array, Dictionary, Stream</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeDictionary == true || FunctionHasTypeStream == true</test>
			<error>
				<message>Entry Function in ShadingType3 has type %1 instead of one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>FunctionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-Function" testNumber="7"/>
			<description>Entry Function in ShadingType3 is required</description>
			<test>containsFunction == true</test>
			<error>
				<message>Entry Function in ShadingType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-Function-Stream" testNumber="10"/>
			<description>Entry Function with type Stream in ShadingType3 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType3 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-ShadingType" testNumber="8"/>
			<description>Entry ShadingType in ShadingType3 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType3 has type %1 instead of type Integer</message>
				<arguments>
					<argument>ShadingTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-ShadingType" testNumber="7"/>
			<description>Entry ShadingType in ShadingType3 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType3 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="ShadingType3-ShadingType-Integer" testNumber="6"/>
			<description>Entry ShadingType with type Integer in ShadingType3 shall have value 3</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 3</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType3 has incorrect value %1 instead of 3</message>
				<arguments>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4" testNumber="1"/>
			<description>ShadingType4 shall not contain entries except AntiAlias, BBox, Background, BitsPerComponent, BitsPerCoordinate, BitsPerFlag, ColorSpace, DL, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Function, Length, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ShadingType4 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-AntiAlias" testNumber="8"/>
			<description>Entry AntiAlias in ShadingType4 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType4 has type %1 instead of type Boolean</message>
				<arguments>
					<argument>AntiAliasType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-BBox" testNumber="8"/>
			<description>Entry BBox in ShadingType4 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType4 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>BBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-Background" testNumber="8"/>
			<description>Entry Background in ShadingType4 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType4 has type %1 instead of type Array</message>
				<arguments>
					<argument>BackgroundType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-BitsPerComponent" testNumber="8"/>
			<description>Entry BitsPerComponent in ShadingType4 shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType4 has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerComponentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-BitsPerComponent" testNumber="7"/>
			<description>Entry BitsPerComponent in ShadingType4 is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType4 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-BitsPerComponent-Integer" testNumber="6"/>
			<description>Entry BitsPerComponent with type Integer in ShadingType4 shall have one of values: 1, 12, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 12 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in ShadingType4 has incorrect value %1 instead of 1, 12, 2, 4, 16, 8</message>
				<arguments>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-BitsPerCoordinate" testNumber="8"/>
			<description>Entry BitsPerCoordinate in ShadingType4 shall have type Integer</description>
			<test>containsBitsPerCoordinate == false || BitsPerCoordinateHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType4 has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerCoordinateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-BitsPerCoordinate" testNumber="7"/>
			<description>Entry BitsPerCoordinate in ShadingType4 is required</description>
			<test>containsBitsPerCoordinate == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType4 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-BitsPerCoordinate-Integer" testNumber="6"/>
			<description>Entry BitsPerCoordinate with type Integer in ShadingType4 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerCoordinateHasTypeInteger != true || BitsPerCoordinateIntegerValue == 1 || BitsPerCoordinateIntegerValue == 2 || BitsPerCoordinateIntegerValue == 4 || BitsPerCoordinateIntegerValue == 8 || BitsPerCoordinateIntegerValue == 12 || BitsPerCoordinateIntegerValue == 16 || BitsPerCoordinateIntegerValue == 24 || BitsPerCoordinateIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerCoordinate with type Integer in ShadingType4 has incorrect value %1 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>BitsPerCoordinateIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-BitsPerFlag" testNumber="8"/>
			<description>Entry BitsPerFlag in ShadingType4 shall have type Integer</description>
			<test>containsBitsPerFlag == false || BitsPerFlagHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType4 has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerFlagType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-BitsPerFlag" testNumber="7"/>
			<description>Entry BitsPerFlag in ShadingType4 is required</description>
			<test>containsBitsPerFlag == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType4 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-BitsPerFlag-Integer" testNumber="6"/>
			<description>Entry BitsPerFlag with type Integer in ShadingType4 shall have one of values: 2, 4, 8</description>
			<test>BitsPerFlagHasTypeInteger != true || BitsPerFlagIntegerValue == 2 || BitsPerFlagIntegerValue == 4 || BitsPerFlagIntegerValue == 8</test>
			<error>
				<message>Entry BitsPerFlag with type Integer in ShadingType4 has incorrect value %1 instead of 2, 4, 8</message>
				<arguments>
					<argument>BitsPerFlagIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-ColorSpace-Array" testNumber="17"/>
			<description>Entry ColorSpace with type Array in ShadingType4 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType4 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in ShadingType4 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType4 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-ColorSpace" testNumber="7"/>
			<description>Entry ColorSpace in ShadingType4 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType4 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-ColorSpace-Name" testNumber="6"/>
			<description>Entry ColorSpace with type Name in ShadingType4 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType4 has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-DL" testNumber="8"/>
			<description>Entry DL in ShadingType4 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ShadingType4 has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in ShadingType4 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ShadingType4 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-Decode" testNumber="8"/>
			<description>Entry Decode in ShadingType4 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in ShadingType4 has type %1 instead of type Array</message>
				<arguments>
					<argument>DecodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in ShadingType4 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ShadingType4 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in ShadingType4 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ShadingType4 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in ShadingType4 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType4 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-F" testNumber="8"/>
			<description>Entry F in ShadingType4 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ShadingType4 has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in ShadingType4 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ShadingType4 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in ShadingType4 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ShadingType4 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in ShadingType4 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType4 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-FFilter" testNumber="8"/>
			<description>Entry FFilter in ShadingType4 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ShadingType4 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in ShadingType4 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType4 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in ShadingType4 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ShadingType4 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-Filter" testNumber="8"/>
			<description>Entry Filter in ShadingType4 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ShadingType4 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in ShadingType4 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ShadingType4 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in ShadingType4 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ShadingType4 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-Function-Dictionary" testNumber="17"/>
			<description>Entry Function with type Dictionary in ShadingType4 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType4 is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-Function-Stream" testNumber="17"/>
			<description>Entry Function with type Stream in ShadingType4 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType4 is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-Function" testNumber="8"/>
			<description>Entry Function in ShadingType4 shall have one of types: Array, Dictionary, Stream</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeDictionary == true || FunctionHasTypeStream == true</test>
			<error>
				<message>Entry Function in ShadingType4 has type %1 instead of one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>FunctionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-Function-Stream" testNumber="10"/>
			<description>Entry Function with type Stream in ShadingType4 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType4 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-Length" testNumber="8"/>
			<description>Entry Length in ShadingType4 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ShadingType4 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-Length" testNumber="7"/>
			<description>Entry Length in ShadingType4 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ShadingType4 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-ShadingType" testNumber="8"/>
			<description>Entry ShadingType in ShadingType4 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType4 has type %1 instead of type Integer</message>
				<arguments>
					<argument>ShadingTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-ShadingType" testNumber="7"/>
			<description>Entry ShadingType in ShadingType4 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType4 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="ShadingType4-ShadingType-Integer" testNumber="6"/>
			<description>Entry ShadingType with type Integer in ShadingType4 shall have value 4</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 4</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType4 has incorrect value %1 instead of 4</message>
				<arguments>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5" testNumber="1"/>
			<description>ShadingType5 shall not contain entries except AntiAlias, BBox, Background, BitsPerComponent, BitsPerCoordinate, ColorSpace, DL, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Function, Length, ShadingType, VerticesPerRow</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'VerticesPerRow' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ShadingType5 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'VerticesPerRow' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-AntiAlias" testNumber="8"/>
			<description>Entry AntiAlias in ShadingType5 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType5 has type %1 instead of type Boolean</message>
				<arguments>
					<argument>AntiAliasType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-BBox" testNumber="8"/>
			<description>Entry BBox in ShadingType5 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType5 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>BBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-Background" testNumber="8"/>
			<description>Entry Background in ShadingType5 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType5 has type %1 instead of type Array</message>
				<arguments>
					<argument>BackgroundType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-BitsPerComponent" testNumber="8"/>
			<description>Entry BitsPerComponent in ShadingType5 shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType5 has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerComponentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-BitsPerComponent" testNumber="7"/>
			<description>Entry BitsPerComponent in ShadingType5 is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType5 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-BitsPerComponent-Integer" testNumber="6"/>
			<description>Entry BitsPerComponent with type Integer in ShadingType5 shall have one of values: 1, 12, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 12 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in ShadingType5 has incorrect value %1 instead of 1, 12, 2, 4, 16, 8</message>
				<arguments>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-BitsPerCoordinate" testNumber="8"/>
			<description>Entry BitsPerCoordinate in ShadingType5 shall have type Integer</description>
			<test>containsBitsPerCoordinate == false || BitsPerCoordinateHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType5 has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerCoordinateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-BitsPerCoordinate" testNumber="7"/>
			<description>Entry BitsPerCoordinate in ShadingType5 is required</description>
			<test>containsBitsPerCoordinate == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType5 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-BitsPerCoordinate-Integer" testNumber="6"/>
			<description>Entry BitsPerCoordinate with type Integer in ShadingType5 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerCoordinateHasTypeInteger != true || BitsPerCoordinateIntegerValue == 1 || BitsPerCoordinateIntegerValue == 2 || BitsPerCoordinateIntegerValue == 4 || BitsPerCoordinateIntegerValue == 8 || BitsPerCoordinateIntegerValue == 12 || BitsPerCoordinateIntegerValue == 16 || BitsPerCoordinateIntegerValue == 24 || BitsPerCoordinateIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerCoordinate with type Integer in ShadingType5 has incorrect value %1 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>BitsPerCoordinateIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-ColorSpace-Array" testNumber="17"/>
			<description>Entry ColorSpace with type Array in ShadingType5 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType5 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in ShadingType5 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType5 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-ColorSpace" testNumber="7"/>
			<description>Entry ColorSpace in ShadingType5 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType5 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-ColorSpace-Name" testNumber="6"/>
			<description>Entry ColorSpace with type Name in ShadingType5 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType5 has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-DL" testNumber="8"/>
			<description>Entry DL in ShadingType5 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ShadingType5 has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in ShadingType5 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ShadingType5 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-Decode" testNumber="8"/>
			<description>Entry Decode in ShadingType5 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in ShadingType5 has type %1 instead of type Array</message>
				<arguments>
					<argument>DecodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in ShadingType5 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ShadingType5 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in ShadingType5 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ShadingType5 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in ShadingType5 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType5 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-F" testNumber="8"/>
			<description>Entry F in ShadingType5 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ShadingType5 has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in ShadingType5 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ShadingType5 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in ShadingType5 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ShadingType5 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in ShadingType5 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType5 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-FFilter" testNumber="8"/>
			<description>Entry FFilter in ShadingType5 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ShadingType5 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in ShadingType5 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType5 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in ShadingType5 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ShadingType5 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-Filter" testNumber="8"/>
			<description>Entry Filter in ShadingType5 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ShadingType5 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in ShadingType5 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ShadingType5 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in ShadingType5 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ShadingType5 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-Function-Dictionary" testNumber="17"/>
			<description>Entry Function with type Dictionary in ShadingType5 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType5 is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-Function-Stream" testNumber="17"/>
			<description>Entry Function with type Stream in ShadingType5 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType5 is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-Function" testNumber="8"/>
			<description>Entry Function in ShadingType5 shall have one of types: Array, Dictionary, Stream</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeDictionary == true || FunctionHasTypeStream == true</test>
			<error>
				<message>Entry Function in ShadingType5 has type %1 instead of one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>FunctionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-Function-Stream" testNumber="10"/>
			<description>Entry Function with type Stream in ShadingType5 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType5 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-Length" testNumber="8"/>
			<description>Entry Length in ShadingType5 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ShadingType5 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-Length" testNumber="7"/>
			<description>Entry Length in ShadingType5 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ShadingType5 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-ShadingType" testNumber="8"/>
			<description>Entry ShadingType in ShadingType5 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType5 has type %1 instead of type Integer</message>
				<arguments>
					<argument>ShadingTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-ShadingType" testNumber="7"/>
			<description>Entry ShadingType in ShadingType5 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType5 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-ShadingType-Integer" testNumber="6"/>
			<description>Entry ShadingType with type Integer in ShadingType5 shall have value 5</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 5</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType5 has incorrect value %1 instead of 5</message>
				<arguments>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-VerticesPerRow" testNumber="8"/>
			<description>Entry VerticesPerRow in ShadingType5 shall have type Integer</description>
			<test>containsVerticesPerRow == false || VerticesPerRowHasTypeInteger == true</test>
			<error>
				<message>Entry VerticesPerRow in ShadingType5 has type %1 instead of type Integer</message>
				<arguments>
					<argument>VerticesPerRowType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-VerticesPerRow" testNumber="7"/>
			<description>Entry VerticesPerRow in ShadingType5 is required</description>
			<test>containsVerticesPerRow == true</test>
			<error>
				<message>Entry VerticesPerRow in ShadingType5 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="ShadingType5-VerticesPerRow-Integer" testNumber="14"/>
			<description>Entry VerticesPerRow with type Integer in ShadingType5 shall satisfy possible value predicate: fn:Eval(@VerticesPerRow &gt;= 2)</description>
			<test>VerticesPerRowHasTypeInteger != true || VerticesPerRowIntegerValue &gt;= 2</test>
			<error>
				<message>Entry VerticesPerRow with type Integer in ShadingType5 does not satisfy possible value predicate: fn:Eval(@VerticesPerRow &gt;= 2)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6" testNumber="1"/>
			<description>ShadingType6 shall not contain entries except AntiAlias, BBox, Background, BitsPerComponent, BitsPerCoordinate, BitsPerFlag, ColorSpace, DL, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Function, Length, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ShadingType6 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-AntiAlias" testNumber="8"/>
			<description>Entry AntiAlias in ShadingType6 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType6 has type %1 instead of type Boolean</message>
				<arguments>
					<argument>AntiAliasType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-BBox" testNumber="8"/>
			<description>Entry BBox in ShadingType6 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType6 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>BBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-Background" testNumber="8"/>
			<description>Entry Background in ShadingType6 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType6 has type %1 instead of type Array</message>
				<arguments>
					<argument>BackgroundType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-BitsPerComponent" testNumber="8"/>
			<description>Entry BitsPerComponent in ShadingType6 shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType6 has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerComponentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-BitsPerComponent" testNumber="7"/>
			<description>Entry BitsPerComponent in ShadingType6 is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType6 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-BitsPerComponent-Integer" testNumber="6"/>
			<description>Entry BitsPerComponent with type Integer in ShadingType6 shall have one of values: 1, 12, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 12 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in ShadingType6 has incorrect value %1 instead of 1, 12, 2, 4, 16, 8</message>
				<arguments>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-BitsPerCoordinate" testNumber="8"/>
			<description>Entry BitsPerCoordinate in ShadingType6 shall have type Integer</description>
			<test>containsBitsPerCoordinate == false || BitsPerCoordinateHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType6 has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerCoordinateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-BitsPerCoordinate" testNumber="7"/>
			<description>Entry BitsPerCoordinate in ShadingType6 is required</description>
			<test>containsBitsPerCoordinate == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType6 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-BitsPerCoordinate-Integer" testNumber="6"/>
			<description>Entry BitsPerCoordinate with type Integer in ShadingType6 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerCoordinateHasTypeInteger != true || BitsPerCoordinateIntegerValue == 1 || BitsPerCoordinateIntegerValue == 2 || BitsPerCoordinateIntegerValue == 4 || BitsPerCoordinateIntegerValue == 8 || BitsPerCoordinateIntegerValue == 12 || BitsPerCoordinateIntegerValue == 16 || BitsPerCoordinateIntegerValue == 24 || BitsPerCoordinateIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerCoordinate with type Integer in ShadingType6 has incorrect value %1 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>BitsPerCoordinateIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-BitsPerFlag" testNumber="8"/>
			<description>Entry BitsPerFlag in ShadingType6 shall have type Integer</description>
			<test>containsBitsPerFlag == false || BitsPerFlagHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType6 has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerFlagType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-BitsPerFlag" testNumber="7"/>
			<description>Entry BitsPerFlag in ShadingType6 is required</description>
			<test>containsBitsPerFlag == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType6 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-ColorSpace-Array" testNumber="17"/>
			<description>Entry ColorSpace with type Array in ShadingType6 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType6 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in ShadingType6 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType6 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-ColorSpace" testNumber="7"/>
			<description>Entry ColorSpace in ShadingType6 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType6 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-ColorSpace-Name" testNumber="6"/>
			<description>Entry ColorSpace with type Name in ShadingType6 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType6 has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-DL" testNumber="8"/>
			<description>Entry DL in ShadingType6 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ShadingType6 has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in ShadingType6 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ShadingType6 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-Decode" testNumber="8"/>
			<description>Entry Decode in ShadingType6 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in ShadingType6 has type %1 instead of type Array</message>
				<arguments>
					<argument>DecodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in ShadingType6 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ShadingType6 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in ShadingType6 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ShadingType6 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in ShadingType6 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType6 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-F" testNumber="8"/>
			<description>Entry F in ShadingType6 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ShadingType6 has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in ShadingType6 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ShadingType6 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in ShadingType6 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ShadingType6 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in ShadingType6 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType6 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-FFilter" testNumber="8"/>
			<description>Entry FFilter in ShadingType6 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ShadingType6 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in ShadingType6 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType6 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in ShadingType6 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ShadingType6 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-Filter" testNumber="8"/>
			<description>Entry Filter in ShadingType6 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ShadingType6 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in ShadingType6 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ShadingType6 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in ShadingType6 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ShadingType6 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-Function-Dictionary" testNumber="17"/>
			<description>Entry Function with type Dictionary in ShadingType6 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType6 is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-Function-Stream" testNumber="17"/>
			<description>Entry Function with type Stream in ShadingType6 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType6 is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-Function" testNumber="8"/>
			<description>Entry Function in ShadingType6 shall have one of types: Array, Dictionary, Stream</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeDictionary == true || FunctionHasTypeStream == true</test>
			<error>
				<message>Entry Function in ShadingType6 has type %1 instead of one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>FunctionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-Function-Stream" testNumber="10"/>
			<description>Entry Function with type Stream in ShadingType6 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType6 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-Length" testNumber="8"/>
			<description>Entry Length in ShadingType6 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ShadingType6 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-Length" testNumber="7"/>
			<description>Entry Length in ShadingType6 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ShadingType6 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-ShadingType" testNumber="8"/>
			<description>Entry ShadingType in ShadingType6 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType6 has type %1 instead of type Integer</message>
				<arguments>
					<argument>ShadingTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-ShadingType" testNumber="7"/>
			<description>Entry ShadingType in ShadingType6 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType6 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="ShadingType6-ShadingType-Integer" testNumber="6"/>
			<description>Entry ShadingType with type Integer in ShadingType6 shall have value 6</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 6</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType6 has incorrect value %1 instead of 6</message>
				<arguments>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7" testNumber="1"/>
			<description>ShadingType7 shall not contain entries except AntiAlias, BBox, Background, BitsPerComponent, BitsPerCoordinate, BitsPerFlag, ColorSpace, DL, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Function, Length, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ShadingType7 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-AntiAlias" testNumber="8"/>
			<description>Entry AntiAlias in ShadingType7 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType7 has type %1 instead of type Boolean</message>
				<arguments>
					<argument>AntiAliasType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-BBox" testNumber="8"/>
			<description>Entry BBox in ShadingType7 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType7 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>BBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-Background" testNumber="8"/>
			<description>Entry Background in ShadingType7 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType7 has type %1 instead of type Array</message>
				<arguments>
					<argument>BackgroundType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-BitsPerComponent" testNumber="8"/>
			<description>Entry BitsPerComponent in ShadingType7 shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType7 has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerComponentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-BitsPerComponent" testNumber="7"/>
			<description>Entry BitsPerComponent in ShadingType7 is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType7 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-BitsPerComponent-Integer" testNumber="6"/>
			<description>Entry BitsPerComponent with type Integer in ShadingType7 shall have one of values: 1, 12, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 12 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in ShadingType7 has incorrect value %1 instead of 1, 12, 2, 4, 16, 8</message>
				<arguments>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-BitsPerCoordinate" testNumber="8"/>
			<description>Entry BitsPerCoordinate in ShadingType7 shall have type Integer</description>
			<test>containsBitsPerCoordinate == false || BitsPerCoordinateHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType7 has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerCoordinateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-BitsPerCoordinate" testNumber="7"/>
			<description>Entry BitsPerCoordinate in ShadingType7 is required</description>
			<test>containsBitsPerCoordinate == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType7 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-BitsPerCoordinate-Integer" testNumber="6"/>
			<description>Entry BitsPerCoordinate with type Integer in ShadingType7 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerCoordinateHasTypeInteger != true || BitsPerCoordinateIntegerValue == 1 || BitsPerCoordinateIntegerValue == 2 || BitsPerCoordinateIntegerValue == 4 || BitsPerCoordinateIntegerValue == 8 || BitsPerCoordinateIntegerValue == 12 || BitsPerCoordinateIntegerValue == 16 || BitsPerCoordinateIntegerValue == 24 || BitsPerCoordinateIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerCoordinate with type Integer in ShadingType7 has incorrect value %1 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>BitsPerCoordinateIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-BitsPerFlag" testNumber="8"/>
			<description>Entry BitsPerFlag in ShadingType7 shall have type Integer</description>
			<test>containsBitsPerFlag == false || BitsPerFlagHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType7 has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerFlagType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-BitsPerFlag" testNumber="7"/>
			<description>Entry BitsPerFlag in ShadingType7 is required</description>
			<test>containsBitsPerFlag == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType7 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-ColorSpace-Array" testNumber="17"/>
			<description>Entry ColorSpace with type Array in ShadingType7 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType7 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in ShadingType7 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType7 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-ColorSpace" testNumber="7"/>
			<description>Entry ColorSpace in ShadingType7 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType7 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-ColorSpace-Name" testNumber="6"/>
			<description>Entry ColorSpace with type Name in ShadingType7 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType7 has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-DL" testNumber="8"/>
			<description>Entry DL in ShadingType7 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ShadingType7 has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in ShadingType7 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ShadingType7 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-Decode" testNumber="8"/>
			<description>Entry Decode in ShadingType7 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in ShadingType7 has type %1 instead of type Array</message>
				<arguments>
					<argument>DecodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in ShadingType7 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ShadingType7 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in ShadingType7 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ShadingType7 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in ShadingType7 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType7 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-F" testNumber="8"/>
			<description>Entry F in ShadingType7 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ShadingType7 has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in ShadingType7 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ShadingType7 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in ShadingType7 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ShadingType7 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in ShadingType7 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType7 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-FFilter" testNumber="8"/>
			<description>Entry FFilter in ShadingType7 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ShadingType7 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in ShadingType7 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType7 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in ShadingType7 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ShadingType7 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-Filter" testNumber="8"/>
			<description>Entry Filter in ShadingType7 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ShadingType7 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in ShadingType7 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ShadingType7 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in ShadingType7 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ShadingType7 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-Function-Dictionary" testNumber="17"/>
			<description>Entry Function with type Dictionary in ShadingType7 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType7 is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-Function-Stream" testNumber="17"/>
			<description>Entry Function with type Stream in ShadingType7 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType7 is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-Function" testNumber="8"/>
			<description>Entry Function in ShadingType7 shall have one of types: Array, Dictionary, Stream</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeDictionary == true || FunctionHasTypeStream == true</test>
			<error>
				<message>Entry Function in ShadingType7 has type %1 instead of one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>FunctionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-Function-Stream" testNumber="10"/>
			<description>Entry Function with type Stream in ShadingType7 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType7 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-Length" testNumber="8"/>
			<description>Entry Length in ShadingType7 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ShadingType7 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-Length" testNumber="7"/>
			<description>Entry Length in ShadingType7 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ShadingType7 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-ShadingType" testNumber="8"/>
			<description>Entry ShadingType in ShadingType7 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType7 has type %1 instead of type Integer</message>
				<arguments>
					<argument>ShadingTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-ShadingType" testNumber="7"/>
			<description>Entry ShadingType in ShadingType7 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType7 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="ShadingType7-ShadingType-Integer" testNumber="6"/>
			<description>Entry ShadingType with type Integer in ShadingType7 shall have value 7</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 7</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType7 has incorrect value %1 instead of 7</message>
				<arguments>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="SigFieldLock" testNumber="1"/>
			<description>SigFieldLock shall not contain entries except Action, Fields, P, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Action' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>SigFieldLock contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Action' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="SigFieldLock-Action" testNumber="8"/>
			<description>Entry Action in SigFieldLock shall have type Name</description>
			<test>containsAction == false || ActionHasTypeName == true</test>
			<error>
				<message>Entry Action in SigFieldLock has type %1 instead of type Name</message>
				<arguments>
					<argument>ActionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="SigFieldLock-Action" testNumber="7"/>
			<description>Entry Action in SigFieldLock is required</description>
			<test>containsAction == true</test>
			<error>
				<message>Entry Action in SigFieldLock is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="SigFieldLock-Action-Name" testNumber="6"/>
			<description>Entry Action with type Name in SigFieldLock shall have one of values: All, Exclude, Include</description>
			<test>ActionHasTypeName != true || ActionNameValue == "All" || ActionNameValue == "Include" || ActionNameValue == "Exclude"</test>
			<error>
				<message>Entry Action with type Name in SigFieldLock has incorrect value %1 instead of All, Exclude, Include</message>
				<arguments>
					<argument>ActionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="SigFieldLock-Fields" testNumber="8"/>
			<description>Entry Fields in SigFieldLock shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in SigFieldLock has type %1 instead of type Array</message>
				<arguments>
					<argument>FieldsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="SigFieldLock-Fields" testNumber="11"/>
			<description>Entry Fields in SigFieldLock is required, when (@Action == Include) || (@Action == Exclude)</description>
			<test>containsFields == true || ((ActionNameValue != "Include") &amp;&amp; (ActionNameValue != "Exclude"))</test>
			<error>
				<message>Entry Fields in SigFieldLock is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="SigFieldLock-P" testNumber="8"/>
			<description>Entry P in SigFieldLock shall have type Number</description>
			<test>containsP == false || PHasTypeNumber == true</test>
			<error>
				<message>Entry P in SigFieldLock has type %1 instead of type Number</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="SigFieldLock-P" testNumber="23"/>
			<description>Entry P in SigFieldLock can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsP == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry P in SigFieldLock is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="SigFieldLock-P-Number" testNumber="6"/>
			<description>Entry P with type Number in SigFieldLock shall have one of values: 1, 2, 3</description>
			<test>PHasTypeNumber != true || PNumberValue == 1 || PNumberValue == 2 || PNumberValue == 3</test>
			<error>
				<message>Entry P with type Number in SigFieldLock has incorrect value %1 instead of 1, 2, 3</message>
				<arguments>
					<argument>PNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="SigFieldLock-Type" testNumber="8"/>
			<description>Entry Type in SigFieldLock shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SigFieldLock has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="SigFieldLock-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in SigFieldLock shall have value SigFieldLock</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SigFieldLock"</test>
			<error>
				<message>Entry Type with type Name in SigFieldLock has incorrect value %1 instead of SigFieldLock</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue" testNumber="1"/>
			<description>SigFieldSeedValue shall not contain entries except AddRevInfo, AppearanceFilter, Cert, DigestMethod, Ff, Filter, LegalAttestation, LockDocument, MDP, Reasons, SubFilter, TimeStamp, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AddRevInfo' &amp;&amp; elem != 'AppearanceFilter' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'LegalAttestation' &amp;&amp; elem != 'LockDocument' &amp;&amp; elem != 'MDP' &amp;&amp; elem != 'Reasons' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'TimeStamp' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>SigFieldSeedValue contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AddRevInfo' &amp;&amp; elem != 'AppearanceFilter' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'LegalAttestation' &amp;&amp; elem != 'LockDocument' &amp;&amp; elem != 'MDP' &amp;&amp; elem != 'Reasons' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'TimeStamp' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-AddRevInfo" testNumber="8"/>
			<description>Entry AddRevInfo in SigFieldSeedValue shall have type Boolean</description>
			<test>containsAddRevInfo == false || AddRevInfoHasTypeBoolean == true</test>
			<error>
				<message>Entry AddRevInfo in SigFieldSeedValue has type %1 instead of type Boolean</message>
				<arguments>
					<argument>AddRevInfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-AppearanceFilter" testNumber="8"/>
			<description>Entry AppearanceFilter in SigFieldSeedValue shall have type StringText</description>
			<test>containsAppearanceFilter == false || AppearanceFilterHasTypeStringText == true</test>
			<error>
				<message>Entry AppearanceFilter in SigFieldSeedValue has type %1 instead of type StringText</message>
				<arguments>
					<argument>AppearanceFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-AppearanceFilter" testNumber="23"/>
			<description>Entry AppearanceFilter in SigFieldSeedValue can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsAppearanceFilter == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry AppearanceFilter in SigFieldSeedValue is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-Cert" testNumber="8"/>
			<description>Entry Cert in SigFieldSeedValue shall have type Dictionary</description>
			<test>containsCert == false || CertHasTypeDictionary == true</test>
			<error>
				<message>Entry Cert in SigFieldSeedValue has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CertType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-DigestMethod" testNumber="8"/>
			<description>Entry DigestMethod in SigFieldSeedValue shall have type Array</description>
			<test>containsDigestMethod == false || DigestMethodHasTypeArray == true</test>
			<error>
				<message>Entry DigestMethod in SigFieldSeedValue has type %1 instead of type Array</message>
				<arguments>
					<argument>DigestMethodType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-Ff" testNumber="8"/>
			<description>Entry Ff in SigFieldSeedValue shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in SigFieldSeedValue has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-Ff-Bitmask" testNumber="9"/>
			<description>Entry Ff with type Bitmask in SigFieldSeedValue shall satisfy special case: fn:Eval(fn:BitsClear(8, 32) &amp;&amp; fn:BitsClear(10, 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in SigFieldSeedValue does not satisfy special case: fn:Eval(fn:BitsClear(8, 32) &amp;&amp; fn:BitsClear(10, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-Filter" testNumber="8"/>
			<description>Entry Filter in SigFieldSeedValue shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in SigFieldSeedValue has type %1 instead of type Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-LegalAttestation" testNumber="8"/>
			<description>Entry LegalAttestation in SigFieldSeedValue shall have type Array</description>
			<test>containsLegalAttestation == false || LegalAttestationHasTypeArray == true</test>
			<error>
				<message>Entry LegalAttestation in SigFieldSeedValue has type %1 instead of type Array</message>
				<arguments>
					<argument>LegalAttestationType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-LockDocument" testNumber="8"/>
			<description>Entry LockDocument in SigFieldSeedValue shall have type Name</description>
			<test>containsLockDocument == false || LockDocumentHasTypeName == true</test>
			<error>
				<message>Entry LockDocument in SigFieldSeedValue has type %1 instead of type Name</message>
				<arguments>
					<argument>LockDocumentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-LockDocument" testNumber="23"/>
			<description>Entry LockDocument in SigFieldSeedValue can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsLockDocument == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry LockDocument in SigFieldSeedValue is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-LockDocument-Name" testNumber="6"/>
			<description>Entry LockDocument with type Name in SigFieldSeedValue shall have one of values: auto, True, False</description>
			<test>LockDocumentHasTypeName != true || LockDocumentNameValue == "True" || LockDocumentNameValue == "False" || LockDocumentNameValue == "auto"</test>
			<error>
				<message>Entry LockDocument with type Name in SigFieldSeedValue has incorrect value %1 instead of auto, True, False</message>
				<arguments>
					<argument>LockDocumentNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-MDP" testNumber="8"/>
			<description>Entry MDP in SigFieldSeedValue shall have type Dictionary</description>
			<test>containsMDP == false || MDPHasTypeDictionary == true</test>
			<error>
				<message>Entry MDP in SigFieldSeedValue has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MDPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-Reasons" testNumber="8"/>
			<description>Entry Reasons in SigFieldSeedValue shall have type Array</description>
			<test>containsReasons == false || ReasonsHasTypeArray == true</test>
			<error>
				<message>Entry Reasons in SigFieldSeedValue has type %1 instead of type Array</message>
				<arguments>
					<argument>ReasonsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-SubFilter" testNumber="8"/>
			<description>Entry SubFilter in SigFieldSeedValue shall have type Array</description>
			<test>containsSubFilter == false || SubFilterHasTypeArray == true</test>
			<error>
				<message>Entry SubFilter in SigFieldSeedValue has type %1 instead of type Array</message>
				<arguments>
					<argument>SubFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-TimeStamp" testNumber="8"/>
			<description>Entry TimeStamp in SigFieldSeedValue shall have type Dictionary</description>
			<test>containsTimeStamp == false || TimeStampHasTypeDictionary == true</test>
			<error>
				<message>Entry TimeStamp in SigFieldSeedValue has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TimeStampType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-Type" testNumber="8"/>
			<description>Entry Type in SigFieldSeedValue shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SigFieldSeedValue has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in SigFieldSeedValue shall have value SV</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SV"</test>
			<error>
				<message>Entry Type with type Name in SigFieldSeedValue has incorrect value %1 instead of SV</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-V" testNumber="8"/>
			<description>Entry V in SigFieldSeedValue shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in SigFieldSeedValue has type %1 instead of type Integer</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="SigFieldSeedValue-V-Integer" testNumber="6"/>
			<description>Entry V with type Integer in SigFieldSeedValue shall have one of values: 0, 1, 2, 3</description>
			<test>VHasTypeInteger != true || VIntegerValue == 0 || VIntegerValue == 1 || VIntegerValue == 2 || VIntegerValue == 3</test>
			<error>
				<message>Entry V with type Integer in SigFieldSeedValue has incorrect value %1 instead of 0, 1, 2, 3</message>
				<arguments>
					<argument>VIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature" testNumber="1"/>
			<description>Signature shall not contain entries except ByteRange, Cert, Changes, ContactInfo, Contents, Filter, Location, M, Name, Prop_AuthTime, Prop_AuthType, Prop_Build, R, Reason, Reference, SubFilter, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ByteRange' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'Changes' &amp;&amp; elem != 'ContactInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Location' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Prop_AuthTime' &amp;&amp; elem != 'Prop_AuthType' &amp;&amp; elem != 'Prop_Build' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Reason' &amp;&amp; elem != 'Reference' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Signature contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ByteRange' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'Changes' &amp;&amp; elem != 'ContactInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Location' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Prop_AuthTime' &amp;&amp; elem != 'Prop_AuthType' &amp;&amp; elem != 'Prop_Build' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Reason' &amp;&amp; elem != 'Reference' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-ByteRange" testNumber="8"/>
			<description>Entry ByteRange in Signature shall have type Array</description>
			<test>containsByteRange == false || ByteRangeHasTypeArray == true</test>
			<error>
				<message>Entry ByteRange in Signature has type %1 instead of type Array</message>
				<arguments>
					<argument>ByteRangeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Cert" testNumber="8"/>
			<description>Entry Cert in Signature shall have one of types: Array, StringByte</description>
			<test>containsCert == false || CertHasTypeArray == true || CertHasTypeStringByte == true</test>
			<error>
				<message>Entry Cert in Signature has type %1 instead of one of types: Array, StringByte</message>
				<arguments>
					<argument>CertType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Cert" testNumber="11"/>
			<description>Entry Cert in Signature is required, when @SubFilter == adbe.x509.rsa_sha1</description>
			<test>containsCert == true || (SubFilterNameValue != "adbe.x509.rsa_sha1")</test>
			<error>
				<message>Entry Cert in Signature is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Changes" testNumber="8"/>
			<description>Entry Changes in Signature shall have type Array</description>
			<test>containsChanges == false || ChangesHasTypeArray == true</test>
			<error>
				<message>Entry Changes in Signature has type %1 instead of type Array</message>
				<arguments>
					<argument>ChangesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-ContactInfo" testNumber="8"/>
			<description>Entry ContactInfo in Signature shall have type StringText</description>
			<test>containsContactInfo == false || ContactInfoHasTypeStringText == true</test>
			<error>
				<message>Entry ContactInfo in Signature has type %1 instead of type StringText</message>
				<arguments>
					<argument>ContactInfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Contents" testNumber="8"/>
			<description>Entry Contents in Signature shall have type StringByte</description>
			<test>containsContents == false || ContentsHasTypeStringByte == true</test>
			<error>
				<message>Entry Contents in Signature has type %1 instead of type StringByte</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Contents" testNumber="7"/>
			<description>Entry Contents in Signature is required</description>
			<test>containsContents == true</test>
			<error>
				<message>Entry Contents in Signature is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Contents-StringByte" testNumber="9"/>
			<description>Entry Contents with type StringByte in Signature shall satisfy special case: fn:Eval(fn:AlwaysUnencrypted() &amp;&amp; fn:IsHexString())</description>
			<test>ContentsHasTypeStringByte != true || (isContentsHexString == true)</test>
			<error>
				<message>Entry Contents with type StringByte in Signature does not satisfy special case: fn:Eval(fn:AlwaysUnencrypted() &amp;&amp; fn:IsHexString())</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Filter" testNumber="8"/>
			<description>Entry Filter in Signature shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in Signature has type %1 instead of type Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Filter" testNumber="7"/>
			<description>Entry Filter in Signature is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in Signature is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in Signature shall have one of values: VeriSign.PPKVS, CICI.SignIt, Entrust.PPKEF, Adobe.PPKLite</description>
			<test>FilterHasTypeName != true || FilterNameValue == "Adobe.PPKLite" || FilterNameValue == "Entrust.PPKEF" || FilterNameValue == "CICI.SignIt" || FilterNameValue == "VeriSign.PPKVS"</test>
			<error>
				<message>Entry Filter with type Name in Signature has incorrect value %1 instead of VeriSign.PPKVS, CICI.SignIt, Entrust.PPKEF, Adobe.PPKLite</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Location" testNumber="8"/>
			<description>Entry Location in Signature shall have type StringText</description>
			<test>containsLocation == false || LocationHasTypeStringText == true</test>
			<error>
				<message>Entry Location in Signature has type %1 instead of type StringText</message>
				<arguments>
					<argument>LocationType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-M" testNumber="8"/>
			<description>Entry M in Signature shall have type Date</description>
			<test>containsM == false || MHasTypeDate == true</test>
			<error>
				<message>Entry M in Signature has type %1 instead of type Date</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Name" testNumber="8"/>
			<description>Entry Name in Signature shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in Signature has type %1 instead of type StringText</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Prop_AuthTime" testNumber="8"/>
			<description>Entry Prop_AuthTime in Signature shall have type Integer</description>
			<test>containsProp_AuthTime == false || Prop_AuthTimeHasTypeInteger == true</test>
			<error>
				<message>Entry Prop_AuthTime in Signature has type %1 instead of type Integer</message>
				<arguments>
					<argument>Prop_AuthTimeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Prop_AuthTime-Integer" testNumber="14"/>
			<description>Entry Prop_AuthTime with type Integer in Signature shall satisfy possible value predicate: fn:Eval(@Prop_AuthTime &gt;= 0)</description>
			<test>Prop_AuthTimeHasTypeInteger != true || Prop_AuthTimeIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Prop_AuthTime with type Integer in Signature does not satisfy possible value predicate: fn:Eval(@Prop_AuthTime &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Prop_AuthType" testNumber="8"/>
			<description>Entry Prop_AuthType in Signature shall have type Name</description>
			<test>containsProp_AuthType == false || Prop_AuthTypeHasTypeName == true</test>
			<error>
				<message>Entry Prop_AuthType in Signature has type %1 instead of type Name</message>
				<arguments>
					<argument>Prop_AuthTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Prop_Build" testNumber="8"/>
			<description>Entry Prop_Build in Signature shall have type Dictionary</description>
			<test>containsProp_Build == false || Prop_BuildHasTypeDictionary == true</test>
			<error>
				<message>Entry Prop_Build in Signature has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>Prop_BuildType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-R" testNumber="8"/>
			<description>Entry R in Signature shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in Signature has type %1 instead of type Integer</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Reason" testNumber="8"/>
			<description>Entry Reason in Signature shall have type StringText</description>
			<test>containsReason == false || ReasonHasTypeStringText == true</test>
			<error>
				<message>Entry Reason in Signature has type %1 instead of type StringText</message>
				<arguments>
					<argument>ReasonType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Reference" testNumber="8"/>
			<description>Entry Reference in Signature shall have type Array</description>
			<test>containsReference == false || ReferenceHasTypeArray == true</test>
			<error>
				<message>Entry Reference in Signature has type %1 instead of type Array</message>
				<arguments>
					<argument>ReferenceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-SubFilter" testNumber="8"/>
			<description>Entry SubFilter in Signature shall have type Name</description>
			<test>containsSubFilter == false || SubFilterHasTypeName == true</test>
			<error>
				<message>Entry SubFilter in Signature has type %1 instead of type Name</message>
				<arguments>
					<argument>SubFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-SubFilter-Name" testNumber="6"/>
			<description>Entry SubFilter with type Name in Signature shall have one of values: adbe.pkcs7.detached, adbe.x509.rsa_sha1, adbe.pkcs7.sha1</description>
			<test>SubFilterHasTypeName != true || SubFilterNameValue == "adbe.pkcs7.detached" || SubFilterNameValue == "adbe.pkcs7.sha1" || SubFilterNameValue == "adbe.x509.rsa_sha1"</test>
			<error>
				<message>Entry SubFilter with type Name in Signature has incorrect value %1 instead of adbe.pkcs7.detached, adbe.x509.rsa_sha1, adbe.pkcs7.sha1</message>
				<arguments>
					<argument>SubFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Type" testNumber="8"/>
			<description>Entry Type in Signature shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Signature has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Signature shall have value Sig</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Sig"</test>
			<error>
				<message>Entry Type with type Name in Signature has incorrect value %1 instead of Sig</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="Signature-V" testNumber="8"/>
			<description>Entry V in Signature shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in Signature has type %1 instead of type Integer</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataAppDict" testNumber="1"/>
			<description>SignatureBuildDataAppDict shall not contain entries except Date, Name, NonEFontNoWarn, OS, PreRelease, R, REx, TrustedMode, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Date' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'PreRelease' &amp;&amp; elem != 'R' &amp;&amp; elem != 'REx' &amp;&amp; elem != 'TrustedMode' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>SignatureBuildDataAppDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Date' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'PreRelease' &amp;&amp; elem != 'R' &amp;&amp; elem != 'REx' &amp;&amp; elem != 'TrustedMode' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataAppDict-Date" testNumber="8"/>
			<description>Entry Date in SignatureBuildDataAppDict shall have type StringText</description>
			<test>containsDate == false || DateHasTypeStringText == true</test>
			<error>
				<message>Entry Date in SignatureBuildDataAppDict has type %1 instead of type StringText</message>
				<arguments>
					<argument>DateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataAppDict-Name" testNumber="8"/>
			<description>Entry Name in SignatureBuildDataAppDict shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in SignatureBuildDataAppDict has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataAppDict-NonEFontNoWarn" testNumber="8"/>
			<description>Entry NonEFontNoWarn in SignatureBuildDataAppDict shall have type Boolean</description>
			<test>containsNonEFontNoWarn == false || NonEFontNoWarnHasTypeBoolean == true</test>
			<error>
				<message>Entry NonEFontNoWarn in SignatureBuildDataAppDict has type %1 instead of type Boolean</message>
				<arguments>
					<argument>NonEFontNoWarnType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataAppDict-OS" testNumber="8"/>
			<description>Entry OS in SignatureBuildDataAppDict shall have type Array</description>
			<test>containsOS == false || OSHasTypeArray == true</test>
			<error>
				<message>Entry OS in SignatureBuildDataAppDict has type %1 instead of type Array</message>
				<arguments>
					<argument>OSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataAppDict-PreRelease" testNumber="8"/>
			<description>Entry PreRelease in SignatureBuildDataAppDict shall have type Boolean</description>
			<test>containsPreRelease == false || PreReleaseHasTypeBoolean == true</test>
			<error>
				<message>Entry PreRelease in SignatureBuildDataAppDict has type %1 instead of type Boolean</message>
				<arguments>
					<argument>PreReleaseType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataAppDict-R" testNumber="8"/>
			<description>Entry R in SignatureBuildDataAppDict shall have type Number</description>
			<test>containsR == false || RHasTypeNumber == true</test>
			<error>
				<message>Entry R in SignatureBuildDataAppDict has type %1 instead of type Number</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataAppDict-REx" testNumber="8"/>
			<description>Entry REx in SignatureBuildDataAppDict shall have type StringText</description>
			<test>containsREx == false || RExHasTypeStringText == true</test>
			<error>
				<message>Entry REx in SignatureBuildDataAppDict has type %1 instead of type StringText</message>
				<arguments>
					<argument>RExType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataAppDict-TrustedMode" testNumber="8"/>
			<description>Entry TrustedMode in SignatureBuildDataAppDict shall have type Boolean</description>
			<test>containsTrustedMode == false || TrustedModeHasTypeBoolean == true</test>
			<error>
				<message>Entry TrustedMode in SignatureBuildDataAppDict has type %1 instead of type Boolean</message>
				<arguments>
					<argument>TrustedModeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataAppDict-V" testNumber="8"/>
			<description>Entry V in SignatureBuildDataAppDict shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in SignatureBuildDataAppDict has type %1 instead of type Number</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataAppDict-V" testNumber="5"/>
			<description>Entry V in SignatureBuildDataAppDict is deprecated since PDF 1.7</description>
			<test>containsV == false</test>
			<error>
				<message>Entry V in SignatureBuildDataAppDict is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataDict" testNumber="1"/>
			<description>SignatureBuildDataDict shall not contain entries except Date, Name, NonEFontNoWarn, OS, PreRelease, R, TrustedMode, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Date' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'PreRelease' &amp;&amp; elem != 'R' &amp;&amp; elem != 'TrustedMode' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>SignatureBuildDataDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Date' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'PreRelease' &amp;&amp; elem != 'R' &amp;&amp; elem != 'TrustedMode' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataDict-Date" testNumber="8"/>
			<description>Entry Date in SignatureBuildDataDict shall have type StringText</description>
			<test>containsDate == false || DateHasTypeStringText == true</test>
			<error>
				<message>Entry Date in SignatureBuildDataDict has type %1 instead of type StringText</message>
				<arguments>
					<argument>DateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataDict-Name" testNumber="8"/>
			<description>Entry Name in SignatureBuildDataDict shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in SignatureBuildDataDict has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataDict-NonEFontNoWarn" testNumber="8"/>
			<description>Entry NonEFontNoWarn in SignatureBuildDataDict shall have type Boolean</description>
			<test>containsNonEFontNoWarn == false || NonEFontNoWarnHasTypeBoolean == true</test>
			<error>
				<message>Entry NonEFontNoWarn in SignatureBuildDataDict has type %1 instead of type Boolean</message>
				<arguments>
					<argument>NonEFontNoWarnType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataDict-OS" testNumber="8"/>
			<description>Entry OS in SignatureBuildDataDict shall have type Array</description>
			<test>containsOS == false || OSHasTypeArray == true</test>
			<error>
				<message>Entry OS in SignatureBuildDataDict has type %1 instead of type Array</message>
				<arguments>
					<argument>OSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataDict-PreRelease" testNumber="8"/>
			<description>Entry PreRelease in SignatureBuildDataDict shall have type Boolean</description>
			<test>containsPreRelease == false || PreReleaseHasTypeBoolean == true</test>
			<error>
				<message>Entry PreRelease in SignatureBuildDataDict has type %1 instead of type Boolean</message>
				<arguments>
					<argument>PreReleaseType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataDict-R" testNumber="8"/>
			<description>Entry R in SignatureBuildDataDict shall have type Number</description>
			<test>containsR == false || RHasTypeNumber == true</test>
			<error>
				<message>Entry R in SignatureBuildDataDict has type %1 instead of type Number</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataDict-TrustedMode" testNumber="8"/>
			<description>Entry TrustedMode in SignatureBuildDataDict shall have type Boolean</description>
			<test>containsTrustedMode == false || TrustedModeHasTypeBoolean == true</test>
			<error>
				<message>Entry TrustedMode in SignatureBuildDataDict has type %1 instead of type Boolean</message>
				<arguments>
					<argument>TrustedModeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataDict-V" testNumber="8"/>
			<description>Entry V in SignatureBuildDataDict shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in SignatureBuildDataDict has type %1 instead of type Number</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataDict-V" testNumber="5"/>
			<description>Entry V in SignatureBuildDataDict is deprecated since PDF 1.7</description>
			<test>containsV == false</test>
			<error>
				<message>Entry V in SignatureBuildDataDict is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataSigQDict" testNumber="1"/>
			<description>SignatureBuildDataSigQDict shall not contain entries except Date, Name, NonEFontNoWarn, OS, PreRelease, Preview, R, TrustedMode, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Date' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'PreRelease' &amp;&amp; elem != 'Preview' &amp;&amp; elem != 'R' &amp;&amp; elem != 'TrustedMode' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>SignatureBuildDataSigQDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Date' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'PreRelease' &amp;&amp; elem != 'Preview' &amp;&amp; elem != 'R' &amp;&amp; elem != 'TrustedMode' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataSigQDict-Date" testNumber="8"/>
			<description>Entry Date in SignatureBuildDataSigQDict shall have type StringText</description>
			<test>containsDate == false || DateHasTypeStringText == true</test>
			<error>
				<message>Entry Date in SignatureBuildDataSigQDict has type %1 instead of type StringText</message>
				<arguments>
					<argument>DateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataSigQDict-Name" testNumber="8"/>
			<description>Entry Name in SignatureBuildDataSigQDict shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in SignatureBuildDataSigQDict has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataSigQDict-NonEFontNoWarn" testNumber="8"/>
			<description>Entry NonEFontNoWarn in SignatureBuildDataSigQDict shall have type Boolean</description>
			<test>containsNonEFontNoWarn == false || NonEFontNoWarnHasTypeBoolean == true</test>
			<error>
				<message>Entry NonEFontNoWarn in SignatureBuildDataSigQDict has type %1 instead of type Boolean</message>
				<arguments>
					<argument>NonEFontNoWarnType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataSigQDict-OS" testNumber="8"/>
			<description>Entry OS in SignatureBuildDataSigQDict shall have type Array</description>
			<test>containsOS == false || OSHasTypeArray == true</test>
			<error>
				<message>Entry OS in SignatureBuildDataSigQDict has type %1 instead of type Array</message>
				<arguments>
					<argument>OSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataSigQDict-PreRelease" testNumber="8"/>
			<description>Entry PreRelease in SignatureBuildDataSigQDict shall have type Boolean</description>
			<test>containsPreRelease == false || PreReleaseHasTypeBoolean == true</test>
			<error>
				<message>Entry PreRelease in SignatureBuildDataSigQDict has type %1 instead of type Boolean</message>
				<arguments>
					<argument>PreReleaseType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataSigQDict-Preview" testNumber="8"/>
			<description>Entry Preview in SignatureBuildDataSigQDict shall have type Boolean</description>
			<test>containsPreview == false || PreviewHasTypeBoolean == true</test>
			<error>
				<message>Entry Preview in SignatureBuildDataSigQDict has type %1 instead of type Boolean</message>
				<arguments>
					<argument>PreviewType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataSigQDict-R" testNumber="8"/>
			<description>Entry R in SignatureBuildDataSigQDict shall have type Number</description>
			<test>containsR == false || RHasTypeNumber == true</test>
			<error>
				<message>Entry R in SignatureBuildDataSigQDict has type %1 instead of type Number</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataSigQDict-TrustedMode" testNumber="8"/>
			<description>Entry TrustedMode in SignatureBuildDataSigQDict shall have type Boolean</description>
			<test>containsTrustedMode == false || TrustedModeHasTypeBoolean == true</test>
			<error>
				<message>Entry TrustedMode in SignatureBuildDataSigQDict has type %1 instead of type Boolean</message>
				<arguments>
					<argument>TrustedModeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataSigQDict-V" testNumber="8"/>
			<description>Entry V in SignatureBuildDataSigQDict shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in SignatureBuildDataSigQDict has type %1 instead of type Number</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildDataSigQDict-V" testNumber="5"/>
			<description>Entry V in SignatureBuildDataSigQDict is deprecated since PDF 1.7</description>
			<test>containsV == false</test>
			<error>
				<message>Entry V in SignatureBuildDataSigQDict is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildPropDict" testNumber="1"/>
			<description>SignatureBuildPropDict shall not contain entries except App, Filter, PubSec, SigQ</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'App' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'PubSec' &amp;&amp; elem != 'SigQ' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>SignatureBuildPropDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'App' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'PubSec' &amp;&amp; elem != 'SigQ' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildPropDict-App" testNumber="8"/>
			<description>Entry App in SignatureBuildPropDict shall have type Dictionary</description>
			<test>containsApp == false || AppHasTypeDictionary == true</test>
			<error>
				<message>Entry App in SignatureBuildPropDict has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>AppType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildPropDict-App-Dictionary" testNumber="10"/>
			<description>Entry App with type Dictionary in SignatureBuildPropDict shall be direct</description>
			<test>AppHasTypeDictionary != true || isAppIndirect == false</test>
			<error>
				<message>Entry App with type Dictionary in SignatureBuildPropDict is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildPropDict-Filter" testNumber="8"/>
			<description>Entry Filter in SignatureBuildPropDict shall have type Dictionary</description>
			<test>containsFilter == false || FilterHasTypeDictionary == true</test>
			<error>
				<message>Entry Filter in SignatureBuildPropDict has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildPropDict-Filter-Dictionary" testNumber="10"/>
			<description>Entry Filter with type Dictionary in SignatureBuildPropDict shall be direct</description>
			<test>FilterHasTypeDictionary != true || isFilterIndirect == false</test>
			<error>
				<message>Entry Filter with type Dictionary in SignatureBuildPropDict is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildPropDict-PubSec" testNumber="8"/>
			<description>Entry PubSec in SignatureBuildPropDict shall have type Dictionary</description>
			<test>containsPubSec == false || PubSecHasTypeDictionary == true</test>
			<error>
				<message>Entry PubSec in SignatureBuildPropDict has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PubSecType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildPropDict-PubSec-Dictionary" testNumber="10"/>
			<description>Entry PubSec with type Dictionary in SignatureBuildPropDict shall be direct</description>
			<test>PubSecHasTypeDictionary != true || isPubSecIndirect == false</test>
			<error>
				<message>Entry PubSec with type Dictionary in SignatureBuildPropDict is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildPropDict-SigQ" testNumber="8"/>
			<description>Entry SigQ in SignatureBuildPropDict shall have type Dictionary</description>
			<test>containsSigQ == false || SigQHasTypeDictionary == true</test>
			<error>
				<message>Entry SigQ in SignatureBuildPropDict has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SigQType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="SignatureBuildPropDict-SigQ-Dictionary" testNumber="10"/>
			<description>Entry SigQ with type Dictionary in SignatureBuildPropDict shall be direct</description>
			<test>SigQHasTypeDictionary != true || isSigQIndirect == false</test>
			<error>
				<message>Entry SigQ with type Dictionary in SignatureBuildPropDict is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceDocMDP" testNumber="1"/>
			<description>SignatureReferenceDocMDP shall not contain entries except Data, DigestMethod, TransformMethod, TransformParams, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'TransformParams' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>SignatureReferenceDocMDP contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'TransformParams' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceDocMDP-Data" testNumber="8"/>
			<description>Entry Data in SignatureReferenceDocMDP shall have one of types: Array, Boolean, Dictionary, Integer, Name, Stream, String</description>
			<test>containsData == false || DataHasTypeArray == true || DataHasTypeBoolean == true || DataHasTypeDictionary == true || DataHasTypeInteger == true || DataHasTypeName == true || DataHasTypeStream == true || DataHasTypeString == true</test>
			<error>
				<message>Entry Data in SignatureReferenceDocMDP has type %1 instead of one of types: Array, Boolean, Dictionary, Integer, Name, Stream, String</message>
				<arguments>
					<argument>DataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceDocMDP-Data-Stream" testNumber="10"/>
			<description>Entry Data with type Stream in SignatureReferenceDocMDP shall be indirect</description>
			<test>DataHasTypeStream != true || isDataIndirect == true</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceDocMDP is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceDocMDP-DigestMethod" testNumber="8"/>
			<description>Entry DigestMethod in SignatureReferenceDocMDP shall have type Name</description>
			<test>containsDigestMethod == false || DigestMethodHasTypeName == true</test>
			<error>
				<message>Entry DigestMethod in SignatureReferenceDocMDP has type %1 instead of type Name</message>
				<arguments>
					<argument>DigestMethodType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceDocMDP-DigestMethod-Name" testNumber="6"/>
			<description>Entry DigestMethod with type Name in SignatureReferenceDocMDP shall have one of values: SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</description>
			<test>DigestMethodHasTypeName != true || DigestMethodNameValue == "MD5" || DigestMethodNameValue == "SHA1" || DigestMethodNameValue == "SHA3-256" || DigestMethodNameValue == "SHA3-384" || DigestMethodNameValue == "SHA3-512" || DigestMethodNameValue == "SHAKE256"</test>
			<error>
				<message>Entry DigestMethod with type Name in SignatureReferenceDocMDP has incorrect value %1 instead of SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</message>
				<arguments>
					<argument>DigestMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceDocMDP-TransformMethod" testNumber="8"/>
			<description>Entry TransformMethod in SignatureReferenceDocMDP shall have type Name</description>
			<test>containsTransformMethod == false || TransformMethodHasTypeName == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceDocMDP has type %1 instead of type Name</message>
				<arguments>
					<argument>TransformMethodType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceDocMDP-TransformMethod" testNumber="7"/>
			<description>Entry TransformMethod in SignatureReferenceDocMDP is required</description>
			<test>containsTransformMethod == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceDocMDP is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceDocMDP-TransformMethod-Name" testNumber="6"/>
			<description>Entry TransformMethod with type Name in SignatureReferenceDocMDP shall have value DocMDP</description>
			<test>TransformMethodHasTypeName != true || TransformMethodNameValue == "DocMDP"</test>
			<error>
				<message>Entry TransformMethod with type Name in SignatureReferenceDocMDP has incorrect value %1 instead of DocMDP</message>
				<arguments>
					<argument>TransformMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceDocMDP-TransformParams" testNumber="8"/>
			<description>Entry TransformParams in SignatureReferenceDocMDP shall have type Dictionary</description>
			<test>containsTransformParams == false || TransformParamsHasTypeDictionary == true</test>
			<error>
				<message>Entry TransformParams in SignatureReferenceDocMDP has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TransformParamsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceDocMDP-Type" testNumber="8"/>
			<description>Entry Type in SignatureReferenceDocMDP shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SignatureReferenceDocMDP has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceDocMDP-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in SignatureReferenceDocMDP shall have value SigRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SigRef"</test>
			<error>
				<message>Entry Type with type Name in SignatureReferenceDocMDP has incorrect value %1 instead of SigRef</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceFieldMDP" testNumber="1"/>
			<description>SignatureReferenceFieldMDP shall not contain entries except Data, DigestMethod, TransformMethod, TransformParams, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'TransformParams' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>SignatureReferenceFieldMDP contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'TransformParams' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceFieldMDP-Data" testNumber="8"/>
			<description>Entry Data in SignatureReferenceFieldMDP shall have one of types: Array, Boolean, Dictionary, Integer, Name, Stream, String</description>
			<test>containsData == false || DataHasTypeArray == true || DataHasTypeBoolean == true || DataHasTypeDictionary == true || DataHasTypeInteger == true || DataHasTypeName == true || DataHasTypeStream == true || DataHasTypeString == true</test>
			<error>
				<message>Entry Data in SignatureReferenceFieldMDP has type %1 instead of one of types: Array, Boolean, Dictionary, Integer, Name, Stream, String</message>
				<arguments>
					<argument>DataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceFieldMDP-Data" testNumber="7"/>
			<description>Entry Data in SignatureReferenceFieldMDP is required</description>
			<test>containsData == true</test>
			<error>
				<message>Entry Data in SignatureReferenceFieldMDP is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceFieldMDP-Data-Stream" testNumber="10"/>
			<description>Entry Data with type Stream in SignatureReferenceFieldMDP shall be indirect</description>
			<test>DataHasTypeStream != true || isDataIndirect == true</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceFieldMDP is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceFieldMDP-DigestMethod" testNumber="8"/>
			<description>Entry DigestMethod in SignatureReferenceFieldMDP shall have type Name</description>
			<test>containsDigestMethod == false || DigestMethodHasTypeName == true</test>
			<error>
				<message>Entry DigestMethod in SignatureReferenceFieldMDP has type %1 instead of type Name</message>
				<arguments>
					<argument>DigestMethodType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceFieldMDP-DigestMethod-Name" testNumber="6"/>
			<description>Entry DigestMethod with type Name in SignatureReferenceFieldMDP shall have one of values: SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</description>
			<test>DigestMethodHasTypeName != true || DigestMethodNameValue == "MD5" || DigestMethodNameValue == "SHA1" || DigestMethodNameValue == "SHA3-256" || DigestMethodNameValue == "SHA3-384" || DigestMethodNameValue == "SHA3-512" || DigestMethodNameValue == "SHAKE256"</test>
			<error>
				<message>Entry DigestMethod with type Name in SignatureReferenceFieldMDP has incorrect value %1 instead of SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</message>
				<arguments>
					<argument>DigestMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceFieldMDP-TransformMethod" testNumber="8"/>
			<description>Entry TransformMethod in SignatureReferenceFieldMDP shall have type Name</description>
			<test>containsTransformMethod == false || TransformMethodHasTypeName == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceFieldMDP has type %1 instead of type Name</message>
				<arguments>
					<argument>TransformMethodType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceFieldMDP-TransformMethod" testNumber="7"/>
			<description>Entry TransformMethod in SignatureReferenceFieldMDP is required</description>
			<test>containsTransformMethod == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceFieldMDP is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceFieldMDP-TransformMethod-Name" testNumber="6"/>
			<description>Entry TransformMethod with type Name in SignatureReferenceFieldMDP shall have value FieldMDP</description>
			<test>TransformMethodHasTypeName != true || TransformMethodNameValue == "FieldMDP"</test>
			<error>
				<message>Entry TransformMethod with type Name in SignatureReferenceFieldMDP has incorrect value %1 instead of FieldMDP</message>
				<arguments>
					<argument>TransformMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceFieldMDP-TransformParams" testNumber="8"/>
			<description>Entry TransformParams in SignatureReferenceFieldMDP shall have type Dictionary</description>
			<test>containsTransformParams == false || TransformParamsHasTypeDictionary == true</test>
			<error>
				<message>Entry TransformParams in SignatureReferenceFieldMDP has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TransformParamsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceFieldMDP-Type" testNumber="8"/>
			<description>Entry Type in SignatureReferenceFieldMDP shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SignatureReferenceFieldMDP has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceFieldMDP-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in SignatureReferenceFieldMDP shall have value SigRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SigRef"</test>
			<error>
				<message>Entry Type with type Name in SignatureReferenceFieldMDP has incorrect value %1 instead of SigRef</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceIdentity" testNumber="1"/>
			<description>SignatureReferenceIdentity shall not contain entries except Data, DigestMethod, TransformMethod, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>SignatureReferenceIdentity contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceIdentity-Data" testNumber="8"/>
			<description>Entry Data in SignatureReferenceIdentity shall have one of types: Array, Boolean, Dictionary, Integer, Name, Stream, String</description>
			<test>containsData == false || DataHasTypeArray == true || DataHasTypeBoolean == true || DataHasTypeDictionary == true || DataHasTypeInteger == true || DataHasTypeName == true || DataHasTypeStream == true || DataHasTypeString == true</test>
			<error>
				<message>Entry Data in SignatureReferenceIdentity has type %1 instead of one of types: Array, Boolean, Dictionary, Integer, Name, Stream, String</message>
				<arguments>
					<argument>DataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceIdentity-Data" testNumber="7"/>
			<description>Entry Data in SignatureReferenceIdentity is required</description>
			<test>containsData == true</test>
			<error>
				<message>Entry Data in SignatureReferenceIdentity is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceIdentity-Data" testNumber="5"/>
			<description>Entry Data in SignatureReferenceIdentity is deprecated since PDF 1.7</description>
			<test>containsData == false</test>
			<error>
				<message>Entry Data in SignatureReferenceIdentity is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceIdentity-Data-Stream" testNumber="10"/>
			<description>Entry Data with type Stream in SignatureReferenceIdentity shall be indirect</description>
			<test>DataHasTypeStream != true || isDataIndirect == true</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceIdentity is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceIdentity-DigestMethod" testNumber="8"/>
			<description>Entry DigestMethod in SignatureReferenceIdentity shall have type Name</description>
			<test>containsDigestMethod == false || DigestMethodHasTypeName == true</test>
			<error>
				<message>Entry DigestMethod in SignatureReferenceIdentity has type %1 instead of type Name</message>
				<arguments>
					<argument>DigestMethodType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceIdentity-DigestMethod" testNumber="5"/>
			<description>Entry DigestMethod in SignatureReferenceIdentity is deprecated since PDF 1.7</description>
			<test>containsDigestMethod == false</test>
			<error>
				<message>Entry DigestMethod in SignatureReferenceIdentity is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceIdentity-DigestMethod-Name" testNumber="6"/>
			<description>Entry DigestMethod with type Name in SignatureReferenceIdentity shall have one of values: SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</description>
			<test>DigestMethodHasTypeName != true || DigestMethodNameValue == "MD5" || DigestMethodNameValue == "SHA1" || DigestMethodNameValue == "SHA3-256" || DigestMethodNameValue == "SHA3-384" || DigestMethodNameValue == "SHA3-512" || DigestMethodNameValue == "SHAKE256"</test>
			<error>
				<message>Entry DigestMethod with type Name in SignatureReferenceIdentity has incorrect value %1 instead of SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</message>
				<arguments>
					<argument>DigestMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceIdentity-TransformMethod" testNumber="8"/>
			<description>Entry TransformMethod in SignatureReferenceIdentity shall have type Name</description>
			<test>containsTransformMethod == false || TransformMethodHasTypeName == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceIdentity has type %1 instead of type Name</message>
				<arguments>
					<argument>TransformMethodType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceIdentity-TransformMethod" testNumber="7"/>
			<description>Entry TransformMethod in SignatureReferenceIdentity is required</description>
			<test>containsTransformMethod == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceIdentity is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceIdentity-TransformMethod" testNumber="5"/>
			<description>Entry TransformMethod in SignatureReferenceIdentity is deprecated since PDF 1.7</description>
			<test>containsTransformMethod == false</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceIdentity is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceIdentity-TransformMethod-Name" testNumber="6"/>
			<description>Entry TransformMethod with type Name in SignatureReferenceIdentity shall have value Identity</description>
			<test>TransformMethodHasTypeName != true || TransformMethodNameValue == "Identity"</test>
			<error>
				<message>Entry TransformMethod with type Name in SignatureReferenceIdentity has incorrect value %1 instead of Identity</message>
				<arguments>
					<argument>TransformMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceIdentity-Type" testNumber="8"/>
			<description>Entry Type in SignatureReferenceIdentity shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SignatureReferenceIdentity has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceIdentity-Type" testNumber="5"/>
			<description>Entry Type in SignatureReferenceIdentity is deprecated since PDF 1.7</description>
			<test>containsType == false</test>
			<error>
				<message>Entry Type in SignatureReferenceIdentity is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceIdentity-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in SignatureReferenceIdentity shall have value SigRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SigRef"</test>
			<error>
				<message>Entry Type with type Name in SignatureReferenceIdentity has incorrect value %1 instead of SigRef</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceUR" testNumber="1"/>
			<description>SignatureReferenceUR shall not contain entries except Data, DigestMethod, TransformMethod, TransformParams, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'TransformParams' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>SignatureReferenceUR contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'TransformParams' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceUR-Data" testNumber="8"/>
			<description>Entry Data in SignatureReferenceUR shall have one of types: Array, Boolean, Dictionary, Integer, Name, Stream, String</description>
			<test>containsData == false || DataHasTypeArray == true || DataHasTypeBoolean == true || DataHasTypeDictionary == true || DataHasTypeInteger == true || DataHasTypeName == true || DataHasTypeStream == true || DataHasTypeString == true</test>
			<error>
				<message>Entry Data in SignatureReferenceUR has type %1 instead of one of types: Array, Boolean, Dictionary, Integer, Name, Stream, String</message>
				<arguments>
					<argument>DataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceUR-Data-Stream" testNumber="10"/>
			<description>Entry Data with type Stream in SignatureReferenceUR shall be indirect</description>
			<test>DataHasTypeStream != true || isDataIndirect == true</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceUR is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceUR-DigestMethod" testNumber="8"/>
			<description>Entry DigestMethod in SignatureReferenceUR shall have type Name</description>
			<test>containsDigestMethod == false || DigestMethodHasTypeName == true</test>
			<error>
				<message>Entry DigestMethod in SignatureReferenceUR has type %1 instead of type Name</message>
				<arguments>
					<argument>DigestMethodType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceUR-DigestMethod-Name" testNumber="6"/>
			<description>Entry DigestMethod with type Name in SignatureReferenceUR shall have one of values: SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</description>
			<test>DigestMethodHasTypeName != true || DigestMethodNameValue == "MD5" || DigestMethodNameValue == "SHA1" || DigestMethodNameValue == "SHA3-256" || DigestMethodNameValue == "SHA3-384" || DigestMethodNameValue == "SHA3-512" || DigestMethodNameValue == "SHAKE256"</test>
			<error>
				<message>Entry DigestMethod with type Name in SignatureReferenceUR has incorrect value %1 instead of SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</message>
				<arguments>
					<argument>DigestMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceUR-TransformMethod" testNumber="8"/>
			<description>Entry TransformMethod in SignatureReferenceUR shall have type Name</description>
			<test>containsTransformMethod == false || TransformMethodHasTypeName == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceUR has type %1 instead of type Name</message>
				<arguments>
					<argument>TransformMethodType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceUR-TransformMethod" testNumber="7"/>
			<description>Entry TransformMethod in SignatureReferenceUR is required</description>
			<test>containsTransformMethod == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceUR is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceUR-TransformMethod-Name" testNumber="6"/>
			<description>Entry TransformMethod with type Name in SignatureReferenceUR shall have one of values: UR3, UR</description>
			<test>TransformMethodHasTypeName != true || TransformMethodNameValue == "UR" || TransformMethodNameValue == "UR3"</test>
			<error>
				<message>Entry TransformMethod with type Name in SignatureReferenceUR has incorrect value %1 instead of UR3, UR</message>
				<arguments>
					<argument>TransformMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceUR-TransformParams" testNumber="8"/>
			<description>Entry TransformParams in SignatureReferenceUR shall have type Dictionary</description>
			<test>containsTransformParams == false || TransformParamsHasTypeDictionary == true</test>
			<error>
				<message>Entry TransformParams in SignatureReferenceUR has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TransformParamsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceUR-Type" testNumber="8"/>
			<description>Entry Type in SignatureReferenceUR shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SignatureReferenceUR has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="SignatureReferenceUR-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in SignatureReferenceUR shall have value SigRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SigRef"</test>
			<error>
				<message>Entry Type with type Name in SignatureReferenceUR has incorrect value %1 instead of SigRef</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="SlideShow" testNumber="1"/>
			<description>SlideShow shall not contain entries except Resources, StartResource, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Resources' &amp;&amp; elem != 'StartResource' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>SlideShow contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Resources' &amp;&amp; elem != 'StartResource' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="SlideShow-Resources" testNumber="8"/>
			<description>Entry Resources in SlideShow shall have type NameTree</description>
			<test>containsResources == false || ResourcesHasTypeNameTree == true</test>
			<error>
				<message>Entry Resources in SlideShow has type %1 instead of type NameTree</message>
				<arguments>
					<argument>ResourcesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="SlideShow-Resources" testNumber="7"/>
			<description>Entry Resources in SlideShow is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in SlideShow is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="SlideShow-ResourcesTreeNode" testNumber="8"/>
			<description>Entry ResourcesTreeNode in SlideShow shall have type NameTree</description>
			<test>containsResourcesTreeNode == false || ResourcesTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry ResourcesTreeNode in SlideShow has type %1 instead of type NameTree</message>
				<arguments>
					<argument>ResourcesTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="SlideShow-ResourcesTreeNode" testNumber="7"/>
			<description>Entry ResourcesTreeNode in SlideShow is required</description>
			<test>containsResourcesTreeNode == true</test>
			<error>
				<message>Entry ResourcesTreeNode in SlideShow is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="SlideShow-StartResource" testNumber="8"/>
			<description>Entry StartResource in SlideShow shall have type StringByte</description>
			<test>containsStartResource == false || StartResourceHasTypeStringByte == true</test>
			<error>
				<message>Entry StartResource in SlideShow has type %1 instead of type StringByte</message>
				<arguments>
					<argument>StartResourceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="SlideShow-StartResource" testNumber="7"/>
			<description>Entry StartResource in SlideShow is required</description>
			<test>containsStartResource == true</test>
			<error>
				<message>Entry StartResource in SlideShow is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="SlideShow-StartResource-StringByte" testNumber="9"/>
			<description>Entry StartResource with type StringByte in SlideShow shall satisfy special case: fn:InNameTree(Resources)</description>
			<test>StartResourceHasTypeStringByte != true || (StartResourceEntryIsIndexInNameTreeResources == true)</test>
			<error>
				<message>Entry StartResource with type StringByte in SlideShow does not satisfy special case: fn:InNameTree(Resources)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="SlideShow-Subtype" testNumber="8"/>
			<description>Entry Subtype in SlideShow shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in SlideShow has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="SlideShow-Subtype" testNumber="7"/>
			<description>Entry Subtype in SlideShow is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in SlideShow is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="SlideShow-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in SlideShow shall have value Embedded</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Embedded"</test>
			<error>
				<message>Entry Subtype with type Name in SlideShow has incorrect value %1 instead of Embedded</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="SlideShow-Type" testNumber="8"/>
			<description>Entry Type in SlideShow shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SlideShow has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="SlideShow-Type" testNumber="7"/>
			<description>Entry Type in SlideShow is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in SlideShow is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="SlideShow-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in SlideShow shall have value SlideShow</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SlideShow"</test>
			<error>
				<message>Entry Type with type Name in SlideShow has incorrect value %1 instead of SlideShow</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShowNameTreeResourcesEntry">
			<id specification="ISO_32000_1_7" clause="SlideShowNameTreeResourcesEntry-Stream" testNumber="17"/>
			<description>Entry with type Stream in SlideShowNameTreeResources shall be one of objects XObjectImage, EmbeddedFileStream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Stream in SlideShowNameTreeResources is not one of objects XObjectImage, EmbeddedFileStream</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="SoftMaskAlpha" testNumber="1"/>
			<description>SoftMaskAlpha shall not contain entries except BC, G, S, TR, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BC' &amp;&amp; elem != 'G' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>SoftMaskAlpha contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BC' &amp;&amp; elem != 'G' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="SoftMaskAlpha-BC" testNumber="8"/>
			<description>Entry BC in SoftMaskAlpha shall have type Array</description>
			<test>containsBC == false || BCHasTypeArray == true</test>
			<error>
				<message>Entry BC in SoftMaskAlpha has type %1 instead of type Array</message>
				<arguments>
					<argument>BCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="SoftMaskAlpha-G" testNumber="8"/>
			<description>Entry G in SoftMaskAlpha shall have type Stream</description>
			<test>containsG == false || GHasTypeStream == true</test>
			<error>
				<message>Entry G in SoftMaskAlpha has type %1 instead of type Stream</message>
				<arguments>
					<argument>GType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="SoftMaskAlpha-G" testNumber="7"/>
			<description>Entry G in SoftMaskAlpha is required</description>
			<test>containsG == true</test>
			<error>
				<message>Entry G in SoftMaskAlpha is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="SoftMaskAlpha-G-Stream" testNumber="10"/>
			<description>Entry G with type Stream in SoftMaskAlpha shall be indirect</description>
			<test>GHasTypeStream != true || isGIndirect == true</test>
			<error>
				<message>Entry G with type Stream in SoftMaskAlpha is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="SoftMaskAlpha-S" testNumber="8"/>
			<description>Entry S in SoftMaskAlpha shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in SoftMaskAlpha has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="SoftMaskAlpha-S" testNumber="7"/>
			<description>Entry S in SoftMaskAlpha is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in SoftMaskAlpha is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="SoftMaskAlpha-S-Name" testNumber="6"/>
			<description>Entry S with type Name in SoftMaskAlpha shall have value Alpha</description>
			<test>SHasTypeName != true || SNameValue == "Alpha"</test>
			<error>
				<message>Entry S with type Name in SoftMaskAlpha has incorrect value %1 instead of Alpha</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="SoftMaskAlpha-TR-Dictionary" testNumber="17"/>
			<description>Entry TR with type Dictionary in SoftMaskAlpha shall be one of objects FunctionType2, FunctionType3</description>
			<test>TRHasTypeDictionary != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Dictionary in SoftMaskAlpha is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="SoftMaskAlpha-TR-Stream" testNumber="17"/>
			<description>Entry TR with type Stream in SoftMaskAlpha shall be one of objects FunctionType0, FunctionType4</description>
			<test>TRHasTypeStream != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Stream in SoftMaskAlpha is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="SoftMaskAlpha-TR" testNumber="8"/>
			<description>Entry TR in SoftMaskAlpha shall have one of types: Dictionary, Name, Stream</description>
			<test>containsTR == false || TRHasTypeDictionary == true || TRHasTypeName == true || TRHasTypeStream == true</test>
			<error>
				<message>Entry TR in SoftMaskAlpha has type %1 instead of one of types: Dictionary, Name, Stream</message>
				<arguments>
					<argument>TRType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="SoftMaskAlpha-TR-Name" testNumber="6"/>
			<description>Entry TR with type Name in SoftMaskAlpha shall have value Identity</description>
			<test>TRHasTypeName != true || TRNameValue == "Identity"</test>
			<error>
				<message>Entry TR with type Name in SoftMaskAlpha has incorrect value %1 instead of Identity</message>
				<arguments>
					<argument>TRNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="SoftMaskAlpha-TR-Stream" testNumber="10"/>
			<description>Entry TR with type Stream in SoftMaskAlpha shall be indirect</description>
			<test>TRHasTypeStream != true || isTRIndirect == true</test>
			<error>
				<message>Entry TR with type Stream in SoftMaskAlpha is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="SoftMaskAlpha-Type" testNumber="8"/>
			<description>Entry Type in SoftMaskAlpha shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SoftMaskAlpha has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="SoftMaskAlpha-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in SoftMaskAlpha shall have value Mask</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Mask"</test>
			<error>
				<message>Entry Type with type Name in SoftMaskAlpha has incorrect value %1 instead of Mask</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="SoftMaskLuminosity" testNumber="1"/>
			<description>SoftMaskLuminosity shall not contain entries except BC, G, S, TR, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BC' &amp;&amp; elem != 'G' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>SoftMaskLuminosity contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BC' &amp;&amp; elem != 'G' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="SoftMaskLuminosity-BC" testNumber="8"/>
			<description>Entry BC in SoftMaskLuminosity shall have type Array</description>
			<test>containsBC == false || BCHasTypeArray == true</test>
			<error>
				<message>Entry BC in SoftMaskLuminosity has type %1 instead of type Array</message>
				<arguments>
					<argument>BCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="SoftMaskLuminosity-G" testNumber="8"/>
			<description>Entry G in SoftMaskLuminosity shall have type Stream</description>
			<test>containsG == false || GHasTypeStream == true</test>
			<error>
				<message>Entry G in SoftMaskLuminosity has type %1 instead of type Stream</message>
				<arguments>
					<argument>GType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="SoftMaskLuminosity-G" testNumber="7"/>
			<description>Entry G in SoftMaskLuminosity is required</description>
			<test>containsG == true</test>
			<error>
				<message>Entry G in SoftMaskLuminosity is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="SoftMaskLuminosity-G-Stream" testNumber="10"/>
			<description>Entry G with type Stream in SoftMaskLuminosity shall be indirect</description>
			<test>GHasTypeStream != true || isGIndirect == true</test>
			<error>
				<message>Entry G with type Stream in SoftMaskLuminosity is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="SoftMaskLuminosity-G-Stream" testNumber="9"/>
			<description>Entry G with type Stream in SoftMaskLuminosity shall satisfy special case: fn:Eval((G::Group::@S == Transparency) &amp;&amp; fn:IsPresent(G::Group::CS))</description>
			<test>GHasTypeStream != true || ((GGroupSNameValue == "Transparency") &amp;&amp; (containsGGroupCS == true))</test>
			<error>
				<message>Entry G with type Stream in SoftMaskLuminosity does not satisfy special case: fn:Eval((G::Group::@S == Transparency) &amp;&amp; fn:IsPresent(G::Group::CS))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="SoftMaskLuminosity-S" testNumber="8"/>
			<description>Entry S in SoftMaskLuminosity shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in SoftMaskLuminosity has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="SoftMaskLuminosity-S" testNumber="7"/>
			<description>Entry S in SoftMaskLuminosity is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in SoftMaskLuminosity is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="SoftMaskLuminosity-S-Name" testNumber="6"/>
			<description>Entry S with type Name in SoftMaskLuminosity shall have value Luminosity</description>
			<test>SHasTypeName != true || SNameValue == "Luminosity"</test>
			<error>
				<message>Entry S with type Name in SoftMaskLuminosity has incorrect value %1 instead of Luminosity</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="SoftMaskLuminosity-TR-Dictionary" testNumber="17"/>
			<description>Entry TR with type Dictionary in SoftMaskLuminosity shall be one of objects FunctionType2, FunctionType3</description>
			<test>TRHasTypeDictionary != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Dictionary in SoftMaskLuminosity is not one of objects FunctionType2, FunctionType3</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="SoftMaskLuminosity-TR-Stream" testNumber="17"/>
			<description>Entry TR with type Stream in SoftMaskLuminosity shall be one of objects FunctionType0, FunctionType4</description>
			<test>TRHasTypeStream != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Stream in SoftMaskLuminosity is not one of objects FunctionType0, FunctionType4</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="SoftMaskLuminosity-TR" testNumber="8"/>
			<description>Entry TR in SoftMaskLuminosity shall have one of types: Dictionary, Name, Stream</description>
			<test>containsTR == false || TRHasTypeDictionary == true || TRHasTypeName == true || TRHasTypeStream == true</test>
			<error>
				<message>Entry TR in SoftMaskLuminosity has type %1 instead of one of types: Dictionary, Name, Stream</message>
				<arguments>
					<argument>TRType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="SoftMaskLuminosity-TR-Name" testNumber="6"/>
			<description>Entry TR with type Name in SoftMaskLuminosity shall have value Identity</description>
			<test>TRHasTypeName != true || TRNameValue == "Identity"</test>
			<error>
				<message>Entry TR with type Name in SoftMaskLuminosity has incorrect value %1 instead of Identity</message>
				<arguments>
					<argument>TRNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="SoftMaskLuminosity-TR-Stream" testNumber="10"/>
			<description>Entry TR with type Stream in SoftMaskLuminosity shall be indirect</description>
			<test>TRHasTypeStream != true || isTRIndirect == true</test>
			<error>
				<message>Entry TR with type Stream in SoftMaskLuminosity is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="SoftMaskLuminosity-Type" testNumber="8"/>
			<description>Entry Type in SoftMaskLuminosity shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SoftMaskLuminosity has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="SoftMaskLuminosity-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in SoftMaskLuminosity shall have value Mask</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Mask"</test>
			<error>
				<message>Entry Type with type Name in SoftMaskLuminosity has incorrect value %1 instead of Mask</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="SoftwareIdentifier" testNumber="1"/>
			<description>SoftwareIdentifier shall not contain entries except H, HI, L, LI, OS, Type, U</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'HI' &amp;&amp; elem != 'L' &amp;&amp; elem != 'LI' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>SoftwareIdentifier contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'HI' &amp;&amp; elem != 'L' &amp;&amp; elem != 'LI' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="SoftwareIdentifier-H" testNumber="8"/>
			<description>Entry H in SoftwareIdentifier shall have type Array</description>
			<test>containsH == false || HHasTypeArray == true</test>
			<error>
				<message>Entry H in SoftwareIdentifier has type %1 instead of type Array</message>
				<arguments>
					<argument>HType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="SoftwareIdentifier-HI" testNumber="8"/>
			<description>Entry HI in SoftwareIdentifier shall have type Boolean</description>
			<test>containsHI == false || HIHasTypeBoolean == true</test>
			<error>
				<message>Entry HI in SoftwareIdentifier has type %1 instead of type Boolean</message>
				<arguments>
					<argument>HIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="SoftwareIdentifier-L" testNumber="8"/>
			<description>Entry L in SoftwareIdentifier shall have type Array</description>
			<test>containsL == false || LHasTypeArray == true</test>
			<error>
				<message>Entry L in SoftwareIdentifier has type %1 instead of type Array</message>
				<arguments>
					<argument>LType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="SoftwareIdentifier-LI" testNumber="8"/>
			<description>Entry LI in SoftwareIdentifier shall have type Boolean</description>
			<test>containsLI == false || LIHasTypeBoolean == true</test>
			<error>
				<message>Entry LI in SoftwareIdentifier has type %1 instead of type Boolean</message>
				<arguments>
					<argument>LIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="SoftwareIdentifier-OS" testNumber="8"/>
			<description>Entry OS in SoftwareIdentifier shall have type Array</description>
			<test>containsOS == false || OSHasTypeArray == true</test>
			<error>
				<message>Entry OS in SoftwareIdentifier has type %1 instead of type Array</message>
				<arguments>
					<argument>OSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="SoftwareIdentifier-Type" testNumber="8"/>
			<description>Entry Type in SoftwareIdentifier shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SoftwareIdentifier has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="SoftwareIdentifier-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in SoftwareIdentifier shall have value SoftwareIdentifier</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SoftwareIdentifier"</test>
			<error>
				<message>Entry Type with type Name in SoftwareIdentifier has incorrect value %1 instead of SoftwareIdentifier</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="SoftwareIdentifier-U" testNumber="8"/>
			<description>Entry U in SoftwareIdentifier shall have type StringAscii</description>
			<test>containsU == false || UHasTypeStringAscii == true</test>
			<error>
				<message>Entry U in SoftwareIdentifier has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>UType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="SoftwareIdentifier-U" testNumber="7"/>
			<description>Entry U in SoftwareIdentifier is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in SoftwareIdentifier is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASolidities">
			<id specification="ISO_32000_1_7" clause="Solidities-Default" testNumber="8"/>
			<description>Entry Default in Solidities shall have type Number</description>
			<test>containsDefault == false || DefaultHasTypeNumber == true</test>
			<error>
				<message>Entry Default in Solidities has type %1 instead of type Number</message>
				<arguments>
					<argument>DefaultType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASolidities">
			<id specification="ISO_32000_1_7" clause="Solidities-Default-Number" testNumber="14"/>
			<description>Entry Default with type Number in Solidities shall satisfy possible value predicate: fn:Eval((@Default &gt;= 0) &amp;&amp; (@Default &lt;= 1))</description>
			<test>DefaultHasTypeNumber != true || (DefaultNumberValue &gt;= 0) &amp;&amp; (DefaultNumberValue &lt;= 1)</test>
			<error>
				<message>Entry Default with type Number in Solidities does not satisfy possible value predicate: fn:Eval((@Default &gt;= 0) &amp;&amp; (@Default &lt;= 1))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoliditiesEntry">
			<id specification="ISO_32000_1_7" clause="SoliditiesEntry" testNumber="8"/>
			<description>Entry in Solidities shall have type Number</description>
			<test>HasTypeNumber == true</test>
			<error>
				<message>Entry %keyName% in Solidities has type %1 instead of type Number</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoliditiesEntry">
			<id specification="ISO_32000_1_7" clause="SoliditiesEntry-Number" testNumber="14"/>
			<description>Entry with type Number in Solidities shall satisfy possible value predicate: fn:Eval((@* &gt;= 0) &amp;&amp; (@* &lt;= 1))</description>
			<test>HasTypeNumber != true || (NumberValue &gt;= 0) &amp;&amp; (NumberValue &lt;= 1)</test>
			<error>
				<message>Entry %keyName% with type Number in Solidities does not satisfy possible value predicate: fn:Eval((@* &gt;= 0) &amp;&amp; (@* &lt;= 1))</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject" testNumber="1"/>
			<description>SoundObject shall not contain entries except B, C, CO, CP, DL, DecodeParms, E, F, FDecodeParms, FFilter, Filter, Length, R, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'CP' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'E' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>SoundObject contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'CP' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'E' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-B" testNumber="8"/>
			<description>Entry B in SoundObject shall have type Integer</description>
			<test>containsB == false || BHasTypeInteger == true</test>
			<error>
				<message>Entry B in SoundObject has type %1 instead of type Integer</message>
				<arguments>
					<argument>BType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-B-Integer" testNumber="14"/>
			<description>Entry B with type Integer in SoundObject shall satisfy possible value predicate: fn:Eval(@B &gt; 0)</description>
			<test>BHasTypeInteger != true || BIntegerValue &gt; 0</test>
			<error>
				<message>Entry B with type Integer in SoundObject does not satisfy possible value predicate: fn:Eval(@B &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-C" testNumber="8"/>
			<description>Entry C in SoundObject shall have type Integer</description>
			<test>containsC == false || CHasTypeInteger == true</test>
			<error>
				<message>Entry C in SoundObject has type %1 instead of type Integer</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-C-Integer" testNumber="14"/>
			<description>Entry C with type Integer in SoundObject shall satisfy possible value predicate: fn:Eval(@C &gt; 0)</description>
			<test>CHasTypeInteger != true || CIntegerValue &gt; 0</test>
			<error>
				<message>Entry C with type Integer in SoundObject does not satisfy possible value predicate: fn:Eval(@C &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-CO" testNumber="8"/>
			<description>Entry CO in SoundObject shall have type Name</description>
			<test>containsCO == false || COHasTypeName == true</test>
			<error>
				<message>Entry CO in SoundObject has type %1 instead of type Name</message>
				<arguments>
					<argument>COType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-CP" testNumber="8"/>
			<description>Entry CP in SoundObject shall have one of types: Array, Dictionary, Stream</description>
			<test>containsCP == false || CPHasTypeArray == true || CPHasTypeDictionary == true || CPHasTypeStream == true</test>
			<error>
				<message>Entry CP in SoundObject has type %1 instead of one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>CPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-CP-Stream" testNumber="10"/>
			<description>Entry CP with type Stream in SoundObject shall be indirect</description>
			<test>CPHasTypeStream != true || isCPIndirect == true</test>
			<error>
				<message>Entry CP with type Stream in SoundObject is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-DL" testNumber="8"/>
			<description>Entry DL in SoundObject shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in SoundObject has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-DL-Integer" testNumber="14"/>
			<description>Entry DL with type Integer in SoundObject shall satisfy possible value predicate: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || DLIntegerValue &gt;= 0</test>
			<error>
				<message>Entry DL with type Integer in SoundObject does not satisfy possible value predicate: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in SoundObject shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in SoundObject is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in SoundObject shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in SoundObject has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in SoundObject shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in SoundObject does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-E" testNumber="8"/>
			<description>Entry E in SoundObject shall have type Name</description>
			<test>containsE == false || EHasTypeName == true</test>
			<error>
				<message>Entry E in SoundObject has type %1 instead of type Name</message>
				<arguments>
					<argument>EType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-E-Name" testNumber="6"/>
			<description>Entry E with type Name in SoundObject shall have one of values: Signed, Raw, muLaw, ALaw</description>
			<test>EHasTypeName != true || ENameValue == "Raw" || ENameValue == "Signed" || ENameValue == "muLaw" || ENameValue == "ALaw"</test>
			<error>
				<message>Entry E with type Name in SoundObject has incorrect value %1 instead of Signed, Raw, muLaw, ALaw</message>
				<arguments>
					<argument>ENameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-F" testNumber="8"/>
			<description>Entry F in SoundObject shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in SoundObject has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in SoundObject shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in SoundObject is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in SoundObject shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in SoundObject has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in SoundObject shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in SoundObject does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-FFilter" testNumber="8"/>
			<description>Entry FFilter in SoundObject shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in SoundObject has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in SoundObject shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in SoundObject does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in SoundObject shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in SoundObject has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-Filter" testNumber="8"/>
			<description>Entry Filter in SoundObject shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in SoundObject has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in SoundObject shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in SoundObject does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in SoundObject shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in SoundObject has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-Length" testNumber="8"/>
			<description>Entry Length in SoundObject shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in SoundObject has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-Length" testNumber="7"/>
			<description>Entry Length in SoundObject is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in SoundObject is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-R" testNumber="8"/>
			<description>Entry R in SoundObject shall have type Number</description>
			<test>containsR == false || RHasTypeNumber == true</test>
			<error>
				<message>Entry R in SoundObject has type %1 instead of type Number</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-R" testNumber="7"/>
			<description>Entry R in SoundObject is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in SoundObject is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-R-Number" testNumber="14"/>
			<description>Entry R with type Number in SoundObject shall satisfy possible value predicate: fn:Eval(@R &gt; 0)</description>
			<test>RHasTypeNumber != true || RNumberValue &gt; 0</test>
			<error>
				<message>Entry R with type Number in SoundObject does not satisfy possible value predicate: fn:Eval(@R &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-Type" testNumber="8"/>
			<description>Entry Type in SoundObject shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SoundObject has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="SoundObject-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in SoundObject shall have value Sound</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Sound"</test>
			<error>
				<message>Entry Type with type Name in SoundObject has incorrect value %1 instead of Sound</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="SourceInformation" testNumber="1"/>
			<description>SourceInformation shall not contain entries except AU, C, E, S, TS</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AU' &amp;&amp; elem != 'C' &amp;&amp; elem != 'E' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TS' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>SourceInformation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AU' &amp;&amp; elem != 'C' &amp;&amp; elem != 'E' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TS' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="SourceInformation-AU" testNumber="8"/>
			<description>Entry AU in SourceInformation shall have one of types: Dictionary, StringAscii</description>
			<test>containsAU == false || AUHasTypeDictionary == true || AUHasTypeStringAscii == true</test>
			<error>
				<message>Entry AU in SourceInformation has type %1 instead of one of types: Dictionary, StringAscii</message>
				<arguments>
					<argument>AUType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="SourceInformation-AU" testNumber="7"/>
			<description>Entry AU in SourceInformation is required</description>
			<test>containsAU == true</test>
			<error>
				<message>Entry AU in SourceInformation is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="SourceInformation-C" testNumber="8"/>
			<description>Entry C in SourceInformation shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in SourceInformation has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="SourceInformation-C-Dictionary" testNumber="10"/>
			<description>Entry C with type Dictionary in SourceInformation shall be indirect</description>
			<test>CHasTypeDictionary != true || isCIndirect == true</test>
			<error>
				<message>Entry C with type Dictionary in SourceInformation is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="SourceInformation-C-Dictionary" testNumber="9"/>
			<description>Entry C with type Dictionary in SourceInformation shall satisfy special case: fn:Eval(parent::@S == SPS)</description>
			<test>CHasTypeDictionary != true || (parentSNameValue == "SPS")</test>
			<error>
				<message>Entry C with type Dictionary in SourceInformation does not satisfy special case: fn:Eval(parent::@S == SPS)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="SourceInformation-E" testNumber="8"/>
			<description>Entry E in SourceInformation shall have type Date</description>
			<test>containsE == false || EHasTypeDate == true</test>
			<error>
				<message>Entry E in SourceInformation has type %1 instead of type Date</message>
				<arguments>
					<argument>EType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="SourceInformation-S" testNumber="8"/>
			<description>Entry S in SourceInformation shall have type Integer</description>
			<test>containsS == false || SHasTypeInteger == true</test>
			<error>
				<message>Entry S in SourceInformation has type %1 instead of type Integer</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="SourceInformation-S-Integer" testNumber="6"/>
			<description>Entry S with type Integer in SourceInformation shall have one of values: 0, 1, 2</description>
			<test>SHasTypeInteger != true || SIntegerValue == 0 || SIntegerValue == 1 || SIntegerValue == 2</test>
			<error>
				<message>Entry S with type Integer in SourceInformation has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>SIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="SourceInformation-S-Integer" testNumber="9"/>
			<description>Entry S with type Integer in SourceInformation shall satisfy special case: fn:Eval(parent::@S == SPS)</description>
			<test>SHasTypeInteger != true || (parentSNameValue == "SPS")</test>
			<error>
				<message>Entry S with type Integer in SourceInformation does not satisfy special case: fn:Eval(parent::@S == SPS)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="SourceInformation-TS" testNumber="8"/>
			<description>Entry TS in SourceInformation shall have type Date</description>
			<test>containsTS == false || TSHasTypeDate == true</test>
			<error>
				<message>Entry TS in SourceInformation has type %1 instead of type Date</message>
				<arguments>
					<argument>TSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-DL" testNumber="8"/>
			<description>Entry DL in Stream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in Stream has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in Stream shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in Stream does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in Stream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in Stream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in Stream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in Stream has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in Stream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in Stream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-F" testNumber="8"/>
			<description>Entry F in Stream shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in Stream has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in Stream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in Stream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in Stream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in Stream has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in Stream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in Stream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-FFilter" testNumber="8"/>
			<description>Entry FFilter in Stream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in Stream has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in Stream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in Stream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in Stream shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in Stream has incorrect value %1 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-Filter" testNumber="8"/>
			<description>Entry Filter in Stream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in Stream has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in Stream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in Stream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in Stream shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in Stream has incorrect value %1 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-Length" testNumber="8"/>
			<description>Entry Length in Stream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in Stream has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="Stream-Length" testNumber="7"/>
			<description>Entry Length in Stream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in Stream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem" testNumber="1"/>
			<description>StructElem shall not contain entries except A, AF, ActualText, Alt, C, E, ID, K, Lang, P, Pg, R, S, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'ActualText' &amp;&amp; elem != 'Alt' &amp;&amp; elem != 'C' &amp;&amp; elem != 'E' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'K' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'NS' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Phoneme' &amp;&amp; elem != 'PhoneticAlphabet' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>StructElem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AF' &amp;&amp; elem != 'ActualText' &amp;&amp; elem != 'Alt' &amp;&amp; elem != 'C' &amp;&amp; elem != 'E' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'K' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'NS' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Phoneme' &amp;&amp; elem != 'PhoneticAlphabet' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem" testNumber="22"/>
			<description>StructElem shall not contain entries NS, Phoneme, PhoneticAlphabet, Ref in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'NS' || elem == 'Phoneme' || elem == 'PhoneticAlphabet' || elem == 'Ref').length == 0</test>
			<error>
				<message>StructElem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'NS' || elem == 'Phoneme' || elem == 'PhoneticAlphabet' || elem == 'Ref').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-A" testNumber="8"/>
			<description>Entry A in StructElem shall have one of types: Array, Dictionary, Stream</description>
			<test>containsA == false || AHasTypeArray == true || AHasTypeDictionary == true || AHasTypeStream == true</test>
			<error>
				<message>Entry A in StructElem has type %1 instead of one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-A-Array" testNumber="14"/>
			<description>Entry A with type Array in StructElem shall satisfy possible value predicate: fn:Eval(fn:ArrayLength(A) &gt;= 1)</description>
			<test>AHasTypeArray != true || AArraySize &gt;= 1</test>
			<error>
				<message>Entry A with type Array in StructElem does not satisfy possible value predicate: fn:Eval(fn:ArrayLength(A) &gt;= 1)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-A-Stream" testNumber="10"/>
			<description>Entry A with type Stream in StructElem shall be indirect</description>
			<test>AHasTypeStream != true || isAIndirect == true</test>
			<error>
				<message>Entry A with type Stream in StructElem is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-AF" testNumber="8"/>
			<description>Entry AF in StructElem shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in StructElem has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-AF" testNumber="23"/>
			<description>Entry AF in StructElem can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in StructElem is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-ActualText" testNumber="8"/>
			<description>Entry ActualText in StructElem shall have type StringText</description>
			<test>containsActualText == false || ActualTextHasTypeStringText == true</test>
			<error>
				<message>Entry ActualText in StructElem has type %1 instead of type StringText</message>
				<arguments>
					<argument>ActualTextType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-Alt" testNumber="8"/>
			<description>Entry Alt in StructElem shall have type StringText</description>
			<test>containsAlt == false || AltHasTypeStringText == true</test>
			<error>
				<message>Entry Alt in StructElem has type %1 instead of type StringText</message>
				<arguments>
					<argument>AltType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-C" testNumber="8"/>
			<description>Entry C in StructElem shall have one of types: Array, Name</description>
			<test>containsC == false || CHasTypeArray == true || CHasTypeName == true</test>
			<error>
				<message>Entry C in StructElem has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-E" testNumber="8"/>
			<description>Entry E in StructElem shall have type StringText</description>
			<test>containsE == false || EHasTypeStringText == true</test>
			<error>
				<message>Entry E in StructElem has type %1 instead of type StringText</message>
				<arguments>
					<argument>EType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-ID" testNumber="8"/>
			<description>Entry ID in StructElem shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in StructElem has type %1 instead of type StringByte</message>
				<arguments>
					<argument>entryIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-K-Dictionary" testNumber="17"/>
			<description>Entry K with type Dictionary in StructElem shall be one of objects StructElem, MarkedContentReference, ObjectReference</description>
			<test>KHasTypeDictionary != true || K_size == 1</test>
			<error>
				<message>Entry K with type Dictionary in StructElem is not one of objects StructElem, MarkedContentReference, ObjectReference</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-K" testNumber="8"/>
			<description>Entry K in StructElem shall have one of types: Array, Dictionary, Integer</description>
			<test>containsK == false || KHasTypeArray == true || KHasTypeDictionary == true || KHasTypeInteger == true</test>
			<error>
				<message>Entry K in StructElem has type %1 instead of one of types: Array, Dictionary, Integer</message>
				<arguments>
					<argument>KType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-Lang" testNumber="8"/>
			<description>Entry Lang in StructElem shall have type StringText</description>
			<test>containsLang == false || LangHasTypeStringText == true</test>
			<error>
				<message>Entry Lang in StructElem has type %1 instead of type StringText</message>
				<arguments>
					<argument>LangType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-P-Dictionary" testNumber="17"/>
			<description>Entry P with type Dictionary in StructElem shall be one of objects StructElem, StructTreeRoot</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in StructElem is not one of objects StructElem, StructTreeRoot</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-P" testNumber="8"/>
			<description>Entry P in StructElem shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in StructElem has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-P" testNumber="7"/>
			<description>Entry P in StructElem is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in StructElem is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-P-Dictionary" testNumber="10"/>
			<description>Entry P with type Dictionary in StructElem shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in StructElem is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-Pg" testNumber="8"/>
			<description>Entry Pg in StructElem shall have type Dictionary</description>
			<test>containsPg == false || PgHasTypeDictionary == true</test>
			<error>
				<message>Entry Pg in StructElem has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PgType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-Pg-Dictionary" testNumber="10"/>
			<description>Entry Pg with type Dictionary in StructElem shall be indirect</description>
			<test>PgHasTypeDictionary != true || isPgIndirect == true</test>
			<error>
				<message>Entry Pg with type Dictionary in StructElem is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-R" testNumber="8"/>
			<description>Entry R in StructElem shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in StructElem has type %1 instead of type Integer</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-R-Integer" testNumber="14"/>
			<description>Entry R with type Integer in StructElem shall satisfy possible value predicate: fn:Eval(@R &gt;= 0)</description>
			<test>RHasTypeInteger != true || RIntegerValue &gt;= 0</test>
			<error>
				<message>Entry R with type Integer in StructElem does not satisfy possible value predicate: fn:Eval(@R &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-S" testNumber="8"/>
			<description>Entry S in StructElem shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in StructElem has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-S" testNumber="7"/>
			<description>Entry S in StructElem is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in StructElem is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-T" testNumber="8"/>
			<description>Entry T in StructElem shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in StructElem has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-Type" testNumber="8"/>
			<description>Entry Type in StructElem shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in StructElem has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="StructElem-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in StructElem shall have value StructElem</description>
			<test>TypeHasTypeName != true || TypeNameValue == "StructElem"</test>
			<error>
				<message>Entry Type with type Name in StructElem has incorrect value %1 instead of StructElem</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="StructTreeRoot" testNumber="1"/>
			<description>StructTreeRoot shall not contain entries except AF, ClassMap, IDTree, K, ParentTree, ParentTreeNextKey, RoleMap, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'ClassMap' &amp;&amp; elem != 'IDTree' &amp;&amp; elem != 'K' &amp;&amp; elem != 'Namespaces' &amp;&amp; elem != 'ParentTree' &amp;&amp; elem != 'ParentTreeNextKey' &amp;&amp; elem != 'PronunciationLexicon' &amp;&amp; elem != 'RoleMap' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>StructTreeRoot contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'ClassMap' &amp;&amp; elem != 'IDTree' &amp;&amp; elem != 'K' &amp;&amp; elem != 'Namespaces' &amp;&amp; elem != 'ParentTree' &amp;&amp; elem != 'ParentTreeNextKey' &amp;&amp; elem != 'PronunciationLexicon' &amp;&amp; elem != 'RoleMap' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="StructTreeRoot" testNumber="22"/>
			<description>StructTreeRoot shall not contain entries Namespaces, PronunciationLexicon in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'Namespaces' || elem == 'PronunciationLexicon').length == 0</test>
			<error>
				<message>StructTreeRoot contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'Namespaces' || elem == 'PronunciationLexicon').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="StructTreeRoot-AF" testNumber="8"/>
			<description>Entry AF in StructTreeRoot shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in StructTreeRoot has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="StructTreeRoot-AF" testNumber="23"/>
			<description>Entry AF in StructTreeRoot can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in StructTreeRoot is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="StructTreeRoot-ClassMap" testNumber="8"/>
			<description>Entry ClassMap in StructTreeRoot shall have type Dictionary</description>
			<test>containsClassMap == false || ClassMapHasTypeDictionary == true</test>
			<error>
				<message>Entry ClassMap in StructTreeRoot has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ClassMapType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="StructTreeRoot-IDTree" testNumber="8"/>
			<description>Entry IDTree in StructTreeRoot shall have type NameTree</description>
			<test>containsIDTree == false || IDTreeHasTypeNameTree == true</test>
			<error>
				<message>Entry IDTree in StructTreeRoot has type %1 instead of type NameTree</message>
				<arguments>
					<argument>IDTreeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="StructTreeRoot-IDTreeTreeNode" testNumber="8"/>
			<description>Entry IDTreeTreeNode in StructTreeRoot shall have type NameTree</description>
			<test>containsIDTreeTreeNode == false || IDTreeTreeNodeHasTypeNameTree == true</test>
			<error>
				<message>Entry IDTreeTreeNode in StructTreeRoot has type %1 instead of type NameTree</message>
				<arguments>
					<argument>IDTreeTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="StructTreeRoot-K" testNumber="8"/>
			<description>Entry K in StructTreeRoot shall have one of types: Array, Dictionary</description>
			<test>containsK == false || KHasTypeArray == true || KHasTypeDictionary == true</test>
			<error>
				<message>Entry K in StructTreeRoot has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>KType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="StructTreeRoot-ParentTree" testNumber="8"/>
			<description>Entry ParentTree in StructTreeRoot shall have type NumberTree</description>
			<test>containsParentTree == false || ParentTreeHasTypeNumberTree == true</test>
			<error>
				<message>Entry ParentTree in StructTreeRoot has type %1 instead of type NumberTree</message>
				<arguments>
					<argument>ParentTreeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="StructTreeRoot-ParentTreeNextKey" testNumber="8"/>
			<description>Entry ParentTreeNextKey in StructTreeRoot shall have type Integer</description>
			<test>containsParentTreeNextKey == false || ParentTreeNextKeyHasTypeInteger == true</test>
			<error>
				<message>Entry ParentTreeNextKey in StructTreeRoot has type %1 instead of type Integer</message>
				<arguments>
					<argument>ParentTreeNextKeyType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="StructTreeRoot-ParentTreeTreeNode" testNumber="8"/>
			<description>Entry ParentTreeTreeNode in StructTreeRoot shall have type NumberTree</description>
			<test>containsParentTreeTreeNode == false || ParentTreeTreeNodeHasTypeNumberTree == true</test>
			<error>
				<message>Entry ParentTreeTreeNode in StructTreeRoot has type %1 instead of type NumberTree</message>
				<arguments>
					<argument>ParentTreeTreeNodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="StructTreeRoot-RoleMap" testNumber="8"/>
			<description>Entry RoleMap in StructTreeRoot shall have type Dictionary</description>
			<test>containsRoleMap == false || RoleMapHasTypeDictionary == true</test>
			<error>
				<message>Entry RoleMap in StructTreeRoot has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>RoleMapType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="StructTreeRoot-Type" testNumber="8"/>
			<description>Entry Type in StructTreeRoot shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in StructTreeRoot has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="StructTreeRoot-Type" testNumber="7"/>
			<description>Entry Type in StructTreeRoot is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in StructTreeRoot is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="StructTreeRoot-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in StructTreeRoot shall have value StructTreeRoot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "StructTreeRoot"</test>
			<error>
				<message>Entry Type with type Name in StructTreeRoot has incorrect value %1 instead of StructTreeRoot</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNameTreeIDTreeEntry">
			<id specification="ISO_32000_1_7" clause="StructTreeRootNameTreeIDTreeEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in StructTreeRootNameTreeIDTree shall be one of objects StructElem, MarkedContentReference, ObjectReference</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in StructTreeRootNameTreeIDTree is not one of objects StructElem, MarkedContentReference, ObjectReference</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNumberTreeParentTreeEntry">
			<id specification="ISO_32000_1_7" clause="StructTreeRootNumberTreeParentTreeEntry-Dictionary" testNumber="17"/>
			<description>Entry with type Dictionary in StructTreeRootNumberTreeParentTree shall be one of objects StructElem, MarkedContentReference, ObjectReference</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Dictionary in StructTreeRootNumberTreeParentTree is not one of objects StructElem, MarkedContentReference, ObjectReference</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict" testNumber="1"/>
			<description>StructureAttributesDict shall not contain entries except BBox, BackgroundColor, BaselineShift, BlockAlign, BorderColor, BorderStyle, BorderThickness, Checked, ColSpan, Color, ColumnCount, ColumnGap, ColumnWidths, Contents, Desc, EndIndent, GlyphOrientationVertical, Headers, Height, InlineAlign, LineHeight, ListNumbering, O, P, Padding, Placement, Role, RowSpan, RubyAlign, RubyPosition, Scope, SpaceAfter, SpaceBefore, StartIndent, Summary, TBorderStyle, TPadding, TextAlign, TextDecorationColor, TextDecorationThickness, TextDecorationType, TextIndent, Width, WritingMode, checked</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'BackgroundColor' &amp;&amp; elem != 'BaselineShift' &amp;&amp; elem != 'BlockAlign' &amp;&amp; elem != 'BorderColor' &amp;&amp; elem != 'BorderStyle' &amp;&amp; elem != 'BorderThickness' &amp;&amp; elem != 'Checked' &amp;&amp; elem != 'ColSpan' &amp;&amp; elem != 'Color' &amp;&amp; elem != 'ColumnCount' &amp;&amp; elem != 'ColumnGap' &amp;&amp; elem != 'ColumnWidths' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'ContinuedForm' &amp;&amp; elem != 'ContinuedList' &amp;&amp; elem != 'Desc' &amp;&amp; elem != 'EndIndent' &amp;&amp; elem != 'GlyphOrientationVertical' &amp;&amp; elem != 'Headers' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'InlineAlign' &amp;&amp; elem != 'LineHeight' &amp;&amp; elem != 'ListNumbering' &amp;&amp; elem != 'NS' &amp;&amp; elem != 'NoteType' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Padding' &amp;&amp; elem != 'Placement' &amp;&amp; elem != 'Role' &amp;&amp; elem != 'RowSpan' &amp;&amp; elem != 'RubyAlign' &amp;&amp; elem != 'RubyPosition' &amp;&amp; elem != 'Scope' &amp;&amp; elem != 'Short' &amp;&amp; elem != 'SpaceAfter' &amp;&amp; elem != 'SpaceBefore' &amp;&amp; elem != 'StartIndent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Summary' &amp;&amp; elem != 'TBorderStyle' &amp;&amp; elem != 'TPadding' &amp;&amp; elem != 'TextAlign' &amp;&amp; elem != 'TextDecorationColor' &amp;&amp; elem != 'TextDecorationThickness' &amp;&amp; elem != 'TextDecorationType' &amp;&amp; elem != 'TextIndent' &amp;&amp; elem != 'TextPosition' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'WritingMode' &amp;&amp; elem != 'checked' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>StructureAttributesDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'BackgroundColor' &amp;&amp; elem != 'BaselineShift' &amp;&amp; elem != 'BlockAlign' &amp;&amp; elem != 'BorderColor' &amp;&amp; elem != 'BorderStyle' &amp;&amp; elem != 'BorderThickness' &amp;&amp; elem != 'Checked' &amp;&amp; elem != 'ColSpan' &amp;&amp; elem != 'Color' &amp;&amp; elem != 'ColumnCount' &amp;&amp; elem != 'ColumnGap' &amp;&amp; elem != 'ColumnWidths' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'ContinuedForm' &amp;&amp; elem != 'ContinuedList' &amp;&amp; elem != 'Desc' &amp;&amp; elem != 'EndIndent' &amp;&amp; elem != 'GlyphOrientationVertical' &amp;&amp; elem != 'Headers' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'InlineAlign' &amp;&amp; elem != 'LineHeight' &amp;&amp; elem != 'ListNumbering' &amp;&amp; elem != 'NS' &amp;&amp; elem != 'NoteType' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Padding' &amp;&amp; elem != 'Placement' &amp;&amp; elem != 'Role' &amp;&amp; elem != 'RowSpan' &amp;&amp; elem != 'RubyAlign' &amp;&amp; elem != 'RubyPosition' &amp;&amp; elem != 'Scope' &amp;&amp; elem != 'Short' &amp;&amp; elem != 'SpaceAfter' &amp;&amp; elem != 'SpaceBefore' &amp;&amp; elem != 'StartIndent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Summary' &amp;&amp; elem != 'TBorderStyle' &amp;&amp; elem != 'TPadding' &amp;&amp; elem != 'TextAlign' &amp;&amp; elem != 'TextDecorationColor' &amp;&amp; elem != 'TextDecorationThickness' &amp;&amp; elem != 'TextDecorationType' &amp;&amp; elem != 'TextIndent' &amp;&amp; elem != 'TextPosition' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'WritingMode' &amp;&amp; elem != 'checked' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict" testNumber="22"/>
			<description>StructureAttributesDict shall not contain entries ContinuedForm, ContinuedList, NS, NoteType, Short, Subtype, TextPosition, Type in PDF 1.7. These entries appear in later pdf versions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem == 'ContinuedForm' || elem == 'ContinuedList' || elem == 'NS' || elem == 'NoteType' || elem == 'Short' || elem == 'Subtype' || elem == 'TextPosition' || elem == 'Type').length == 0</test>
			<error>
				<message>StructureAttributesDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem == 'ContinuedForm' || elem == 'ContinuedList' || elem == 'NS' || elem == 'NoteType' || elem == 'Short' || elem == 'Subtype' || elem == 'TextPosition' || elem == 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BBox" testNumber="8"/>
			<description>Entry BBox in StructureAttributesDict shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in StructureAttributesDict has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>BBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BBox-Rectangle" testNumber="9"/>
			<description>Entry BBox with type Rectangle in StructureAttributesDict shall satisfy special case: fn:Eval(((@O == Layout) || (@O == Artifact)) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsBBox != true || BBoxHasTypeRectangle != true || (((ONameValue == "Layout") || (ONameValue == "Artifact")) || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BBox with type Rectangle in StructureAttributesDict does not satisfy special case: fn:Eval(((@O == Layout) || (@O == Artifact)) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BackgroundColor" testNumber="8"/>
			<description>Entry BackgroundColor in StructureAttributesDict shall have type Array</description>
			<test>containsBackgroundColor == false || BackgroundColorHasTypeArray == true</test>
			<error>
				<message>Entry BackgroundColor in StructureAttributesDict has type %1 instead of type Array</message>
				<arguments>
					<argument>BackgroundColorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BackgroundColor-Array" testNumber="9"/>
			<description>Entry BackgroundColor with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsBackgroundColor != true || BackgroundColorHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BackgroundColor with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BaselineShift" testNumber="8"/>
			<description>Entry BaselineShift in StructureAttributesDict shall have type Number</description>
			<test>containsBaselineShift == false || BaselineShiftHasTypeNumber == true</test>
			<error>
				<message>Entry BaselineShift in StructureAttributesDict has type %1 instead of type Number</message>
				<arguments>
					<argument>BaselineShiftType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BaselineShift-Number" testNumber="9"/>
			<description>Entry BaselineShift with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsBaselineShift != true || BaselineShiftHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BaselineShift with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BlockAlign" testNumber="8"/>
			<description>Entry BlockAlign in StructureAttributesDict shall have type Name</description>
			<test>containsBlockAlign == false || BlockAlignHasTypeName == true</test>
			<error>
				<message>Entry BlockAlign in StructureAttributesDict has type %1 instead of type Name</message>
				<arguments>
					<argument>BlockAlignType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BlockAlign-Name" testNumber="6"/>
			<description>Entry BlockAlign with type Name in StructureAttributesDict shall have one of values: Before, After, Middle, Justify</description>
			<test>BlockAlignHasTypeName != true || BlockAlignNameValue == "Before" || BlockAlignNameValue == "Middle" || BlockAlignNameValue == "After" || BlockAlignNameValue == "Justify"</test>
			<error>
				<message>Entry BlockAlign with type Name in StructureAttributesDict has incorrect value %1 instead of Before, After, Middle, Justify</message>
				<arguments>
					<argument>BlockAlignNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BlockAlign-Name" testNumber="9"/>
			<description>Entry BlockAlign with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsBlockAlign != true || BlockAlignHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BlockAlign with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BorderColor-Array" testNumber="17"/>
			<description>Entry BorderColor with type Array in StructureAttributesDict shall be one of objects ArrayOf_4BorderColorArrays, ArrayOf_3RGBNumbers</description>
			<test>BorderColorHasTypeArray != true || BorderColor_size == 1</test>
			<error>
				<message>Entry BorderColor with type Array in StructureAttributesDict is not one of objects ArrayOf_4BorderColorArrays, ArrayOf_3RGBNumbers</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BorderColor" testNumber="8"/>
			<description>Entry BorderColor in StructureAttributesDict shall have type Array</description>
			<test>containsBorderColor == false || BorderColorHasTypeArray == true</test>
			<error>
				<message>Entry BorderColor in StructureAttributesDict has type %1 instead of type Array</message>
				<arguments>
					<argument>BorderColorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BorderColor-Array" testNumber="9"/>
			<description>Entry BorderColor with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsBorderColor != true || BorderColorHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BorderColor with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BorderStyle" testNumber="8"/>
			<description>Entry BorderStyle in StructureAttributesDict shall have one of types: Array, Name</description>
			<test>containsBorderStyle == false || BorderStyleHasTypeArray == true || BorderStyleHasTypeName == true</test>
			<error>
				<message>Entry BorderStyle in StructureAttributesDict has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>BorderStyleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BorderStyle-Array" testNumber="9"/>
			<description>Entry BorderStyle with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsBorderStyle != true || BorderStyleHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BorderStyle with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BorderStyle-Name" testNumber="6"/>
			<description>Entry BorderStyle with type Name in StructureAttributesDict shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>BorderStyleHasTypeName != true || BorderStyleNameValue == "None" || BorderStyleNameValue == "Hidden" || BorderStyleNameValue == "Dotted" || BorderStyleNameValue == "Dashed" || BorderStyleNameValue == "Solid" || BorderStyleNameValue == "Double" || BorderStyleNameValue == "Groove" || BorderStyleNameValue == "Ridge" || BorderStyleNameValue == "Inset" || BorderStyleNameValue == "Outset"</test>
			<error>
				<message>Entry BorderStyle with type Name in StructureAttributesDict has incorrect value %1 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>BorderStyleNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BorderStyle-Name" testNumber="9"/>
			<description>Entry BorderStyle with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsBorderStyle != true || BorderStyleHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BorderStyle with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BorderThickness" testNumber="8"/>
			<description>Entry BorderThickness in StructureAttributesDict shall have one of types: Array, Number</description>
			<test>containsBorderThickness == false || BorderThicknessHasTypeArray == true || BorderThicknessHasTypeNumber == true</test>
			<error>
				<message>Entry BorderThickness in StructureAttributesDict has type %1 instead of one of types: Array, Number</message>
				<arguments>
					<argument>BorderThicknessType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BorderThickness-Array" testNumber="9"/>
			<description>Entry BorderThickness with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsBorderThickness != true || BorderThicknessHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BorderThickness with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-BorderThickness-Number" testNumber="9"/>
			<description>Entry BorderThickness with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsBorderThickness != true || BorderThicknessHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BorderThickness with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Checked" testNumber="8"/>
			<description>Entry Checked in StructureAttributesDict shall have type Name</description>
			<test>containsChecked == false || CheckedHasTypeName == true</test>
			<error>
				<message>Entry Checked in StructureAttributesDict has type %1 instead of type Name</message>
				<arguments>
					<argument>CheckedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Checked-Name" testNumber="6"/>
			<description>Entry Checked with type Name in StructureAttributesDict shall have one of values: neutral, off, on</description>
			<test>CheckedHasTypeName != true || CheckedNameValue == "on" || CheckedNameValue == "off" || CheckedNameValue == "neutral"</test>
			<error>
				<message>Entry Checked with type Name in StructureAttributesDict has incorrect value %1 instead of neutral, off, on</message>
				<arguments>
					<argument>CheckedNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Checked-Name" testNumber="9"/>
			<description>Entry Checked with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</description>
			<test>containsChecked != true || CheckedHasTypeName != true || ((ONameValue == "PrintField") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry Checked with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-ColSpan" testNumber="8"/>
			<description>Entry ColSpan in StructureAttributesDict shall have type Integer</description>
			<test>containsColSpan == false || ColSpanHasTypeInteger == true</test>
			<error>
				<message>Entry ColSpan in StructureAttributesDict has type %1 instead of type Integer</message>
				<arguments>
					<argument>ColSpanType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-ColSpan-Integer" testNumber="9"/>
			<description>Entry ColSpan with type Integer in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</description>
			<test>containsColSpan != true || ColSpanHasTypeInteger != true || ((ONameValue == "Table") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry ColSpan with type Integer in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Color" testNumber="8"/>
			<description>Entry Color in StructureAttributesDict shall have type Array</description>
			<test>containsColor == false || ColorHasTypeArray == true</test>
			<error>
				<message>Entry Color in StructureAttributesDict has type %1 instead of type Array</message>
				<arguments>
					<argument>ColorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Color-Array" testNumber="9"/>
			<description>Entry Color with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsColor != true || ColorHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Color with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-ColumnCount" testNumber="8"/>
			<description>Entry ColumnCount in StructureAttributesDict shall have type Integer</description>
			<test>containsColumnCount == false || ColumnCountHasTypeInteger == true</test>
			<error>
				<message>Entry ColumnCount in StructureAttributesDict has type %1 instead of type Integer</message>
				<arguments>
					<argument>ColumnCountType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-ColumnCount-Integer" testNumber="9"/>
			<description>Entry ColumnCount with type Integer in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsColumnCount != true || ColumnCountHasTypeInteger != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry ColumnCount with type Integer in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-ColumnGap" testNumber="8"/>
			<description>Entry ColumnGap in StructureAttributesDict shall have one of types: Array, Number</description>
			<test>containsColumnGap == false || ColumnGapHasTypeArray == true || ColumnGapHasTypeNumber == true</test>
			<error>
				<message>Entry ColumnGap in StructureAttributesDict has type %1 instead of one of types: Array, Number</message>
				<arguments>
					<argument>ColumnGapType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-ColumnGap-Array" testNumber="9"/>
			<description>Entry ColumnGap with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsColumnGap != true || ColumnGapHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry ColumnGap with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-ColumnGap-Number" testNumber="9"/>
			<description>Entry ColumnGap with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsColumnGap != true || ColumnGapHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry ColumnGap with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-ColumnWidths" testNumber="8"/>
			<description>Entry ColumnWidths in StructureAttributesDict shall have one of types: Array, Number</description>
			<test>containsColumnWidths == false || ColumnWidthsHasTypeArray == true || ColumnWidthsHasTypeNumber == true</test>
			<error>
				<message>Entry ColumnWidths in StructureAttributesDict has type %1 instead of one of types: Array, Number</message>
				<arguments>
					<argument>ColumnWidthsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-ColumnWidths-Array" testNumber="9"/>
			<description>Entry ColumnWidths with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsColumnWidths != true || ColumnWidthsHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry ColumnWidths with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-ColumnWidths-Number" testNumber="9"/>
			<description>Entry ColumnWidths with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsColumnWidths != true || ColumnWidthsHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry ColumnWidths with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Contents" testNumber="8"/>
			<description>Entry Contents in StructureAttributesDict shall have one of types: Array, StringText</description>
			<test>containsContents == false || ContentsHasTypeArray == true || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in StructureAttributesDict has type %1 instead of one of types: Array, StringText</message>
				<arguments>
					<argument>ContentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Contents" testNumber="23"/>
			<description>Entry Contents in StructureAttributesDict can only be present, if satisfy predicate fn:Extension(ADBE_Extn3)</description>
			<test>containsContents == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Contents in StructureAttributesDict is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Contents-Array" testNumber="9"/>
			<description>Entry Contents with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Artifact) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsContents != true || ContentsHasTypeArray != true || ((ONameValue == "Artifact") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Contents with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Artifact) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Contents-StringText" testNumber="9"/>
			<description>Entry Contents with type StringText in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Artifact) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsContents != true || ContentsHasTypeStringText != true || ((ONameValue == "Artifact") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Contents with type StringText in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Artifact) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Desc" testNumber="8"/>
			<description>Entry Desc in StructureAttributesDict shall have type StringText</description>
			<test>containsDesc == false || DescHasTypeStringText == true</test>
			<error>
				<message>Entry Desc in StructureAttributesDict has type %1 instead of type StringText</message>
				<arguments>
					<argument>DescType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Desc-StringText" testNumber="9"/>
			<description>Entry Desc with type StringText in StructureAttributesDict shall satisfy special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</description>
			<test>containsDesc != true || DescHasTypeStringText != true || ((ONameValue == "PrintField") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry Desc with type StringText in StructureAttributesDict does not satisfy special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-EndIndent" testNumber="8"/>
			<description>Entry EndIndent in StructureAttributesDict shall have type Number</description>
			<test>containsEndIndent == false || EndIndentHasTypeNumber == true</test>
			<error>
				<message>Entry EndIndent in StructureAttributesDict has type %1 instead of type Number</message>
				<arguments>
					<argument>EndIndentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-EndIndent-Number" testNumber="9"/>
			<description>Entry EndIndent with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsEndIndent != true || EndIndentHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry EndIndent with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-GlyphOrientationVertical" testNumber="8"/>
			<description>Entry GlyphOrientationVertical in StructureAttributesDict shall have one of types: Integer, Name</description>
			<test>containsGlyphOrientationVertical == false || GlyphOrientationVerticalHasTypeInteger == true || GlyphOrientationVerticalHasTypeName == true</test>
			<error>
				<message>Entry GlyphOrientationVertical in StructureAttributesDict has type %1 instead of one of types: Integer, Name</message>
				<arguments>
					<argument>GlyphOrientationVerticalType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-GlyphOrientationVertical-Integer" testNumber="6"/>
			<description>Entry GlyphOrientationVertical with type Integer in StructureAttributesDict shall have one of values: 0, -90, 90, -180, 180, 270, 360</description>
			<test>GlyphOrientationVerticalHasTypeInteger != true || GlyphOrientationVerticalIntegerValue == -180 || GlyphOrientationVerticalIntegerValue == -90 || GlyphOrientationVerticalIntegerValue == 0 || GlyphOrientationVerticalIntegerValue == 90 || GlyphOrientationVerticalIntegerValue == 180 || GlyphOrientationVerticalIntegerValue == 270 || GlyphOrientationVerticalIntegerValue == 360</test>
			<error>
				<message>Entry GlyphOrientationVertical with type Integer in StructureAttributesDict has incorrect value %1 instead of 0, -90, 90, -180, 180, 270, 360</message>
				<arguments>
					<argument>GlyphOrientationVerticalIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-GlyphOrientationVertical-Integer" testNumber="9"/>
			<description>Entry GlyphOrientationVertical with type Integer in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsGlyphOrientationVertical != true || GlyphOrientationVerticalHasTypeInteger != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry GlyphOrientationVertical with type Integer in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-GlyphOrientationVertical-Name" testNumber="6"/>
			<description>Entry GlyphOrientationVertical with type Name in StructureAttributesDict shall have value Auto</description>
			<test>GlyphOrientationVerticalHasTypeName != true || GlyphOrientationVerticalNameValue == "Auto"</test>
			<error>
				<message>Entry GlyphOrientationVertical with type Name in StructureAttributesDict has incorrect value %1 instead of Auto</message>
				<arguments>
					<argument>GlyphOrientationVerticalNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-GlyphOrientationVertical-Name" testNumber="9"/>
			<description>Entry GlyphOrientationVertical with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsGlyphOrientationVertical != true || GlyphOrientationVerticalHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry GlyphOrientationVertical with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Headers" testNumber="8"/>
			<description>Entry Headers in StructureAttributesDict shall have type Array</description>
			<test>containsHeaders == false || HeadersHasTypeArray == true</test>
			<error>
				<message>Entry Headers in StructureAttributesDict has type %1 instead of type Array</message>
				<arguments>
					<argument>HeadersType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Headers-Array" testNumber="9"/>
			<description>Entry Headers with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</description>
			<test>containsHeaders != true || HeadersHasTypeArray != true || ((ONameValue == "Table") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry Headers with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Height" testNumber="8"/>
			<description>Entry Height in StructureAttributesDict shall have one of types: Name, Number</description>
			<test>containsHeight == false || HeightHasTypeName == true || HeightHasTypeNumber == true</test>
			<error>
				<message>Entry Height in StructureAttributesDict has type %1 instead of one of types: Name, Number</message>
				<arguments>
					<argument>HeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Height-Name" testNumber="9"/>
			<description>Entry Height with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsHeight != true || HeightHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Height with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Height-Number" testNumber="9"/>
			<description>Entry Height with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsHeight != true || HeightHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Height with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-InlineAlign" testNumber="8"/>
			<description>Entry InlineAlign in StructureAttributesDict shall have type Name</description>
			<test>containsInlineAlign == false || InlineAlignHasTypeName == true</test>
			<error>
				<message>Entry InlineAlign in StructureAttributesDict has type %1 instead of type Name</message>
				<arguments>
					<argument>InlineAlignType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-InlineAlign-Name" testNumber="6"/>
			<description>Entry InlineAlign with type Name in StructureAttributesDict shall have one of values: Center, Start, End</description>
			<test>InlineAlignHasTypeName != true || InlineAlignNameValue == "Start" || InlineAlignNameValue == "Center" || InlineAlignNameValue == "End"</test>
			<error>
				<message>Entry InlineAlign with type Name in StructureAttributesDict has incorrect value %1 instead of Center, Start, End</message>
				<arguments>
					<argument>InlineAlignNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-InlineAlign-Name" testNumber="9"/>
			<description>Entry InlineAlign with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsInlineAlign != true || InlineAlignHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry InlineAlign with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-LineHeight" testNumber="8"/>
			<description>Entry LineHeight in StructureAttributesDict shall have one of types: Name, Number</description>
			<test>containsLineHeight == false || LineHeightHasTypeName == true || LineHeightHasTypeNumber == true</test>
			<error>
				<message>Entry LineHeight in StructureAttributesDict has type %1 instead of one of types: Name, Number</message>
				<arguments>
					<argument>LineHeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-LineHeight-Name" testNumber="6"/>
			<description>Entry LineHeight with type Name in StructureAttributesDict shall have one of values: Auto, Normal</description>
			<test>LineHeightHasTypeName != true || LineHeightNameValue == "Normal" || LineHeightNameValue == "Auto"</test>
			<error>
				<message>Entry LineHeight with type Name in StructureAttributesDict has incorrect value %1 instead of Auto, Normal</message>
				<arguments>
					<argument>LineHeightNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-LineHeight-Name" testNumber="9"/>
			<description>Entry LineHeight with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsLineHeight != true || LineHeightHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry LineHeight with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-LineHeight-Number" testNumber="9"/>
			<description>Entry LineHeight with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsLineHeight != true || LineHeightHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry LineHeight with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-ListNumbering" testNumber="8"/>
			<description>Entry ListNumbering in StructureAttributesDict shall have type Name</description>
			<test>containsListNumbering == false || ListNumberingHasTypeName == true</test>
			<error>
				<message>Entry ListNumbering in StructureAttributesDict has type %1 instead of type Name</message>
				<arguments>
					<argument>ListNumberingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-ListNumbering-Name" testNumber="6"/>
			<description>Entry ListNumbering with type Name in StructureAttributesDict shall have one of values: Circle, Decimal, Disc, UpperRoman, LowerRoman, UpperAlpha, LowerAlpha, Ordered, Square, None</description>
			<test>ListNumberingHasTypeName != true || ListNumberingNameValue == "None" || ListNumberingNameValue == "Disc" || ListNumberingNameValue == "Circle" || ListNumberingNameValue == "Square" || ListNumberingNameValue == "Ordered" || ListNumberingNameValue == "Decimal" || ListNumberingNameValue == "UpperRoman" || ListNumberingNameValue == "LowerRoman" || ListNumberingNameValue == "UpperAlpha" || ListNumberingNameValue == "LowerAlpha"</test>
			<error>
				<message>Entry ListNumbering with type Name in StructureAttributesDict has incorrect value %1 instead of Circle, Decimal, Disc, UpperRoman, LowerRoman, UpperAlpha, LowerAlpha, Ordered, Square, None</message>
				<arguments>
					<argument>ListNumberingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-ListNumbering-Name" testNumber="9"/>
			<description>Entry ListNumbering with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == List) || ((@O != Layout) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsListNumbering != true || ListNumberingHasTypeName != true || ((ONameValue == "List") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry ListNumbering with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == List) || ((@O != Layout) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-O" testNumber="8"/>
			<description>Entry O in StructureAttributesDict shall have type Name</description>
			<test>containsO == false || OHasTypeName == true</test>
			<error>
				<message>Entry O in StructureAttributesDict has type %1 instead of type Name</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-O" testNumber="7"/>
			<description>Entry O in StructureAttributesDict is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in StructureAttributesDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-P" testNumber="8"/>
			<description>Entry P in StructureAttributesDict shall have type Array</description>
			<test>containsP == false || PHasTypeArray == true</test>
			<error>
				<message>Entry P in StructureAttributesDict has type %1 instead of type Array</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-P" testNumber="11"/>
			<description>Entry P in StructureAttributesDict is required, when @O == UserProperties</description>
			<test>containsP == true || (ONameValue != "UserProperties")</test>
			<error>
				<message>Entry P in StructureAttributesDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Padding" testNumber="8"/>
			<description>Entry Padding in StructureAttributesDict shall have one of types: Array, Number</description>
			<test>containsPadding == false || PaddingHasTypeArray == true || PaddingHasTypeNumber == true</test>
			<error>
				<message>Entry Padding in StructureAttributesDict has type %1 instead of one of types: Array, Number</message>
				<arguments>
					<argument>PaddingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Padding-Array" testNumber="9"/>
			<description>Entry Padding with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsPadding != true || PaddingHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Padding with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Padding-Number" testNumber="9"/>
			<description>Entry Padding with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsPadding != true || PaddingHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Padding with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Placement" testNumber="8"/>
			<description>Entry Placement in StructureAttributesDict shall have type Name</description>
			<test>containsPlacement == false || PlacementHasTypeName == true</test>
			<error>
				<message>Entry Placement in StructureAttributesDict has type %1 instead of type Name</message>
				<arguments>
					<argument>PlacementType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Placement-Name" testNumber="6"/>
			<description>Entry Placement with type Name in StructureAttributesDict shall have one of values: Before, Start, Block, End, Inline</description>
			<test>PlacementHasTypeName != true || PlacementNameValue == "Block" || PlacementNameValue == "Before" || PlacementNameValue == "Start" || PlacementNameValue == "End" || PlacementNameValue == "Inline"</test>
			<error>
				<message>Entry Placement with type Name in StructureAttributesDict has incorrect value %1 instead of Before, Start, Block, End, Inline</message>
				<arguments>
					<argument>PlacementNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Placement-Name" testNumber="9"/>
			<description>Entry Placement with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsPlacement != true || PlacementHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Placement with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Role" testNumber="8"/>
			<description>Entry Role in StructureAttributesDict shall have type Name</description>
			<test>containsRole == false || RoleHasTypeName == true</test>
			<error>
				<message>Entry Role in StructureAttributesDict has type %1 instead of type Name</message>
				<arguments>
					<argument>RoleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Role-Name" testNumber="6"/>
			<description>Entry Role with type Name in StructureAttributesDict shall have one of values: rb, pb, tv, lb, cb</description>
			<test>RoleHasTypeName != true || RoleNameValue == "rb" || RoleNameValue == "cb" || RoleNameValue == "pb" || RoleNameValue == "tv" || RoleNameValue == "lb"</test>
			<error>
				<message>Entry Role with type Name in StructureAttributesDict has incorrect value %1 instead of rb, pb, tv, lb, cb</message>
				<arguments>
					<argument>RoleNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Role-Name" testNumber="9"/>
			<description>Entry Role with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</description>
			<test>containsRole != true || RoleHasTypeName != true || ((ONameValue == "PrintField") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry Role with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-RowSpan" testNumber="8"/>
			<description>Entry RowSpan in StructureAttributesDict shall have type Integer</description>
			<test>containsRowSpan == false || RowSpanHasTypeInteger == true</test>
			<error>
				<message>Entry RowSpan in StructureAttributesDict has type %1 instead of type Integer</message>
				<arguments>
					<argument>RowSpanType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-RowSpan-Integer" testNumber="9"/>
			<description>Entry RowSpan with type Integer in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</description>
			<test>containsRowSpan != true || RowSpanHasTypeInteger != true || ((ONameValue == "Table") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry RowSpan with type Integer in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-RubyAlign" testNumber="8"/>
			<description>Entry RubyAlign in StructureAttributesDict shall have type Name</description>
			<test>containsRubyAlign == false || RubyAlignHasTypeName == true</test>
			<error>
				<message>Entry RubyAlign in StructureAttributesDict has type %1 instead of type Name</message>
				<arguments>
					<argument>RubyAlignType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-RubyAlign-Name" testNumber="6"/>
			<description>Entry RubyAlign with type Name in StructureAttributesDict shall have one of values: Center, Start, End, Distribute, Justify</description>
			<test>RubyAlignHasTypeName != true || RubyAlignNameValue == "Start" || RubyAlignNameValue == "Center" || RubyAlignNameValue == "End" || RubyAlignNameValue == "Justify" || RubyAlignNameValue == "Distribute"</test>
			<error>
				<message>Entry RubyAlign with type Name in StructureAttributesDict has incorrect value %1 instead of Center, Start, End, Distribute, Justify</message>
				<arguments>
					<argument>RubyAlignNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-RubyAlign-Name" testNumber="9"/>
			<description>Entry RubyAlign with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsRubyAlign != true || RubyAlignHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry RubyAlign with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-RubyPosition" testNumber="8"/>
			<description>Entry RubyPosition in StructureAttributesDict shall have type Name</description>
			<test>containsRubyPosition == false || RubyPositionHasTypeName == true</test>
			<error>
				<message>Entry RubyPosition in StructureAttributesDict has type %1 instead of type Name</message>
				<arguments>
					<argument>RubyPositionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-RubyPosition-Name" testNumber="6"/>
			<description>Entry RubyPosition with type Name in StructureAttributesDict shall have one of values: Before, Warichu, After, Inline</description>
			<test>RubyPositionHasTypeName != true || RubyPositionNameValue == "Before" || RubyPositionNameValue == "After" || RubyPositionNameValue == "Warichu" || RubyPositionNameValue == "Inline"</test>
			<error>
				<message>Entry RubyPosition with type Name in StructureAttributesDict has incorrect value %1 instead of Before, Warichu, After, Inline</message>
				<arguments>
					<argument>RubyPositionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-RubyPosition-Name" testNumber="9"/>
			<description>Entry RubyPosition with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsRubyPosition != true || RubyPositionHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry RubyPosition with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Scope" testNumber="8"/>
			<description>Entry Scope in StructureAttributesDict shall have type Name</description>
			<test>containsScope == false || ScopeHasTypeName == true</test>
			<error>
				<message>Entry Scope in StructureAttributesDict has type %1 instead of type Name</message>
				<arguments>
					<argument>ScopeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Scope-Name" testNumber="6"/>
			<description>Entry Scope with type Name in StructureAttributesDict shall have one of values: Column, Row, Both</description>
			<test>ScopeHasTypeName != true || ScopeNameValue == "Row" || ScopeNameValue == "Column" || ScopeNameValue == "Both"</test>
			<error>
				<message>Entry Scope with type Name in StructureAttributesDict has incorrect value %1 instead of Column, Row, Both</message>
				<arguments>
					<argument>ScopeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Scope-Name" testNumber="9"/>
			<description>Entry Scope with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</description>
			<test>containsScope != true || ScopeHasTypeName != true || ((ONameValue == "Table") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry Scope with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-SpaceAfter" testNumber="8"/>
			<description>Entry SpaceAfter in StructureAttributesDict shall have type Number</description>
			<test>containsSpaceAfter == false || SpaceAfterHasTypeNumber == true</test>
			<error>
				<message>Entry SpaceAfter in StructureAttributesDict has type %1 instead of type Number</message>
				<arguments>
					<argument>SpaceAfterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-SpaceAfter-Number" testNumber="9"/>
			<description>Entry SpaceAfter with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsSpaceAfter != true || SpaceAfterHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry SpaceAfter with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-SpaceBefore" testNumber="8"/>
			<description>Entry SpaceBefore in StructureAttributesDict shall have type Number</description>
			<test>containsSpaceBefore == false || SpaceBeforeHasTypeNumber == true</test>
			<error>
				<message>Entry SpaceBefore in StructureAttributesDict has type %1 instead of type Number</message>
				<arguments>
					<argument>SpaceBeforeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-SpaceBefore-Number" testNumber="9"/>
			<description>Entry SpaceBefore with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsSpaceBefore != true || SpaceBeforeHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry SpaceBefore with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-StartIndent" testNumber="8"/>
			<description>Entry StartIndent in StructureAttributesDict shall have type Number</description>
			<test>containsStartIndent == false || StartIndentHasTypeNumber == true</test>
			<error>
				<message>Entry StartIndent in StructureAttributesDict has type %1 instead of type Number</message>
				<arguments>
					<argument>StartIndentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-StartIndent-Number" testNumber="9"/>
			<description>Entry StartIndent with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsStartIndent != true || StartIndentHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry StartIndent with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Summary" testNumber="8"/>
			<description>Entry Summary in StructureAttributesDict shall have type StringText</description>
			<test>containsSummary == false || SummaryHasTypeStringText == true</test>
			<error>
				<message>Entry Summary in StructureAttributesDict has type %1 instead of type StringText</message>
				<arguments>
					<argument>SummaryType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Summary-StringText" testNumber="9"/>
			<description>Entry Summary with type StringText in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</description>
			<test>containsSummary != true || SummaryHasTypeStringText != true || ((ONameValue == "Table") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry Summary with type StringText in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TBorderStyle" testNumber="8"/>
			<description>Entry TBorderStyle in StructureAttributesDict shall have one of types: Array, Name</description>
			<test>containsTBorderStyle == false || TBorderStyleHasTypeArray == true || TBorderStyleHasTypeName == true</test>
			<error>
				<message>Entry TBorderStyle in StructureAttributesDict has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>TBorderStyleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TBorderStyle-Array" testNumber="9"/>
			<description>Entry TBorderStyle with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsTBorderStyle != true || TBorderStyleHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TBorderStyle with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TBorderStyle-Name" testNumber="6"/>
			<description>Entry TBorderStyle with type Name in StructureAttributesDict shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>TBorderStyleHasTypeName != true || TBorderStyleNameValue == "None" || TBorderStyleNameValue == "Hidden" || TBorderStyleNameValue == "Dotted" || TBorderStyleNameValue == "Dashed" || TBorderStyleNameValue == "Solid" || TBorderStyleNameValue == "Double" || TBorderStyleNameValue == "Groove" || TBorderStyleNameValue == "Ridge" || TBorderStyleNameValue == "Inset" || TBorderStyleNameValue == "Outset"</test>
			<error>
				<message>Entry TBorderStyle with type Name in StructureAttributesDict has incorrect value %1 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>TBorderStyleNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TBorderStyle-Name" testNumber="9"/>
			<description>Entry TBorderStyle with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsTBorderStyle != true || TBorderStyleHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TBorderStyle with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TPadding" testNumber="8"/>
			<description>Entry TPadding in StructureAttributesDict shall have one of types: Array, Integer</description>
			<test>containsTPadding == false || TPaddingHasTypeArray == true || TPaddingHasTypeInteger == true</test>
			<error>
				<message>Entry TPadding in StructureAttributesDict has type %1 instead of one of types: Array, Integer</message>
				<arguments>
					<argument>TPaddingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TPadding-Array" testNumber="9"/>
			<description>Entry TPadding with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsTPadding != true || TPaddingHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TPadding with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TPadding-Integer" testNumber="9"/>
			<description>Entry TPadding with type Integer in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsTPadding != true || TPaddingHasTypeInteger != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TPadding with type Integer in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TextAlign" testNumber="8"/>
			<description>Entry TextAlign in StructureAttributesDict shall have type Name</description>
			<test>containsTextAlign == false || TextAlignHasTypeName == true</test>
			<error>
				<message>Entry TextAlign in StructureAttributesDict has type %1 instead of type Name</message>
				<arguments>
					<argument>TextAlignType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TextAlign-Name" testNumber="6"/>
			<description>Entry TextAlign with type Name in StructureAttributesDict shall have one of values: Center, Start, End, Justify</description>
			<test>TextAlignHasTypeName != true || TextAlignNameValue == "Start" || TextAlignNameValue == "Center" || TextAlignNameValue == "End" || TextAlignNameValue == "Justify"</test>
			<error>
				<message>Entry TextAlign with type Name in StructureAttributesDict has incorrect value %1 instead of Center, Start, End, Justify</message>
				<arguments>
					<argument>TextAlignNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TextAlign-Name" testNumber="9"/>
			<description>Entry TextAlign with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsTextAlign != true || TextAlignHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TextAlign with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TextDecorationColor" testNumber="8"/>
			<description>Entry TextDecorationColor in StructureAttributesDict shall have type Array</description>
			<test>containsTextDecorationColor == false || TextDecorationColorHasTypeArray == true</test>
			<error>
				<message>Entry TextDecorationColor in StructureAttributesDict has type %1 instead of type Array</message>
				<arguments>
					<argument>TextDecorationColorType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TextDecorationColor-Array" testNumber="9"/>
			<description>Entry TextDecorationColor with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsTextDecorationColor != true || TextDecorationColorHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TextDecorationColor with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TextDecorationThickness" testNumber="8"/>
			<description>Entry TextDecorationThickness in StructureAttributesDict shall have type Number</description>
			<test>containsTextDecorationThickness == false || TextDecorationThicknessHasTypeNumber == true</test>
			<error>
				<message>Entry TextDecorationThickness in StructureAttributesDict has type %1 instead of type Number</message>
				<arguments>
					<argument>TextDecorationThicknessType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TextDecorationThickness-Number" testNumber="9"/>
			<description>Entry TextDecorationThickness with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsTextDecorationThickness != true || TextDecorationThicknessHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TextDecorationThickness with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TextDecorationType" testNumber="8"/>
			<description>Entry TextDecorationType in StructureAttributesDict shall have type Name</description>
			<test>containsTextDecorationType == false || TextDecorationTypeHasTypeName == true</test>
			<error>
				<message>Entry TextDecorationType in StructureAttributesDict has type %1 instead of type Name</message>
				<arguments>
					<argument>TextDecorationTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TextDecorationType-Name" testNumber="6"/>
			<description>Entry TextDecorationType with type Name in StructureAttributesDict shall have one of values: LineThrough, Overline, Underline, None</description>
			<test>TextDecorationTypeHasTypeName != true || TextDecorationTypeNameValue == "None" || TextDecorationTypeNameValue == "Underline" || TextDecorationTypeNameValue == "Overline" || TextDecorationTypeNameValue == "LineThrough"</test>
			<error>
				<message>Entry TextDecorationType with type Name in StructureAttributesDict has incorrect value %1 instead of LineThrough, Overline, Underline, None</message>
				<arguments>
					<argument>TextDecorationTypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TextDecorationType-Name" testNumber="9"/>
			<description>Entry TextDecorationType with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsTextDecorationType != true || TextDecorationTypeHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TextDecorationType with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TextIndent" testNumber="8"/>
			<description>Entry TextIndent in StructureAttributesDict shall have type Number</description>
			<test>containsTextIndent == false || TextIndentHasTypeNumber == true</test>
			<error>
				<message>Entry TextIndent in StructureAttributesDict has type %1 instead of type Number</message>
				<arguments>
					<argument>TextIndentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-TextIndent-Number" testNumber="9"/>
			<description>Entry TextIndent with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsTextIndent != true || TextIndentHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TextIndent with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Width" testNumber="8"/>
			<description>Entry Width in StructureAttributesDict shall have one of types: Name, Number</description>
			<test>containsWidth == false || WidthHasTypeName == true || WidthHasTypeNumber == true</test>
			<error>
				<message>Entry Width in StructureAttributesDict has type %1 instead of one of types: Name, Number</message>
				<arguments>
					<argument>WidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Width-Name" testNumber="9"/>
			<description>Entry Width with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsWidth != true || WidthHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Width with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-Width-Number" testNumber="9"/>
			<description>Entry Width with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsWidth != true || WidthHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Width with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-WritingMode" testNumber="8"/>
			<description>Entry WritingMode in StructureAttributesDict shall have type Name</description>
			<test>containsWritingMode == false || WritingModeHasTypeName == true</test>
			<error>
				<message>Entry WritingMode in StructureAttributesDict has type %1 instead of type Name</message>
				<arguments>
					<argument>WritingModeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-WritingMode-Name" testNumber="6"/>
			<description>Entry WritingMode with type Name in StructureAttributesDict shall have one of values: LrTb, RlTb, TbRl</description>
			<test>WritingModeHasTypeName != true || WritingModeNameValue == "LrTb" || WritingModeNameValue == "RlTb" || WritingModeNameValue == "TbRl"</test>
			<error>
				<message>Entry WritingMode with type Name in StructureAttributesDict has incorrect value %1 instead of LrTb, RlTb, TbRl</message>
				<arguments>
					<argument>WritingModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-WritingMode-Name" testNumber="9"/>
			<description>Entry WritingMode with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>containsWritingMode != true || WritingModeHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry WritingMode with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-checked" testNumber="8"/>
			<description>Entry checked in StructureAttributesDict shall have type Name</description>
			<test>containschecked == false || checkedHasTypeName == true</test>
			<error>
				<message>Entry checked in StructureAttributesDict has type %1 instead of type Name</message>
				<arguments>
					<argument>checkedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-checked-Name" testNumber="6"/>
			<description>Entry checked with type Name in StructureAttributesDict shall have one of values: neutral, off, on</description>
			<test>checkedHasTypeName != true || checkedNameValue == "on" || checkedNameValue == "off" || checkedNameValue == "neutral"</test>
			<error>
				<message>Entry checked with type Name in StructureAttributesDict has incorrect value %1 instead of neutral, off, on</message>
				<arguments>
					<argument>checkedNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="StructureAttributesDict-checked-Name" testNumber="9"/>
			<description>Entry checked with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</description>
			<test>containschecked != true || checkedHasTypeName != true || ((ONameValue == "PrintField") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry checked with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AStyleDict">
			<id specification="ISO_32000_1_7" clause="StyleDict" testNumber="1"/>
			<description>StyleDict shall not contain entries except Panose</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Panose' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>StyleDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Panose' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStyleDict">
			<id specification="ISO_32000_1_7" clause="StyleDict-Panose" testNumber="8"/>
			<description>Entry Panose in StyleDict shall have type StringByte</description>
			<test>containsPanose == false || PanoseHasTypeStringByte == true</test>
			<error>
				<message>Entry Panose in StyleDict has type %1 instead of type StringByte</message>
				<arguments>
					<argument>PanoseType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStyleDict">
			<id specification="ISO_32000_1_7" clause="StyleDict-Panose-StringByte" testNumber="9"/>
			<description>Entry Panose with type StringByte in StyleDict shall satisfy special case: fn:Eval(fn:StringLength(Panose) == 12)</description>
			<test>PanoseHasTypeStringByte != true || (PanoseStringSize == 12)</test>
			<error>
				<message>Entry Panose with type StringByte in StyleDict does not satisfy special case: fn:Eval(fn:StringLength(Panose) == 12)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ASubjectDNEntry">
			<id specification="ISO_32000_1_7" clause="SubjectDNEntry" testNumber="8"/>
			<description>Entry in SubjectDN shall have type StringText</description>
			<test>HasTypeStringText == true</test>
			<error>
				<message>Entry %keyName% in SubjectDN has type %1 instead of type StringText</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="Target" testNumber="1"/>
			<description>Target shall not contain entries except A, N, P, R, T</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Target contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="Target-A" testNumber="8"/>
			<description>Entry A in Target shall have one of types: Integer, StringText</description>
			<test>containsA == false || AHasTypeInteger == true || AHasTypeStringText == true</test>
			<error>
				<message>Entry A in Target has type %1 instead of one of types: Integer, StringText</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="Target-A" testNumber="11"/>
			<description>Entry A in Target is required, when (@R == C) &amp;&amp; fn:IsPresent(P)</description>
			<test>containsA == true || ((RNameValue != "C") || (containsP != true))</test>
			<error>
				<message>Entry A in Target is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="Target-A-Integer" testNumber="14"/>
			<description>Entry A with type Integer in Target shall satisfy possible value predicate: fn:Eval((@A &gt;= 0) &amp;&amp; (@A &lt; fn:ArrayLength(fn:PageProperty(@P, Annots))))</description>
			<test>AHasTypeInteger != true || (AIntegerValue &gt;= 0) &amp;&amp; (pagePAnnotsHasTypeArray == false || (AIntegerValue &lt; pagePAnnotsArraySize))</test>
			<error>
				<message>Entry A with type Integer in Target does not satisfy possible value predicate: fn:Eval((@A &gt;= 0) &amp;&amp; (@A &lt; fn:ArrayLength(fn:PageProperty(@P, Annots))))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="Target-N" testNumber="8"/>
			<description>Entry N in Target shall have type StringByte</description>
			<test>containsN == false || NHasTypeStringByte == true</test>
			<error>
				<message>Entry N in Target has type %1 instead of type StringByte</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="Target-N" testNumber="11"/>
			<description>Entry N in Target is required, when (@R == C) &amp;&amp; fn:InNameTree(trailer::Catalog::Names::EmbeddedFiles)</description>
			<test>containsN == true || ((RNameValue != "C") || (NEntryIsIndexInNameTreetrailerCatalogNamesEmbeddedFiles != true))</test>
			<error>
				<message>Entry N in Target is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="Target-N-StringByte" testNumber="9"/>
			<description>Entry N with type StringByte in Target shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(fn:Not((@R == C) &amp;&amp; fn:InNameTree(trailer::Catalog::Names::EmbeddedFiles)))))</description>
			<test>NHasTypeStringByte != true || ((((RNameValue != "C") || (NEntryIsIndexInNameTreetrailerCatalogNamesEmbeddedFiles != true)) &amp;&amp; containsN == true) != true)</test>
			<error>
				<message>Entry N with type StringByte in Target does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(fn:Not((@R == C) &amp;&amp; fn:InNameTree(trailer::Catalog::Names::EmbeddedFiles)))))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="Target-P" testNumber="8"/>
			<description>Entry P in Target shall have one of types: Integer, StringByte</description>
			<test>containsP == false || PHasTypeInteger == true || PHasTypeStringByte == true</test>
			<error>
				<message>Entry P in Target has type %1 instead of one of types: Integer, StringByte</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="Target-P" testNumber="11"/>
			<description>Entry P in Target is required, when (@R == C) &amp;&amp; fn:IsPresent(A)</description>
			<test>containsP == true || ((RNameValue != "C") || (containsA != true))</test>
			<error>
				<message>Entry P in Target is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="Target-P-Integer" testNumber="14"/>
			<description>Entry P with type Integer in Target shall satisfy possible value predicate: fn:Eval((@P &gt;= 0) &amp;&amp; (@P &lt; fn:NumberOfPages()))</description>
			<test>PHasTypeInteger != true || (PIntegerValue &gt;= 0) &amp;&amp; (PIntegerValue &lt; numberOfPages)</test>
			<error>
				<message>Entry P with type Integer in Target does not satisfy possible value predicate: fn:Eval((@P &gt;= 0) &amp;&amp; (@P &lt; fn:NumberOfPages()))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="Target-P-StringByte" testNumber="14"/>
			<description>Entry P with type StringByte in Target shall satisfy possible value predicate: fn:Eval(fn:InNameTree(trailer::Catalog::Names::Dests))</description>
			<test>PHasTypeStringByte != true || (PEntryIsIndexInNameTreetrailerCatalogNamesDests == true)</test>
			<error>
				<message>Entry P with type StringByte in Target does not satisfy possible value predicate: fn:Eval(fn:InNameTree(trailer::Catalog::Names::Dests))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="Target-R" testNumber="8"/>
			<description>Entry R in Target shall have type Name</description>
			<test>containsR == false || RHasTypeName == true</test>
			<error>
				<message>Entry R in Target has type %1 instead of type Name</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="Target-R" testNumber="7"/>
			<description>Entry R in Target is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in Target is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="Target-R-Name" testNumber="6"/>
			<description>Entry R with type Name in Target shall have one of values: P, C</description>
			<test>RHasTypeName != true || RNameValue == "P" || RNameValue == "C"</test>
			<error>
				<message>Entry R with type Name in Target has incorrect value %1 instead of P, C</message>
				<arguments>
					<argument>RNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="Target-T" testNumber="8"/>
			<description>Entry T in Target shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in Target has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATargetEmbedded">
			<id specification="ISO_32000_1_7" clause="TargetEmbedded" testNumber="1"/>
			<description>TargetEmbedded shall not contain entries except A, N, P, R, T</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>TargetEmbedded contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATargetEmbedded">
			<id specification="ISO_32000_1_7" clause="TargetEmbedded-A" testNumber="8"/>
			<description>Entry A in TargetEmbedded shall have one of types: Integer, StringText</description>
			<test>containsA == false || AHasTypeInteger == true || AHasTypeStringText == true</test>
			<error>
				<message>Entry A in TargetEmbedded has type %1 instead of one of types: Integer, StringText</message>
				<arguments>
					<argument>AType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATargetEmbedded">
			<id specification="ISO_32000_1_7" clause="TargetEmbedded-A" testNumber="11"/>
			<description>Entry A in TargetEmbedded is required, when (@R == C) &amp;&amp; fn:IsPresent(P)</description>
			<test>containsA == true || ((RNameValue != "C") || (containsP != true))</test>
			<error>
				<message>Entry A in TargetEmbedded is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATargetEmbedded">
			<id specification="ISO_32000_1_7" clause="TargetEmbedded-A-Integer" testNumber="14"/>
			<description>Entry A with type Integer in TargetEmbedded shall satisfy possible value predicate: fn:Eval(@A &gt;= 0)</description>
			<test>AHasTypeInteger != true || AIntegerValue &gt;= 0</test>
			<error>
				<message>Entry A with type Integer in TargetEmbedded does not satisfy possible value predicate: fn:Eval(@A &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATargetEmbedded">
			<id specification="ISO_32000_1_7" clause="TargetEmbedded-N" testNumber="8"/>
			<description>Entry N in TargetEmbedded shall have type StringByte</description>
			<test>containsN == false || NHasTypeStringByte == true</test>
			<error>
				<message>Entry N in TargetEmbedded has type %1 instead of type StringByte</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATargetEmbedded">
			<id specification="ISO_32000_1_7" clause="TargetEmbedded-N" testNumber="11"/>
			<description>Entry N in TargetEmbedded is required, when fn:Not(fn:IsPresent(P) || fn:IsPresent(A))</description>
			<test>containsN == true || ((containsP == true) || (containsA == true))</test>
			<error>
				<message>Entry N in TargetEmbedded is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATargetEmbedded">
			<id specification="ISO_32000_1_7" clause="TargetEmbedded-P" testNumber="8"/>
			<description>Entry P in TargetEmbedded shall have one of types: Integer, StringByte</description>
			<test>containsP == false || PHasTypeInteger == true || PHasTypeStringByte == true</test>
			<error>
				<message>Entry P in TargetEmbedded has type %1 instead of one of types: Integer, StringByte</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATargetEmbedded">
			<id specification="ISO_32000_1_7" clause="TargetEmbedded-P" testNumber="11"/>
			<description>Entry P in TargetEmbedded is required, when (@R == C) &amp;&amp; fn:IsPresent(A)</description>
			<test>containsP == true || ((RNameValue != "C") || (containsA != true))</test>
			<error>
				<message>Entry P in TargetEmbedded is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATargetEmbedded">
			<id specification="ISO_32000_1_7" clause="TargetEmbedded-P-Integer" testNumber="14"/>
			<description>Entry P with type Integer in TargetEmbedded shall satisfy possible value predicate: fn:Eval(@P &gt;= 0)</description>
			<test>PHasTypeInteger != true || PIntegerValue &gt;= 0</test>
			<error>
				<message>Entry P with type Integer in TargetEmbedded does not satisfy possible value predicate: fn:Eval(@P &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATargetEmbedded">
			<id specification="ISO_32000_1_7" clause="TargetEmbedded-R" testNumber="8"/>
			<description>Entry R in TargetEmbedded shall have type Name</description>
			<test>containsR == false || RHasTypeName == true</test>
			<error>
				<message>Entry R in TargetEmbedded has type %1 instead of type Name</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATargetEmbedded">
			<id specification="ISO_32000_1_7" clause="TargetEmbedded-R" testNumber="7"/>
			<description>Entry R in TargetEmbedded is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in TargetEmbedded is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATargetEmbedded">
			<id specification="ISO_32000_1_7" clause="TargetEmbedded-R-Name" testNumber="6"/>
			<description>Entry R with type Name in TargetEmbedded shall have one of values: P, C</description>
			<test>RHasTypeName != true || RNameValue == "P" || RNameValue == "C"</test>
			<error>
				<message>Entry R with type Name in TargetEmbedded has incorrect value %1 instead of P, C</message>
				<arguments>
					<argument>RNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATargetEmbedded">
			<id specification="ISO_32000_1_7" clause="TargetEmbedded-T" testNumber="8"/>
			<description>Entry T in TargetEmbedded shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in TargetEmbedded has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="Thread" testNumber="1"/>
			<description>Thread shall not contain entries except F, I, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'I' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Thread contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'I' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="Thread" testNumber="22"/>
			<description>Thread shall not contain entry Metadata in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsMetadata == false</test>
			<error>
				<message>Thread contains entry Metadata</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="Thread-F" testNumber="8"/>
			<description>Entry F in Thread shall have type Dictionary</description>
			<test>containsF == false || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in Thread has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="Thread-F" testNumber="7"/>
			<description>Entry F in Thread is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in Thread is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="Thread-F-Dictionary" testNumber="10"/>
			<description>Entry F with type Dictionary in Thread shall be indirect</description>
			<test>FHasTypeDictionary != true || isFIndirect == true</test>
			<error>
				<message>Entry F with type Dictionary in Thread is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="Thread-I" testNumber="8"/>
			<description>Entry I in Thread shall have type Dictionary</description>
			<test>containsI == false || IHasTypeDictionary == true</test>
			<error>
				<message>Entry I in Thread has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>IType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="Thread-Type" testNumber="8"/>
			<description>Entry Type in Thread shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Thread has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="Thread-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Thread shall have value Thread</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Thread"</test>
			<error>
				<message>Entry Type with type Name in Thread has incorrect value %1 instead of Thread</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail" testNumber="1"/>
			<description>Thumbnail shall not contain entries except BitsPerComponent, ColorSpace, DL, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Height, Length, Subtype, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Thumbnail contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-BitsPerComponent" testNumber="8"/>
			<description>Entry BitsPerComponent in Thumbnail shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in Thumbnail has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerComponentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-BitsPerComponent" testNumber="7"/>
			<description>Entry BitsPerComponent in Thumbnail is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in Thumbnail is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-BitsPerComponent-Integer" testNumber="6"/>
			<description>Entry BitsPerComponent with type Integer in Thumbnail shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in Thumbnail has incorrect value %1 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in Thumbnail shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in Thumbnail has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-ColorSpace" testNumber="7"/>
			<description>Entry ColorSpace in Thumbnail is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in Thumbnail is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-ColorSpace-Name" testNumber="6"/>
			<description>Entry ColorSpace with type Name in Thumbnail shall have one of values: DeviceGray, DeviceRGB</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in Thumbnail has incorrect value %1 instead of DeviceGray, DeviceRGB</message>
				<arguments>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-DL" testNumber="8"/>
			<description>Entry DL in Thumbnail shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in Thumbnail has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in Thumbnail shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in Thumbnail does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-Decode" testNumber="8"/>
			<description>Entry Decode in Thumbnail shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in Thumbnail has type %1 instead of type Array</message>
				<arguments>
					<argument>DecodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in Thumbnail shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in Thumbnail is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in Thumbnail shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in Thumbnail has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in Thumbnail shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in Thumbnail does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-F" testNumber="8"/>
			<description>Entry F in Thumbnail shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in Thumbnail has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in Thumbnail shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in Thumbnail is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in Thumbnail shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in Thumbnail has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in Thumbnail shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in Thumbnail does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-FFilter" testNumber="8"/>
			<description>Entry FFilter in Thumbnail shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in Thumbnail has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in Thumbnail shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in Thumbnail does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in Thumbnail shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in Thumbnail has incorrect value %1 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-Filter" testNumber="8"/>
			<description>Entry Filter in Thumbnail shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in Thumbnail has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in Thumbnail shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in Thumbnail does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in Thumbnail shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in Thumbnail has incorrect value %1 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-Height" testNumber="8"/>
			<description>Entry Height in Thumbnail shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in Thumbnail has type %1 instead of type Integer</message>
				<arguments>
					<argument>HeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-Height" testNumber="7"/>
			<description>Entry Height in Thumbnail is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in Thumbnail is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-Length" testNumber="8"/>
			<description>Entry Length in Thumbnail shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in Thumbnail has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-Length" testNumber="7"/>
			<description>Entry Length in Thumbnail is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in Thumbnail is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-Subtype" testNumber="8"/>
			<description>Entry Subtype in Thumbnail shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in Thumbnail has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in Thumbnail shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in Thumbnail has incorrect value %1 instead of Image</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-Type" testNumber="8"/>
			<description>Entry Type in Thumbnail shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Thumbnail has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Thumbnail shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in Thumbnail has incorrect value %1 instead of XObject</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-Width" testNumber="8"/>
			<description>Entry Width in Thumbnail shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in Thumbnail has type %1 instead of type Integer</message>
				<arguments>
					<argument>WidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="Thumbnail-Width" testNumber="7"/>
			<description>Entry Width in Thumbnail is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in Thumbnail is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATimeStampDict">
			<id specification="ISO_32000_1_7" clause="TimeStampDict" testNumber="1"/>
			<description>TimeStampDict shall not contain entries except Ff, URL</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ff' &amp;&amp; elem != 'URL' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>TimeStampDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ff' &amp;&amp; elem != 'URL' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimeStampDict">
			<id specification="ISO_32000_1_7" clause="TimeStampDict-Ff" testNumber="8"/>
			<description>Entry Ff in TimeStampDict shall have type Integer</description>
			<test>containsFf == false || FfHasTypeInteger == true</test>
			<error>
				<message>Entry Ff in TimeStampDict has type %1 instead of type Integer</message>
				<arguments>
					<argument>FfType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimeStampDict">
			<id specification="ISO_32000_1_7" clause="TimeStampDict-Ff" testNumber="7"/>
			<description>Entry Ff in TimeStampDict is required</description>
			<test>containsFf == true</test>
			<error>
				<message>Entry Ff in TimeStampDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATimeStampDict">
			<id specification="ISO_32000_1_7" clause="TimeStampDict-Ff-Integer" testNumber="6"/>
			<description>Entry Ff with type Integer in TimeStampDict shall have one of values: 0, 1</description>
			<test>FfHasTypeInteger != true || FfIntegerValue == 0 || FfIntegerValue == 1</test>
			<error>
				<message>Entry Ff with type Integer in TimeStampDict has incorrect value %1 instead of 0, 1</message>
				<arguments>
					<argument>FfIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimeStampDict">
			<id specification="ISO_32000_1_7" clause="TimeStampDict-URL" testNumber="8"/>
			<description>Entry URL in TimeStampDict shall have type StringAscii</description>
			<test>containsURL == false || URLHasTypeStringAscii == true</test>
			<error>
				<message>Entry URL in TimeStampDict has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>URLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimeStampDict">
			<id specification="ISO_32000_1_7" clause="TimeStampDict-URL" testNumber="7"/>
			<description>Entry URL in TimeStampDict is required</description>
			<test>containsURL == true</test>
			<error>
				<message>Entry URL in TimeStampDict is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_7" clause="Timespan" testNumber="1"/>
			<description>Timespan shall not contain entries except S, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Timespan contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_7" clause="Timespan-S" testNumber="8"/>
			<description>Entry S in Timespan shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in Timespan has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_7" clause="Timespan-S" testNumber="7"/>
			<description>Entry S in Timespan is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in Timespan is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_7" clause="Timespan-S-Name" testNumber="6"/>
			<description>Entry S with type Name in Timespan shall have value S</description>
			<test>SHasTypeName != true || SNameValue == "S"</test>
			<error>
				<message>Entry S with type Name in Timespan has incorrect value %1 instead of S</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_7" clause="Timespan-Type" testNumber="8"/>
			<description>Entry Type in Timespan shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Timespan has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_7" clause="Timespan-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Timespan shall have value Timespan</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Timespan"</test>
			<error>
				<message>Entry Type with type Name in Timespan has incorrect value %1 instead of Timespan</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_7" clause="Timespan-V" testNumber="8"/>
			<description>Entry V in Timespan shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in Timespan has type %1 instead of type Number</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_7" clause="Timespan-V" testNumber="7"/>
			<description>Entry V in Timespan is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in Timespan is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATrailerIDArray">
			<id specification="ISO_32000_1_7" clause="TrailerIDArray" testNumber="2"/>
			<description>TrailerIDArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>TrailerIDArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrailerIDArray">
			<id specification="ISO_32000_1_7" clause="TrailerIDArray-0" testNumber="8"/>
			<description>Entry 0 in TrailerIDArray shall have type StringByte</description>
			<test>size &lt;= 0 || entry0HasTypeStringByte == true</test>
			<error>
				<message>Entry 0 in TrailerIDArray has type %1 instead of type StringByte</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrailerIDArray">
			<id specification="ISO_32000_1_7" clause="TrailerIDArray-0-StringByte" testNumber="16"/>
			<description>If entry 0 with type StringByte in TrailerIDArray satisfies condition fn:IsPresent(trailer::Encrypt), it shall be direct</description>
			<test>entry0HasTypeStringByte != true || (isentry0Indirect == false || (containstrailerEncrypt != true))</test>
			<error>
				<message>Entry 0 with type StringByte in TrailerIDArray is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATrailerIDArray">
			<id specification="ISO_32000_1_7" clause="TrailerIDArray-1" testNumber="8"/>
			<description>Entry 1 in TrailerIDArray shall have type StringByte</description>
			<test>size &lt;= 1 || entry1HasTypeStringByte == true</test>
			<error>
				<message>Entry 1 in TrailerIDArray has type %1 instead of type StringByte</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrailerIDArray">
			<id specification="ISO_32000_1_7" clause="TrailerIDArray-1-StringByte" testNumber="16"/>
			<description>If entry 1 with type StringByte in TrailerIDArray satisfies condition fn:IsPresent(trailer::Encrypt), it shall be direct</description>
			<test>entry1HasTypeStringByte != true || (isentry1Indirect == false || (containstrailerEncrypt != true))</test>
			<error>
				<message>Entry 1 with type StringByte in TrailerIDArray is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition" testNumber="1"/>
			<description>Transition shall not contain entries except B, D, Di, Dm, M, S, SS, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'D' &amp;&amp; elem != 'Di' &amp;&amp; elem != 'Dm' &amp;&amp; elem != 'M' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SS' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Transition contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'D' &amp;&amp; elem != 'Di' &amp;&amp; elem != 'Dm' &amp;&amp; elem != 'M' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SS' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-B" testNumber="8"/>
			<description>Entry B in Transition shall have type Boolean</description>
			<test>containsB == false || BHasTypeBoolean == true</test>
			<error>
				<message>Entry B in Transition has type %1 instead of type Boolean</message>
				<arguments>
					<argument>BType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-D" testNumber="8"/>
			<description>Entry D in Transition shall have type Number</description>
			<test>containsD == false || DHasTypeNumber == true</test>
			<error>
				<message>Entry D in Transition has type %1 instead of type Number</message>
				<arguments>
					<argument>DType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-D-Number" testNumber="14"/>
			<description>Entry D with type Number in Transition shall satisfy possible value predicate: fn:Eval(@D &gt;= 0)</description>
			<test>DHasTypeNumber != true || DNumberValue &gt;= 0</test>
			<error>
				<message>Entry D with type Number in Transition does not satisfy possible value predicate: fn:Eval(@D &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-Di" testNumber="8"/>
			<description>Entry Di in Transition shall have one of types: Integer, Name</description>
			<test>containsDi == false || DiHasTypeInteger == true || DiHasTypeName == true</test>
			<error>
				<message>Entry Di in Transition has type %1 instead of one of types: Integer, Name</message>
				<arguments>
					<argument>DiType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-Di-Integer-90" testNumber="13"/>
			<description>Entry Di in Transition may have Integer value 90, only if this object satisfies condition (@S == Wipe)</description>
			<test>(SNameValue == "Wipe") || DiIntegerValue != 90</test>
			<error>
				<message>Entry Di in Transition has value 90, but not satisfy condition (@S == Wipe)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-Di-Integer-180" testNumber="13"/>
			<description>Entry Di in Transition may have Integer value 180, only if this object satisfies condition (@S == Wipe)</description>
			<test>(SNameValue == "Wipe") || DiIntegerValue != 180</test>
			<error>
				<message>Entry Di in Transition has value 180, but not satisfy condition (@S == Wipe)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-Di-Integer-315" testNumber="13"/>
			<description>Entry Di in Transition may have Integer value 315, only if this object satisfies condition (@S == Glitter)</description>
			<test>(SNameValue == "Glitter") || DiIntegerValue != 315</test>
			<error>
				<message>Entry Di in Transition has value 315, but not satisfy condition (@S == Glitter)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-Di-Integer" testNumber="6"/>
			<description>Entry Di with type Integer in Transition shall have one of values: 0, 90, 315, 180, 270</description>
			<test>DiHasTypeInteger != true || DiIntegerValue == 0 || DiIntegerValue == 90 || DiIntegerValue == 180 || DiIntegerValue == 270 || DiIntegerValue == 315</test>
			<error>
				<message>Entry Di with type Integer in Transition has incorrect value %1 instead of 0, 90, 315, 180, 270</message>
				<arguments>
					<argument>DiIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-Di-Name" testNumber="6"/>
			<description>Entry Di with type Name in Transition shall have value None</description>
			<test>DiHasTypeName != true || DiNameValue == "None"</test>
			<error>
				<message>Entry Di with type Name in Transition has incorrect value %1 instead of None</message>
				<arguments>
					<argument>DiNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-Di-Name" testNumber="9"/>
			<description>Entry Di with type Name in Transition shall satisfy special case: fn:Eval(((@Di == None) &amp;&amp; (@S == Fly) &amp;&amp; (@SS != 1.0)))</description>
			<test>DiHasTypeName != true || ((DiNameValue == "None") &amp;&amp; (SNameValue == "Fly") &amp;&amp; (SSHasTypeNumber == false || (SSNumberValue != 1.0)))</test>
			<error>
				<message>Entry Di with type Name in Transition does not satisfy special case: fn:Eval(((@Di == None) &amp;&amp; (@S == Fly) &amp;&amp; (@SS != 1.0)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-Dm" testNumber="8"/>
			<description>Entry Dm in Transition shall have type Name</description>
			<test>containsDm == false || DmHasTypeName == true</test>
			<error>
				<message>Entry Dm in Transition has type %1 instead of type Name</message>
				<arguments>
					<argument>DmType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-Dm-Name" testNumber="6"/>
			<description>Entry Dm with type Name in Transition shall have one of values: V, H</description>
			<test>DmHasTypeName != true || DmNameValue == "H" || DmNameValue == "V"</test>
			<error>
				<message>Entry Dm with type Name in Transition has incorrect value %1 instead of V, H</message>
				<arguments>
					<argument>DmNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-M" testNumber="8"/>
			<description>Entry M in Transition shall have type Name</description>
			<test>containsM == false || MHasTypeName == true</test>
			<error>
				<message>Entry M in Transition has type %1 instead of type Name</message>
				<arguments>
					<argument>MType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-M-Name" testNumber="6"/>
			<description>Entry M with type Name in Transition shall have one of values: I, O</description>
			<test>MHasTypeName != true || MNameValue == "I" || MNameValue == "O"</test>
			<error>
				<message>Entry M with type Name in Transition has incorrect value %1 instead of I, O</message>
				<arguments>
					<argument>MNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-S" testNumber="8"/>
			<description>Entry S in Transition shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in Transition has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-S-Name" testNumber="6"/>
			<description>Entry S with type Name in Transition shall have one of values: Uncover, Glitter, R, Fly, Cover, Dissolve, Box, Split, Push, Blinds, Fade, Wipe</description>
			<test>SHasTypeName != true || SNameValue == "Split" || SNameValue == "Blinds" || SNameValue == "Box" || SNameValue == "Wipe" || SNameValue == "Dissolve" || SNameValue == "Glitter" || SNameValue == "R" || SNameValue == "Fly" || SNameValue == "Push" || SNameValue == "Cover" || SNameValue == "Uncover" || SNameValue == "Fade"</test>
			<error>
				<message>Entry S with type Name in Transition has incorrect value %1 instead of Uncover, Glitter, R, Fly, Cover, Dissolve, Box, Split, Push, Blinds, Fade, Wipe</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-SS" testNumber="8"/>
			<description>Entry SS in Transition shall have type Number</description>
			<test>containsSS == false || SSHasTypeNumber == true</test>
			<error>
				<message>Entry SS in Transition has type %1 instead of type Number</message>
				<arguments>
					<argument>SSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-Type" testNumber="8"/>
			<description>Entry Type in Transition shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Transition has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="Transition-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Transition shall have value Trans</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Trans"</test>
			<error>
				<message>Entry Type with type Name in Transition has incorrect value %1 instead of Trans</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_7" clause="TrapRegion" testNumber="1"/>
			<description>TrapRegion shall not contain entries except TP, TZ</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'TP' &amp;&amp; elem != 'TZ' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>TrapRegion contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'TP' &amp;&amp; elem != 'TZ' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_7" clause="TrapRegion-TP" testNumber="8"/>
			<description>Entry TP in TrapRegion shall have type Name</description>
			<test>containsTP == false || TPHasTypeName == true</test>
			<error>
				<message>Entry TP in TrapRegion has type %1 instead of type Name</message>
				<arguments>
					<argument>TPType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_7" clause="TrapRegion-TP" testNumber="7"/>
			<description>Entry TP in TrapRegion is required</description>
			<test>containsTP == true</test>
			<error>
				<message>Entry TP in TrapRegion is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_7" clause="TrapRegion-TZ" testNumber="8"/>
			<description>Entry TZ in TrapRegion shall have type Array</description>
			<test>containsTZ == false || TZHasTypeArray == true</test>
			<error>
				<message>Entry TZ in TrapRegion has type %1 instead of type Array</message>
				<arguments>
					<argument>TZType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURI">
			<id specification="ISO_32000_1_7" clause="URI" testNumber="1"/>
			<description>URI shall not contain entries except Base</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Base' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>URI contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Base' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURI">
			<id specification="ISO_32000_1_7" clause="URI-Base" testNumber="8"/>
			<description>Entry Base in URI shall have type StringAscii</description>
			<test>containsBase == false || BaseHasTypeStringAscii == true</test>
			<error>
				<message>Entry Base in URI has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>BaseType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_7" clause="URLAlias" testNumber="1"/>
			<description>URLAlias shall not contain entries except C, U</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'U' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>URLAlias contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'U' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_7" clause="URLAlias-C" testNumber="8"/>
			<description>Entry C in URLAlias shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in URLAlias has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_7" clause="URLAlias-C-Array" testNumber="9"/>
			<description>Entry C with type Array in URLAlias shall satisfy special case: fn:Eval(fn:ArrayLength(C) &gt;= 1)</description>
			<test>CHasTypeArray != true || (CArraySize &gt;= 1)</test>
			<error>
				<message>Entry C with type Array in URLAlias does not satisfy special case: fn:Eval(fn:ArrayLength(C) &gt;= 1)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_7" clause="URLAlias-U" testNumber="8"/>
			<description>Entry U in URLAlias shall have type StringAscii</description>
			<test>containsU == false || UHasTypeStringAscii == true</test>
			<error>
				<message>Entry U in URLAlias has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>UType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_7" clause="URLAlias-U" testNumber="7"/>
			<description>Entry U in URLAlias is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in URLAlias is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamAnnotsArrayEntry">
			<id specification="ISO_32000_1_7" clause="URTransformParamAnnotsArrayEntry" testNumber="8"/>
			<description>Entry in URTransformParamAnnotsArray shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in URTransformParamAnnotsArray has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamAnnotsArrayEntry">
			<id specification="ISO_32000_1_7" clause="URTransformParamAnnotsArrayEntry-Name" testNumber="6"/>
			<description>Entry with type Name in URTransformParamAnnotsArray shall have one of values: Delete, Import, Copy, Create, Export, Modify, SummaryView, Online</description>
			<test>HasTypeName != true || NameValue == "Create" || NameValue == "Delete" || NameValue == "Modify" || NameValue == "Copy" || NameValue == "Import" || NameValue == "Export" || NameValue == "Online" || NameValue == "SummaryView"</test>
			<error>
				<message>Entry %keyName% with type Name in URTransformParamAnnotsArray has incorrect value %1 instead of Delete, Import, Copy, Create, Export, Modify, SummaryView, Online</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamDocumentArrayEntry">
			<id specification="ISO_32000_1_7" clause="URTransformParamDocumentArrayEntry" testNumber="8"/>
			<description>Entry in URTransformParamDocumentArray shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in URTransformParamDocumentArray has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamDocumentArrayEntry">
			<id specification="ISO_32000_1_7" clause="URTransformParamDocumentArrayEntry-Name" testNumber="6"/>
			<description>Entry with type Name in URTransformParamDocumentArray shall have value FullSave</description>
			<test>HasTypeName != true || NameValue == "FullSave"</test>
			<error>
				<message>Entry %keyName% with type Name in URTransformParamDocumentArray has incorrect value %1 instead of FullSave</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamEFArrayEntry">
			<id specification="ISO_32000_1_7" clause="URTransformParamEFArrayEntry" testNumber="8"/>
			<description>Entry in URTransformParamEFArray shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in URTransformParamEFArray has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamEFArrayEntry">
			<id specification="ISO_32000_1_7" clause="URTransformParamEFArrayEntry-Name" testNumber="6"/>
			<description>Entry with type Name in URTransformParamEFArray shall have one of values: Delete, Import, Create, Modify</description>
			<test>HasTypeName != true || NameValue == "Create" || NameValue == "Delete" || NameValue == "Modify" || NameValue == "Import"</test>
			<error>
				<message>Entry %keyName% with type Name in URTransformParamEFArray has incorrect value %1 instead of Delete, Import, Create, Modify</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamFormArrayEntry">
			<id specification="ISO_32000_1_7" clause="URTransformParamFormArrayEntry" testNumber="8"/>
			<description>Entry in URTransformParamFormArray shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in URTransformParamFormArray has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamFormArrayEntry">
			<id specification="ISO_32000_1_7" clause="URTransformParamFormArrayEntry-Name" testNumber="6"/>
			<description>Entry with type Name in URTransformParamFormArray shall have one of values: Add, Delete, Import, BarcodePlaintext, FillIn, Export, SubmitStandalone, Online, SpawnTemplate</description>
			<test>HasTypeName != true || NameValue == "Add" || NameValue == "Delete" || NameValue == "FillIn" || NameValue == "Import" || NameValue == "Export" || NameValue == "SubmitStandalone" || NameValue == "SpawnTemplate" || NameValue == "BarcodePlaintext" || NameValue == "Online"</test>
			<error>
				<message>Entry %keyName% with type Name in URTransformParamFormArray has incorrect value %1 instead of Add, Delete, Import, BarcodePlaintext, FillIn, Export, SubmitStandalone, Online, SpawnTemplate</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamSignatureArrayEntry">
			<id specification="ISO_32000_1_7" clause="URTransformParamSignatureArrayEntry" testNumber="8"/>
			<description>Entry in URTransformParamSignatureArray shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %keyName% in URTransformParamSignatureArray has type %1 instead of type Name</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamSignatureArrayEntry">
			<id specification="ISO_32000_1_7" clause="URTransformParamSignatureArrayEntry-Name" testNumber="6"/>
			<description>Entry with type Name in URTransformParamSignatureArray shall have value Modify</description>
			<test>HasTypeName != true || NameValue == "Modify"</test>
			<error>
				<message>Entry %keyName% with type Name in URTransformParamSignatureArray has incorrect value %1 instead of Modify</message>
				<arguments>
					<argument>NameValue</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="URTransformParameters" testNumber="1"/>
			<description>URTransformParameters shall not contain entries except Annots, Document, EF, Form, Msg, P, Signature, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Annots' &amp;&amp; elem != 'Document' &amp;&amp; elem != 'EF' &amp;&amp; elem != 'Form' &amp;&amp; elem != 'Msg' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Signature' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>URTransformParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Annots' &amp;&amp; elem != 'Document' &amp;&amp; elem != 'EF' &amp;&amp; elem != 'Form' &amp;&amp; elem != 'Msg' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Signature' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="URTransformParameters-Annots" testNumber="8"/>
			<description>Entry Annots in URTransformParameters shall have type Array</description>
			<test>containsAnnots == false || AnnotsHasTypeArray == true</test>
			<error>
				<message>Entry Annots in URTransformParameters has type %1 instead of type Array</message>
				<arguments>
					<argument>AnnotsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="URTransformParameters-Document" testNumber="8"/>
			<description>Entry Document in URTransformParameters shall have type Array</description>
			<test>containsDocument == false || DocumentHasTypeArray == true</test>
			<error>
				<message>Entry Document in URTransformParameters has type %1 instead of type Array</message>
				<arguments>
					<argument>DocumentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="URTransformParameters-EF" testNumber="8"/>
			<description>Entry EF in URTransformParameters shall have type Array</description>
			<test>containsEF == false || EFHasTypeArray == true</test>
			<error>
				<message>Entry EF in URTransformParameters has type %1 instead of type Array</message>
				<arguments>
					<argument>EFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="URTransformParameters-Form" testNumber="8"/>
			<description>Entry Form in URTransformParameters shall have type Array</description>
			<test>containsForm == false || FormHasTypeArray == true</test>
			<error>
				<message>Entry Form in URTransformParameters has type %1 instead of type Array</message>
				<arguments>
					<argument>FormType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="URTransformParameters-Msg" testNumber="8"/>
			<description>Entry Msg in URTransformParameters shall have type StringText</description>
			<test>containsMsg == false || MsgHasTypeStringText == true</test>
			<error>
				<message>Entry Msg in URTransformParameters has type %1 instead of type StringText</message>
				<arguments>
					<argument>MsgType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="URTransformParameters-P" testNumber="8"/>
			<description>Entry P in URTransformParameters shall have type Boolean</description>
			<test>containsP == false || PHasTypeBoolean == true</test>
			<error>
				<message>Entry P in URTransformParameters has type %1 instead of type Boolean</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="URTransformParameters-Signature" testNumber="8"/>
			<description>Entry Signature in URTransformParameters shall have type Array</description>
			<test>containsSignature == false || SignatureHasTypeArray == true</test>
			<error>
				<message>Entry Signature in URTransformParameters has type %1 instead of type Array</message>
				<arguments>
					<argument>SignatureType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="URTransformParameters-Type" testNumber="8"/>
			<description>Entry Type in URTransformParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in URTransformParameters has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="URTransformParameters-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in URTransformParameters shall have value TransformParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "TransformParams"</test>
			<error>
				<message>Entry Type with type Name in URTransformParameters has incorrect value %1 instead of TransformParams</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="URTransformParameters-V" testNumber="8"/>
			<description>Entry V in URTransformParameters shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in URTransformParameters has type %1 instead of type Name</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="UserProperty" testNumber="1"/>
			<description>UserProperty shall not contain entries except F, H, N, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'H' &amp;&amp; elem != 'N' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>UserProperty contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'H' &amp;&amp; elem != 'N' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="UserProperty-F" testNumber="8"/>
			<description>Entry F in UserProperty shall have type StringText</description>
			<test>containsF == false || FHasTypeStringText == true</test>
			<error>
				<message>Entry F in UserProperty has type %1 instead of type StringText</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="UserProperty-H" testNumber="8"/>
			<description>Entry H in UserProperty shall have type Boolean</description>
			<test>containsH == false || HHasTypeBoolean == true</test>
			<error>
				<message>Entry H in UserProperty has type %1 instead of type Boolean</message>
				<arguments>
					<argument>HType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="UserProperty-N" testNumber="8"/>
			<description>Entry N in UserProperty shall have type StringText</description>
			<test>containsN == false || NHasTypeStringText == true</test>
			<error>
				<message>Entry N in UserProperty has type %1 instead of type StringText</message>
				<arguments>
					<argument>NType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="UserProperty-N" testNumber="7"/>
			<description>Entry N in UserProperty is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in UserProperty is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="UserProperty-N-StringText" testNumber="9"/>
			<description>Entry N with type StringText in UserProperty shall satisfy special case: fn:Eval(trailer::Catalog::MarkInfo::@UserProperties == true)</description>
			<test>NHasTypeStringText != true || (trailerCatalogMarkInfoUserPropertiesBooleanValue == true)</test>
			<error>
				<message>Entry N with type StringText in UserProperty does not satisfy special case: fn:Eval(trailer::Catalog::MarkInfo::@UserProperties == true)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="UserProperty-V" testNumber="8"/>
			<description>Entry V in UserProperty shall have one of types: Array, Boolean, Dictionary, Name, Null, Number, Stream, String</description>
			<test>containsV == false || VHasTypeArray == true || VHasTypeBoolean == true || VHasTypeDictionary == true || VHasTypeName == true || VHasTypeNull == true || VHasTypeNumber == true || VHasTypeStream == true || VHasTypeString == true</test>
			<error>
				<message>Entry V in UserProperty has type %1 instead of one of types: Array, Boolean, Dictionary, Name, Null, Number, Stream, String</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="UserProperty-V" testNumber="7"/>
			<description>Entry V in UserProperty is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in UserProperty is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="UserProperty-V-Stream" testNumber="10"/>
			<description>Entry V with type Stream in UserProperty shall be indirect</description>
			<test>VHasTypeStream != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Stream in UserProperty is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AViewParams">
			<id specification="ISO_32000_1_7" clause="ViewParams" testNumber="1"/>
			<description>ViewParams shall not contain entries except Data, Instance</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'Instance' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ViewParams contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'Instance' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewParams">
			<id specification="ISO_32000_1_7" clause="ViewParams-Data" testNumber="8"/>
			<description>Entry Data in ViewParams shall have one of types: Stream, StringText</description>
			<test>containsData == false || DataHasTypeStream == true || DataHasTypeStringText == true</test>
			<error>
				<message>Entry Data in ViewParams has type %1 instead of one of types: Stream, StringText</message>
				<arguments>
					<argument>DataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewParams">
			<id specification="ISO_32000_1_7" clause="ViewParams-Data" testNumber="7"/>
			<description>Entry Data in ViewParams is required</description>
			<test>containsData == true</test>
			<error>
				<message>Entry Data in ViewParams is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AViewParams">
			<id specification="ISO_32000_1_7" clause="ViewParams-Data" testNumber="23"/>
			<description>Entry Data in ViewParams can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsData == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Data in ViewParams is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AViewParams">
			<id specification="ISO_32000_1_7" clause="ViewParams-Data-Stream" testNumber="10"/>
			<description>Entry Data with type Stream in ViewParams shall be indirect</description>
			<test>DataHasTypeStream != true || isDataIndirect == true</test>
			<error>
				<message>Entry Data with type Stream in ViewParams is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AViewParams">
			<id specification="ISO_32000_1_7" clause="ViewParams-Instance" testNumber="8"/>
			<description>Entry Instance in ViewParams shall have type Dictionary</description>
			<test>containsInstance == false || InstanceHasTypeDictionary == true</test>
			<error>
				<message>Entry Instance in ViewParams has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>InstanceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewParams">
			<id specification="ISO_32000_1_7" clause="ViewParams-Instance" testNumber="7"/>
			<description>Entry Instance in ViewParams is required</description>
			<test>containsInstance == true</test>
			<error>
				<message>Entry Instance in ViewParams is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AViewParams">
			<id specification="ISO_32000_1_7" clause="ViewParams-Instance" testNumber="23"/>
			<description>Entry Instance in ViewParams can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsInstance == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Instance in ViewParams is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences" testNumber="1"/>
			<description>ViewerPreferences shall not contain entries except CenterWindow, Direction, DisplayDocTitle, Duplex, Enforce, FitWindow, HideMenubar, HideToolbar, HideWindowUI, NonFullScreenPageMode, NumCopies, PickTrayByPDFSize, PrintArea, PrintClip, PrintPageRange, PrintScaling, ViewArea, ViewClip</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CenterWindow' &amp;&amp; elem != 'Direction' &amp;&amp; elem != 'DisplayDocTitle' &amp;&amp; elem != 'Duplex' &amp;&amp; elem != 'Enforce' &amp;&amp; elem != 'FitWindow' &amp;&amp; elem != 'HideMenubar' &amp;&amp; elem != 'HideToolbar' &amp;&amp; elem != 'HideWindowUI' &amp;&amp; elem != 'NonFullScreenPageMode' &amp;&amp; elem != 'NumCopies' &amp;&amp; elem != 'PickTrayByPDFSize' &amp;&amp; elem != 'PrintArea' &amp;&amp; elem != 'PrintClip' &amp;&amp; elem != 'PrintPageRange' &amp;&amp; elem != 'PrintScaling' &amp;&amp; elem != 'ViewArea' &amp;&amp; elem != 'ViewClip' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>ViewerPreferences contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CenterWindow' &amp;&amp; elem != 'Direction' &amp;&amp; elem != 'DisplayDocTitle' &amp;&amp; elem != 'Duplex' &amp;&amp; elem != 'Enforce' &amp;&amp; elem != 'FitWindow' &amp;&amp; elem != 'HideMenubar' &amp;&amp; elem != 'HideToolbar' &amp;&amp; elem != 'HideWindowUI' &amp;&amp; elem != 'NonFullScreenPageMode' &amp;&amp; elem != 'NumCopies' &amp;&amp; elem != 'PickTrayByPDFSize' &amp;&amp; elem != 'PrintArea' &amp;&amp; elem != 'PrintClip' &amp;&amp; elem != 'PrintPageRange' &amp;&amp; elem != 'PrintScaling' &amp;&amp; elem != 'ViewArea' &amp;&amp; elem != 'ViewClip' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-CenterWindow" testNumber="8"/>
			<description>Entry CenterWindow in ViewerPreferences shall have type Boolean</description>
			<test>containsCenterWindow == false || CenterWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry CenterWindow in ViewerPreferences has type %1 instead of type Boolean</message>
				<arguments>
					<argument>CenterWindowType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-Direction" testNumber="8"/>
			<description>Entry Direction in ViewerPreferences shall have type Name</description>
			<test>containsDirection == false || DirectionHasTypeName == true</test>
			<error>
				<message>Entry Direction in ViewerPreferences has type %1 instead of type Name</message>
				<arguments>
					<argument>DirectionType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-Direction-Name" testNumber="6"/>
			<description>Entry Direction with type Name in ViewerPreferences shall have one of values: L2R, R2L</description>
			<test>DirectionHasTypeName != true || DirectionNameValue == "L2R" || DirectionNameValue == "R2L"</test>
			<error>
				<message>Entry Direction with type Name in ViewerPreferences has incorrect value %1 instead of L2R, R2L</message>
				<arguments>
					<argument>DirectionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-DisplayDocTitle" testNumber="8"/>
			<description>Entry DisplayDocTitle in ViewerPreferences shall have type Boolean</description>
			<test>containsDisplayDocTitle == false || DisplayDocTitleHasTypeBoolean == true</test>
			<error>
				<message>Entry DisplayDocTitle in ViewerPreferences has type %1 instead of type Boolean</message>
				<arguments>
					<argument>DisplayDocTitleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-Duplex" testNumber="8"/>
			<description>Entry Duplex in ViewerPreferences shall have type Name</description>
			<test>containsDuplex == false || DuplexHasTypeName == true</test>
			<error>
				<message>Entry Duplex in ViewerPreferences has type %1 instead of type Name</message>
				<arguments>
					<argument>DuplexType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-Duplex-Name" testNumber="6"/>
			<description>Entry Duplex with type Name in ViewerPreferences shall have one of values: Simplex, DuplexFlipShortEdge, DuplexFlipLongEdge</description>
			<test>DuplexHasTypeName != true || DuplexNameValue == "Simplex" || DuplexNameValue == "DuplexFlipShortEdge" || DuplexNameValue == "DuplexFlipLongEdge"</test>
			<error>
				<message>Entry Duplex with type Name in ViewerPreferences has incorrect value %1 instead of Simplex, DuplexFlipShortEdge, DuplexFlipLongEdge</message>
				<arguments>
					<argument>DuplexNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-Enforce" testNumber="8"/>
			<description>Entry Enforce in ViewerPreferences shall have type Array</description>
			<test>containsEnforce == false || EnforceHasTypeArray == true</test>
			<error>
				<message>Entry Enforce in ViewerPreferences has type %1 instead of type Array</message>
				<arguments>
					<argument>EnforceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-Enforce" testNumber="23"/>
			<description>Entry Enforce in ViewerPreferences can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsEnforce == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Enforce in ViewerPreferences is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-FitWindow" testNumber="8"/>
			<description>Entry FitWindow in ViewerPreferences shall have type Boolean</description>
			<test>containsFitWindow == false || FitWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry FitWindow in ViewerPreferences has type %1 instead of type Boolean</message>
				<arguments>
					<argument>FitWindowType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-HideMenubar" testNumber="8"/>
			<description>Entry HideMenubar in ViewerPreferences shall have type Boolean</description>
			<test>containsHideMenubar == false || HideMenubarHasTypeBoolean == true</test>
			<error>
				<message>Entry HideMenubar in ViewerPreferences has type %1 instead of type Boolean</message>
				<arguments>
					<argument>HideMenubarType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-HideToolbar" testNumber="8"/>
			<description>Entry HideToolbar in ViewerPreferences shall have type Boolean</description>
			<test>containsHideToolbar == false || HideToolbarHasTypeBoolean == true</test>
			<error>
				<message>Entry HideToolbar in ViewerPreferences has type %1 instead of type Boolean</message>
				<arguments>
					<argument>HideToolbarType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-HideWindowUI" testNumber="8"/>
			<description>Entry HideWindowUI in ViewerPreferences shall have type Boolean</description>
			<test>containsHideWindowUI == false || HideWindowUIHasTypeBoolean == true</test>
			<error>
				<message>Entry HideWindowUI in ViewerPreferences has type %1 instead of type Boolean</message>
				<arguments>
					<argument>HideWindowUIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-NonFullScreenPageMode" testNumber="8"/>
			<description>Entry NonFullScreenPageMode in ViewerPreferences shall have type Name</description>
			<test>containsNonFullScreenPageMode == false || NonFullScreenPageModeHasTypeName == true</test>
			<error>
				<message>Entry NonFullScreenPageMode in ViewerPreferences has type %1 instead of type Name</message>
				<arguments>
					<argument>NonFullScreenPageModeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-NonFullScreenPageMode-Name" testNumber="6"/>
			<description>Entry NonFullScreenPageMode with type Name in ViewerPreferences shall have one of values: UseOutlines, UseThumbs, UseOC, UseNone</description>
			<test>NonFullScreenPageModeHasTypeName != true || NonFullScreenPageModeNameValue == "UseNone" || NonFullScreenPageModeNameValue == "UseOutlines" || NonFullScreenPageModeNameValue == "UseThumbs" || NonFullScreenPageModeNameValue == "UseOC"</test>
			<error>
				<message>Entry NonFullScreenPageMode with type Name in ViewerPreferences has incorrect value %1 instead of UseOutlines, UseThumbs, UseOC, UseNone</message>
				<arguments>
					<argument>NonFullScreenPageModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-NumCopies" testNumber="8"/>
			<description>Entry NumCopies in ViewerPreferences shall have type Integer</description>
			<test>containsNumCopies == false || NumCopiesHasTypeInteger == true</test>
			<error>
				<message>Entry NumCopies in ViewerPreferences has type %1 instead of type Integer</message>
				<arguments>
					<argument>NumCopiesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-NumCopies-Integer" testNumber="14"/>
			<description>Entry NumCopies with type Integer in ViewerPreferences shall satisfy possible value predicate: fn:Eval(@NumCopies &gt; 0)</description>
			<test>NumCopiesHasTypeInteger != true || NumCopiesIntegerValue &gt; 0</test>
			<error>
				<message>Entry NumCopies with type Integer in ViewerPreferences does not satisfy possible value predicate: fn:Eval(@NumCopies &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-PickTrayByPDFSize" testNumber="8"/>
			<description>Entry PickTrayByPDFSize in ViewerPreferences shall have type Boolean</description>
			<test>containsPickTrayByPDFSize == false || PickTrayByPDFSizeHasTypeBoolean == true</test>
			<error>
				<message>Entry PickTrayByPDFSize in ViewerPreferences has type %1 instead of type Boolean</message>
				<arguments>
					<argument>PickTrayByPDFSizeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-PrintArea" testNumber="8"/>
			<description>Entry PrintArea in ViewerPreferences shall have type Name</description>
			<test>containsPrintArea == false || PrintAreaHasTypeName == true</test>
			<error>
				<message>Entry PrintArea in ViewerPreferences has type %1 instead of type Name</message>
				<arguments>
					<argument>PrintAreaType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-PrintArea-Name" testNumber="6"/>
			<description>Entry PrintArea with type Name in ViewerPreferences shall have one of values: CropBox, BleedBox, TrimBox, MediaBox, ArtBox</description>
			<test>PrintAreaHasTypeName != true || PrintAreaNameValue == "MediaBox" || PrintAreaNameValue == "CropBox" || PrintAreaNameValue == "BleedBox" || PrintAreaNameValue == "TrimBox" || PrintAreaNameValue == "ArtBox"</test>
			<error>
				<message>Entry PrintArea with type Name in ViewerPreferences has incorrect value %1 instead of CropBox, BleedBox, TrimBox, MediaBox, ArtBox</message>
				<arguments>
					<argument>PrintAreaNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-PrintClip" testNumber="8"/>
			<description>Entry PrintClip in ViewerPreferences shall have type Name</description>
			<test>containsPrintClip == false || PrintClipHasTypeName == true</test>
			<error>
				<message>Entry PrintClip in ViewerPreferences has type %1 instead of type Name</message>
				<arguments>
					<argument>PrintClipType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-PrintClip-Name" testNumber="6"/>
			<description>Entry PrintClip with type Name in ViewerPreferences shall have one of values: CropBox, BleedBox, TrimBox, MediaBox, ArtBox</description>
			<test>PrintClipHasTypeName != true || PrintClipNameValue == "MediaBox" || PrintClipNameValue == "CropBox" || PrintClipNameValue == "BleedBox" || PrintClipNameValue == "TrimBox" || PrintClipNameValue == "ArtBox"</test>
			<error>
				<message>Entry PrintClip with type Name in ViewerPreferences has incorrect value %1 instead of CropBox, BleedBox, TrimBox, MediaBox, ArtBox</message>
				<arguments>
					<argument>PrintClipNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-PrintPageRange" testNumber="8"/>
			<description>Entry PrintPageRange in ViewerPreferences shall have type Array</description>
			<test>containsPrintPageRange == false || PrintPageRangeHasTypeArray == true</test>
			<error>
				<message>Entry PrintPageRange in ViewerPreferences has type %1 instead of type Array</message>
				<arguments>
					<argument>PrintPageRangeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-PrintScaling" testNumber="8"/>
			<description>Entry PrintScaling in ViewerPreferences shall have type Name</description>
			<test>containsPrintScaling == false || PrintScalingHasTypeName == true</test>
			<error>
				<message>Entry PrintScaling in ViewerPreferences has type %1 instead of type Name</message>
				<arguments>
					<argument>PrintScalingType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-ViewArea" testNumber="8"/>
			<description>Entry ViewArea in ViewerPreferences shall have type Name</description>
			<test>containsViewArea == false || ViewAreaHasTypeName == true</test>
			<error>
				<message>Entry ViewArea in ViewerPreferences has type %1 instead of type Name</message>
				<arguments>
					<argument>ViewAreaType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-ViewArea-Name" testNumber="6"/>
			<description>Entry ViewArea with type Name in ViewerPreferences shall have one of values: CropBox, BleedBox, TrimBox, MediaBox, ArtBox</description>
			<test>ViewAreaHasTypeName != true || ViewAreaNameValue == "MediaBox" || ViewAreaNameValue == "CropBox" || ViewAreaNameValue == "BleedBox" || ViewAreaNameValue == "TrimBox" || ViewAreaNameValue == "ArtBox"</test>
			<error>
				<message>Entry ViewArea with type Name in ViewerPreferences has incorrect value %1 instead of CropBox, BleedBox, TrimBox, MediaBox, ArtBox</message>
				<arguments>
					<argument>ViewAreaNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-ViewClip" testNumber="8"/>
			<description>Entry ViewClip in ViewerPreferences shall have type Name</description>
			<test>containsViewClip == false || ViewClipHasTypeName == true</test>
			<error>
				<message>Entry ViewClip in ViewerPreferences has type %1 instead of type Name</message>
				<arguments>
					<argument>ViewClipType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="ViewerPreferences-ViewClip-Name" testNumber="6"/>
			<description>Entry ViewClip with type Name in ViewerPreferences shall have one of values: CropBox, BleedBox, TrimBox, MediaBox, ArtBox</description>
			<test>ViewClipHasTypeName != true || ViewClipNameValue == "MediaBox" || ViewClipNameValue == "CropBox" || ViewClipNameValue == "BleedBox" || ViewClipNameValue == "TrimBox" || ViewClipNameValue == "ArtBox"</test>
			<error>
				<message>Entry ViewClip with type Name in ViewerPreferences has incorrect value %1 instead of CropBox, BleedBox, TrimBox, MediaBox, ArtBox</message>
				<arguments>
					<argument>ViewClipNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewport">
			<id specification="ISO_32000_1_7" clause="Viewport" testNumber="1"/>
			<description>Viewport shall not contain entries except BBox, Measure, Name, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>Viewport contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewport">
			<id specification="ISO_32000_1_7" clause="Viewport" testNumber="22"/>
			<description>Viewport shall not contain entry PtData in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsPtData == false</test>
			<error>
				<message>Viewport contains entry PtData</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AViewport">
			<id specification="ISO_32000_1_7" clause="Viewport-BBox" testNumber="8"/>
			<description>Entry BBox in Viewport shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in Viewport has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>BBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewport">
			<id specification="ISO_32000_1_7" clause="Viewport-BBox" testNumber="7"/>
			<description>Entry BBox in Viewport is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in Viewport is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AViewport">
			<id specification="ISO_32000_1_7" clause="Viewport-Measure" testNumber="8"/>
			<description>Entry Measure in Viewport shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in Viewport has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MeasureType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewport">
			<id specification="ISO_32000_1_7" clause="Viewport-Name" testNumber="8"/>
			<description>Entry Name in Viewport shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in Viewport has type %1 instead of type StringText</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewport">
			<id specification="ISO_32000_1_7" clause="Viewport-Type" testNumber="8"/>
			<description>Entry Type in Viewport shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Viewport has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewport">
			<id specification="ISO_32000_1_7" clause="Viewport-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in Viewport shall have value Viewport</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Viewport"</test>
			<error>
				<message>Entry Type with type Name in Viewport has incorrect value %1 instead of Viewport</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AVisibilityExpressionArray">
			<id specification="ISO_32000_1_7" clause="VisibilityExpressionArray" testNumber="4"/>
			<description>VisibilityExpressionArray shall contain at least 2 elements</description>
			<test>size &gt;= 2</test>
			<error>
				<message>VisibilityExpressionArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AVisibilityExpressionArray">
			<id specification="ISO_32000_1_7" clause="VisibilityExpressionArray-0" testNumber="8"/>
			<description>Entry 0 in VisibilityExpressionArray shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in VisibilityExpressionArray has type %1 instead of type Name</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AVisibilityExpressionArray">
			<id specification="ISO_32000_1_7" clause="VisibilityExpressionArray-0-Name" testNumber="6"/>
			<description>Entry 0 with type Name in VisibilityExpressionArray shall have one of values: Not, Or, And</description>
			<test>entry0HasTypeName != true || entry0NameValue == "And" || entry0NameValue == "Not" || entry0NameValue == "Or"</test>
			<error>
				<message>Entry 0 with type Name in VisibilityExpressionArray has incorrect value %1 instead of Not, Or, And</message>
				<arguments>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AVisibilityExpressionArray">
			<id specification="ISO_32000_1_7" clause="VisibilityExpressionArray-1" testNumber="8"/>
			<description>Entry 1 in VisibilityExpressionArray shall have one of types: Array, Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeArray == true || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in VisibilityExpressionArray has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AVisibilityExpressionArrayEntry">
			<id specification="ISO_32000_1_7" clause="VisibilityExpressionArrayEntry" testNumber="8"/>
			<description>Entry in VisibilityExpressionArray shall have one of types: Array, Dictionary</description>
			<test>HasTypeArray == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %keyName% in VisibilityExpressionArray has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="WebCaptureCommand" testNumber="1"/>
			<description>WebCaptureCommand shall not contain entries except CT, F, H, L, P, S, URL</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'F' &amp;&amp; elem != 'H' &amp;&amp; elem != 'L' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'URL' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>WebCaptureCommand contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'F' &amp;&amp; elem != 'H' &amp;&amp; elem != 'L' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'URL' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="WebCaptureCommand-CT" testNumber="8"/>
			<description>Entry CT in WebCaptureCommand shall have type StringAscii</description>
			<test>containsCT == false || CTHasTypeStringAscii == true</test>
			<error>
				<message>Entry CT in WebCaptureCommand has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>CTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="WebCaptureCommand-F" testNumber="8"/>
			<description>Entry F in WebCaptureCommand shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in WebCaptureCommand has type %1 instead of type Bitmask</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="WebCaptureCommand-F-Bitmask" testNumber="9"/>
			<description>Entry F with type Bitmask in WebCaptureCommand shall satisfy special case: fn:Eval(fn:BitsClear(4, 32))</description>
			<test>FHasTypeBitmask != true || ((FBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0)</test>
			<error>
				<message>Entry F with type Bitmask in WebCaptureCommand does not satisfy special case: fn:Eval(fn:BitsClear(4, 32))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="WebCaptureCommand-H" testNumber="8"/>
			<description>Entry H in WebCaptureCommand shall have type String</description>
			<test>containsH == false || HHasTypeString == true</test>
			<error>
				<message>Entry H in WebCaptureCommand has type %1 instead of type String</message>
				<arguments>
					<argument>HType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="WebCaptureCommand-L" testNumber="8"/>
			<description>Entry L in WebCaptureCommand shall have type Integer</description>
			<test>containsL == false || LHasTypeInteger == true</test>
			<error>
				<message>Entry L in WebCaptureCommand has type %1 instead of type Integer</message>
				<arguments>
					<argument>LType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="WebCaptureCommand-L-Integer" testNumber="9"/>
			<description>Entry L with type Integer in WebCaptureCommand shall satisfy special case: fn:Eval(@L &gt;= 1)</description>
			<test>LHasTypeInteger != true || (LIntegerValue &gt;= 1)</test>
			<error>
				<message>Entry L with type Integer in WebCaptureCommand does not satisfy special case: fn:Eval(@L &gt;= 1)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="WebCaptureCommand-P" testNumber="8"/>
			<description>Entry P in WebCaptureCommand shall have one of types: Stream, String</description>
			<test>containsP == false || PHasTypeStream == true || PHasTypeString == true</test>
			<error>
				<message>Entry P in WebCaptureCommand has type %1 instead of one of types: Stream, String</message>
				<arguments>
					<argument>PType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="WebCaptureCommand-P-Stream" testNumber="10"/>
			<description>Entry P with type Stream in WebCaptureCommand shall be indirect</description>
			<test>PHasTypeStream != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Stream in WebCaptureCommand is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="WebCaptureCommand-S" testNumber="8"/>
			<description>Entry S in WebCaptureCommand shall have type Dictionary</description>
			<test>containsS == false || SHasTypeDictionary == true</test>
			<error>
				<message>Entry S in WebCaptureCommand has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="WebCaptureCommand-URL" testNumber="8"/>
			<description>Entry URL in WebCaptureCommand shall have type StringAscii</description>
			<test>containsURL == false || URLHasTypeStringAscii == true</test>
			<error>
				<message>Entry URL in WebCaptureCommand has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>URLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="WebCaptureCommand-URL" testNumber="7"/>
			<description>Entry URL in WebCaptureCommand is required</description>
			<test>containsURL == true</test>
			<error>
				<message>Entry URL in WebCaptureCommand is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_7" clause="WebCaptureCommandSettings" testNumber="1"/>
			<description>WebCaptureCommandSettings shall not contain entries except C, G</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'G' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>WebCaptureCommandSettings contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'G' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_7" clause="WebCaptureCommandSettings-C" testNumber="8"/>
			<description>Entry C in WebCaptureCommandSettings shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in WebCaptureCommandSettings has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_7" clause="WebCaptureCommandSettings-G" testNumber="8"/>
			<description>Entry G in WebCaptureCommandSettings shall have type Dictionary</description>
			<test>containsG == false || GHasTypeDictionary == true</test>
			<error>
				<message>Entry G in WebCaptureCommandSettings has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>GType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet" testNumber="1"/>
			<description>WebCaptureImageSet shall not contain entries except CT, ID, O, R, S, SI, TS, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'O' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SI' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>WebCaptureImageSet contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'O' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SI' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-CT" testNumber="8"/>
			<description>Entry CT in WebCaptureImageSet shall have type String</description>
			<test>containsCT == false || CTHasTypeString == true</test>
			<error>
				<message>Entry CT in WebCaptureImageSet has type %1 instead of type String</message>
				<arguments>
					<argument>CTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-ID" testNumber="8"/>
			<description>Entry ID in WebCaptureImageSet shall have type String</description>
			<test>containsID == false || entryIDHasTypeString == true</test>
			<error>
				<message>Entry ID in WebCaptureImageSet has type %1 instead of type String</message>
				<arguments>
					<argument>entryIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-ID" testNumber="7"/>
			<description>Entry ID in WebCaptureImageSet is required</description>
			<test>containsID == true</test>
			<error>
				<message>Entry ID in WebCaptureImageSet is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-O" testNumber="8"/>
			<description>Entry O in WebCaptureImageSet shall have type Array</description>
			<test>containsO == false || OHasTypeArray == true</test>
			<error>
				<message>Entry O in WebCaptureImageSet has type %1 instead of type Array</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-O" testNumber="7"/>
			<description>Entry O in WebCaptureImageSet is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in WebCaptureImageSet is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-R" testNumber="8"/>
			<description>Entry R in WebCaptureImageSet shall have one of types: Array, Integer</description>
			<test>containsR == false || RHasTypeArray == true || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in WebCaptureImageSet has type %1 instead of one of types: Array, Integer</message>
				<arguments>
					<argument>RType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-R" testNumber="7"/>
			<description>Entry R in WebCaptureImageSet is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in WebCaptureImageSet is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-R-Array" testNumber="9"/>
			<description>Entry R with type Array in WebCaptureImageSet shall satisfy special case: fn:Eval(fn:ArrayLength(O) == fn:ArrayLength(R))</description>
			<test>RHasTypeArray != true || (OHasTypeArray == false || OArraySize == RArraySize)</test>
			<error>
				<message>Entry R with type Array in WebCaptureImageSet does not satisfy special case: fn:Eval(fn:ArrayLength(O) == fn:ArrayLength(R))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-R-Integer" testNumber="9"/>
			<description>Entry R with type Integer in WebCaptureImageSet shall satisfy special case: fn:Eval(@R &gt; 0)</description>
			<test>RHasTypeInteger != true || (RIntegerValue &gt; 0)</test>
			<error>
				<message>Entry R with type Integer in WebCaptureImageSet does not satisfy special case: fn:Eval(@R &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-S" testNumber="8"/>
			<description>Entry S in WebCaptureImageSet shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in WebCaptureImageSet has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-S" testNumber="7"/>
			<description>Entry S in WebCaptureImageSet is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in WebCaptureImageSet is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-S-Name" testNumber="6"/>
			<description>Entry S with type Name in WebCaptureImageSet shall have value SIS</description>
			<test>SHasTypeName != true || SNameValue == "SIS"</test>
			<error>
				<message>Entry S with type Name in WebCaptureImageSet has incorrect value %1 instead of SIS</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-SI" testNumber="8"/>
			<description>Entry SI in WebCaptureImageSet shall have one of types: Array, Dictionary</description>
			<test>containsSI == false || SIHasTypeArray == true || SIHasTypeDictionary == true</test>
			<error>
				<message>Entry SI in WebCaptureImageSet has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>SIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-SI" testNumber="7"/>
			<description>Entry SI in WebCaptureImageSet is required</description>
			<test>containsSI == true</test>
			<error>
				<message>Entry SI in WebCaptureImageSet is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-TS" testNumber="8"/>
			<description>Entry TS in WebCaptureImageSet shall have type Date</description>
			<test>containsTS == false || TSHasTypeDate == true</test>
			<error>
				<message>Entry TS in WebCaptureImageSet has type %1 instead of type Date</message>
				<arguments>
					<argument>TSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-Type" testNumber="8"/>
			<description>Entry Type in WebCaptureImageSet shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in WebCaptureImageSet has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="WebCaptureImageSet-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in WebCaptureImageSet shall have value SpiderContentSet</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SpiderContentSet"</test>
			<error>
				<message>Entry Type with type Name in WebCaptureImageSet has incorrect value %1 instead of SpiderContentSet</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_7" clause="WebCaptureInfo" testNumber="1"/>
			<description>WebCaptureInfo shall not contain entries except C, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>WebCaptureInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'V' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_7" clause="WebCaptureInfo-C" testNumber="8"/>
			<description>Entry C in WebCaptureInfo shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in WebCaptureInfo has type %1 instead of type Array</message>
				<arguments>
					<argument>CType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_7" clause="WebCaptureInfo-V" testNumber="8"/>
			<description>Entry V in WebCaptureInfo shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in WebCaptureInfo has type %1 instead of type Number</message>
				<arguments>
					<argument>VType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_7" clause="WebCaptureInfo-V" testNumber="7"/>
			<description>Entry V in WebCaptureInfo is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in WebCaptureInfo is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_7" clause="WebCaptureInfo-V-Number" testNumber="6"/>
			<description>Entry V with type Number in WebCaptureInfo shall have value 1</description>
			<test>VHasTypeNumber != true || VNumberValue == 1</test>
			<error>
				<message>Entry V with type Number in WebCaptureInfo has incorrect value %1 instead of 1</message>
				<arguments>
					<argument>VNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="WebCapturePageSet" testNumber="1"/>
			<description>WebCapturePageSet shall not contain entries except CT, ID, O, S, SI, T, TID, TS, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'O' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SI' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TID' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>WebCapturePageSet contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'O' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SI' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TID' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="WebCapturePageSet-CT" testNumber="8"/>
			<description>Entry CT in WebCapturePageSet shall have type StringAscii</description>
			<test>containsCT == false || CTHasTypeStringAscii == true</test>
			<error>
				<message>Entry CT in WebCapturePageSet has type %1 instead of type StringAscii</message>
				<arguments>
					<argument>CTType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="WebCapturePageSet-ID" testNumber="8"/>
			<description>Entry ID in WebCapturePageSet shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in WebCapturePageSet has type %1 instead of type StringByte</message>
				<arguments>
					<argument>entryIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="WebCapturePageSet-ID" testNumber="7"/>
			<description>Entry ID in WebCapturePageSet is required</description>
			<test>containsID == true</test>
			<error>
				<message>Entry ID in WebCapturePageSet is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="WebCapturePageSet-O" testNumber="8"/>
			<description>Entry O in WebCapturePageSet shall have type Array</description>
			<test>containsO == false || OHasTypeArray == true</test>
			<error>
				<message>Entry O in WebCapturePageSet has type %1 instead of type Array</message>
				<arguments>
					<argument>OType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="WebCapturePageSet-O" testNumber="7"/>
			<description>Entry O in WebCapturePageSet is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in WebCapturePageSet is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="WebCapturePageSet-S" testNumber="8"/>
			<description>Entry S in WebCapturePageSet shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in WebCapturePageSet has type %1 instead of type Name</message>
				<arguments>
					<argument>SType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="WebCapturePageSet-S" testNumber="7"/>
			<description>Entry S in WebCapturePageSet is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in WebCapturePageSet is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="WebCapturePageSet-S-Name" testNumber="6"/>
			<description>Entry S with type Name in WebCapturePageSet shall have value SPS</description>
			<test>SHasTypeName != true || SNameValue == "SPS"</test>
			<error>
				<message>Entry S with type Name in WebCapturePageSet has incorrect value %1 instead of SPS</message>
				<arguments>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="WebCapturePageSet-SI" testNumber="8"/>
			<description>Entry SI in WebCapturePageSet shall have one of types: Array, Dictionary</description>
			<test>containsSI == false || SIHasTypeArray == true || SIHasTypeDictionary == true</test>
			<error>
				<message>Entry SI in WebCapturePageSet has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>SIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="WebCapturePageSet-SI" testNumber="7"/>
			<description>Entry SI in WebCapturePageSet is required</description>
			<test>containsSI == true</test>
			<error>
				<message>Entry SI in WebCapturePageSet is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="WebCapturePageSet-T" testNumber="8"/>
			<description>Entry T in WebCapturePageSet shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in WebCapturePageSet has type %1 instead of type StringText</message>
				<arguments>
					<argument>TType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="WebCapturePageSet-TID" testNumber="8"/>
			<description>Entry TID in WebCapturePageSet shall have type StringByte</description>
			<test>containsTID == false || TIDHasTypeStringByte == true</test>
			<error>
				<message>Entry TID in WebCapturePageSet has type %1 instead of type StringByte</message>
				<arguments>
					<argument>TIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="WebCapturePageSet-TS" testNumber="8"/>
			<description>Entry TS in WebCapturePageSet shall have type Date</description>
			<test>containsTS == false || TSHasTypeDate == true</test>
			<error>
				<message>Entry TS in WebCapturePageSet has type %1 instead of type Date</message>
				<arguments>
					<argument>TSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="WebCapturePageSet-Type" testNumber="8"/>
			<description>Entry Type in WebCapturePageSet shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in WebCapturePageSet has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="WebCapturePageSet-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in WebCapturePageSet shall have value SpiderContentSet</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SpiderContentSet"</test>
			<error>
				<message>Entry Type with type Name in WebCapturePageSet has incorrect value %1 instead of SpiderContentSet</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_7" clause="WhitepointArray" testNumber="2"/>
			<description>WhitepointArray shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>WhitepointArray contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_7" clause="WhitepointArray-0" testNumber="8"/>
			<description>Entry 0 in WhitepointArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in WhitepointArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry0Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_7" clause="WhitepointArray-0-Number" testNumber="14"/>
			<description>Entry 0 with type Number in WhitepointArray shall satisfy possible value predicate: fn:Eval(@0 &gt; 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt; 0</test>
			<error>
				<message>Entry 0 with type Number in WhitepointArray does not satisfy possible value predicate: fn:Eval(@0 &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_7" clause="WhitepointArray-1" testNumber="8"/>
			<description>Entry 1 in WhitepointArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in WhitepointArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_7" clause="WhitepointArray-1-Number" testNumber="6"/>
			<description>Entry 1 with type Number in WhitepointArray shall have value 1</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue == 1</test>
			<error>
				<message>Entry 1 with type Number in WhitepointArray has incorrect value %1 instead of 1</message>
				<arguments>
					<argument>entry1NumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_7" clause="WhitepointArray-2" testNumber="8"/>
			<description>Entry 2 in WhitepointArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in WhitepointArray has type %1 instead of type Number</message>
				<arguments>
					<argument>entry2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_7" clause="WhitepointArray-2-Number" testNumber="14"/>
			<description>Entry 2 with type Number in WhitepointArray shall satisfy possible value predicate: fn:Eval(@2 &gt; 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt; 0</test>
			<error>
				<message>Entry 2 with type Number in WhitepointArray does not satisfy possible value predicate: fn:Eval(@2 &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS" testNumber="1"/>
			<description>XObjectFormPS shall not contain entries except DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Level1, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Level1' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>XObjectFormPS contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Level1' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormPS shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormPS is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in XObjectFormPS shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPS has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-DecodeParms" testNumber="5"/>
			<description>Entry DecodeParms in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsDecodeParms == false</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPS is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in XObjectFormPS shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPS does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-F" testNumber="8"/>
			<description>Entry F in XObjectFormPS shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectFormPS has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-F" testNumber="5"/>
			<description>Entry F in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsF == false</test>
			<error>
				<message>Entry F in XObjectFormPS is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormPS shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormPS is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in XObjectFormPS shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPS has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-FDecodeParms" testNumber="5"/>
			<description>Entry FDecodeParms in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsFDecodeParms == false</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPS is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPS shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPS does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-FFilter" testNumber="8"/>
			<description>Entry FFilter in XObjectFormPS shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectFormPS has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-FFilter" testNumber="5"/>
			<description>Entry FFilter in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsFFilter == false</test>
			<error>
				<message>Entry FFilter in XObjectFormPS is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in XObjectFormPS shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPS does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in XObjectFormPS shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormPS has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Filter" testNumber="8"/>
			<description>Entry Filter in XObjectFormPS shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectFormPS has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Filter" testNumber="5"/>
			<description>Entry Filter in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsFilter == false</test>
			<error>
				<message>Entry Filter in XObjectFormPS is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in XObjectFormPS shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPS does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in XObjectFormPS shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormPS has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Length" testNumber="8"/>
			<description>Entry Length in XObjectFormPS shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormPS has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Length" testNumber="7"/>
			<description>Entry Length in XObjectFormPS is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormPS is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Length" testNumber="5"/>
			<description>Entry Length in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsLength == false</test>
			<error>
				<message>Entry Length in XObjectFormPS is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Level1" testNumber="8"/>
			<description>Entry Level1 in XObjectFormPS shall have type Stream</description>
			<test>containsLevel1 == false || Level1HasTypeStream == true</test>
			<error>
				<message>Entry Level1 in XObjectFormPS has type %1 instead of type Stream</message>
				<arguments>
					<argument>Level1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Level1" testNumber="5"/>
			<description>Entry Level1 in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsLevel1 == false</test>
			<error>
				<message>Entry Level1 in XObjectFormPS is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Level1-Stream" testNumber="10"/>
			<description>Entry Level1 with type Stream in XObjectFormPS shall be indirect</description>
			<test>Level1HasTypeStream != true || isLevel1Indirect == true</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPS is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Subtype" testNumber="8"/>
			<description>Entry Subtype in XObjectFormPS shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPS has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Subtype" testNumber="7"/>
			<description>Entry Subtype in XObjectFormPS is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPS is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Subtype" testNumber="5"/>
			<description>Entry Subtype in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsSubtype == false</test>
			<error>
				<message>Entry Subtype in XObjectFormPS is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in XObjectFormPS shall have value PS</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PS"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormPS has incorrect value %1 instead of PS</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Type" testNumber="8"/>
			<description>Entry Type in XObjectFormPS shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormPS has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Type" testNumber="5"/>
			<description>Entry Type in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsType == false</test>
			<error>
				<message>Entry Type in XObjectFormPS is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="XObjectFormPS-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in XObjectFormPS shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormPS has incorrect value %1 instead of XObject</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough" testNumber="1"/>
			<description>XObjectFormPSpassthrough shall not contain entries except BBox, DecodeParms, F, FDecodeParms, FFilter, Filter, FormType, Length, Level1, Matrix, PS, Subtype, Subtype2, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Level1' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Subtype2' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>XObjectFormPSpassthrough contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Level1' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Subtype2' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-BBox" testNumber="8"/>
			<description>Entry BBox in XObjectFormPSpassthrough shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormPSpassthrough has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>BBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-BBox" testNumber="7"/>
			<description>Entry BBox in XObjectFormPSpassthrough is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormPSpassthrough is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-BBox" testNumber="5"/>
			<description>Entry BBox in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsBBox == false</test>
			<error>
				<message>Entry BBox in XObjectFormPSpassthrough is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormPSpassthrough shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormPSpassthrough is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in XObjectFormPSpassthrough shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPSpassthrough has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-DecodeParms" testNumber="5"/>
			<description>Entry DecodeParms in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsDecodeParms == false</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPSpassthrough is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in XObjectFormPSpassthrough shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPSpassthrough does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-F" testNumber="8"/>
			<description>Entry F in XObjectFormPSpassthrough shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectFormPSpassthrough has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-F" testNumber="5"/>
			<description>Entry F in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsF == false</test>
			<error>
				<message>Entry F in XObjectFormPSpassthrough is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormPSpassthrough shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormPSpassthrough is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in XObjectFormPSpassthrough shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPSpassthrough has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-FDecodeParms" testNumber="5"/>
			<description>Entry FDecodeParms in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsFDecodeParms == false</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPSpassthrough is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPSpassthrough shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPSpassthrough does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-FFilter" testNumber="8"/>
			<description>Entry FFilter in XObjectFormPSpassthrough shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectFormPSpassthrough has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-FFilter" testNumber="5"/>
			<description>Entry FFilter in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsFFilter == false</test>
			<error>
				<message>Entry FFilter in XObjectFormPSpassthrough is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in XObjectFormPSpassthrough shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPSpassthrough does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in XObjectFormPSpassthrough shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormPSpassthrough has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Filter" testNumber="8"/>
			<description>Entry Filter in XObjectFormPSpassthrough shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectFormPSpassthrough has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Filter" testNumber="5"/>
			<description>Entry Filter in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsFilter == false</test>
			<error>
				<message>Entry Filter in XObjectFormPSpassthrough is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in XObjectFormPSpassthrough shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPSpassthrough does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in XObjectFormPSpassthrough shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormPSpassthrough has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-FormType" testNumber="8"/>
			<description>Entry FormType in XObjectFormPSpassthrough shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormPSpassthrough has type %1 instead of type Integer</message>
				<arguments>
					<argument>FormTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-FormType" testNumber="5"/>
			<description>Entry FormType in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsFormType == false</test>
			<error>
				<message>Entry FormType in XObjectFormPSpassthrough is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-FormType-Integer" testNumber="6"/>
			<description>Entry FormType with type Integer in XObjectFormPSpassthrough shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormPSpassthrough has incorrect value %1 instead of 1</message>
				<arguments>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Length" testNumber="8"/>
			<description>Entry Length in XObjectFormPSpassthrough shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormPSpassthrough has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Length" testNumber="7"/>
			<description>Entry Length in XObjectFormPSpassthrough is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormPSpassthrough is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Length" testNumber="5"/>
			<description>Entry Length in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsLength == false</test>
			<error>
				<message>Entry Length in XObjectFormPSpassthrough is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Level1" testNumber="8"/>
			<description>Entry Level1 in XObjectFormPSpassthrough shall have type Stream</description>
			<test>containsLevel1 == false || Level1HasTypeStream == true</test>
			<error>
				<message>Entry Level1 in XObjectFormPSpassthrough has type %1 instead of type Stream</message>
				<arguments>
					<argument>Level1Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Level1" testNumber="5"/>
			<description>Entry Level1 in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsLevel1 == false</test>
			<error>
				<message>Entry Level1 in XObjectFormPSpassthrough is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Level1-Stream" testNumber="10"/>
			<description>Entry Level1 with type Stream in XObjectFormPSpassthrough shall be indirect</description>
			<test>Level1HasTypeStream != true || isLevel1Indirect == true</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPSpassthrough is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Matrix" testNumber="8"/>
			<description>Entry Matrix in XObjectFormPSpassthrough shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormPSpassthrough has type %1 instead of type Matrix</message>
				<arguments>
					<argument>MatrixType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Matrix" testNumber="5"/>
			<description>Entry Matrix in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsMatrix == false</test>
			<error>
				<message>Entry Matrix in XObjectFormPSpassthrough is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-PS" testNumber="8"/>
			<description>Entry PS in XObjectFormPSpassthrough shall have type Stream</description>
			<test>containsPS == false || PSHasTypeStream == true</test>
			<error>
				<message>Entry PS in XObjectFormPSpassthrough has type %1 instead of type Stream</message>
				<arguments>
					<argument>PSType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-PS" testNumber="7"/>
			<description>Entry PS in XObjectFormPSpassthrough is required</description>
			<test>containsPS == true</test>
			<error>
				<message>Entry PS in XObjectFormPSpassthrough is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-PS" testNumber="5"/>
			<description>Entry PS in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsPS == false</test>
			<error>
				<message>Entry PS in XObjectFormPSpassthrough is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-PS-Stream" testNumber="10"/>
			<description>Entry PS with type Stream in XObjectFormPSpassthrough shall be indirect</description>
			<test>PSHasTypeStream != true || isPSIndirect == true</test>
			<error>
				<message>Entry PS with type Stream in XObjectFormPSpassthrough is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Subtype" testNumber="8"/>
			<description>Entry Subtype in XObjectFormPSpassthrough shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPSpassthrough has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Subtype" testNumber="7"/>
			<description>Entry Subtype in XObjectFormPSpassthrough is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPSpassthrough is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Subtype" testNumber="5"/>
			<description>Entry Subtype in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsSubtype == false</test>
			<error>
				<message>Entry Subtype in XObjectFormPSpassthrough is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in XObjectFormPSpassthrough shall have value PS</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PS"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormPSpassthrough has incorrect value %1 instead of PS</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Subtype2" testNumber="8"/>
			<description>Entry Subtype2 in XObjectFormPSpassthrough shall have type Name</description>
			<test>containsSubtype2 == false || Subtype2HasTypeName == true</test>
			<error>
				<message>Entry Subtype2 in XObjectFormPSpassthrough has type %1 instead of type Name</message>
				<arguments>
					<argument>Subtype2Type</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Subtype2" testNumber="7"/>
			<description>Entry Subtype2 in XObjectFormPSpassthrough is required</description>
			<test>containsSubtype2 == true</test>
			<error>
				<message>Entry Subtype2 in XObjectFormPSpassthrough is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Subtype2" testNumber="5"/>
			<description>Entry Subtype2 in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsSubtype2 == false</test>
			<error>
				<message>Entry Subtype2 in XObjectFormPSpassthrough is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Subtype2-Name" testNumber="6"/>
			<description>Entry Subtype2 with type Name in XObjectFormPSpassthrough shall have value PS</description>
			<test>Subtype2HasTypeName != true || Subtype2NameValue == "PS"</test>
			<error>
				<message>Entry Subtype2 with type Name in XObjectFormPSpassthrough has incorrect value %1 instead of PS</message>
				<arguments>
					<argument>Subtype2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Type" testNumber="8"/>
			<description>Entry Type in XObjectFormPSpassthrough shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormPSpassthrough has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Type" testNumber="5"/>
			<description>Entry Type in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsType == false</test>
			<error>
				<message>Entry Type in XObjectFormPSpassthrough is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="XObjectFormPSpassthrough-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in XObjectFormPSpassthrough shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormPSpassthrough has incorrect value %1 instead of XObject</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark" testNumber="1"/>
			<description>XObjectFormPrinterMark shall not contain entries except AF, BBox, Colorants, DL, DecodeParms, F, FDecodeParms, FFilter, Filter, FormType, Group, LastModified, Length, MarkStyle, Matrix, Measure, Metadata, Name, OC, OPI, PieceInfo, PtData, Ref, Resources, StructParent, StructParents, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Colorants' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'MarkStyle' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>XObjectFormPrinterMark contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Colorants' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'MarkStyle' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-AF" testNumber="8"/>
			<description>Entry AF in XObjectFormPrinterMark shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in XObjectFormPrinterMark has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-AF" testNumber="23"/>
			<description>Entry AF in XObjectFormPrinterMark can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in XObjectFormPrinterMark is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-BBox" testNumber="8"/>
			<description>Entry BBox in XObjectFormPrinterMark shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormPrinterMark has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>BBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-BBox" testNumber="7"/>
			<description>Entry BBox in XObjectFormPrinterMark is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormPrinterMark is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Colorants" testNumber="8"/>
			<description>Entry Colorants in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsColorants == false || ColorantsHasTypeDictionary == true</test>
			<error>
				<message>Entry Colorants in XObjectFormPrinterMark has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ColorantsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-DL" testNumber="8"/>
			<description>Entry DL in XObjectFormPrinterMark shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectFormPrinterMark has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in XObjectFormPrinterMark shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectFormPrinterMark does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormPrinterMark shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormPrinterMark is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in XObjectFormPrinterMark shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPrinterMark has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in XObjectFormPrinterMark shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPrinterMark does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-F" testNumber="8"/>
			<description>Entry F in XObjectFormPrinterMark shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectFormPrinterMark has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormPrinterMark shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormPrinterMark is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in XObjectFormPrinterMark shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPrinterMark has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPrinterMark shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPrinterMark does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-FFilter" testNumber="8"/>
			<description>Entry FFilter in XObjectFormPrinterMark shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectFormPrinterMark has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in XObjectFormPrinterMark shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPrinterMark does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in XObjectFormPrinterMark shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormPrinterMark has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Filter" testNumber="8"/>
			<description>Entry Filter in XObjectFormPrinterMark shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectFormPrinterMark has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in XObjectFormPrinterMark shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPrinterMark does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in XObjectFormPrinterMark shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormPrinterMark has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-FormType" testNumber="8"/>
			<description>Entry FormType in XObjectFormPrinterMark shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormPrinterMark has type %1 instead of type Integer</message>
				<arguments>
					<argument>FormTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-FormType-Integer" testNumber="6"/>
			<description>Entry FormType with type Integer in XObjectFormPrinterMark shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormPrinterMark has incorrect value %1 instead of 1</message>
				<arguments>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Group" testNumber="8"/>
			<description>Entry Group in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsGroup == false || GroupHasTypeDictionary == true</test>
			<error>
				<message>Entry Group in XObjectFormPrinterMark has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>GroupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-LastModified" testNumber="8"/>
			<description>Entry LastModified in XObjectFormPrinterMark shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in XObjectFormPrinterMark has type %1 instead of type Date</message>
				<arguments>
					<argument>LastModifiedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-LastModified" testNumber="11"/>
			<description>Entry LastModified in XObjectFormPrinterMark is required, when fn:IsPresent(PieceInfo)</description>
			<test>containsLastModified == true || (containsPieceInfo != true)</test>
			<error>
				<message>Entry LastModified in XObjectFormPrinterMark is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Length" testNumber="8"/>
			<description>Entry Length in XObjectFormPrinterMark shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormPrinterMark has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Length" testNumber="7"/>
			<description>Entry Length in XObjectFormPrinterMark is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormPrinterMark is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-MarkStyle" testNumber="8"/>
			<description>Entry MarkStyle in XObjectFormPrinterMark shall have type StringText</description>
			<test>containsMarkStyle == false || MarkStyleHasTypeStringText == true</test>
			<error>
				<message>Entry MarkStyle in XObjectFormPrinterMark has type %1 instead of type StringText</message>
				<arguments>
					<argument>MarkStyleType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Matrix" testNumber="8"/>
			<description>Entry Matrix in XObjectFormPrinterMark shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormPrinterMark has type %1 instead of type Matrix</message>
				<arguments>
					<argument>MatrixType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Measure-Dictionary" testNumber="17"/>
			<description>Entry Measure with type Dictionary in XObjectFormPrinterMark shall be one of objects MeasureRL, MeasureGEO</description>
			<test>MeasureHasTypeDictionary != true || Measure_size == 1</test>
			<error>
				<message>Entry Measure with type Dictionary in XObjectFormPrinterMark is not one of objects MeasureRL, MeasureGEO</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Measure" testNumber="8"/>
			<description>Entry Measure in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in XObjectFormPrinterMark has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MeasureType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Measure" testNumber="23"/>
			<description>Entry Measure in XObjectFormPrinterMark can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsMeasure == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Measure in XObjectFormPrinterMark is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Metadata" testNumber="8"/>
			<description>Entry Metadata in XObjectFormPrinterMark shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectFormPrinterMark has type %1 instead of type Stream</message>
				<arguments>
					<argument>MetadataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Metadata-Stream" testNumber="10"/>
			<description>Entry Metadata with type Stream in XObjectFormPrinterMark shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectFormPrinterMark is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Name" testNumber="8"/>
			<description>Entry Name in XObjectFormPrinterMark shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectFormPrinterMark has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in XObjectFormPrinterMark shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in XObjectFormPrinterMark is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-OC" testNumber="8"/>
			<description>Entry OC in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in XObjectFormPrinterMark has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-OPI-Dictionary" testNumber="17"/>
			<description>Entry OPI with type Dictionary in XObjectFormPrinterMark shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectFormPrinterMark is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-OPI" testNumber="8"/>
			<description>Entry OPI in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectFormPrinterMark has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OPIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-PieceInfo" testNumber="8"/>
			<description>Entry PieceInfo in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in XObjectFormPrinterMark has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PieceInfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-PtData" testNumber="8"/>
			<description>Entry PtData in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsPtData == false || PtDataHasTypeDictionary == true</test>
			<error>
				<message>Entry PtData in XObjectFormPrinterMark has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PtDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-PtData" testNumber="23"/>
			<description>Entry PtData in XObjectFormPrinterMark can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsPtData == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PtData in XObjectFormPrinterMark is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Ref" testNumber="8"/>
			<description>Entry Ref in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsRef == false || RefHasTypeDictionary == true</test>
			<error>
				<message>Entry Ref in XObjectFormPrinterMark has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>RefType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Resources" testNumber="8"/>
			<description>Entry Resources in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in XObjectFormPrinterMark has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ResourcesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-StructParent" testNumber="8"/>
			<description>Entry StructParent in XObjectFormPrinterMark shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectFormPrinterMark has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-StructParents" testNumber="8"/>
			<description>Entry StructParents in XObjectFormPrinterMark shall have type Integer</description>
			<test>containsStructParents == false || StructParentsHasTypeInteger == true</test>
			<error>
				<message>Entry StructParents in XObjectFormPrinterMark has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Subtype" testNumber="8"/>
			<description>Entry Subtype in XObjectFormPrinterMark shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPrinterMark has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Subtype" testNumber="7"/>
			<description>Entry Subtype in XObjectFormPrinterMark is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPrinterMark is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in XObjectFormPrinterMark shall have value Form</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Form"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormPrinterMark has incorrect value %1 instead of Form</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Type" testNumber="8"/>
			<description>Entry Type in XObjectFormPrinterMark shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormPrinterMark has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="XObjectFormPrinterMark-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in XObjectFormPrinterMark shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormPrinterMark has incorrect value %1 instead of XObject</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet" testNumber="1"/>
			<description>XObjectFormTrapNet shall not contain entries except AF, BBox, DL, DecodeParms, F, FDecodeParms, FFilter, Filter, FormType, Group, LastModified, Length, Matrix, Measure, Metadata, Name, OC, OPI, PCM, PieceInfo, PtData, Ref, Resources, SeparationColorNames, StructParent, StructParents, Subtype, TrapRegions, TrapStyles, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PCM' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'SeparationColorNames' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TrapRegions' &amp;&amp; elem != 'TrapStyles' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>XObjectFormTrapNet contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PCM' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'SeparationColorNames' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TrapRegions' &amp;&amp; elem != 'TrapStyles' &amp;&amp; elem != 'Type' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-AF" testNumber="8"/>
			<description>Entry AF in XObjectFormTrapNet shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in XObjectFormTrapNet has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-AF" testNumber="23"/>
			<description>Entry AF in XObjectFormTrapNet can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in XObjectFormTrapNet is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-BBox" testNumber="8"/>
			<description>Entry BBox in XObjectFormTrapNet shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormTrapNet has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>BBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-BBox" testNumber="7"/>
			<description>Entry BBox in XObjectFormTrapNet is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormTrapNet is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-DL" testNumber="8"/>
			<description>Entry DL in XObjectFormTrapNet shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectFormTrapNet has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in XObjectFormTrapNet shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectFormTrapNet does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormTrapNet shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormTrapNet is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in XObjectFormTrapNet shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormTrapNet has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in XObjectFormTrapNet shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormTrapNet does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-F" testNumber="8"/>
			<description>Entry F in XObjectFormTrapNet shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectFormTrapNet has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormTrapNet shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormTrapNet is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in XObjectFormTrapNet shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormTrapNet has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in XObjectFormTrapNet shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormTrapNet does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-FFilter" testNumber="8"/>
			<description>Entry FFilter in XObjectFormTrapNet shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectFormTrapNet has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in XObjectFormTrapNet shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormTrapNet does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in XObjectFormTrapNet shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormTrapNet has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Filter" testNumber="8"/>
			<description>Entry Filter in XObjectFormTrapNet shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectFormTrapNet has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in XObjectFormTrapNet shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormTrapNet does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in XObjectFormTrapNet shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormTrapNet has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-FormType" testNumber="8"/>
			<description>Entry FormType in XObjectFormTrapNet shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormTrapNet has type %1 instead of type Integer</message>
				<arguments>
					<argument>FormTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-FormType-Integer" testNumber="6"/>
			<description>Entry FormType with type Integer in XObjectFormTrapNet shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormTrapNet has incorrect value %1 instead of 1</message>
				<arguments>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Group" testNumber="8"/>
			<description>Entry Group in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsGroup == false || GroupHasTypeDictionary == true</test>
			<error>
				<message>Entry Group in XObjectFormTrapNet has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>GroupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-LastModified" testNumber="8"/>
			<description>Entry LastModified in XObjectFormTrapNet shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in XObjectFormTrapNet has type %1 instead of type Date</message>
				<arguments>
					<argument>LastModifiedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-LastModified" testNumber="11"/>
			<description>Entry LastModified in XObjectFormTrapNet is required, when fn:IsPresent(PieceInfo)</description>
			<test>containsLastModified == true || (containsPieceInfo != true)</test>
			<error>
				<message>Entry LastModified in XObjectFormTrapNet is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Length" testNumber="8"/>
			<description>Entry Length in XObjectFormTrapNet shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormTrapNet has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Length" testNumber="7"/>
			<description>Entry Length in XObjectFormTrapNet is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormTrapNet is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Matrix" testNumber="8"/>
			<description>Entry Matrix in XObjectFormTrapNet shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormTrapNet has type %1 instead of type Matrix</message>
				<arguments>
					<argument>MatrixType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Measure" testNumber="8"/>
			<description>Entry Measure in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in XObjectFormTrapNet has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MeasureType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Measure" testNumber="23"/>
			<description>Entry Measure in XObjectFormTrapNet can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsMeasure == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Measure in XObjectFormTrapNet is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Metadata" testNumber="8"/>
			<description>Entry Metadata in XObjectFormTrapNet shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectFormTrapNet has type %1 instead of type Stream</message>
				<arguments>
					<argument>MetadataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Metadata-Stream" testNumber="10"/>
			<description>Entry Metadata with type Stream in XObjectFormTrapNet shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectFormTrapNet is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Name" testNumber="8"/>
			<description>Entry Name in XObjectFormTrapNet shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectFormTrapNet has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in XObjectFormTrapNet shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in XObjectFormTrapNet is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-OC" testNumber="8"/>
			<description>Entry OC in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in XObjectFormTrapNet has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-OPI-Dictionary" testNumber="17"/>
			<description>Entry OPI with type Dictionary in XObjectFormTrapNet shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectFormTrapNet is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-OPI" testNumber="8"/>
			<description>Entry OPI in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectFormTrapNet has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OPIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-PCM" testNumber="8"/>
			<description>Entry PCM in XObjectFormTrapNet shall have type Name</description>
			<test>containsPCM == false || PCMHasTypeName == true</test>
			<error>
				<message>Entry PCM in XObjectFormTrapNet has type %1 instead of type Name</message>
				<arguments>
					<argument>PCMType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-PCM" testNumber="7"/>
			<description>Entry PCM in XObjectFormTrapNet is required</description>
			<test>containsPCM == true</test>
			<error>
				<message>Entry PCM in XObjectFormTrapNet is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-PCM-Name" testNumber="6"/>
			<description>Entry PCM with type Name in XObjectFormTrapNet shall have one of values: DeviceGray, DeviceRGBK, DeviceRGB, DeviceN, DeviceCMYK, DeviceCMY</description>
			<test>PCMHasTypeName != true || PCMNameValue == "DeviceGray" || PCMNameValue == "DeviceRGB" || PCMNameValue == "DeviceCMYK" || PCMNameValue == "DeviceCMY" || PCMNameValue == "DeviceRGBK" || PCMNameValue == "DeviceN"</test>
			<error>
				<message>Entry PCM with type Name in XObjectFormTrapNet has incorrect value %1 instead of DeviceGray, DeviceRGBK, DeviceRGB, DeviceN, DeviceCMYK, DeviceCMY</message>
				<arguments>
					<argument>PCMNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-PieceInfo" testNumber="8"/>
			<description>Entry PieceInfo in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in XObjectFormTrapNet has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PieceInfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-PtData" testNumber="8"/>
			<description>Entry PtData in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsPtData == false || PtDataHasTypeDictionary == true</test>
			<error>
				<message>Entry PtData in XObjectFormTrapNet has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PtDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-PtData" testNumber="23"/>
			<description>Entry PtData in XObjectFormTrapNet can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsPtData == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PtData in XObjectFormTrapNet is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Ref" testNumber="8"/>
			<description>Entry Ref in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsRef == false || RefHasTypeDictionary == true</test>
			<error>
				<message>Entry Ref in XObjectFormTrapNet has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>RefType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Resources" testNumber="8"/>
			<description>Entry Resources in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in XObjectFormTrapNet has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ResourcesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-SeparationColorNames" testNumber="8"/>
			<description>Entry SeparationColorNames in XObjectFormTrapNet shall have type Array</description>
			<test>containsSeparationColorNames == false || SeparationColorNamesHasTypeArray == true</test>
			<error>
				<message>Entry SeparationColorNames in XObjectFormTrapNet has type %1 instead of type Array</message>
				<arguments>
					<argument>SeparationColorNamesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-StructParent" testNumber="8"/>
			<description>Entry StructParent in XObjectFormTrapNet shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectFormTrapNet has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-StructParents" testNumber="8"/>
			<description>Entry StructParents in XObjectFormTrapNet shall have type Integer</description>
			<test>containsStructParents == false || StructParentsHasTypeInteger == true</test>
			<error>
				<message>Entry StructParents in XObjectFormTrapNet has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Subtype" testNumber="8"/>
			<description>Entry Subtype in XObjectFormTrapNet shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormTrapNet has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Subtype" testNumber="7"/>
			<description>Entry Subtype in XObjectFormTrapNet is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormTrapNet is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in XObjectFormTrapNet shall have value Form</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Form"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormTrapNet has incorrect value %1 instead of Form</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-TrapRegions" testNumber="8"/>
			<description>Entry TrapRegions in XObjectFormTrapNet shall have type Array</description>
			<test>containsTrapRegions == false || TrapRegionsHasTypeArray == true</test>
			<error>
				<message>Entry TrapRegions in XObjectFormTrapNet has type %1 instead of type Array</message>
				<arguments>
					<argument>TrapRegionsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-TrapStyles" testNumber="8"/>
			<description>Entry TrapStyles in XObjectFormTrapNet shall have type StringText</description>
			<test>containsTrapStyles == false || TrapStylesHasTypeStringText == true</test>
			<error>
				<message>Entry TrapStyles in XObjectFormTrapNet has type %1 instead of type StringText</message>
				<arguments>
					<argument>TrapStylesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Type" testNumber="8"/>
			<description>Entry Type in XObjectFormTrapNet shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormTrapNet has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="XObjectFormTrapNet-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in XObjectFormTrapNet shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormTrapNet has incorrect value %1 instead of XObject</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1" testNumber="1"/>
			<description>XObjectFormType1 shall not contain entries except AF, BBox, DL, DecodeParms, F, FDecodeParms, FFilter, Filter, FormType, GTS_Encapsulated, GTS_Env, GTS_Scope, GTS_XID, Group, LastModified, Length, Matrix, Measure, Metadata, Name, OC, OPI, PieceInfo, PtData, Ref, Resources, StructParent, StructParents, Subtype, Type, XUID</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'GTS_Encapsulated' &amp;&amp; elem != 'GTS_Env' &amp;&amp; elem != 'GTS_Scope' &amp;&amp; elem != 'GTS_XID' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XUID' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>XObjectFormType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'GTS_Encapsulated' &amp;&amp; elem != 'GTS_Env' &amp;&amp; elem != 'GTS_Scope' &amp;&amp; elem != 'GTS_XID' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XUID' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-AF" testNumber="8"/>
			<description>Entry AF in XObjectFormType1 shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in XObjectFormType1 has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-AF" testNumber="23"/>
			<description>Entry AF in XObjectFormType1 can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in XObjectFormType1 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-BBox" testNumber="8"/>
			<description>Entry BBox in XObjectFormType1 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormType1 has type %1 instead of type Rectangle</message>
				<arguments>
					<argument>BBoxType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-BBox" testNumber="7"/>
			<description>Entry BBox in XObjectFormType1 is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-DL" testNumber="8"/>
			<description>Entry DL in XObjectFormType1 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectFormType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in XObjectFormType1 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectFormType1 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in XObjectFormType1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormType1 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in XObjectFormType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-F" testNumber="8"/>
			<description>Entry F in XObjectFormType1 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectFormType1 has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in XObjectFormType1 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormType1 has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in XObjectFormType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-FFilter" testNumber="8"/>
			<description>Entry FFilter in XObjectFormType1 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectFormType1 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in XObjectFormType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in XObjectFormType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormType1 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Filter" testNumber="8"/>
			<description>Entry Filter in XObjectFormType1 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectFormType1 has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in XObjectFormType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in XObjectFormType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormType1 has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-FormType" testNumber="8"/>
			<description>Entry FormType in XObjectFormType1 shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>FormTypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-FormType-Integer" testNumber="6"/>
			<description>Entry FormType with type Integer in XObjectFormType1 shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormType1 has incorrect value %1 instead of 1</message>
				<arguments>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-GTS_Encapsulated" testNumber="8"/>
			<description>Entry GTS_Encapsulated in XObjectFormType1 shall have type Boolean</description>
			<test>containsGTS_Encapsulated == false || GTS_EncapsulatedHasTypeBoolean == true</test>
			<error>
				<message>Entry GTS_Encapsulated in XObjectFormType1 has type %1 instead of type Boolean</message>
				<arguments>
					<argument>GTS_EncapsulatedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-GTS_Encapsulated" testNumber="23"/>
			<description>Entry GTS_Encapsulated in XObjectFormType1 can only be present, if satisfy predicate fn:Extension(PDF_VT2, 1.6)</description>
			<test>containsGTS_Encapsulated == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry GTS_Encapsulated in XObjectFormType1 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-GTS_Env" testNumber="8"/>
			<description>Entry GTS_Env in XObjectFormType1 shall have type StringText</description>
			<test>containsGTS_Env == false || GTS_EnvHasTypeStringText == true</test>
			<error>
				<message>Entry GTS_Env in XObjectFormType1 has type %1 instead of type StringText</message>
				<arguments>
					<argument>GTS_EnvType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-GTS_Env" testNumber="11"/>
			<description>Entry GTS_Env in XObjectFormType1 is required, when (@GTS_Scope == Stream) || (@GTS_Scope == Global)</description>
			<test>containsGTS_Env == true || ((GTS_ScopeNameValue != "Stream") &amp;&amp; (GTS_ScopeNameValue != "Global"))</test>
			<error>
				<message>Entry GTS_Env in XObjectFormType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-GTS_Env" testNumber="23"/>
			<description>Entry GTS_Env in XObjectFormType1 can only be present, if satisfy predicate fn:Extension(PDF_VT2, 1.6)</description>
			<test>containsGTS_Env == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry GTS_Env in XObjectFormType1 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-GTS_Scope" testNumber="8"/>
			<description>Entry GTS_Scope in XObjectFormType1 shall have type Name</description>
			<test>containsGTS_Scope == false || GTS_ScopeHasTypeName == true</test>
			<error>
				<message>Entry GTS_Scope in XObjectFormType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>GTS_ScopeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-GTS_Scope" testNumber="23"/>
			<description>Entry GTS_Scope in XObjectFormType1 can only be present, if satisfy predicate fn:Extension(PDF_VT2, 1.6)</description>
			<test>containsGTS_Scope == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry GTS_Scope in XObjectFormType1 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-GTS_Scope-Name" testNumber="6"/>
			<description>Entry GTS_Scope with type Name in XObjectFormType1 shall have one of values: SingleUse, Unknown, Record, Stream, File, Global</description>
			<test>GTS_ScopeHasTypeName != true || GTS_ScopeNameValue == "SingleUse" || GTS_ScopeNameValue == "Record" || GTS_ScopeNameValue == "File" || GTS_ScopeNameValue == "Stream" || GTS_ScopeNameValue == "Global" || GTS_ScopeNameValue == "Unknown"</test>
			<error>
				<message>Entry GTS_Scope with type Name in XObjectFormType1 has incorrect value %1 instead of SingleUse, Unknown, Record, Stream, File, Global</message>
				<arguments>
					<argument>GTS_ScopeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-GTS_XID" testNumber="8"/>
			<description>Entry GTS_XID in XObjectFormType1 shall have type String</description>
			<test>containsGTS_XID == false || GTS_XIDHasTypeString == true</test>
			<error>
				<message>Entry GTS_XID in XObjectFormType1 has type %1 instead of type String</message>
				<arguments>
					<argument>GTS_XIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-GTS_XID" testNumber="23"/>
			<description>Entry GTS_XID in XObjectFormType1 can only be present, if satisfy predicate fn:Extension(PDF_VT2, 1.6)</description>
			<test>containsGTS_XID == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry GTS_XID in XObjectFormType1 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Group" testNumber="8"/>
			<description>Entry Group in XObjectFormType1 shall have type Dictionary</description>
			<test>containsGroup == false || GroupHasTypeDictionary == true</test>
			<error>
				<message>Entry Group in XObjectFormType1 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>GroupType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-LastModified" testNumber="8"/>
			<description>Entry LastModified in XObjectFormType1 shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in XObjectFormType1 has type %1 instead of type Date</message>
				<arguments>
					<argument>LastModifiedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-LastModified" testNumber="11"/>
			<description>Entry LastModified in XObjectFormType1 is required, when fn:IsPresent(PieceInfo)</description>
			<test>containsLastModified == true || (containsPieceInfo != true)</test>
			<error>
				<message>Entry LastModified in XObjectFormType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Length" testNumber="8"/>
			<description>Entry Length in XObjectFormType1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Length" testNumber="7"/>
			<description>Entry Length in XObjectFormType1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Matrix" testNumber="8"/>
			<description>Entry Matrix in XObjectFormType1 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormType1 has type %1 instead of type Matrix</message>
				<arguments>
					<argument>MatrixType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Measure-Dictionary" testNumber="17"/>
			<description>Entry Measure with type Dictionary in XObjectFormType1 shall be one of objects MeasureRL, MeasureGEO</description>
			<test>MeasureHasTypeDictionary != true || Measure_size == 1</test>
			<error>
				<message>Entry Measure with type Dictionary in XObjectFormType1 is not one of objects MeasureRL, MeasureGEO</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Measure" testNumber="8"/>
			<description>Entry Measure in XObjectFormType1 shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in XObjectFormType1 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MeasureType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Measure" testNumber="23"/>
			<description>Entry Measure in XObjectFormType1 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsMeasure == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Measure in XObjectFormType1 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Metadata" testNumber="8"/>
			<description>Entry Metadata in XObjectFormType1 shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectFormType1 has type %1 instead of type Stream</message>
				<arguments>
					<argument>MetadataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Metadata-Stream" testNumber="10"/>
			<description>Entry Metadata with type Stream in XObjectFormType1 shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectFormType1 is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Name" testNumber="8"/>
			<description>Entry Name in XObjectFormType1 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectFormType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in XObjectFormType1 shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in XObjectFormType1 is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-OC" testNumber="8"/>
			<description>Entry OC in XObjectFormType1 shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in XObjectFormType1 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-OPI-Dictionary" testNumber="17"/>
			<description>Entry OPI with type Dictionary in XObjectFormType1 shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectFormType1 is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-OPI" testNumber="8"/>
			<description>Entry OPI in XObjectFormType1 shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectFormType1 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OPIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-PieceInfo" testNumber="8"/>
			<description>Entry PieceInfo in XObjectFormType1 shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in XObjectFormType1 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PieceInfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-PtData" testNumber="8"/>
			<description>Entry PtData in XObjectFormType1 shall have type Dictionary</description>
			<test>containsPtData == false || PtDataHasTypeDictionary == true</test>
			<error>
				<message>Entry PtData in XObjectFormType1 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PtDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-PtData" testNumber="23"/>
			<description>Entry PtData in XObjectFormType1 can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsPtData == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PtData in XObjectFormType1 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Ref" testNumber="8"/>
			<description>Entry Ref in XObjectFormType1 shall have type Dictionary</description>
			<test>containsRef == false || RefHasTypeDictionary == true</test>
			<error>
				<message>Entry Ref in XObjectFormType1 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>RefType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Resources" testNumber="8"/>
			<description>Entry Resources in XObjectFormType1 shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in XObjectFormType1 has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>ResourcesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Resources" testNumber="7"/>
			<description>Entry Resources in XObjectFormType1 is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in XObjectFormType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-StructParent" testNumber="8"/>
			<description>Entry StructParent in XObjectFormType1 shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectFormType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-StructParent-Integer" testNumber="9"/>
			<description>Entry StructParent with type Integer in XObjectFormType1 shall satisfy special case: fn:Not(fn:IsPresent(StructParents))</description>
			<test>StructParentHasTypeInteger != true || (containsStructParents != true)</test>
			<error>
				<message>Entry StructParent with type Integer in XObjectFormType1 does not satisfy special case: fn:Not(fn:IsPresent(StructParents))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-StructParents" testNumber="8"/>
			<description>Entry StructParents in XObjectFormType1 shall have type Integer</description>
			<test>containsStructParents == false || StructParentsHasTypeInteger == true</test>
			<error>
				<message>Entry StructParents in XObjectFormType1 has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-StructParents-Integer" testNumber="9"/>
			<description>Entry StructParents with type Integer in XObjectFormType1 shall satisfy special case: fn:Not(fn:IsPresent(StructParent))</description>
			<test>StructParentsHasTypeInteger != true || (containsStructParent != true)</test>
			<error>
				<message>Entry StructParents with type Integer in XObjectFormType1 does not satisfy special case: fn:Not(fn:IsPresent(StructParent))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Subtype" testNumber="8"/>
			<description>Entry Subtype in XObjectFormType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Subtype" testNumber="7"/>
			<description>Entry Subtype in XObjectFormType1 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormType1 is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in XObjectFormType1 shall have value Form</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Form"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormType1 has incorrect value %1 instead of Form</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Type" testNumber="8"/>
			<description>Entry Type in XObjectFormType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormType1 has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in XObjectFormType1 shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormType1 has incorrect value %1 instead of XObject</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-XUID" testNumber="8"/>
			<description>Entry XUID in XObjectFormType1 shall have type Array</description>
			<test>containsXUID == false || XUIDHasTypeArray == true</test>
			<error>
				<message>Entry XUID in XObjectFormType1 has type %1 instead of type Array</message>
				<arguments>
					<argument>XUIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="XObjectFormType1-XUID" testNumber="5"/>
			<description>Entry XUID in XObjectFormType1 is deprecated since PDF 1.3</description>
			<test>containsXUID == false</test>
			<error>
				<message>Entry XUID in XObjectFormType1 is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage" testNumber="1"/>
			<description>XObjectImage shall not contain entries except AF, Alternates, BitsPerComponent, ColorSpace, DL, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, GTS_Encapsulated, GTS_Env, GTS_Scope, GTS_XID, Height, ID, ImageMask, Intent, Interpolate, Length, Mask, Measure, Metadata, Name, OC, OPI, PtData, SMask, SMaskInData, StructParent, Subtype, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'Alternates' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'GTS_Encapsulated' &amp;&amp; elem != 'GTS_Env' &amp;&amp; elem != 'GTS_Scope' &amp;&amp; elem != 'GTS_XID' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Mask' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'SMaskInData' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>XObjectImage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'Alternates' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'GTS_Encapsulated' &amp;&amp; elem != 'GTS_Env' &amp;&amp; elem != 'GTS_Scope' &amp;&amp; elem != 'GTS_XID' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Mask' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'SMaskInData' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-AF" testNumber="8"/>
			<description>Entry AF in XObjectImage shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in XObjectImage has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-AF" testNumber="23"/>
			<description>Entry AF in XObjectImage can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in XObjectImage is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Alternates" testNumber="8"/>
			<description>Entry Alternates in XObjectImage shall have type Array</description>
			<test>containsAlternates == false || AlternatesHasTypeArray == true</test>
			<error>
				<message>Entry Alternates in XObjectImage has type %1 instead of type Array</message>
				<arguments>
					<argument>AlternatesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-BitsPerComponent" testNumber="8"/>
			<description>Entry BitsPerComponent in XObjectImage shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerComponentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-BitsPerComponent" testNumber="11"/>
			<description>Entry BitsPerComponent in XObjectImage is required, when fn:Not(fn:Contains(@Filter, JPXDecode) || (@ImageMask == true))</description>
			<test>containsBitsPerComponent == true || (((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JPXDecode").length &gt; 0) || (ImageMaskBooleanValue == true)) != true) == false</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-BitsPerComponent-Integer-1" testNumber="15"/>
			<description>Entry BitsPerComponent in XObjectImage shall have Integer value 1, if this object satisfies condition (@Filter == CCITTFaxDecode) || (@Filter == JBIG2Decode) || (@ImageMask == true)</description>
			<test>((FilterNameValue != "CCITTFaxDecode") &amp;&amp; (FilterNameValue != "JBIG2Decode") &amp;&amp; (ImageMaskBooleanValue != true)) || BitsPerComponentIntegerValue == 1</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage does not have value 1</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-BitsPerComponent-Integer-8" testNumber="15"/>
			<description>Entry BitsPerComponent in XObjectImage shall have Integer value 8, if this object satisfies condition (@Filter == RunLengthDecode) || (@Filter == DCTDecode)</description>
			<test>((FilterNameValue != "RunLengthDecode") &amp;&amp; (FilterNameValue != "DCTDecode")) || BitsPerComponentIntegerValue == 8</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage does not have value 8</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-BitsPerComponent-Integer" testNumber="6"/>
			<description>Entry BitsPerComponent with type Integer in XObjectImage shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in XObjectImage has incorrect value %1 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-ColorSpace-Array" testNumber="17"/>
			<description>Entry ColorSpace with type Array in XObjectImage shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in XObjectImage is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in XObjectImage shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in XObjectImage has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-ColorSpace" testNumber="11"/>
			<description>Entry ColorSpace in XObjectImage is required, when fn:Not(fn:Contains(@Filter, JPXDecode) || (@ImageMask == true))</description>
			<test>containsColorSpace == true || (((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JPXDecode").length &gt; 0) || (ImageMaskBooleanValue == true)) != true) == false</test>
			<error>
				<message>Entry ColorSpace in XObjectImage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-ColorSpace-Array" testNumber="9"/>
			<description>Entry ColorSpace with type Array in XObjectImage shall satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>ColorSpaceHasTypeArray != true || ((ImageMaskBooleanValue != true) || containsColorSpace != true)</test>
			<error>
				<message>Entry ColorSpace with type Array in XObjectImage does not satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-ColorSpace-Name" testNumber="6"/>
			<description>Entry ColorSpace with type Name in XObjectImage shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in XObjectImage has incorrect value %1 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-ColorSpace-Name" testNumber="9"/>
			<description>Entry ColorSpace with type Name in XObjectImage shall satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>ColorSpaceHasTypeName != true || ((ImageMaskBooleanValue != true) || containsColorSpace != true)</test>
			<error>
				<message>Entry ColorSpace with type Name in XObjectImage does not satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-DL" testNumber="8"/>
			<description>Entry DL in XObjectImage shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectImage has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in XObjectImage shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectImage does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Decode" testNumber="8"/>
			<description>Entry Decode in XObjectImage shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in XObjectImage has type %1 instead of type Array</message>
				<arguments>
					<argument>DecodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in XObjectImage shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectImage is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in XObjectImage shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectImage has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in XObjectImage shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImage does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-F" testNumber="8"/>
			<description>Entry F in XObjectImage shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectImage has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectImage shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectImage is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in XObjectImage shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectImage has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in XObjectImage shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImage does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-FFilter" testNumber="8"/>
			<description>Entry FFilter in XObjectImage shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectImage has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in XObjectImage shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImage does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in XObjectImage shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectImage has incorrect value %1 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Filter" testNumber="8"/>
			<description>Entry Filter in XObjectImage shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectImage has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in XObjectImage shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectImage does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in XObjectImage shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectImage has incorrect value %1 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-GTS_Encapsulated" testNumber="8"/>
			<description>Entry GTS_Encapsulated in XObjectImage shall have type Boolean</description>
			<test>containsGTS_Encapsulated == false || GTS_EncapsulatedHasTypeBoolean == true</test>
			<error>
				<message>Entry GTS_Encapsulated in XObjectImage has type %1 instead of type Boolean</message>
				<arguments>
					<argument>GTS_EncapsulatedType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-GTS_Encapsulated" testNumber="23"/>
			<description>Entry GTS_Encapsulated in XObjectImage can only be present, if satisfy predicate fn:Extension(PDF_VT2, 1.6)</description>
			<test>containsGTS_Encapsulated == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry GTS_Encapsulated in XObjectImage is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-GTS_Env" testNumber="8"/>
			<description>Entry GTS_Env in XObjectImage shall have type StringText</description>
			<test>containsGTS_Env == false || GTS_EnvHasTypeStringText == true</test>
			<error>
				<message>Entry GTS_Env in XObjectImage has type %1 instead of type StringText</message>
				<arguments>
					<argument>GTS_EnvType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-GTS_Env" testNumber="11"/>
			<description>Entry GTS_Env in XObjectImage is required, when (@GTS_Scope == Stream) || (@GTS_Scope == Global)</description>
			<test>containsGTS_Env == true || ((GTS_ScopeNameValue != "Stream") &amp;&amp; (GTS_ScopeNameValue != "Global"))</test>
			<error>
				<message>Entry GTS_Env in XObjectImage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-GTS_Env" testNumber="23"/>
			<description>Entry GTS_Env in XObjectImage can only be present, if satisfy predicate fn:Extension(PDF_VT2, 1.6)</description>
			<test>containsGTS_Env == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry GTS_Env in XObjectImage is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-GTS_Scope" testNumber="8"/>
			<description>Entry GTS_Scope in XObjectImage shall have type Name</description>
			<test>containsGTS_Scope == false || GTS_ScopeHasTypeName == true</test>
			<error>
				<message>Entry GTS_Scope in XObjectImage has type %1 instead of type Name</message>
				<arguments>
					<argument>GTS_ScopeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-GTS_Scope" testNumber="23"/>
			<description>Entry GTS_Scope in XObjectImage can only be present, if satisfy predicate fn:Extension(PDF_VT2, 1.6)</description>
			<test>containsGTS_Scope == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry GTS_Scope in XObjectImage is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-GTS_Scope-Name" testNumber="6"/>
			<description>Entry GTS_Scope with type Name in XObjectImage shall have one of values: SingleUse, Unknown, Record, Stream, File, Global</description>
			<test>GTS_ScopeHasTypeName != true || GTS_ScopeNameValue == "SingleUse" || GTS_ScopeNameValue == "Record" || GTS_ScopeNameValue == "File" || GTS_ScopeNameValue == "Stream" || GTS_ScopeNameValue == "Global" || GTS_ScopeNameValue == "Unknown"</test>
			<error>
				<message>Entry GTS_Scope with type Name in XObjectImage has incorrect value %1 instead of SingleUse, Unknown, Record, Stream, File, Global</message>
				<arguments>
					<argument>GTS_ScopeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-GTS_XID" testNumber="8"/>
			<description>Entry GTS_XID in XObjectImage shall have type String</description>
			<test>containsGTS_XID == false || GTS_XIDHasTypeString == true</test>
			<error>
				<message>Entry GTS_XID in XObjectImage has type %1 instead of type String</message>
				<arguments>
					<argument>GTS_XIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-GTS_XID" testNumber="23"/>
			<description>Entry GTS_XID in XObjectImage can only be present, if satisfy predicate fn:Extension(PDF_VT2, 1.6)</description>
			<test>containsGTS_XID == false || hasExtensionPDF_VT2 == true</test>
			<error>
				<message>Entry GTS_XID in XObjectImage is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Height" testNumber="8"/>
			<description>Entry Height in XObjectImage shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in XObjectImage has type %1 instead of type Integer</message>
				<arguments>
					<argument>HeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Height" testNumber="7"/>
			<description>Entry Height in XObjectImage is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in XObjectImage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-ID" testNumber="8"/>
			<description>Entry ID in XObjectImage shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in XObjectImage has type %1 instead of type StringByte</message>
				<arguments>
					<argument>entryIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-ImageMask" testNumber="8"/>
			<description>Entry ImageMask in XObjectImage shall have type Boolean</description>
			<test>containsImageMask == false || ImageMaskHasTypeBoolean == true</test>
			<error>
				<message>Entry ImageMask in XObjectImage has type %1 instead of type Boolean</message>
				<arguments>
					<argument>ImageMaskType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-ImageMask-Boolean" testNumber="9"/>
			<description>Entry ImageMask with type Boolean in XObjectImage shall satisfy special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace)) &amp;&amp; fn:Not(fn:IsPresent(Mask))) || (@ImageMask == false))</description>
			<test>ImageMaskHasTypeBoolean != true || (((ImageMaskBooleanValue == true) &amp;&amp; (BitsPerComponentHasTypeInteger == false || (BitsPerComponentIntegerValue == 1)) &amp;&amp; (containsColorSpace != true) &amp;&amp; (containsMask != true)) || (ImageMaskBooleanValue == false))</test>
			<error>
				<message>Entry ImageMask with type Boolean in XObjectImage does not satisfy special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace)) &amp;&amp; fn:Not(fn:IsPresent(Mask))) || (@ImageMask == false))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Intent" testNumber="8"/>
			<description>Entry Intent in XObjectImage shall have type Name</description>
			<test>containsIntent == false || IntentHasTypeName == true</test>
			<error>
				<message>Entry Intent in XObjectImage has type %1 instead of type Name</message>
				<arguments>
					<argument>IntentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Interpolate" testNumber="8"/>
			<description>Entry Interpolate in XObjectImage shall have type Boolean</description>
			<test>containsInterpolate == false || InterpolateHasTypeBoolean == true</test>
			<error>
				<message>Entry Interpolate in XObjectImage has type %1 instead of type Boolean</message>
				<arguments>
					<argument>InterpolateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Length" testNumber="8"/>
			<description>Entry Length in XObjectImage shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectImage has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Length" testNumber="7"/>
			<description>Entry Length in XObjectImage is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectImage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Mask" testNumber="8"/>
			<description>Entry Mask in XObjectImage shall have one of types: Array, Stream</description>
			<test>containsMask == false || MaskHasTypeArray == true || MaskHasTypeStream == true</test>
			<error>
				<message>Entry Mask in XObjectImage has type %1 instead of one of types: Array, Stream</message>
				<arguments>
					<argument>MaskType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Mask-Array" testNumber="9"/>
			<description>Entry Mask with type Array in XObjectImage shall satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>MaskHasTypeArray != true || ((ImageMaskBooleanValue != true) || containsMask != true)</test>
			<error>
				<message>Entry Mask with type Array in XObjectImage does not satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Mask-Stream" testNumber="10"/>
			<description>Entry Mask with type Stream in XObjectImage shall be indirect</description>
			<test>MaskHasTypeStream != true || isMaskIndirect == true</test>
			<error>
				<message>Entry Mask with type Stream in XObjectImage is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Mask-Stream" testNumber="9"/>
			<description>Entry Mask with type Stream in XObjectImage shall satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>MaskHasTypeStream != true || ((ImageMaskBooleanValue != true) || containsMask != true)</test>
			<error>
				<message>Entry Mask with type Stream in XObjectImage does not satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Measure-Dictionary" testNumber="17"/>
			<description>Entry Measure with type Dictionary in XObjectImage shall be one of objects MeasureRL, MeasureGEO</description>
			<test>MeasureHasTypeDictionary != true || Measure_size == 1</test>
			<error>
				<message>Entry Measure with type Dictionary in XObjectImage is not one of objects MeasureRL, MeasureGEO</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Measure" testNumber="8"/>
			<description>Entry Measure in XObjectImage shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in XObjectImage has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MeasureType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Measure" testNumber="23"/>
			<description>Entry Measure in XObjectImage can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsMeasure == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Measure in XObjectImage is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Metadata" testNumber="8"/>
			<description>Entry Metadata in XObjectImage shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectImage has type %1 instead of type Stream</message>
				<arguments>
					<argument>MetadataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Metadata-Stream" testNumber="10"/>
			<description>Entry Metadata with type Stream in XObjectImage shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectImage is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Name" testNumber="8"/>
			<description>Entry Name in XObjectImage shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectImage has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in XObjectImage shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in XObjectImage is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-OC" testNumber="8"/>
			<description>Entry OC in XObjectImage shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in XObjectImage has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-OPI-Dictionary" testNumber="17"/>
			<description>Entry OPI with type Dictionary in XObjectImage shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectImage is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-OPI" testNumber="8"/>
			<description>Entry OPI in XObjectImage shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectImage has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OPIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-PtData" testNumber="8"/>
			<description>Entry PtData in XObjectImage shall have type Dictionary</description>
			<test>containsPtData == false || PtDataHasTypeDictionary == true</test>
			<error>
				<message>Entry PtData in XObjectImage has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PtDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-PtData" testNumber="23"/>
			<description>Entry PtData in XObjectImage can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsPtData == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PtData in XObjectImage is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-SMask" testNumber="8"/>
			<description>Entry SMask in XObjectImage shall have type Stream</description>
			<test>containsSMask == false || SMaskHasTypeStream == true</test>
			<error>
				<message>Entry SMask in XObjectImage has type %1 instead of type Stream</message>
				<arguments>
					<argument>SMaskType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-SMask-Stream" testNumber="10"/>
			<description>Entry SMask with type Stream in XObjectImage shall be indirect</description>
			<test>SMaskHasTypeStream != true || isSMaskIndirect == true</test>
			<error>
				<message>Entry SMask with type Stream in XObjectImage is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-SMask-Stream" testNumber="9"/>
			<description>Entry SMask with type Stream in XObjectImage shall satisfy special case: fn:Not(fn:IsPresent(@SMaskInData &gt; 0))</description>
			<test>SMaskHasTypeStream != true || (SMaskInDataHasTypeInteger == false || ((SMaskInDataIntegerValue &lt;= 0) || containsSMask != true))</test>
			<error>
				<message>Entry SMask with type Stream in XObjectImage does not satisfy special case: fn:Not(fn:IsPresent(@SMaskInData &gt; 0))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-SMaskInData" testNumber="8"/>
			<description>Entry SMaskInData in XObjectImage shall have type Integer</description>
			<test>containsSMaskInData == false || SMaskInDataHasTypeInteger == true</test>
			<error>
				<message>Entry SMaskInData in XObjectImage has type %1 instead of type Integer</message>
				<arguments>
					<argument>SMaskInDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-SMaskInData-Integer" testNumber="6"/>
			<description>Entry SMaskInData with type Integer in XObjectImage shall have one of values: 0, 1, 2</description>
			<test>SMaskInDataHasTypeInteger != true || SMaskInDataIntegerValue == 0 || SMaskInDataIntegerValue == 1 || SMaskInDataIntegerValue == 2</test>
			<error>
				<message>Entry SMaskInData with type Integer in XObjectImage has incorrect value %1 instead of 0, 1, 2</message>
				<arguments>
					<argument>SMaskInDataIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-StructParent" testNumber="8"/>
			<description>Entry StructParent in XObjectImage shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectImage has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage" deferred="true">
			<id specification="ISO_32000_1_7" clause="XObjectImage-StructParent" testNumber="11"/>
			<description>Entry StructParent in XObjectImage is required, when fn:ImageIsStructContentItem()</description>
			<test>containsStructParent == true || (imageIsStructContentItem != true || SubtypeNameValue != "Image")</test>
			<error>
				<message>Entry StructParent in XObjectImage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Subtype" testNumber="8"/>
			<description>Entry Subtype in XObjectImage shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectImage has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Subtype" testNumber="7"/>
			<description>Entry Subtype in XObjectImage is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectImage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in XObjectImage shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectImage has incorrect value %1 instead of Image</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Type" testNumber="8"/>
			<description>Entry Type in XObjectImage shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectImage has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in XObjectImage shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectImage has incorrect value %1 instead of XObject</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Width" testNumber="8"/>
			<description>Entry Width in XObjectImage shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in XObjectImage has type %1 instead of type Integer</message>
				<arguments>
					<argument>WidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="XObjectImage-Width" testNumber="7"/>
			<description>Entry Width in XObjectImage is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in XObjectImage is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask" testNumber="1"/>
			<description>XObjectImageMask shall not contain entries except AF, Alternates, BitsPerComponent, DL, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Height, ID, ImageMask, Intent, Interpolate, Length, Measure, Metadata, Name, OC, OPI, PtData, SMask, SMaskInData, StructParent, Subtype, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'Alternates' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'SMaskInData' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>XObjectImageMask contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'Alternates' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'SMaskInData' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-AF" testNumber="8"/>
			<description>Entry AF in XObjectImageMask shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in XObjectImageMask has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-AF" testNumber="23"/>
			<description>Entry AF in XObjectImageMask can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in XObjectImageMask is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Alternates" testNumber="8"/>
			<description>Entry Alternates in XObjectImageMask shall have type Array</description>
			<test>containsAlternates == false || AlternatesHasTypeArray == true</test>
			<error>
				<message>Entry Alternates in XObjectImageMask has type %1 instead of type Array</message>
				<arguments>
					<argument>AlternatesType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-BitsPerComponent" testNumber="8"/>
			<description>Entry BitsPerComponent in XObjectImageMask shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImageMask has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerComponentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-BitsPerComponent-Integer" testNumber="6"/>
			<description>Entry BitsPerComponent with type Integer in XObjectImageMask shall have value 1</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in XObjectImageMask has incorrect value %1 instead of 1</message>
				<arguments>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-DL" testNumber="8"/>
			<description>Entry DL in XObjectImageMask shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectImageMask has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in XObjectImageMask shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectImageMask does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Decode" testNumber="8"/>
			<description>Entry Decode in XObjectImageMask shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in XObjectImageMask has type %1 instead of type Array</message>
				<arguments>
					<argument>DecodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="Decode" testNumber="20"/>
			<description>Entry Decode with type Array in XObjectImageMask shall have one of values: [1,0], [0,1]</description>
			<test>DecodeHasTypeArray != true || (DecodeArraySize == 2 &amp;&amp; Decode0IntegerValue == 0 &amp;&amp; Decode1IntegerValue == 1) || (DecodeArraySize == 2 &amp;&amp; Decode0IntegerValue == 1 &amp;&amp; Decode1IntegerValue == 0)</test>
			<error>
				<message>Entry Decode with type Array in XObjectImageMask has incorrect value instead of [1,0], [0,1]</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in XObjectImageMask shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectImageMask is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in XObjectImageMask shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectImageMask has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in XObjectImageMask shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImageMask does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-F" testNumber="8"/>
			<description>Entry F in XObjectImageMask shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectImageMask has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectImageMask shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectImageMask is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in XObjectImageMask shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectImageMask has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in XObjectImageMask shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImageMask does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-FFilter" testNumber="8"/>
			<description>Entry FFilter in XObjectImageMask shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectImageMask has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in XObjectImageMask shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImageMask does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in XObjectImageMask shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectImageMask has incorrect value %1 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Filter" testNumber="8"/>
			<description>Entry Filter in XObjectImageMask shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectImageMask has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in XObjectImageMask shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectImageMask does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in XObjectImageMask shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectImageMask has incorrect value %1 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Height" testNumber="8"/>
			<description>Entry Height in XObjectImageMask shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in XObjectImageMask has type %1 instead of type Integer</message>
				<arguments>
					<argument>HeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Height" testNumber="7"/>
			<description>Entry Height in XObjectImageMask is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in XObjectImageMask is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-ID" testNumber="8"/>
			<description>Entry ID in XObjectImageMask shall have type String</description>
			<test>containsID == false || entryIDHasTypeString == true</test>
			<error>
				<message>Entry ID in XObjectImageMask has type %1 instead of type String</message>
				<arguments>
					<argument>entryIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-ImageMask" testNumber="8"/>
			<description>Entry ImageMask in XObjectImageMask shall have type Boolean</description>
			<test>containsImageMask == false || ImageMaskHasTypeBoolean == true</test>
			<error>
				<message>Entry ImageMask in XObjectImageMask has type %1 instead of type Boolean</message>
				<arguments>
					<argument>ImageMaskType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-ImageMask" testNumber="7"/>
			<description>Entry ImageMask in XObjectImageMask is required</description>
			<test>containsImageMask == true</test>
			<error>
				<message>Entry ImageMask in XObjectImageMask is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-ImageMask-Boolean" testNumber="9"/>
			<description>Entry ImageMask with type Boolean in XObjectImageMask shall satisfy special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1)) || (@ImageMask == false))</description>
			<test>ImageMaskHasTypeBoolean != true || (((ImageMaskBooleanValue == true) &amp;&amp; (BitsPerComponentHasTypeInteger == false || (BitsPerComponentIntegerValue == 1))) || (ImageMaskBooleanValue == false))</test>
			<error>
				<message>Entry ImageMask with type Boolean in XObjectImageMask does not satisfy special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1)) || (@ImageMask == false))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Intent" testNumber="8"/>
			<description>Entry Intent in XObjectImageMask shall have type Name</description>
			<test>containsIntent == false || IntentHasTypeName == true</test>
			<error>
				<message>Entry Intent in XObjectImageMask has type %1 instead of type Name</message>
				<arguments>
					<argument>IntentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Interpolate" testNumber="8"/>
			<description>Entry Interpolate in XObjectImageMask shall have type Boolean</description>
			<test>containsInterpolate == false || InterpolateHasTypeBoolean == true</test>
			<error>
				<message>Entry Interpolate in XObjectImageMask has type %1 instead of type Boolean</message>
				<arguments>
					<argument>InterpolateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Length" testNumber="8"/>
			<description>Entry Length in XObjectImageMask shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectImageMask has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Length" testNumber="7"/>
			<description>Entry Length in XObjectImageMask is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectImageMask is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Measure-Dictionary" testNumber="17"/>
			<description>Entry Measure with type Dictionary in XObjectImageMask shall be one of objects MeasureRL, MeasureGEO</description>
			<test>MeasureHasTypeDictionary != true || Measure_size == 1</test>
			<error>
				<message>Entry Measure with type Dictionary in XObjectImageMask is not one of objects MeasureRL, MeasureGEO</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Measure" testNumber="8"/>
			<description>Entry Measure in XObjectImageMask shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in XObjectImageMask has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>MeasureType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Measure" testNumber="23"/>
			<description>Entry Measure in XObjectImageMask can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsMeasure == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry Measure in XObjectImageMask is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Metadata" testNumber="8"/>
			<description>Entry Metadata in XObjectImageMask shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectImageMask has type %1 instead of type Stream</message>
				<arguments>
					<argument>MetadataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Metadata-Stream" testNumber="10"/>
			<description>Entry Metadata with type Stream in XObjectImageMask shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectImageMask is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Name" testNumber="8"/>
			<description>Entry Name in XObjectImageMask shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectImageMask has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-OC-Dictionary" testNumber="17"/>
			<description>Entry OC with type Dictionary in XObjectImageMask shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in XObjectImageMask is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-OC" testNumber="8"/>
			<description>Entry OC in XObjectImageMask shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in XObjectImageMask has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OCType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-OPI-Dictionary" testNumber="17"/>
			<description>Entry OPI with type Dictionary in XObjectImageMask shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectImageMask is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-OPI" testNumber="8"/>
			<description>Entry OPI in XObjectImageMask shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectImageMask has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>OPIType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-PtData" testNumber="8"/>
			<description>Entry PtData in XObjectImageMask shall have type Dictionary</description>
			<test>containsPtData == false || PtDataHasTypeDictionary == true</test>
			<error>
				<message>Entry PtData in XObjectImageMask has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>PtDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-PtData" testNumber="23"/>
			<description>Entry PtData in XObjectImageMask can only be present, if satisfy predicate fn:Extension(ADBE_Extn3, 1.7)</description>
			<test>containsPtData == false || hasExtensionADBE_Extn3 == true</test>
			<error>
				<message>Entry PtData in XObjectImageMask is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-SMask" testNumber="8"/>
			<description>Entry SMask in XObjectImageMask shall have type Stream</description>
			<test>containsSMask == false || SMaskHasTypeStream == true</test>
			<error>
				<message>Entry SMask in XObjectImageMask has type %1 instead of type Stream</message>
				<arguments>
					<argument>SMaskType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-SMask-Stream" testNumber="10"/>
			<description>Entry SMask with type Stream in XObjectImageMask shall be indirect</description>
			<test>SMaskHasTypeStream != true || isSMaskIndirect == true</test>
			<error>
				<message>Entry SMask with type Stream in XObjectImageMask is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-SMaskInData" testNumber="8"/>
			<description>Entry SMaskInData in XObjectImageMask shall have type Integer</description>
			<test>containsSMaskInData == false || SMaskInDataHasTypeInteger == true</test>
			<error>
				<message>Entry SMaskInData in XObjectImageMask has type %1 instead of type Integer</message>
				<arguments>
					<argument>SMaskInDataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-StructParent" testNumber="8"/>
			<description>Entry StructParent in XObjectImageMask shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectImageMask has type %1 instead of type Integer</message>
				<arguments>
					<argument>StructParentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask" deferred="true">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-StructParent" testNumber="11"/>
			<description>Entry StructParent in XObjectImageMask is required, when fn:ImageIsStructContentItem()</description>
			<test>containsStructParent == true || (imageIsStructContentItem != true || SubtypeNameValue != "Image")</test>
			<error>
				<message>Entry StructParent in XObjectImageMask is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Subtype" testNumber="8"/>
			<description>Entry Subtype in XObjectImageMask shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectImageMask has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Subtype" testNumber="7"/>
			<description>Entry Subtype in XObjectImageMask is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectImageMask is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in XObjectImageMask shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectImageMask has incorrect value %1 instead of Image</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Type" testNumber="8"/>
			<description>Entry Type in XObjectImageMask shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectImageMask has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in XObjectImageMask shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectImageMask has incorrect value %1 instead of XObject</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Width" testNumber="8"/>
			<description>Entry Width in XObjectImageMask shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in XObjectImageMask has type %1 instead of type Integer</message>
				<arguments>
					<argument>WidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageMask-Width" testNumber="7"/>
			<description>Entry Width in XObjectImageMask is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in XObjectImageMask is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask" testNumber="1"/>
			<description>XObjectImageSoftMask shall not contain entries except AF, BitsPerComponent, ColorSpace, DL, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Height, ImageMask, Intent, Interpolate, Length, Matte, Metadata, Name, Subtype, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matte' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>XObjectImageSoftMask contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AF' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matte' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-AF" testNumber="8"/>
			<description>Entry AF in XObjectImageSoftMask shall have type Array</description>
			<test>containsAF == false || AFHasTypeArray == true</test>
			<error>
				<message>Entry AF in XObjectImageSoftMask has type %1 instead of type Array</message>
				<arguments>
					<argument>AFType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-AF" testNumber="23"/>
			<description>Entry AF in XObjectImageSoftMask can only be present, if satisfy predicate fn:Extension(ISO_19005_3, 1.7)</description>
			<test>containsAF == false || hasExtensionISO_19005_3 == true</test>
			<error>
				<message>Entry AF in XObjectImageSoftMask is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-BitsPerComponent" testNumber="8"/>
			<description>Entry BitsPerComponent in XObjectImageSoftMask shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImageSoftMask has type %1 instead of type Integer</message>
				<arguments>
					<argument>BitsPerComponentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-BitsPerComponent" testNumber="11"/>
			<description>Entry BitsPerComponent in XObjectImageSoftMask is required, when fn:Not(fn:Contains(@Filter, JPXDecode) || (@ImageMask == true))</description>
			<test>containsBitsPerComponent == true || (((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JPXDecode").length &gt; 0) || (ImageMaskBooleanValue == true)) != true) == false</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImageSoftMask is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-BitsPerComponent-Integer-1" testNumber="15"/>
			<description>Entry BitsPerComponent in XObjectImageSoftMask shall have Integer value 1, if this object satisfies condition (fn:Contains(@Filter, CCITTFaxDecode) || fn:Contains(@Filter, JBIG2Decode))</description>
			<test>((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "CCITTFaxDecode").length &gt; 0) || (FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JBIG2Decode").length &gt; 0)) == false || BitsPerComponentIntegerValue == 1</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImageSoftMask does not have value 1</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-BitsPerComponent-Integer-8" testNumber="15"/>
			<description>Entry BitsPerComponent in XObjectImageSoftMask shall have Integer value 8, if this object satisfies condition (fn:Contains(@Filter, RunLengthDecode) || fn:Contains(@Filter, DCTDecode))</description>
			<test>((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "RunLengthDecode").length &gt; 0) || (FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "DCTDecode").length &gt; 0)) == false || BitsPerComponentIntegerValue == 8</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImageSoftMask does not have value 8</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-BitsPerComponent-Integer" testNumber="6"/>
			<description>Entry BitsPerComponent with type Integer in XObjectImageSoftMask shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in XObjectImageSoftMask has incorrect value %1 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-ColorSpace" testNumber="8"/>
			<description>Entry ColorSpace in XObjectImageSoftMask shall have type Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in XObjectImageSoftMask has type %1 instead of type Name</message>
				<arguments>
					<argument>ColorSpaceType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-ColorSpace" testNumber="7"/>
			<description>Entry ColorSpace in XObjectImageSoftMask is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in XObjectImageSoftMask is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-ColorSpace-Name" testNumber="6"/>
			<description>Entry ColorSpace with type Name in XObjectImageSoftMask shall have value DeviceGray</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in XObjectImageSoftMask has incorrect value %1 instead of DeviceGray</message>
				<arguments>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-DL" testNumber="8"/>
			<description>Entry DL in XObjectImageSoftMask shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectImageSoftMask has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in XObjectImageSoftMask shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectImageSoftMask does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Decode" testNumber="8"/>
			<description>Entry Decode in XObjectImageSoftMask shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in XObjectImageSoftMask has type %1 instead of type Array</message>
				<arguments>
					<argument>DecodeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in XObjectImageSoftMask shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectImageSoftMask is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in XObjectImageSoftMask shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectImageSoftMask has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in XObjectImageSoftMask shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImageSoftMask does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-F" testNumber="8"/>
			<description>Entry F in XObjectImageSoftMask shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectImageSoftMask has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectImageSoftMask shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectImageSoftMask is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in XObjectImageSoftMask shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectImageSoftMask has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in XObjectImageSoftMask shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImageSoftMask does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-FFilter" testNumber="8"/>
			<description>Entry FFilter in XObjectImageSoftMask shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectImageSoftMask has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in XObjectImageSoftMask shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImageSoftMask does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in XObjectImageSoftMask shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectImageSoftMask has incorrect value %1 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Filter" testNumber="8"/>
			<description>Entry Filter in XObjectImageSoftMask shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectImageSoftMask has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in XObjectImageSoftMask shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectImageSoftMask does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in XObjectImageSoftMask shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectImageSoftMask has incorrect value %1 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Height" testNumber="8"/>
			<description>Entry Height in XObjectImageSoftMask shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in XObjectImageSoftMask has type %1 instead of type Integer</message>
				<arguments>
					<argument>HeightType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Height" testNumber="7"/>
			<description>Entry Height in XObjectImageSoftMask is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in XObjectImageSoftMask is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Height-Integer" testNumber="9"/>
			<description>Entry Height with type Integer in XObjectImageSoftMask shall satisfy special case: fn:Eval(fn:IsPresent(Matte, (@Height == parent::@Height)))</description>
			<test>HeightHasTypeInteger != true || (parentHeightHasTypeInteger == false || ((containsMatte == false) || (HeightIntegerValue == parentHeightIntegerValue)))</test>
			<error>
				<message>Entry Height with type Integer in XObjectImageSoftMask does not satisfy special case: fn:Eval(fn:IsPresent(Matte, (@Height == parent::@Height)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-ImageMask" testNumber="8"/>
			<description>Entry ImageMask in XObjectImageSoftMask shall have type Boolean</description>
			<test>containsImageMask == false || ImageMaskHasTypeBoolean == true</test>
			<error>
				<message>Entry ImageMask in XObjectImageSoftMask has type %1 instead of type Boolean</message>
				<arguments>
					<argument>ImageMaskType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-ImageMask-Boolean" testNumber="9"/>
			<description>Entry ImageMask with type Boolean in XObjectImageSoftMask shall satisfy special case: fn:Eval(@ImageMask == false)</description>
			<test>ImageMaskHasTypeBoolean != true || (ImageMaskBooleanValue == false)</test>
			<error>
				<message>Entry ImageMask with type Boolean in XObjectImageSoftMask does not satisfy special case: fn:Eval(@ImageMask == false)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Intent" testNumber="8"/>
			<description>Entry Intent in XObjectImageSoftMask shall have type Name</description>
			<test>containsIntent == false || IntentHasTypeName == true</test>
			<error>
				<message>Entry Intent in XObjectImageSoftMask has type %1 instead of type Name</message>
				<arguments>
					<argument>IntentType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Interpolate" testNumber="8"/>
			<description>Entry Interpolate in XObjectImageSoftMask shall have type Boolean</description>
			<test>containsInterpolate == false || InterpolateHasTypeBoolean == true</test>
			<error>
				<message>Entry Interpolate in XObjectImageSoftMask has type %1 instead of type Boolean</message>
				<arguments>
					<argument>InterpolateType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Length" testNumber="8"/>
			<description>Entry Length in XObjectImageSoftMask shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectImageSoftMask has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Length" testNumber="7"/>
			<description>Entry Length in XObjectImageSoftMask is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectImageSoftMask is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Matte" testNumber="8"/>
			<description>Entry Matte in XObjectImageSoftMask shall have type Array</description>
			<test>containsMatte == false || MatteHasTypeArray == true</test>
			<error>
				<message>Entry Matte in XObjectImageSoftMask has type %1 instead of type Array</message>
				<arguments>
					<argument>MatteType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Matte-Array" testNumber="9"/>
			<description>Entry Matte with type Array in XObjectImageSoftMask shall satisfy special case: fn:Eval(fn:ArrayLength(Matte) &gt; 0)</description>
			<test>MatteHasTypeArray != true || (MatteArraySize &gt; 0)</test>
			<error>
				<message>Entry Matte with type Array in XObjectImageSoftMask does not satisfy special case: fn:Eval(fn:ArrayLength(Matte) &gt; 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Metadata" testNumber="8"/>
			<description>Entry Metadata in XObjectImageSoftMask shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectImageSoftMask has type %1 instead of type Stream</message>
				<arguments>
					<argument>MetadataType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Metadata-Stream" testNumber="10"/>
			<description>Entry Metadata with type Stream in XObjectImageSoftMask shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectImageSoftMask is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Name" testNumber="8"/>
			<description>Entry Name in XObjectImageSoftMask shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectImageSoftMask has type %1 instead of type Name</message>
				<arguments>
					<argument>NameType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Subtype" testNumber="8"/>
			<description>Entry Subtype in XObjectImageSoftMask shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectImageSoftMask has type %1 instead of type Name</message>
				<arguments>
					<argument>SubtypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Subtype" testNumber="7"/>
			<description>Entry Subtype in XObjectImageSoftMask is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectImageSoftMask is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Subtype-Name" testNumber="6"/>
			<description>Entry Subtype with type Name in XObjectImageSoftMask shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectImageSoftMask has incorrect value %1 instead of Image</message>
				<arguments>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Type" testNumber="8"/>
			<description>Entry Type in XObjectImageSoftMask shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectImageSoftMask has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in XObjectImageSoftMask shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectImageSoftMask has incorrect value %1 instead of XObject</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Width" testNumber="8"/>
			<description>Entry Width in XObjectImageSoftMask shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in XObjectImageSoftMask has type %1 instead of type Integer</message>
				<arguments>
					<argument>WidthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Width" testNumber="7"/>
			<description>Entry Width in XObjectImageSoftMask is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in XObjectImageSoftMask is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="XObjectImageSoftMask-Width-Integer" testNumber="9"/>
			<description>Entry Width with type Integer in XObjectImageSoftMask shall satisfy special case: fn:Eval(fn:IsPresent(Matte, (@Width == parent::@Width)))</description>
			<test>WidthHasTypeInteger != true || (parentWidthHasTypeInteger == false || ((containsMatte == false) || (WidthIntegerValue == parentWidthIntegerValue)))</test>
			<error>
				<message>Entry Width with type Integer in XObjectImageSoftMask does not satisfy special case: fn:Eval(fn:IsPresent(Matte, (@Width == parent::@Width)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectMapEntry">
			<id specification="ISO_32000_1_7" clause="XObjectMapEntry-Stream" testNumber="17"/>
			<description>Entry with type Stream in XObjectMap shall be one of objects XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %keyName% with type Stream in XObjectMap is not one of objects XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectMapEntry">
			<id specification="ISO_32000_1_7" clause="XObjectMapEntry" testNumber="8"/>
			<description>Entry in XObjectMap shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %keyName% in XObjectMap has type %1 instead of type Stream</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectMapEntry">
			<id specification="ISO_32000_1_7" clause="XObjectMapEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in XObjectMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in XObjectMap is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream" testNumber="1"/>
			<description>XRefStream shall not contain entries except AdditionalStreams, DL, DecodeParms, DocChecksum, Encrypt, F, FDecodeParms, FFilter, Filter, ID, Index, Info, Length, Prev, Root, Size, Type, W</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AdditionalStreams' &amp;&amp; elem != 'AuthCode' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'DocChecksum' &amp;&amp; elem != 'Encrypt' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Index' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Root' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).length == 0</test>
			<error>
				<message>XRefStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AdditionalStreams' &amp;&amp; elem != 'AuthCode' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'DocChecksum' &amp;&amp; elem != 'Encrypt' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Index' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Root' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W' &amp;&amp; /^(XX|(.{4}[_:]))/.test(elem) == false).toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream" testNumber="22"/>
			<description>XRefStream shall not contain entry AuthCode in PDF 1.7. This entry appears in later pdf versions</description>
			<test>containsAuthCode == false</test>
			<error>
				<message>XRefStream contains entry AuthCode</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-AdditionalStreams" testNumber="8"/>
			<description>Entry AdditionalStreams in XRefStream shall have type Array</description>
			<test>containsAdditionalStreams == false || AdditionalStreamsHasTypeArray == true</test>
			<error>
				<message>Entry AdditionalStreams in XRefStream has type %1 instead of type Array</message>
				<arguments>
					<argument>AdditionalStreamsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-AdditionalStreams" testNumber="23"/>
			<description>Entry AdditionalStreams in XRefStream can only be present, if satisfy predicate fn:Extension(OpenOffice, 1.5)</description>
			<test>containsAdditionalStreams == false || hasExtensionOpenOffice == true</test>
			<error>
				<message>Entry AdditionalStreams in XRefStream is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-AdditionalStreams-Array" testNumber="10"/>
			<description>Entry AdditionalStreams with type Array in XRefStream shall be direct</description>
			<test>AdditionalStreamsHasTypeArray != true || isAdditionalStreamsIndirect == false</test>
			<error>
				<message>Entry AdditionalStreams with type Array in XRefStream is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-AdditionalStreams-Array" testNumber="9"/>
			<description>Entry AdditionalStreams with type Array in XRefStream shall satisfy special case: fn:Eval((fn:ArrayLength(AdditionalStreams) mod 2) == 0)</description>
			<test>AdditionalStreamsHasTypeArray != true || ((AdditionalStreamsArraySize % 2) == 0)</test>
			<error>
				<message>Entry AdditionalStreams with type Array in XRefStream does not satisfy special case: fn:Eval((fn:ArrayLength(AdditionalStreams) mod 2) == 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-DL" testNumber="8"/>
			<description>Entry DL in XRefStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XRefStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>DLType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-DL-Integer" testNumber="14"/>
			<description>Entry DL with type Integer in XRefStream shall satisfy possible value predicate: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || DLIntegerValue &gt;= 0</test>
			<error>
				<message>Entry DL with type Integer in XRefStream does not satisfy possible value predicate: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-DL-Integer" testNumber="9"/>
			<description>Entry DL with type Integer in XRefStream shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XRefStream does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-DecodeParms-Dictionary" testNumber="17"/>
			<description>Entry DecodeParms with type Dictionary in XRefStream shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XRefStream is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-DecodeParms" testNumber="8"/>
			<description>Entry DecodeParms in XRefStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XRefStream has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>DecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-DecodeParms-Array" testNumber="10"/>
			<description>Entry DecodeParms with type Array in XRefStream shall be direct</description>
			<test>DecodeParmsHasTypeArray != true || isDecodeParmsIndirect == false</test>
			<error>
				<message>Entry DecodeParms with type Array in XRefStream is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-DecodeParms-Array" testNumber="9"/>
			<description>Entry DecodeParms with type Array in XRefStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (FilterHasTypeArray == false || DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XRefStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-DecodeParms-Dictionary" testNumber="10"/>
			<description>Entry DecodeParms with type Dictionary in XRefStream shall be direct</description>
			<test>DecodeParmsHasTypeDictionary != true || isDecodeParmsIndirect == false</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XRefStream is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-DocChecksum" testNumber="8"/>
			<description>Entry DocChecksum in XRefStream shall have type Name</description>
			<test>containsDocChecksum == false || DocChecksumHasTypeName == true</test>
			<error>
				<message>Entry DocChecksum in XRefStream has type %1 instead of type Name</message>
				<arguments>
					<argument>DocChecksumType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-DocChecksum" testNumber="23"/>
			<description>Entry DocChecksum in XRefStream can only be present, if satisfy predicate fn:Extension(OpenOffice, 1.5)</description>
			<test>containsDocChecksum == false || hasExtensionOpenOffice == true</test>
			<error>
				<message>Entry DocChecksum in XRefStream is present</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-DocChecksum-Name" testNumber="10"/>
			<description>Entry DocChecksum with type Name in XRefStream shall be direct</description>
			<test>DocChecksumHasTypeName != true || isDocChecksumIndirect == false</test>
			<error>
				<message>Entry DocChecksum with type Name in XRefStream is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Encrypt-Dictionary" testNumber="17"/>
			<description>Entry Encrypt with type Dictionary in XRefStream shall be one of objects EncryptionStandard, EncryptionPublicKey</description>
			<test>EncryptHasTypeDictionary != true || Encrypt_size == 1</test>
			<error>
				<message>Entry Encrypt with type Dictionary in XRefStream is not one of objects EncryptionStandard, EncryptionPublicKey</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Encrypt" testNumber="8"/>
			<description>Entry Encrypt in XRefStream shall have type Dictionary</description>
			<test>containsEncrypt == false || EncryptHasTypeDictionary == true</test>
			<error>
				<message>Entry Encrypt in XRefStream has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>EncryptType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-F" testNumber="8"/>
			<description>Entry F in XRefStream shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XRefStream has type %1 instead of one of types: Dictionary, String</message>
				<arguments>
					<argument>FType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-FDecodeParms-Dictionary" testNumber="17"/>
			<description>Entry FDecodeParms with type Dictionary in XRefStream shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XRefStream is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-FDecodeParms" testNumber="8"/>
			<description>Entry FDecodeParms in XRefStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XRefStream has type %1 instead of one of types: Array, Dictionary</message>
				<arguments>
					<argument>FDecodeParmsType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-FDecodeParms-Array" testNumber="9"/>
			<description>Entry FDecodeParms with type Array in XRefStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FFilterHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XRefStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-FFilter" testNumber="8"/>
			<description>Entry FFilter in XRefStream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XRefStream has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FFilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-FFilter-Array" testNumber="9"/>
			<description>Entry FFilter with type Array in XRefStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsHasTypeArray == false || FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XRefStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-FFilter-Name" testNumber="6"/>
			<description>Entry FFilter with type Name in XRefStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in XRefStream has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Filter" testNumber="8"/>
			<description>Entry Filter in XRefStream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XRefStream has type %1 instead of one of types: Array, Name</message>
				<arguments>
					<argument>FilterType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Filter-Array" testNumber="10"/>
			<description>Entry Filter with type Array in XRefStream shall be direct</description>
			<test>FilterHasTypeArray != true || isFilterIndirect == false</test>
			<error>
				<message>Entry Filter with type Array in XRefStream is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Filter-Array" testNumber="9"/>
			<description>Entry Filter with type Array in XRefStream shall satisfy special case: fn:Eval((fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter)) &amp;&amp; fn:Not(fn:Contains(@Filter, Crypt)))</description>
			<test>FilterHasTypeArray != true || ((DecodeParmsHasTypeArray == false || (DecodeParmsArraySize == FilterArraySize)) &amp;&amp; (FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "Crypt").length &gt; 0) != true)</test>
			<error>
				<message>Entry Filter with type Array in XRefStream does not satisfy special case: fn:Eval((fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter)) &amp;&amp; fn:Not(fn:Contains(@Filter, Crypt)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Filter-Name" testNumber="10"/>
			<description>Entry Filter with type Name in XRefStream shall be direct</description>
			<test>FilterHasTypeName != true || isFilterIndirect == false</test>
			<error>
				<message>Entry Filter with type Name in XRefStream is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Filter-Name" testNumber="6"/>
			<description>Entry Filter with type Name in XRefStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in XRefStream has incorrect value %1 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-ID" testNumber="8"/>
			<description>Entry ID in XRefStream shall have type Array</description>
			<test>containsID == false || entryIDHasTypeArray == true</test>
			<error>
				<message>Entry ID in XRefStream has type %1 instead of type Array</message>
				<arguments>
					<argument>entryIDType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-ID" testNumber="11"/>
			<description>Entry ID in XRefStream is required, when fn:IsPresent(Encrypt)</description>
			<test>containsID == true || (containsEncrypt != true)</test>
			<error>
				<message>Entry ID in XRefStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-ID-Array" testNumber="16"/>
			<description>If entry ID with type Array in XRefStream satisfies condition fn:IsPresent(Encrypt), it shall be direct</description>
			<test>entryIDHasTypeArray != true || (isentryIDIndirect == false || (containsEncrypt != true))</test>
			<error>
				<message>Entry ID with type Array in XRefStream is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Index" testNumber="8"/>
			<description>Entry Index in XRefStream shall have type Array</description>
			<test>containsIndex == false || IndexHasTypeArray == true</test>
			<error>
				<message>Entry Index in XRefStream has type %1 instead of type Array</message>
				<arguments>
					<argument>IndexType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Index-Array" testNumber="10"/>
			<description>Entry Index with type Array in XRefStream shall be direct</description>
			<test>IndexHasTypeArray != true || isIndexIndirect == false</test>
			<error>
				<message>Entry Index with type Array in XRefStream is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Index-Array" testNumber="9"/>
			<description>Entry Index with type Array in XRefStream shall satisfy special case: fn:Eval(((fn:ArrayLength(Index) mod 2) == 0) &amp;&amp; fn:ArraySortAscending(Index, 2))</description>
			<test>IndexHasTypeArray != true || (((IndexArraySize % 2) == 0) &amp;&amp; isIndexArraySortAscending2 == true)</test>
			<error>
				<message>Entry Index with type Array in XRefStream does not satisfy special case: fn:Eval(((fn:ArrayLength(Index) mod 2) == 0) &amp;&amp; fn:ArraySortAscending(Index, 2))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Info" testNumber="8"/>
			<description>Entry Info in XRefStream shall have type Dictionary</description>
			<test>containsInfo == false || InfoHasTypeDictionary == true</test>
			<error>
				<message>Entry Info in XRefStream has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>InfoType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Info" testNumber="11"/>
			<description>Entry Info in XRefStream is required, when fn:IsPresent(trailer::Catalog::PieceInfo)</description>
			<test>containsInfo == true || (containstrailerCatalogPieceInfo != true)</test>
			<error>
				<message>Entry Info in XRefStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Info-Dictionary" testNumber="10"/>
			<description>Entry Info with type Dictionary in XRefStream shall be indirect</description>
			<test>InfoHasTypeDictionary != true || isInfoIndirect == true</test>
			<error>
				<message>Entry Info with type Dictionary in XRefStream is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Info-Dictionary" testNumber="9"/>
			<description>Entry Info with type Dictionary in XRefStream shall satisfy special case: fn:Eval(fn:IsPresent(trailer::Catalog::PieceInfo, fn:IsPresent(trailer::Info::ModDate)))</description>
			<test>InfoHasTypeDictionary != true || ((containstrailerCatalogPieceInfo == false) || (containstrailerInfoModDate == true))</test>
			<error>
				<message>Entry Info with type Dictionary in XRefStream does not satisfy special case: fn:Eval(fn:IsPresent(trailer::Catalog::PieceInfo, fn:IsPresent(trailer::Info::ModDate)))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Length" testNumber="8"/>
			<description>Entry Length in XRefStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XRefStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>LengthType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Length" testNumber="7"/>
			<description>Entry Length in XRefStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XRefStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Length-Integer" testNumber="14"/>
			<description>Entry Length with type Integer in XRefStream shall satisfy possible value predicate: fn:Eval(@Length &gt;= 0)</description>
			<test>LengthHasTypeInteger != true || LengthIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Length with type Integer in XRefStream does not satisfy possible value predicate: fn:Eval(@Length &gt;= 0)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Prev" testNumber="8"/>
			<description>Entry Prev in XRefStream shall have type Integer</description>
			<test>containsPrev == false || PrevHasTypeInteger == true</test>
			<error>
				<message>Entry Prev in XRefStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>PrevType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Prev-Integer" testNumber="10"/>
			<description>Entry Prev with type Integer in XRefStream shall be direct</description>
			<test>PrevHasTypeInteger != true || isPrevIndirect == false</test>
			<error>
				<message>Entry Prev with type Integer in XRefStream is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Prev-Integer" testNumber="14"/>
			<description>Entry Prev with type Integer in XRefStream shall satisfy possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</description>
			<test>PrevHasTypeInteger != true || (PrevIntegerValue &gt;= 0) &amp;&amp; (PrevIntegerValue &lt;= fileSize)</test>
			<error>
				<message>Entry Prev with type Integer in XRefStream does not satisfy possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Root" testNumber="8"/>
			<description>Entry Root in XRefStream shall have type Dictionary</description>
			<test>containsRoot == false || RootHasTypeDictionary == true</test>
			<error>
				<message>Entry Root in XRefStream has type %1 instead of type Dictionary</message>
				<arguments>
					<argument>RootType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Root" testNumber="7"/>
			<description>Entry Root in XRefStream is required</description>
			<test>containsRoot == true</test>
			<error>
				<message>Entry Root in XRefStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Root-Dictionary" testNumber="10"/>
			<description>Entry Root with type Dictionary in XRefStream shall be indirect</description>
			<test>RootHasTypeDictionary != true || isRootIndirect == true</test>
			<error>
				<message>Entry Root with type Dictionary in XRefStream is direct</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Size" testNumber="8"/>
			<description>Entry Size in XRefStream shall have type Integer</description>
			<test>containsSize == false || SizeHasTypeInteger == true</test>
			<error>
				<message>Entry Size in XRefStream has type %1 instead of type Integer</message>
				<arguments>
					<argument>SizeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Size" testNumber="7"/>
			<description>Entry Size in XRefStream is required</description>
			<test>containsSize == true</test>
			<error>
				<message>Entry Size in XRefStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Size-Integer" testNumber="10"/>
			<description>Entry Size with type Integer in XRefStream shall be direct</description>
			<test>SizeHasTypeInteger != true || isSizeIndirect == false</test>
			<error>
				<message>Entry Size with type Integer in XRefStream is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Size-Integer" testNumber="14"/>
			<description>Entry Size with type Integer in XRefStream shall satisfy possible value predicate: fn:Eval(@Size &gt; 1)</description>
			<test>SizeHasTypeInteger != true || SizeIntegerValue &gt; 1</test>
			<error>
				<message>Entry Size with type Integer in XRefStream does not satisfy possible value predicate: fn:Eval(@Size &gt; 1)</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Type" testNumber="8"/>
			<description>Entry Type in XRefStream shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XRefStream has type %1 instead of type Name</message>
				<arguments>
					<argument>TypeType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Type" testNumber="7"/>
			<description>Entry Type in XRefStream is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in XRefStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Type-Name" testNumber="10"/>
			<description>Entry Type with type Name in XRefStream shall be direct</description>
			<test>TypeHasTypeName != true || isTypeIndirect == false</test>
			<error>
				<message>Entry Type with type Name in XRefStream is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-Type-Name" testNumber="6"/>
			<description>Entry Type with type Name in XRefStream shall have value XRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XRef"</test>
			<error>
				<message>Entry Type with type Name in XRefStream has incorrect value %1 instead of XRef</message>
				<arguments>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-W" testNumber="8"/>
			<description>Entry W in XRefStream shall have type Array</description>
			<test>containsW == false || WHasTypeArray == true</test>
			<error>
				<message>Entry W in XRefStream has type %1 instead of type Array</message>
				<arguments>
					<argument>WType</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-W" testNumber="7"/>
			<description>Entry W in XRefStream is required</description>
			<test>containsW == true</test>
			<error>
				<message>Entry W in XRefStream is missing</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="XRefStream-W-Array" testNumber="10"/>
			<description>Entry W with type Array in XRefStream shall be direct</description>
			<test>WHasTypeArray != true || isWIndirect == false</test>
			<error>
				<message>Entry W with type Array in XRefStream is indirect</message>
				<arguments/>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_7" clause="_UniversalArrayEntry" testNumber="8"/>
			<description>Entry in _UniversalArray shall have one of types: Array, Boolean, Dictionary, Name, Null, Number, Stream, String</description>
			<test>HasTypeArray == true || HasTypeBoolean == true || HasTypeDictionary == true || HasTypeName == true || HasTypeNull == true || HasTypeNumber == true || HasTypeStream == true || HasTypeString == true</test>
			<error>
				<message>Entry %keyName% in _UniversalArray has type %1 instead of one of types: Array, Boolean, Dictionary, Name, Null, Number, Stream, String</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_7" clause="_UniversalArrayEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in _UniversalArray shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in _UniversalArray is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_7" clause="_UniversalDictionaryEntry" testNumber="8"/>
			<description>Entry in _UniversalDictionary shall have one of types: Array, Boolean, Dictionary, Name, Null, Number, Stream, String</description>
			<test>HasTypeArray == true || HasTypeBoolean == true || HasTypeDictionary == true || HasTypeName == true || HasTypeNull == true || HasTypeNumber == true || HasTypeStream == true || HasTypeString == true</test>
			<error>
				<message>Entry %keyName% in _UniversalDictionary has type %1 instead of one of types: Array, Boolean, Dictionary, Name, Null, Number, Stream, String</message>
				<arguments>
					<argument>Type</argument>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_7" clause="_UniversalDictionaryEntry-Stream" testNumber="10"/>
			<description>Entry with type Stream in _UniversalDictionary shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %keyName% with type Stream in _UniversalDictionary is direct</message>
				<arguments>
					<argument name="keyName">keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
	</rules>
	<variables/>
</profile>
